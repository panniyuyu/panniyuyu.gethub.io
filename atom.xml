<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YyWang&#39;s Blog</title>
  
  <subtitle>永远没时间的王先森</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-13T09:14:55.008Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>YyWang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mac 设置</title>
    <link href="http://yoursite.com/2019/08/13/mac-%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/08/13/mac-设置/</id>
    <published>2019-08-13T08:44:33.000Z</published>
    <updated>2019-08-13T09:14:55.008Z</updated>
    
    <content type="html"><![CDATA[<h6 id="外接键盘的调整"><a href="#外接键盘的调整" class="headerlink" title="外接键盘的调整"></a>外接键盘的调整</h6><p>键盘设置中将control和command互换就可以达到和Windows下的复制粘贴时一样的，切换程序则由alt+tab变成了ctrl+tab需要适应一下，不过复制，粘贴，撤销，保存这些不用再去适应新的快捷键了<br><img src="/images/pasted-14.png" alt="upload successful"></p><h6 id="idea中的调整"><a href="#idea中的调整" class="headerlink" title="idea中的调整"></a>idea中的调整</h6><p>preferences中找到keymap选择Eclipse(macOS)，这样加上第一步的配置复制粘贴这些快捷键与Windows相同，不用再去适应新的快捷键</p><h6 id="自动补全变量"><a href="#自动补全变量" class="headerlink" title="自动补全变量"></a>自动补全变量</h6><p>keymap中搜索variable   默认为：option+command+L 通过以上设置后为：Ctrl+alt+L</p><h5 id="另一种使用方法"><a href="#另一种使用方法" class="headerlink" title="另一种使用方法"></a>另一种使用方法</h5><p>不做任何配置，idea中使用eclipse风格的快捷键，idea中的使用不影响，但是在idea以外就得适应mac中的快捷键，感觉还是这个方法更容易接受一些</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;外接键盘的调整&quot;&gt;&lt;a href=&quot;#外接键盘的调整&quot; class=&quot;headerlink&quot; title=&quot;外接键盘的调整&quot;&gt;&lt;/a&gt;外接键盘的调整&lt;/h6&gt;&lt;p&gt;键盘设置中将control和command互换就可以达到和Windows下的复制粘贴时一样的，切换程
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Lambda表达式</title>
    <link href="http://yoursite.com/2019/08/05/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/05/Lambda表达式/</id>
    <published>2019-08-05T01:06:59.000Z</published>
    <updated>2019-08-05T01:10:06.276Z</updated>
    
    <content type="html"><![CDATA[<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>包含3个部分：参数 -&gt; 表达式/代码块</p><ul><li>(params) -&gt; expression</li><li>(params) -&gt; statement</li><li>(params) -&gt; { statements }</li></ul><p><strong>与内部类相同，lambda表达式不可以修改外部变量，这点与匿名内部类相同，不同的是lambda表达式不用将变量显示的声名为final，如果是在自己的作用域中定义局部变量可以进行修改，最终保证线程安全</strong></p><p><strong>（踩坑）lambda表达式中的this并不是代表当前使用lambda表达式的对象，而是外部类的对象</strong></p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><h5 id="可代替匿名内部类"><a href="#可代替匿名内部类" class="headerlink" title="可代替匿名内部类"></a>可代替匿名内部类</h5><ul><li>可以代替只包含一个抽象方法的接口，也叫做函数式接口，例如；Comparator、Runnable</li><li>Java8内置了四大函数式接口分别为：Consumer，Supplier，Function，Predicate</li><li>jdk8中提供@FunctionalInterface 注解来检查接口是否符号函数式接口的标准</li></ul><h5 id="可代替迭代操作"><a href="#可代替迭代操作" class="headerlink" title="可代替迭代操作"></a>可代替迭代操作</h5><ul><li>list.forEach(n -&gt; {});</li></ul><h5 id="通过Stream操作集合"><a href="#通过Stream操作集合" class="headerlink" title="通过Stream操作集合"></a>通过Stream操作集合</h5><ul><li>list.stream().filter()…collect();</li></ul><h5 id="对数据处理"><a href="#对数据处理" class="headerlink" title="对数据处理"></a>对数据处理</h5><ul><li>与Spark相似java8可以将集合转化为流（Stream），在对流进行map和reduce操作，与Spark相同这些方法也是惰性求值的</li></ul><h4 id="Java8的函数式接口"><a href="#Java8的函数式接口" class="headerlink" title="Java8的函数式接口"></a>Java8的函数式接口</h4><h5 id="消费型接口-Consumer"><a href="#消费型接口-Consumer" class="headerlink" title="消费型接口 Consumer"></a>消费型接口 Consumer<t></t></h5><ul><li>抽象方法-void accept(T t);</li><li>参数类型-T</li><li>返回类型-void</li></ul><p>这个还没有用过，因为返回值为空并且传递一个参数，我感觉和集合的遍历差不多 list.forEach(n -&gt; sout(n)); 通过定义多个Consumer对象相当于定义多个逻辑块，最终consumer1.addThen(consumer2) 连接，也就是说consumer1逻辑完成后执行consumer2（为什么不写在一个逻辑里呢？我猜可能需要解耦吧）</p><h5 id="供给型接口-Supplier"><a href="#供给型接口-Supplier" class="headerlink" title="供给型接口 Supplier"></a>供给型接口 Supplier<t></t></h5><ul><li>抽象方法-T get();</li><li>参数类型-无参数</li><li>返回类型-T</li><li>这个感觉很简单，没有参数但要返回一个值，可能new一个对象的时候会用到吧，声名Supplier对象后直接调用get执行定义的逻辑（箭头后面的逻辑）返回一个值</li></ul><h5 id="函数型接口-Function-lt-T-R-gt"><a href="#函数型接口-Function-lt-T-R-gt" class="headerlink" title="函数型接口 Function&lt;T,R&gt;"></a>函数型接口 Function&lt;T,R&gt;</h5><ul><li>抽象方法-R apply(T t)</li><li>参数类型-T</li><li>返回类型-R</li></ul><p>同样是创建Function对象定义一个方法逻辑，接口中有Consumer接口同样的实现方法andThen，用法也相同，不同的是Function定义中有返回值，fun1.addThen(fun2)是将fun1执行的返回值传入fun2中再执行fun2中的逻辑，除此之外该接口还有一个实现方法compose，用法和andThen相反，fun1.compose(fun2) 是先执行fun2中的逻辑将返回值作为参数传入fun1中再执行fun1中的逻辑</p><h5 id="断言型接口-Predicate"><a href="#断言型接口-Predicate" class="headerlink" title="断言型接口 Predicate"></a>断言型接口 Predicate<t></t></h5><ul><li>抽象方法-boolean test(T t)</li><li>参数类型-T</li><li>返回类型-boolean</li><li>定义的Predicate对象相当于筛选条件的对象，最终通过stream中的filter进行过滤，多个条件可以用and和or来进行组合相当于运算符 &amp;&amp; 和 ||</li><li>多用做集合筛选 eg:</li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 筛选大于18岁的女性用户</span><br><span class="line">Predicate&lt;User&gt; matchAge = u -&gt; u.age &gt; 18;</span><br><span class="line">Predicate&lt;User&gt; matchSex = u -&gt; u.sex.equals(&quot;f&quot;);</span><br><span class="line">resultList = userList.stream().filter(matchAge.and(matchSex)).collect(Collectors.toList());</span><br></pre></td></tr></table></figure></li></ul><p>我的理解是在定义Predicate的对象时，-&gt; 前传入参数， -&gt; 后定义test的方法体，最终补充抽象方法test，通过stream的filter筛选相当于将集合中的每个元素都调用一次test方法，将返回值为true的筛选出来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h4&gt;&lt;p&gt;包含3个部分：参数 -&amp;gt; 表达式/代码块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(params) -&amp;gt; expression&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="Java8" scheme="http://yoursite.com/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>StringUtils</title>
    <link href="http://yoursite.com/2019/07/26/StringUtils/"/>
    <id>http://yoursite.com/2019/07/26/StringUtils/</id>
    <published>2019-07-26T11:32:04.000Z</published>
    <updated>2019-07-26T11:35:18.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="StringUtils"><a href="#StringUtils" class="headerlink" title="StringUtils"></a>StringUtils</h2><ul><li>工作中很多操作字符串的操作，使用到了工具类这里总结下，org.apache.commons.lang3包下的</li></ul><h3 id="split-String-str-String-separatorChars-–-gt-切分字符串"><a href="#split-String-str-String-separatorChars-–-gt-切分字符串" class="headerlink" title="split(String str, String separatorChars)–&gt;切分字符串"></a>split(String str, String separatorChars)–&gt;切分字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static String[] split(String str, String separatorChars) &#123;</span><br><span class="line">    return splitWorker(str, separatorChars, -1, false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>int max -&gt;the maximum number of elements to include in the array. A zero or negative value implies no limit.<br>这个参数代表返回的字符串的最大长度，0或者-1代表不限制长度</li><li>boolean preserveAllTokens -&gt; if {@code true}, adjacent separators are treated as empty token separators; if {@code false}, adjacent separators are treated as one separator. 这个参数是连续分隔符规则的标志，如果为true连续的分隔符都会匹配，最终得到的字符串数组会有空的值，jdk中的split就是这个规则；如果为false，连续的分隔符只会匹配一次，最终得到的数组不会有空值。eg(“1,2,3,,4,5”切分后，true得到[1,2,3,,4,5]而false得到[1,2,3,4,5])，</li><li>这也是与jdk中的split方法的区别，如果需要使用与jdk相同的规则，工具类中的splitPreserveAllTokens方法可以实现，该方法会调用splitWorker方法且最后的参数为true</li></ul><p>所以split方法默认参数为-1和false表示数组长度不收限制，及使用第二个规则进行切割，确保得到的字符串数组没有空值<br>原理：</p><ul><li>先将字符串与分隔符做匹配</li><li>匹配到之后将分隔符之前的子串分割add到一个list集合中</li><li>最后使用list.toArray返回最终的数组</li></ul><h4 id="join-待续"><a href="#join-待续" class="headerlink" title="join  待续"></a>join  待续</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;StringUtils&quot;&gt;&lt;a href=&quot;#StringUtils&quot; class=&quot;headerlink&quot; title=&quot;StringUtils&quot;&gt;&lt;/a&gt;StringUtils&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;工作中很多操作字符串的操作，使用到了工具类这里总结下，o
      
    
    </summary>
    
    
      <category term="utils" scheme="http://yoursite.com/tags/utils/"/>
    
  </entry>
  
  <entry>
    <title>Arrays</title>
    <link href="http://yoursite.com/2019/07/26/Arrays/"/>
    <id>http://yoursite.com/2019/07/26/Arrays/</id>
    <published>2019-07-26T11:31:27.000Z</published>
    <updated>2019-07-29T07:50:19.522Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><h4 id="copyOf"><a href="#copyOf" class="headerlink" title="copyOf"></a>copyOf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static &lt;T,U&gt; T[] copyOf(U[] original, int newLength, Class&lt;? extends T[]&gt; newType) &#123;</span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    T[] copy = ((Object)newType == (Object)Object[].class)</span><br><span class="line">        ? (T[]) new Object[newLength]</span><br><span class="line">        : (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class="line">    System.arraycopy(original, 0, copy, 0,</span><br><span class="line">                     Math.min(original.length, newLength));</span><br><span class="line">    return copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先看要被拷贝到的数组长度是不是够用，够用的话直接调用System.arraycopy方法；不够用创建一个新的与源数组同样长度的数组进行拷贝<br><strong>如果数组中是引用类型，Arrays.copy拷贝的是引用，不会新创建对象，如果要对拷贝的数组做修改操作源数组同样会受到影响，而字符串数组由于字符串常量池的存在，当修改字符串的时候会新创建一个字符串并将新的引用付给数组，所以源数组对应的字符串并不会发生变化</strong></p><h5 id="System-arraycopy"><a href="#System-arraycopy" class="headerlink" title="System.arraycopy"></a>System.arraycopy</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static native void arraycopy(Object src,  int  srcPos,</span><br><span class="line">                                    Object dest, int destPos,</span><br><span class="line">                                    int length);</span><br></pre></td></tr></table></figure><p>这是一个本地方法，就看一下参数吧</p><ul><li>src—-the source array. </li><li>srcPos—-starting position in the source array.</li><li>dest—-the destination array.</li><li>destPos—-starting position in the destination data.</li><li>length—-the number of array elements to be copied.</li></ul><h4 id="asList"><a href="#asList" class="headerlink" title="asList"></a>asList</h4><p>将字符串转成ArrayList集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static &lt;T&gt; List&lt;T&gt; asList(T... a) &#123;</span><br><span class="line">    return new ArrayList&lt;&gt;(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的ArrayList是Arrays中的一个内部类，继承了AbstractList方法，内部值实现了部分方法，简单点说这个集合是只读的，不能进行修改和删除操作，因为没有重写相关的方法。</p><h4 id="copyOfRange"><a href="#copyOfRange" class="headerlink" title="copyOfRange"></a>copyOfRange</h4><p>按照范围拷贝数组 [from,to) 左开右闭<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static &lt;T&gt; T[] copyOfRange(T[] original, int from, int to) &#123;</span><br><span class="line">    return copyOfRange(original, from, to, (Class&lt;? extends T[]&gt;) original.getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>集合工具类 Collections.sort 其实就是调用 Arrays.sort 方法对集合进行排序的，该方法先调用 toArray 方法将集合转成object数组，然后再调用 Arrays.sort 方法对数组进行排序，最后再将排序号的数组通过迭代器set到新的集合中去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static void sort(Object[] a) &#123;</span><br><span class="line">    if (LegacyMergeSort.userRequested)</span><br><span class="line">        legacyMergeSort(a);</span><br><span class="line">    else</span><br><span class="line">        ComparableTimSort.sort(a, 0, a.length, null, 0, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到sort方法是通过userRequested的标志来选中排序的方式，从jdk7以后默认为false，使用TimSort的方式排序，（通过System.setProperty(“java.util.Arrays.useLegacyMergeSort”, “true”)修改）</p><ul><li>userRequested为true使用LegacyMergeSort的方式进行排序，当数组长度小于7时使用插入排序，当数组长度大于7时使用归并排序，归并到长度小于7的长度再次使用插入排序</li><li>userRequested为false采用TimSort的方式排序</li></ul><h5 id="TimSort"><a href="#TimSort" class="headerlink" title="TimSort"></a>TimSort</h5><ul><li>1.数组长度小于32时，首先在数组中从开头开始寻找升序的子数组，没有的话找降序的子数组再反转，然后将数组中的剩余元素使用二分查找的方式插入到子数组中</li><li>2.数组长度大于32时，将数组切分若干个长度在[16,32)的区块（jdk里叫run，我理解为区块）</li><li>3.每个区块再使用第一步的方式进行排序排序后将每个区块进行合并，合并的过程有两点优化<ul><li>a.合并区块的过程中通过限制条件来完成将连续的三个区块中较小的两个优先合并降低复杂度</li><li>b.两个区块合并时，先将区块1的头元素和尾元素插入到区块2中，相当于缩小了插入区块2的范围降低复杂度</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">static void sort(Object[] a, int lo, int hi, Object[] work, int workBase, int workLen) &#123;</span><br><span class="line">    assert a != null &amp;&amp; lo &gt;= 0 &amp;&amp; lo &lt;= hi &amp;&amp; hi &lt;= a.length;</span><br><span class="line"></span><br><span class="line">    int nRemaining  = hi - lo;</span><br><span class="line">    if (nRemaining &lt; 2)</span><br><span class="line">        return;  // Arrays of size 0 and 1 are always sorted</span><br><span class="line"></span><br><span class="line">    // If array is small, do a &quot;mini-TimSort&quot; with no merges</span><br><span class="line">    if (nRemaining &lt; MIN_MERGE) &#123;</span><br><span class="line">        int initRunLen = countRunAndMakeAscending(a, lo, hi);</span><br><span class="line">        binarySort(a, lo, hi, lo + initRunLen);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * March over the array once, left to right, finding natural runs,</span><br><span class="line">     * extending short natural runs to minRun elements, and merging runs</span><br><span class="line">     * to maintain stack invariant.</span><br><span class="line">     */</span><br><span class="line">    ComparableTimSort ts = new ComparableTimSort(a, work, workBase, workLen);</span><br><span class="line">    int minRun = minRunLength(nRemaining);</span><br><span class="line">    do &#123;</span><br><span class="line">        // Identify next run</span><br><span class="line">        int runLen = countRunAndMakeAscending(a, lo, hi);</span><br><span class="line"></span><br><span class="line">        // If run is short, extend to min(minRun, nRemaining)</span><br><span class="line">        if (runLen &lt; minRun) &#123;</span><br><span class="line">            int force = nRemaining &lt;= minRun ? nRemaining : minRun;</span><br><span class="line">            binarySort(a, lo, lo + force, lo + runLen);</span><br><span class="line">            runLen = force;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Push run onto pending-run stack, and maybe merge</span><br><span class="line">        ts.pushRun(lo, runLen);</span><br><span class="line">        ts.mergeCollapse();</span><br><span class="line"></span><br><span class="line">        // Advance to find next run</span><br><span class="line">        lo += runLen;</span><br><span class="line">        nRemaining -= runLen;</span><br><span class="line">    &#125; while (nRemaining != 0);</span><br><span class="line"></span><br><span class="line">    // Merge all remaining runs to complete sort</span><br><span class="line">    assert lo == hi;</span><br><span class="line">    ts.mergeForceCollapse();</span><br><span class="line">    assert ts.stackSize == 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Arrays&quot;&gt;&lt;a href=&quot;#Arrays&quot; class=&quot;headerlink&quot; title=&quot;Arrays&quot;&gt;&lt;/a&gt;Arrays&lt;/h3&gt;&lt;h4 id=&quot;copyOf&quot;&gt;&lt;a href=&quot;#copyOf&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="jdk" scheme="http://yoursite.com/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList</title>
    <link href="http://yoursite.com/2019/07/26/ArrayList/"/>
    <id>http://yoursite.com/2019/07/26/ArrayList/</id>
    <published>2019-07-26T11:31:05.000Z</published>
    <updated>2019-08-05T01:13:45.013Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><h4 id="toArray-T-a"><a href="#toArray-T-a" class="headerlink" title="toArray(T[] a)"></a>toArray(T[] a)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">    if (a.length &lt; size)</span><br><span class="line">        // Make a new array of a&apos;s runtime type, but my contents:</span><br><span class="line">        return (T[]) Arrays.copyOf(elementData, size, a.getClass());</span><br><span class="line">    System.arraycopy(elementData, 0, a, 0, size);</span><br><span class="line">    if (a.length &gt; size)</span><br><span class="line">        a[size] = null;</span><br><span class="line">    return a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用了Arrays.copyOf方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ArrayList&quot;&gt;&lt;a href=&quot;#ArrayList&quot; class=&quot;headerlink&quot; title=&quot;ArrayList&quot;&gt;&lt;/a&gt;ArrayList&lt;/h3&gt;&lt;h4 id=&quot;toArray-T-a&quot;&gt;&lt;a href=&quot;#toArray-T-a&quot; c
      
    
    </summary>
    
    
      <category term="collections" scheme="http://yoursite.com/tags/collections/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis入门（续）-CRUD</title>
    <link href="http://yoursite.com/2019/07/12/MyBatis%E5%85%A5%E9%97%A8%E7%BB%AD-CRUD%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2019/07/12/MyBatis入门续-CRUD测试/</id>
    <published>2019-07-12T08:04:18.000Z</published>
    <updated>2019-08-14T09:38:11.533Z</updated>
    
    <content type="html"><![CDATA[<h4 id="根据用户名查询"><a href="#根据用户名查询" class="headerlink" title="根据用户名查询"></a>根据用户名查询</h4><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;findUserByName&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;com.example.mybatisdemo.bean.User&quot;&gt;</span><br><span class="line">        SELECT * FROM users WHERE name = #&#123;VALUE&#125;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlSession.selectOne(&quot;test.findUserByName&quot;, &quot;yywang&quot;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="模糊查询，返回多个值"><a href="#模糊查询，返回多个值" class="headerlink" title="模糊查询，返回多个值"></a>模糊查询，返回多个值</h4><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;findUserLikeName&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;com.example.mybatisdemo.bean.User&quot;&gt;</span><br><span class="line">        SELECT * FROM users WHERE name like #&#123;VALUE&#125;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlSession.selectList(&quot;test.findUserLikeName&quot;, &quot;%yy%&quot;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.example.mybatisdemo.bean.User&quot;&gt;</span><br><span class="line">        &lt;selectKey keyProperty=&quot;id&quot; order=&quot;AFTER&quot; resultType=&quot;int&quot;&gt;</span><br><span class="line">            SELECT LAST_INSERT_ID()</span><br><span class="line">        &lt;/selectKey&gt;</span><br><span class="line">        INSERT into users(uname,sex,age,udesc) values (#&#123;uname&#125;,#&#123;sex&#125;,#&#123;age&#125;,#&#123;udesc&#125;)</span><br><span class="line">    &lt;/insert&gt;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User user = new User(&quot;bangni&quot;,&quot;female&quot;,22,&quot;tc&quot;);</span><br><span class="line">sqlSession.commit(); // 必加</span><br></pre></td></tr></table></figure><h5 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h5><ul><li><em>selectKey</em> 用来配置返回主键 </li><li><em>keyProperty</em>  表中主键的名称</li><li><em>order</em> 表示SELECT LAST_INSERT_ID()在insert语句发生的顺序，after意为insert执行之后返回，用于自增主键，UUID的方式可以配置为before</li><li><em>resultType</em> 返回值类型</li></ul><p><strong><em>注1：sql语句中有多个参数，占位符#{}也需要指定不同的表示方式，如上#{uname},#{sex}等</em></strong></p><p><strong><em>注2：sql没问题运行报错，因为之前的数据表设计问题，name和desc是关键字，这里开始做了修改</em></strong></p><p><strong><em>注3：修改之后运行通过，数据库查不到记录，想到之前测试Junit回自动回滚，于是添加@Rollback注解导入依赖后还是无果，最终加上session.commit()解决，由于MyBatis接管了JDBC的事务管理器，JDBC回自动提交而MyBatis不会，这里需要自行手动提交，修改删除同样</em></strong></p></li></ul><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;delete id=&quot;delUserById&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">        delete from users where id = #&#123;id&#125;</span><br><span class="line">    &lt;/delete&gt;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlSession.delete(&quot;test.delUserById&quot;,3);</span><br><span class="line">  sqlSession.commit();</span><br></pre></td></tr></table></figure></li></ul><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=&quot;updateUserById&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">        update users set age = 0 where id = #&#123;id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlSession.update(&quot;test.updateUserById&quot;,8);</span><br><span class="line">  sqlSession.commit();</span><br></pre></td></tr></table></figure></li></ul><h4 id="查看最后执行的SQL"><a href="#查看最后执行的SQL" class="headerlink" title="查看最后执行的SQL"></a>查看最后执行的SQL</h4><p>只需在配置文件中添加配置即可打印查询语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot; /&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;根据用户名查询&quot;&gt;&lt;a href=&quot;#根据用户名查询&quot; class=&quot;headerlink&quot; title=&quot;根据用户名查询&quot;&gt;&lt;/a&gt;根据用户名查询&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
      <category term="MyBatis" scheme="http://yoursite.com/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>IDEA配置Junit测试</title>
    <link href="http://yoursite.com/2019/07/12/IDEA%E9%85%8D%E7%BD%AEJunit%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2019/07/12/IDEA配置Junit测试/</id>
    <published>2019-07-12T07:10:02.000Z</published>
    <updated>2019-07-12T07:28:44.583Z</updated>
    
    <content type="html"><![CDATA[<p>看了很多博客后感觉还是比较乱，这篇还不错马一下<br><em><a href="https://blog.csdn.net/hanchao5272/article/details/79197989" target="_blank" rel="noopener">https://blog.csdn.net/hanchao5272/article/details/79197989</a></em></p><h4 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1.安装插件"></a>1.安装插件</h4><p>File-&gt;setting-&gt;Plugins-&gt;搜索并安装Junit Generator 2.0-&gt;重启IDEA</p><h4 id="2-配置插件"><a href="#2-配置插件" class="headerlink" title="2.配置插件"></a>2.配置插件</h4><p>File-&gt;setting-&gt;    OtherSettings-&gt;Junit Generator-&gt;properties</p><ul><li>修改<em>Output Path[输出路径]</em>为<em>${SOURCEPATH}/../../test/java/${PACKAGE}/${FILENAME}</em></li><li>修改 Default Template[默认模板]为JUnit4</li><li>选中JUnit4页签，将<em>package test.$entry.packageName;</em> 修改成<em>package $entry.packageName;</em></li></ul><h4 id="3-配置测试的目录"><a href="#3-配置测试的目录" class="headerlink" title="3.配置测试的目录"></a>3.配置测试的目录</h4><p>File-&gt;Project Structure-&gt;Modules中将测试目录设置为Test Source Floder</p><h4 id="4-生成测试类"><a href="#4-生成测试类" class="headerlink" title="4.生成测试类"></a>4.生成测试类</h4><ul><li>在要测试的类中用快捷键 alt+insert -&gt; Junit Test -&gt; Junit4</li></ul><h4 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h4><ul><li>鼠标右键菜单<ul><li>将鼠标光标放在方法相关代码中，右键弹出菜单中会显示运行此测试方法的菜单，点击就会运行方法单独测试。<br>将鼠标光标放在方法之外的代码中，右键弹出菜单中会显示运行此类的所有测试方法的菜单，点击就会运行所有测试方法。</li></ul></li><li>快捷键<ul><li>将鼠标光标放在方法相关代码中，通过快捷键Ctrl+Shift+F10，运行当前测试方法。</li><li>将鼠标光标放在方法之外的代码中，通过快捷键Ctrl+Shift+F10，运行当前类的所有测试方法。</li></ul></li><li>快捷按钮<ul><li>点击方法左侧的Run Test按钮，运行当前测试方法。</li><li>点击类左侧的Run Test按钮，运行当前类的所有测试方法。</li></ul></li></ul><h4 id="6-测试结果"><a href="#6-测试结果" class="headerlink" title="6.测试结果"></a>6.测试结果</h4><p><img src="/images/pasted-12.png" alt="upload successful"></p><ul><li>1.方法测试成功</li><li>2.方法测试失败</li><li>3.测试用时（毫秒）</li><li>4.期望值</li><li>5.实际值</li><li>6.异常信息</li></ul><h4 id="7-异常"><a href="#7-异常" class="headerlink" title="7.异常"></a>7.异常</h4><ul><li><img src="/images/pasted-13.png" alt="upload successful"></li><li>原因：4.11以上版本不在包含hamcrest</li><li>解决：改用4.10  ^_^</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看了很多博客后感觉还是比较乱，这篇还不错马一下&lt;br&gt;&lt;em&gt;&lt;a href=&quot;https://blog.csdn.net/hanchao5272/article/details/79197989&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https:
      
    
    </summary>
    
      <category term="IDEA" scheme="http://yoursite.com/categories/IDEA/"/>
    
    
      <category term="IDEA" scheme="http://yoursite.com/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis入门</title>
    <link href="http://yoursite.com/2019/07/12/MyBatis%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/07/12/MyBatis入门/</id>
    <published>2019-07-12T05:16:20.000Z</published>
    <updated>2019-07-12T06:21:23.205Z</updated>
    
    <content type="html"><![CDATA[<h4 id="MyBatis环境"><a href="#MyBatis环境" class="headerlink" title="MyBatis环境"></a>MyBatis环境</h4><h5 id="首先准备数据库表"><a href="#首先准备数据库表" class="headerlink" title="首先准备数据库表"></a>首先准备数据库表</h5><ul><li>对应的实体类为</li></ul><ul><li><figure class="highlight plain"><figcaption><span>class User &#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> private int id;</span><br><span class="line"> private String name;</span><br><span class="line"> private String sex;</span><br><span class="line"> private int age;</span><br><span class="line"> private String desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="数据库配置文件-SqlMapConfig-xml"><a href="#数据库配置文件-SqlMapConfig-xml" class="headerlink" title="数据库配置文件 SqlMapConfig.xml"></a>数据库配置文件 <em>SqlMapConfig.xml</em></h5><ul><li>配置数据库环境相关</li></ul><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line"> &lt;/environments&gt;</span><br></pre></td></tr></table></figure></li></ul><h5 id="sql映射文件-user-xml"><a href="#sql映射文件-user-xml" class="headerlink" title="sql映射文件 user.xml"></a>sql映射文件 <em>user.xml</em></h5><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;test&quot;&gt;</span><br><span class="line">    &lt;select id=&quot;findUserById&quot; parameterType=&quot;int&quot; resultType=&quot;com.example.mybatisdemo.bean.User&quot;&gt;</span><br><span class="line">        SELECT * FROM user WHERE id =#&#123;VALUE&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li></ul><h5 id="将sql映射添加到SqlMapConfig-xml中"><a href="#将sql映射添加到SqlMapConfig-xml中" class="headerlink" title="将sql映射添加到SqlMapConfig.xml中"></a>将sql映射添加到SqlMapConfig.xml中</h5><ul><li>最终的配置文件为</li></ul><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=&quot;mapper/user.xml&quot;/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li></ul><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String resource = &quot;SqlMapConfig.xml&quot;;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        SqlSession sqlSession = factory.openSession();</span><br><span class="line">        // 参数1 sql映射中的 namespace + &quot;.&quot; + sqlId</span><br><span class="line">        // 参数2为sql的参数</span><br><span class="line">        User user = sqlSession.selectOne(&quot;test.findUserById&quot;, 1);</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">        sqlSession.close();</span><br></pre></td></tr></table></figure></li></ul><h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><p><em>基于sql语句的轻量级ORM框架，将sql语句写入配置文件映射中，进一步解耦，但是多了一步操作感觉比hibernate繁琐一些，但是比hibernate要快，有舍有得吧（为什么快还不知道，后续再看吧╮(╯▽╰)╭ ）</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;MyBatis环境&quot;&gt;&lt;a href=&quot;#MyBatis环境&quot; class=&quot;headerlink&quot; title=&quot;MyBatis环境&quot;&gt;&lt;/a&gt;MyBatis环境&lt;/h4&gt;&lt;h5 id=&quot;首先准备数据库表&quot;&gt;&lt;a href=&quot;#首先准备数据库表&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC入门</title>
    <link href="http://yoursite.com/2019/07/11/SpringMVC/"/>
    <id>http://yoursite.com/2019/07/11/SpringMVC/</id>
    <published>2019-07-11T07:22:35.000Z</published>
    <updated>2019-07-12T05:15:14.178Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringMVC配置"><a href="#SpringMVC配置" class="headerlink" title="SpringMVC配置"></a>SpringMVC配置</h2><p><em>注解&amp;配置文件</em></p><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><h4 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h4><ul><li><p><img src="/images/pasted-5.png" alt="upload successful"></p></li><li><p>①指定Spring配置文件的位置</p></li><li><p>②配置Listener，初始化SpringIOC容器</p></li><li><p>③配置前端控制器servlet，其中可以自定义配置文件位置，不配置默认寻找xxxx-servlet.xml的配置文件</p></li><li><p>url-pattern中/和/*区别</p><ul><li>/*    匹配所有url  有后缀或者无后缀都会匹配   .jsp  .css  .js</li><li>/      只匹配无后缀的url</li></ul></li></ul><p><strong><em>注：截图为项目中的配置  自己测试时改为 /  项目中拦截所有页面应该会有拦截器或者过滤器做处理，demo中如果配置成截图这样会报错</em></strong></p><h4 id="springmvc-servlet-xml"><a href="#springmvc-servlet-xml" class="headerlink" title="springmvc-servlet.xml"></a>springmvc-servlet.xml</h4><p><img src="/images/pasted-6.png" alt="upload successful"></p><ul><li><p>指定基础包名scan，将指定的包名注入SpringIOC容器（先要添加context的xsd约束）</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br></pre></td></tr></table></figure><p>xsi中添加<br>“<a href="http://www.springframework.org/schema/context" target="_blank" rel="noopener">http://www.springframework.org/schema/context</a>       <a href="http://www.springframework.org/schema/context/spring-context.xsd&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/context/spring-context.xsd&quot;</a></p></li></ul></li></ul><ul><li><p>exclude-filter 指定类与Spring容器分开加载（先这么理解）</p></li><li><p>配置视图解析器（前缀和后缀）</p></li></ul><p><strong>方法中使用@RequestMapping(value=”search”)  理解为匹配URL中search的字样</strong></p><p><strong>方法return “iface/manage”;  从匹配的前后缀中寻找应该返回的视图，例如通过上图的配置找到/iface/manage.vm</strong></p><p><em>在Controller类上添加@Controller，方法上添加@RequestMapping(“xxxx”)，即可完成映射</em></p><h4 id="配置完成访问报错"><a href="#配置完成访问报错" class="headerlink" title="配置完成访问报错"></a>配置完成访问报错</h4><p><img src="/images/pasted-7.png" alt="upload successful"></p><ul><li><p>没有jstl标签库，导入依赖即可</p></li><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="web-xml-1"><a href="#web-xml-1" class="headerlink" title="web.xml"></a>web.xml</h4><ul><li>和注解方式一样<br><img src="/images/pasted-8.png" alt="upload successful"><h4 id="springmvc-servlet-xml-1"><a href="#springmvc-servlet-xml-1" class="headerlink" title="springmvc-servlet.xml"></a>springmvc-servlet.xml</h4></li><li><img src="/images/pasted-9.png" alt="upload successful"></li><li>①配置处理器映射器</li><li>②配置处理器适配器</li><li>③配置视图解析器（同注解方式）</li><li>④配置映射（相当于注解中的@RequestMapping）</li></ul><p><em>相较于注解方式该配置文件中多了对 处理器映射器、处理器适配器 以及映射的配置</em></p><p><em>实现方面在controller类中不添加任何注解，实现Controller接口，重写方法即可</em></p><p>demo：<a href="https://github.com/panniyuyu/frameworkdemo.git" target="_blank" rel="noopener">https://github.com/panniyuyu/frameworkdemo.git</a></p><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>通过使用不同方式对springMVC进行配置，感觉对SpringMVC框架大致的原理有一些认识</p><p>SpringMVC使将MVC的模式进一步拆分解耦，整个过程主要包含4个主要的部分依次是 前端控制器（DispatcherServlet）、处理器映射器（HandlerMapping）、处理器适配器（HandlerAdapter）、视图解析器（ViewResolver）</p><p><img src="/images/pasted-10.png" alt="upload successful"></p><ul><li>1.用户发起请求，被前端控制器（DispatcherServlet）拦截，并根据请求内容询问处理器映射器（HandlerMapping）改请求应该由哪个Controller处理，处理器映射器将匹配到的Controller信息返回给前端控制器</li><li>2.前端控制器知道该请求应该由哪个Controller处理，但不会自己处理，将Controller信息交给处理器适配器（HandlerAdapter）处理，返回ModelAndView对象</li><li>3.前端控制器得到ModelAndView对象将其转发给视图解析器，将对象解析成view页面返回</li><li>4.前端控制器将view页面相应给浏览器</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SpringMVC配置&quot;&gt;&lt;a href=&quot;#SpringMVC配置&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC配置&quot;&gt;&lt;/a&gt;SpringMVC配置&lt;/h2&gt;&lt;p&gt;&lt;em&gt;注解&amp;amp;配置文件&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;注
      
    
    </summary>
    
    
      <category term="SpringMVC" scheme="http://yoursite.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>org.apache.tomcat.util.bcel.classfile.ClassFormatException</title>
    <link href="http://yoursite.com/2019/07/11/%E5%BC%82%E5%B8%B8/"/>
    <id>http://yoursite.com/2019/07/11/异常/</id>
    <published>2019-07-11T03:41:21.000Z</published>
    <updated>2019-07-11T10:21:53.613Z</updated>
    
    <content type="html"><![CDATA[<h4 id="org-apache-tomcat-util-bcel-classfile-ClassFormatException"><a href="#org-apache-tomcat-util-bcel-classfile-ClassFormatException" class="headerlink" title="org.apache.tomcat.util.bcel.classfile.ClassFormatException"></a>org.apache.tomcat.util.bcel.classfile.ClassFormatException</h4><ul><li><img src="/images/pasted-4.png" alt="upload successful"></li><li>原因：jdk版本不兼容</li><li>原环境 jkd8+tomcat7+spring4  </li><li>解决：tomcat7换tomcat8</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;org-apache-tomcat-util-bcel-classfile-ClassFormatException&quot;&gt;&lt;a href=&quot;#org-apache-tomcat-util-bcel-classfile-ClassFormatException&quot; cl
      
    
    </summary>
    
    
      <category term="exception" scheme="http://yoursite.com/tags/exception/"/>
    
  </entry>
  
  <entry>
    <title>IDEA使用笔记</title>
    <link href="http://yoursite.com/2019/07/11/IDEA%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/07/11/IDEA使用笔记/</id>
    <published>2019-07-11T03:22:21.000Z</published>
    <updated>2019-07-11T10:40:59.503Z</updated>
    
    <content type="html"><![CDATA[<h4 id="配置Tomcat"><a href="#配置Tomcat" class="headerlink" title="配置Tomcat"></a>配置Tomcat</h4><p>Run-&gt;Edit Configurations-&gt;Telplates中配置后在该页面左上角添加-&gt;选中Tomcat的Deployment点击部署(选用Artifacts方式)</p><h4 id="配置文件取消Unicode编码"><a href="#配置文件取消Unicode编码" class="headerlink" title="配置文件取消Unicode编码"></a>配置文件取消Unicode编码</h4><p>File-&gt;Setting-&gt;搜索file encoding-&gt;勾选Transparent native-to-ascii conversion</p><h4 id="文件目录变红色"><a href="#文件目录变红色" class="headerlink" title="文件目录变红色"></a>文件目录变红色</h4><p><img src="/images/pasted-1.png" alt="upload successful"></p><ul><li>解除版本控制即可 file-&gt;setting-&gt;version control-&gt;右上角加号-&gt;添加项目目录即可</li></ul><h4 id="新建的maven项目没有web项目的目录结构，也没有web-xml"><a href="#新建的maven项目没有web项目的目录结构，也没有web-xml" class="headerlink" title="新建的maven项目没有web项目的目录结构，也没有web.xml"></a>新建的maven项目没有web项目的目录结构，也没有web.xml</h4><ul><li>增加main目录下增加/webapp/WEB-INF目录</li><li>File-&gt;Project Structure-&gt;facets-&gt;加号-&gt;选中目录</li><li>确认路径depolyment路径为…./webapp/WEB-INF/web.xml</li><li>确认路径resource路径为 …./webapp/</li></ul><p><strong>直接创建maven web项目最为简单</strong></p><ul><li>createProject-&gt;maven-&gt;勾选Creater from archetype-&gt;选择 <strong><em>maven-archetype-webapp</em></strong> </li><li><img src="/images/pasted-2.png" alt="upload successful"></li></ul><h4 id="右键没有new-package"><a href="#右键没有new-package" class="headerlink" title="右键没有new package"></a>右键没有new package</h4><p>修改目录性质，在该目录右键-&gt;Mark Directory as-&gt;Source Root</p><h4 id="发布方式（参考https-www-cnblogs-com-dpl9963-p-10075456-html）"><a href="#发布方式（参考https-www-cnblogs-com-dpl9963-p-10075456-html）" class="headerlink" title="发布方式（参考https://www.cnblogs.com/dpl9963/p/10075456.html）"></a>发布方式（参考<a href="https://www.cnblogs.com/dpl9963/p/10075456.html）" target="_blank" rel="noopener">https://www.cnblogs.com/dpl9963/p/10075456.html）</a></h4><ul><li>jar：Java ARchrive，仅仅是编译好的Java类的聚合</li><li>war：Web application ARchrive，除Java类之外还包含jsp，config等静态资源的聚合</li><li>exploded：理解为展开不压缩，jar和war是压缩的目录节后，exploded表示不压缩的文件目录，开发是用该方式较好，文件更改后不用重新启动服务器看到效果</li></ul><h4 id="Debug模式"><a href="#Debug模式" class="headerlink" title="Debug模式"></a>Debug模式</h4><ul><li>快捷键改为eclipse后，F5，F6不变，eclipse的F8变为F9（程序放行）</li></ul><h4 id="修改文件后没有效果必须重启tomcat"><a href="#修改文件后没有效果必须重启tomcat" class="headerlink" title="修改文件后没有效果必须重启tomcat"></a>修改文件后没有效果必须重启tomcat</h4><ul><li>runConfigurations中配置</li><li><img src="/images/pasted-3.png" alt="upload successful"></li></ul><h4 id="部署项目到tomcat上，这里的url一定要改成"><a href="#部署项目到tomcat上，这里的url一定要改成" class="headerlink" title="部署项目到tomcat上，这里的url一定要改成 /"></a>部署项目到tomcat上，这里的url一定要改成 /</h4><p><img src="/images/pasted-11.png" alt="upload successful"></p><h4 id="启动tomcat日志输出乱码-淇℃伅（https-www-cnblogs-com-Yin-BoKeYuan-p-10320622-html）"><a href="#启动tomcat日志输出乱码-淇℃伅（https-www-cnblogs-com-Yin-BoKeYuan-p-10320622-html）" class="headerlink" title="启动tomcat日志输出乱码 淇℃伅（https://www.cnblogs.com/Yin-BoKeYuan/p/10320622.html）"></a>启动tomcat日志输出乱码 淇℃伅（<a href="https://www.cnblogs.com/Yin-BoKeYuan/p/10320622.html）" target="_blank" rel="noopener">https://www.cnblogs.com/Yin-BoKeYuan/p/10320622.html）</a></h4><p>打开到tomcat安装目录下的conf/文件夹 修改logging.properties文件，<br>找到 java.util.logging.ConsoleHandler.encoding = utf-8<br>更改为 java.util.logging.ConsoleHandler.encoding = GBK</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;配置Tomcat&quot;&gt;&lt;a href=&quot;#配置Tomcat&quot; class=&quot;headerlink&quot; title=&quot;配置Tomcat&quot;&gt;&lt;/a&gt;配置Tomcat&lt;/h4&gt;&lt;p&gt;Run-&amp;gt;Edit Configurations-&amp;gt;Telplates中配置后在
      
    
    </summary>
    
      <category term="IDEA" scheme="http://yoursite.com/categories/IDEA/"/>
    
    
      <category term="IDEA" scheme="http://yoursite.com/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>知识点复习</title>
    <link href="http://yoursite.com/2019/07/09/%E7%9F%A5%E8%AF%86%E7%82%B9%E5%A4%8D%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/07/09/知识点复习/</id>
    <published>2019-07-09T07:49:00.000Z</published>
    <updated>2019-07-17T10:36:53.087Z</updated>
    
    <content type="html"><![CDATA[<p>整理一些在看项目时候遇到的小的知识点，先写个大概，后续再做详细的补充</p><h4 id="HTTP和TCP"><a href="#HTTP和TCP" class="headerlink" title="HTTP和TCP"></a>HTTP和TCP</h4><p>Http是在Tcp的基础之上的，也就是说Http的请求和相应是在建立Tcp链接之后发生的</p><h4 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h4><p>一次或者多次请求同一个资源得到的结果是一样的，多次请求不会影响最终的结果。（增加去重的逻辑则无需满足幂等性）</p><h4 id="synchronized-关键字"><a href="#synchronized-关键字" class="headerlink" title="synchronized 关键字"></a>synchronized 关键字</h4><ul><li>在方法中锁住的是该类的实例对象</li><li>在静态方法中锁住的是类对象</li><li>代码块中（this）锁住的是该类的实例对象</li><li>代码块中（xxx.class）锁住的是类对象</li></ul><h4 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h4><p>保证线程数据可见</p><h4 id="transient-关键字"><a href="#transient-关键字" class="headerlink" title="transient 关键字"></a>transient 关键字</h4><p>不做序列化和反序列化操作</p><h4 id="synchronized在方法中声名为什么还用线程安全的数据结构来存放变量"><a href="#synchronized在方法中声名为什么还用线程安全的数据结构来存放变量" class="headerlink" title="synchronized在方法中声名为什么还用线程安全的数据结构来存放变量"></a>synchronized在方法中声名为什么还用线程安全的数据结构来存放变量</h4><p>该变量可能在其他地方被调用，如果该变量只在synchronized关键字声名在方法中使用，则无需使用线程安全的数据结构。</p><h4 id="TPS-（Transaction-Per-Second）"><a href="#TPS-（Transaction-Per-Second）" class="headerlink" title="TPS （Transaction Per Second）"></a>TPS （Transaction Per Second）</h4><p>服务器每秒处理的事务个数，一个事务是从向服务器发送请求开始，客户端接收到响应结束</p><h4 id="QPS-（Query-Per-Second）"><a href="#QPS-（Query-Per-Second）" class="headerlink" title="QPS  （Query Per Second）"></a>QPS  （Query Per Second）</h4><p>服务器每秒处理查询的次数，查询开始到返回结果结束</p><h4 id="Git克隆分支命令"><a href="#Git克隆分支命令" class="headerlink" title="Git克隆分支命令"></a>Git克隆分支命令</h4><p>git clone -b [分支名称] [git地址]</p><h4 id="Git提交代码到GitHub"><a href="#Git提交代码到GitHub" class="headerlink" title="Git提交代码到GitHub"></a>Git提交代码到GitHub</h4><ul><li>创建仓库，在本地clone</li><li>本地在.git所在的目录打开git bansh</li><li><p>指定远程仓库</p><p><em>git remote add origin <a href="https://github.com/panniyuyu/frameworkdemo.git" target="_blank" rel="noopener">https://github.com/panniyuyu/frameworkdemo.git</a></em></p><ul><li>会提示 remote origin already exists    </li></ul><ul><li><p>执行删除命令后再重新指定远程仓库</p><p><em>git remote rm origin</em></p></li></ul></li><li><p>添加文件<br><em>git add </em> *</p></li><li>提交改动<br><em>git commit -m “xxxx”</em></li><li>推到远程仓库<br><em>git push origin master</em></li></ul><h4 id="wait-方法"><a href="#wait-方法" class="headerlink" title="wait()方法"></a>wait()方法</h4><ul><li><p>会暂停当前线程，让出CPU时间，同时让出锁，等待notify()或者notifyAll()唤醒后重新获得锁执行</p><p><em>sleep()方法同样会暂停当前线程，让出CPU时间，与 wait()方法不同的是，sleep()方法不会释放锁，会阻塞当前的线程，且sleep()是Thread类中的方法, wait()是Object的方法</em></p></li></ul><h4 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h4><ul><li><p>Java中优先级低的线程，用来服务于用户线程的，当Java程序退出或者jvm退出时，守护线程自动退出，jvm运行时只需关注用户线程即可。</p><p><em>Jvm中的垃圾收集器可以理解为守护线程，当jvm退出时会自动退出</em></p><p><em>使用 thread.setDaemon(true)设置，要在start()方法之前</em></p></li></ul><h4 id="Class的isAssignableFrom方法"><a href="#Class的isAssignableFrom方法" class="headerlink" title="Class的isAssignableFrom方法"></a>Class的isAssignableFrom方法</h4><ul><li>Class中的方法，如：a.isAssignableFrom(b) 在a是b的父类或接口，亦或是a、b是同一个类或者接口的情况下返回true，其他情况返回false</li></ul><h4 id="Class的getFields和getDeclaredFields"><a href="#Class的getFields和getDeclaredFields" class="headerlink" title="Class的getFields和getDeclaredFields"></a>Class的getFields和getDeclaredFields</h4><ul><li>都是获取类中的字段，getFields获取类中public的字段，getDeclaredFields获取类中所有声名的字段，不包含父类中的字段</li></ul><h4 id="Field的getModifiers"><a href="#Field的getModifiers" class="headerlink" title="Field的getModifiers"></a>Field的getModifiers</h4><ul><li>获取字段的修饰符，返回值为int型对应不同的类型</li><li>PUBLIC: 1</li><li>PRIVATE: 2</li><li>PROTECTED: 4</li><li>STATIC: 8</li><li>FINAL: 16</li><li>SYNCHRONIZED: 32</li><li>VOLATILE: 64</li><li>TRANSIENT: 128</li><li>NATIVE: 256</li><li>INTERFACE: 512</li><li>ABSTRACT: 1024</li><li>STRICT: 2048</li></ul><h4 id="Field的setAccessible-true"><a href="#Field的setAccessible-true" class="headerlink" title="Field的setAccessible(true)"></a>Field的setAccessible(true)</h4><ul><li>字段被声名是私有的，在取值前必须设置accessible为true，不然会报错</li></ul><h4 id="field的getGenericType和getType"><a href="#field的getGenericType和getType" class="headerlink" title="field的getGenericType和getType"></a>field的getGenericType和getType</h4><ul><li>都是获取字段的类型，getGenericType返回的是Type类型，getType返回的是Class类型</li><li>还有其他不同，暂时没有理解<a href="http://www.51gjie.com/java/793.html" target="_blank" rel="noopener">http://www.51gjie.com/java/793.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整理一些在看项目时候遇到的小的知识点，先写个大概，后续再做详细的补充&lt;/p&gt;
&lt;h4 id=&quot;HTTP和TCP&quot;&gt;&lt;a href=&quot;#HTTP和TCP&quot; class=&quot;headerlink&quot; title=&quot;HTTP和TCP&quot;&gt;&lt;/a&gt;HTTP和TCP&lt;/h4&gt;&lt;p&gt;Http
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="http://yoursite.com/2019/05/11/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/05/11/第一篇博客/</id>
    <published>2019-05-11T09:26:16.000Z</published>
    <updated>2019-05-11T13:34:40.425Z</updated>
    
    <content type="html"><![CDATA[<p>时光匆匆，三年的研究生生涯马上就要结束。这是我毕业论文致谢里的第一句话，虽然很老套但是非常应景，在毕业之前的这段时间没有那么多的事情，突然想到做一个自己的博客，把自己的学习和生活记录下来，不用每次遇到问题的时候再去问度娘，而且很多都是重复的问题，虽然自己也在做笔记但很少回头看，打算以前的笔记不再管了，当初为了图省事写的非常简单有些已经想不起来是做什么的了，现在想想非常懊悔，这个坏毛病一定要改。今日在我的博客搭建完成之际，开始将今后所学习的技术记录在此，沉淀下去，和大家做交流，同时，在此也将记录我的生活，有趣的所见所闻什么的，朋友圈发的频繁遭人厌。<br>马上就要入职了，心里知道要回归到工程中了，不然入职后的压力会很大，但是也不知道自己工作内容是什么，浏览了一些博客发现需要学习的东西实在是太多了无从下手，而且就我自己而言没有在工程中应用过的技术即使理解了最后也会忘掉，所以学习的情绪很down，想找一些有趣的东西搞一下，于是本站诞生了。<br>emmm……第一篇博客就到这了，自己小学语文水平只能写到这了，给自己加油！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;时光匆匆，三年的研究生生涯马上就要结束。这是我毕业论文致谢里的第一句话，虽然很老套但是非常应景，在毕业之前的这段时间没有那么多的事情，突然想到做一个自己的博客，把自己的学习和生活记录下来，不用每次遇到问题的时候再去问度娘，而且很多都是重复的问题，虽然自己也在做笔记但很少回头
      
    
    </summary>
    
      <category term="生活杂谈" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="生活杂谈" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
