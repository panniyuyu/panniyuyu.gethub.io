{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CCCCNAME","path":"CCCCNAME","modified":1,"renderable":0},{"_id":"source/images/ThreadLocal.png","path":"images/ThreadLocal.png","modified":1,"renderable":0},{"_id":"source/images/iptables2.png","path":"images/iptables2.png","modified":1,"renderable":0},{"_id":"source/images/istio-1.png","path":"images/istio-1.png","modified":1,"renderable":0},{"_id":"source/images/pasted-1.png","path":"images/pasted-1.png","modified":1,"renderable":0},{"_id":"source/images/pasted-10.png","path":"images/pasted-10.png","modified":1,"renderable":0},{"_id":"source/images/pasted-11.png","path":"images/pasted-11.png","modified":1,"renderable":0},{"_id":"source/images/pasted-12.png","path":"images/pasted-12.png","modified":1,"renderable":0},{"_id":"source/images/pasted-13.png","path":"images/pasted-13.png","modified":1,"renderable":0},{"_id":"source/images/pasted-15.png","path":"images/pasted-15.png","modified":1,"renderable":0},{"_id":"source/images/pasted-20.png","path":"images/pasted-20.png","modified":1,"renderable":0},{"_id":"source/images/pasted-21.png","path":"images/pasted-21.png","modified":1,"renderable":0},{"_id":"source/images/pasted-22.png","path":"images/pasted-22.png","modified":1,"renderable":0},{"_id":"source/images/pasted-24.png","path":"images/pasted-24.png","modified":1,"renderable":0},{"_id":"source/images/pasted-25.png","path":"images/pasted-25.png","modified":1,"renderable":0},{"_id":"source/images/pasted-26.png","path":"images/pasted-26.png","modified":1,"renderable":0},{"_id":"source/images/pasted-3.png","path":"images/pasted-3.png","modified":1,"renderable":0},{"_id":"source/images/pasted-30.png","path":"images/pasted-30.png","modified":1,"renderable":0},{"_id":"source/images/pasted-32.png","path":"images/pasted-32.png","modified":1,"renderable":0},{"_id":"source/images/pasted-31.png","path":"images/pasted-31.png","modified":1,"renderable":0},{"_id":"source/images/pasted-34.png","path":"images/pasted-34.png","modified":1,"renderable":0},{"_id":"source/images/servlet.png","path":"images/servlet.png","modified":1,"renderable":0},{"_id":"source/images/分布式锁.png","path":"images/分布式锁.png","modified":1,"renderable":0},{"_id":"source/images/acquire-relase.png","path":"images/acquire-relase.png","modified":1,"renderable":0},{"_id":"source/images/acquireShared-relaseShared.png","path":"images/acquireShared-relaseShared.png","modified":1,"renderable":0},{"_id":"source/images/dump问题2.png","path":"images/dump问题2.png","modified":1,"renderable":0},{"_id":"source/images/dump问题1.png","path":"images/dump问题1.png","modified":1,"renderable":0},{"_id":"source/images/headicon.jpg","path":"images/headicon.jpg","modified":1,"renderable":0},{"_id":"source/images/k8s.png","path":"images/k8s.png","modified":1,"renderable":0},{"_id":"source/images/pasted-16.png","path":"images/pasted-16.png","modified":1,"renderable":0},{"_id":"source/images/pasted-14.png","path":"images/pasted-14.png","modified":1,"renderable":0},{"_id":"source/images/pasted-27.png","path":"images/pasted-27.png","modified":1,"renderable":0},{"_id":"source/images/pasted-28.png","path":"images/pasted-28.png","modified":1,"renderable":0},{"_id":"source/images/pasted-29.png","path":"images/pasted-29.png","modified":1,"renderable":0},{"_id":"source/images/pasted-33.png","path":"images/pasted-33.png","modified":1,"renderable":0},{"_id":"source/images/pasted-7.png","path":"images/pasted-7.png","modified":1,"renderable":0},{"_id":"source/images/pasted-6.png","path":"images/pasted-6.png","modified":1,"renderable":0},{"_id":"source/images/pasted-8.png","path":"images/pasted-8.png","modified":1,"renderable":0},{"_id":"source/images/pasted-9.png","path":"images/pasted-9.png","modified":1,"renderable":0},{"_id":"source/images/spring-bean生命周期2.png","path":"images/spring-bean生命周期2.png","modified":1,"renderable":0},{"_id":"source/images/微服务.png","path":"images/微服务.png","modified":1,"renderable":0},{"_id":"source/images/dump问题4.png","path":"images/dump问题4.png","modified":1,"renderable":0},{"_id":"source/images/pasted-17.png","path":"images/pasted-17.png","modified":1,"renderable":0},{"_id":"source/images/pasted-18.png","path":"images/pasted-18.png","modified":1,"renderable":0},{"_id":"source/images/pasted-19.png","path":"images/pasted-19.png","modified":1,"renderable":0},{"_id":"source/images/pasted-5.png","path":"images/pasted-5.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/JS&CSS.zip","path":"lib/JS&CSS.zip","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"source/images/dump问题3.png","path":"images/dump问题3.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/album.zip","path":"lib/album.zip","modified":1,"renderable":1},{"_id":"source/images/pasted-4.png","path":"images/pasted-4.png","modified":1,"renderable":0},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.png","path":"images/wechatpay.png","modified":1,"renderable":1},{"_id":"source/images/iptables1.png","path":"images/iptables1.png","modified":1,"renderable":0},{"_id":"source/images/pasted-2.png","path":"images/pasted-2.png","modified":1,"renderable":0},{"_id":"themes/next/source/images/alipay.png","path":"images/alipay.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/background.jpg","path":"images/background.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/photoswipe-ui-default.min.js","path":"js/src/photoswipe-ui-default.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/photoswipe.min.js","path":"js/src/photoswipe.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/album/data.json","path":"lib/album/data.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/album/ins.css","path":"lib/album/ins.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/album/ins.js","path":"lib/album/ins.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/album/photoswipe.css","path":"lib/album/photoswipe.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"source/images/pasted-23.png","path":"images/pasted-23.png","modified":1,"renderable":0},{"_id":"source/images/一张图看懂CPU.png","path":"images/一张图看懂CPU.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/background2.jbg","path":"images/background2.jbg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/album/assets/empty.png","path":"lib/album/assets/empty.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/album/default-skin/default-skin.svg","path":"lib/album/default-skin/default-skin.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/album/default-skin/default-skin.png","path":"lib/album/default-skin/default-skin.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/album/default-skin/default-skin.css","path":"lib/album/default-skin/default-skin.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/album/default-skin/preloader.gif","path":"lib/album/default-skin/preloader.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"source/images/hugodemo.png","path":"images/hugodemo.png","modified":1,"renderable":0},{"_id":"source/images/background.jpg","path":"images/background.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"source/images/pasted-0.png","path":"images/pasted-0.png","modified":1,"renderable":0},{"_id":"source/images/spring-bean生命周期1.png","path":"images/spring-bean生命周期1.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/CCCCNAME","hash":"48069849998c5d46d540279e4630690ef8437408","modified":1626179228577},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1626179228766},{"_id":"themes/next/.all-contributorsrc","hash":"d139a3b623b2e40bbff5c96ad44adf7dbdbc5be1","modified":1626179228765},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1626179228766},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1626179228766},{"_id":"themes/next/.gitignore","hash":"3558a8b174618c7a643aceb13233edd729813f9a","modified":1626179228773},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1626179228766},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1626179228774},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1626179228774},{"_id":"themes/next/_config.yml","hash":"72e9fac3c7075b699706b19f8443475a9d444e65","modified":1626179228775},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1626179228774},{"_id":"themes/next/README.md","hash":"7958c3f70b2133b479ddaf525cc4b6d87a37e04a","modified":1626179228775},{"_id":"themes/next/bower.json","hash":"8fa4f26f5205cbc64d33318d1be5d35b2667398c","modified":1626179228776},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1626179228776},{"_id":"themes/next/package.json","hash":"888bcacea284ec536a1428ad957a78dfb3ec255d","modified":1626179228815},{"_id":"themes/next/gulpfile.coffee","hash":"23bd9587807edc4dbecb5c5a29ab96ade24458b5","modified":1626179228787},{"_id":"source/_discarded/hello-world.md","hash":"12b59764c1e54c6ab01952fce449ba330a1d5d76","modified":1626179228577},{"_id":"source/_drafts/SpringMVC-Veloctiy-入门.md","hash":"00796dd172140bc3f7ecb04d736c40b6394e5153","modified":1626179228578},{"_id":"source/_drafts/未做的工作.md","hash":"449018118bb01cbefc0adff8751bf7f78675d786","modified":1626179228578},{"_id":"source/_drafts/目录结构.md","hash":"872e61c7721523f239d30550c8ba0e29570a691f","modified":1626179228578},{"_id":"source/_drafts/Spring自定义标签.md","hash":"26bf81ea46b9db9d240ba507a3588851f667295c","modified":1626179228578},{"_id":"source/_drafts/术语总结.md","hash":"b87a258b82d8ab8dd6f8c71b84dfe2b4601c5f21","modified":1626179228578},{"_id":"source/images/ThreadLocal.png","hash":"400720431cae82ede9c3d77ce2b6ad4a88d1e0eb","modified":1626179228597},{"_id":"source/images/iptables2.png","hash":"5c612ee461def39206400798ba4c17f2513db1ad","modified":1626179367750},{"_id":"source/images/istio-1.png","hash":"9406318d95fc366d411be3a5b83563aca3db0a2c","modified":1626179228608},{"_id":"source/images/pasted-1.png","hash":"a6b2bad5ca73d7e0aa2e85bc4692114e65bbcbce","modified":1626179228613},{"_id":"source/images/pasted-10.png","hash":"910ea9e2c22766b7f0725e869b24f81f894ea235","modified":1626179228613},{"_id":"source/images/pasted-11.png","hash":"87534ddfdb10ecfdc24312e3b07b66a07cb18d0f","modified":1626179228614},{"_id":"source/images/pasted-12.png","hash":"8f8d99cb0ad0146a5e8bb50e3d75757090959515","modified":1626179228615},{"_id":"source/images/pasted-13.png","hash":"113cb73fb83f9df4619661573bc686a94ddb39ad","modified":1626179228616},{"_id":"source/images/pasted-15.png","hash":"3b4098d9ce7731df51228028c96523d9473ffad7","modified":1626179228617},{"_id":"source/images/pasted-20.png","hash":"6f2e47afd33443f4979cd6e15cf5284e828c61af","modified":1626179228625},{"_id":"source/images/pasted-21.png","hash":"9c5327e6759c4726dbecc9573cf7b46a373e2775","modified":1626179228625},{"_id":"source/images/pasted-22.png","hash":"2ee31637a7339f6ed1d258bc7cb27635b31733af","modified":1626179228626},{"_id":"source/images/pasted-24.png","hash":"9a2d1d1ca8bfd168ef05a949e0eb4d7a8f4a2f44","modified":1626179228629},{"_id":"source/images/pasted-25.png","hash":"cafeebb2bd45c21a5f5bc8a6f98069f53f96e3dd","modified":1626179228630},{"_id":"source/images/pasted-26.png","hash":"e20770c093b1d98545492744141d3a14ea9b38be","modified":1626179228630},{"_id":"source/images/pasted-3.png","hash":"d2cca0dd1493ab1518692e571f4611db6f80d6a9","modified":1626179228634},{"_id":"source/images/pasted-30.png","hash":"26b94b246b0f602c5389d8bf041176f6b33f22d7","modified":1626179228635},{"_id":"source/images/pasted-32.png","hash":"692fe3bddd13d4c184cf89fa77194412656f6a92","modified":1626179228636},{"_id":"source/images/pasted-31.png","hash":"a92c5e7ca8afa728008546d53d26bb23d014f37d","modified":1626179228636},{"_id":"source/images/pasted-34.png","hash":"dca284a4cc293aafaf44d1d46e6d2cfca2bd5c65","modified":1626179228638},{"_id":"source/images/servlet.png","hash":"3a675a4e00e3e5032fb1042c7dea1259a488d8c2","modified":1626179228643},{"_id":"source/images/分布式锁.png","hash":"66901563cb834f8695659e86db817a90002a28bd","modified":1626179228656},{"_id":"source/about/index.md","hash":"3c0219640363ebb504d653c4cf78fa2e8c5fed66","modified":1626179228596},{"_id":"source/_posts/2019年终总结（新的开始）.md","hash":"0041db49c9d61877fb189561d33be9c4b548bc4f","modified":1626179228579},{"_id":"source/_posts/2019的最后一天踩坑正则表达式.md","hash":"2f730b79f779139870b1865b10041a545bf744d7","modified":1626179228580},{"_id":"source/_posts/2020 又是起起落落落落的一年.md","hash":"0d5ef043da2c28f25c8c4d3d5be48621e4a69d73","modified":1626179228580},{"_id":"source/_posts/ArrayList.md","hash":"d768add16ae693e5c75d21e906a57070c0f63bf0","modified":1626179228581},{"_id":"source/_posts/AQS分析.md","hash":"3b4896c343b45599ad6d52ea53a4db369d398927","modified":1626179228581},{"_id":"source/_posts/.异常.md.swp","hash":"c0ebabecd585ac6b791cf64c0cc553a15592f093","modified":1626179228579},{"_id":"source/_posts/Arrays.md","hash":"176dcecdf159847723d885742076616cda76d1be","modified":1626179228581},{"_id":"source/_posts/CAP和BASE.md","hash":"1d12473f5d765dd4215faeebbbc7aad4e226fb33","modified":1626179228582},{"_id":"source/_posts/Docker入门.md","hash":"7002de7c9aefb694537b3186f40a3af2f2660643","modified":1626179228582},{"_id":"source/_posts/IDEA使用笔记.md","hash":"e5d91402664c4f6497bc6550fc21ecfc98ccddb1","modified":1626179228583},{"_id":"source/_posts/IDEA配置Junit测试.md","hash":"a15b01cf0c5cf3b0c16b05d036c7509342de2cc3","modified":1626179228583},{"_id":"source/_posts/I-O模型.md","hash":"70be91937683a48b0aa54101b9307c43a7a9e60e","modified":1626179228582},{"_id":"source/_posts/Istio流量管理简单实践.md","hash":"ba141b22e05dce8dbf31c22a70364e011807c7e1","modified":1626179228583},{"_id":"source/_posts/JavaNIO.md","hash":"014defa9c305a6af3f7306b7b810d47a61d2fa94","modified":1626179228584},{"_id":"source/_posts/MyBatis入门.md","hash":"1ff209c70a8ad6ff2e67ccf5377707db8be78a4f","modified":1626179228584},{"_id":"source/_posts/MyBatis入门续-CRUD测试.md","hash":"cd186b64174bd4226f75a6431abf38ed6d636e68","modified":1626179228585},{"_id":"source/_posts/Lambda表达式.md","hash":"d1b7ebb473220ddd6a72c3b6436e3d3e04ef8867","modified":1626179228584},{"_id":"source/_posts/Optional.md","hash":"36bc941f4e93273ce282222ebccc6c366e0726d1","modified":1626179228585},{"_id":"source/_posts/SpringMVC.md","hash":"1ef1105bfbc769aabc9f971177d128c6cda7695c","modified":1626179228587},{"_id":"source/_posts/SQL-Explain记录.md","hash":"970570f5da633703676060a0487177772ddd7a08","modified":1626179228586},{"_id":"source/_posts/Spring生命周期总结.md","hash":"6676c17945f3ec0e893e1b5593bb17a9f6f5913b","modified":1626179228587},{"_id":"source/_posts/SQL.md","hash":"2e10ecbae34fcdfb39bb03f61ea6d95a1144ab46","modified":1626179228586},{"_id":"source/_posts/StringUtils.md","hash":"a3af0f825ecfa9610f51a42ce31d725b51cbbe3f","modified":1626179228587},{"_id":"source/_posts/TCP.md","hash":"f70ba9856b746505c145e27a44a7fdfe9714dc23","modified":1626179228588},{"_id":"source/_posts/ThreadLocal分析.md","hash":"8a4a08cd9b81b5823c05dc7738ea60c710eb51d6","modified":1626179228588},{"_id":"source/_posts/Zookeeper扫盲.md","hash":"398ba9f0e2244278c450ad52820e12497cbdbb7a","modified":1626179228588},{"_id":"source/_posts/get限流姿势.md","hash":"9112b7c08ce6d1eed56ba667fa807a3c07c73481","modified":1626179228589},{"_id":"source/_posts/mac-设置.md","hash":"5dff53f1b3ad81ba9088be655559f457bf197451","modified":1626179228590},{"_id":"source/_posts/hexo迁移到hugo方案-续.md","hash":"cd50ca3ea8c4d6f22dfdee85c01e2425b9b17479","modified":1626179228589},{"_id":"source/_posts/hexo迁移到hugo方案.md","hash":"97523ae3a2e47eeff00d241643f62312e2b3cad1","modified":1626179228589},{"_id":"source/_posts/iptables.md","hash":"79ee39cc352af8e894d0426f3bf08d99c64d541b","modified":1626179117332},{"_id":"source/_posts/一张图看懂CPU.md","hash":"de613b2d2c6551530d34abdbfd9eaf03728d8c3b","modified":1626179228591},{"_id":"source/_posts/一年菜鸡带你看微服务.md","hash":"552b487cf64b8f3e430f99aab40243683d08909d","modified":1626179228590},{"_id":"source/_posts/maven-assembly插件打zip包.md","hash":"ac17580e278b3af7910f582455fe32e189512eb8","modified":1626179228590},{"_id":"source/_posts/一次MySQL死锁的踩坑记录.md","hash":"619a718e5ec6b580a26d50380ddd3444082c199c","modified":1626179228591},{"_id":"source/_posts/一次Spring事务不回滚的踩坑记录.md","hash":"d5e669d0e7e49745e7fd3e292d294dc160dba7e8","modified":1626179228591},{"_id":"source/_posts/初识Guava Cache.md","hash":"edc5913ef7cc70413f41f056c7e249682f7a2f49","modified":1626179228592},{"_id":"source/_posts/分布式锁的套路-watchdog实现.md","hash":"c1d35830fa854c74e3cb718ca2befc8bdfbee7e2","modified":1626179228592},{"_id":"source/_posts/回调与监听器模式.md","hash":"4f14a0538f7b16b3a71b87041f3fd610bd8c2965","modified":1626179228592},{"_id":"source/_posts/将Hexo博客迁移到docker（总）.md","hash":"cbee916f1f6d0de3a04c500e6ef4ff6d34e8891c","modified":1626179228593},{"_id":"source/_posts/将Hexo博客迁移到docker（一）.md","hash":"976e9467159e85d9d60fb973d6d01603d735997b","modified":1626179228592},{"_id":"source/_posts/将Hexo博客迁移到docker（二）.md","hash":"2b17eb2160963c576fd498f2dd77f3be6660c132","modified":1626179228593},{"_id":"source/_posts/将Hexo博客迁移到docker（究极解决方案）.md","hash":"a214cf37a6fe2c77af97603ad4935f08a95c1706","modified":1626179228593},{"_id":"source/_posts/异常.md","hash":"ddc9490ab00d6e36589d13e66fcb3b8a663f0395","modified":1626179228593},{"_id":"source/_posts/我又来入门k8s了.md","hash":"12c1bf7796534cd4b663b4ff477ae455520d3edb","modified":1626179228593},{"_id":"source/_posts/捋一捋MySQL的锁.md","hash":"78fcef401ca0ba9603ad508c220c7183dede1775","modified":1626179228594},{"_id":"source/_posts/知识点复习.md","hash":"6fe2e1391e9b70942f50b4fdf402a417473df30f","modified":1626179228594},{"_id":"source/_posts/第一篇博客.md","hash":"949723fd15ffc963fb8274f0d5e5a28b81607bbf","modified":1626179228595},{"_id":"source/_posts/揭秘京东微服务框架的负载均衡算法.md","hash":"0a85dcb6a262e3a99e6974331008c4c5f6044410","modified":1626179228594},{"_id":"source/_posts/蓦然回首servlet.md","hash":"55c75e337499fce4329d270911767f97607c1c4b","modified":1626179228596},{"_id":"source/_posts/踩坑记录.md","hash":"64670c396e7c48de655dbf2e57d8f740ee4cb50e","modified":1626179228596},{"_id":"source/_posts/观察者模式.md","hash":"eb1f3a4c36fca5f7a029eec8d65868eeda40d657","modified":1626179228596},{"_id":"source/_posts/缓存更新的套路-总结与感受.md","hash":"bc556f3989c1d961984c5073b13e9efecce4af97","modified":1626179228595},{"_id":"source/_posts/震惊!系统崩了竟然因为这个.md","hash":"b154d6cd40a84bf95abcc3b7e74c2b1abdc8ea69","modified":1626179228596},{"_id":"source/msgboard/index.md","hash":"dd7d0709d8c5dc8b0014161d69a5b26b8afa358d","modified":1626179228657},{"_id":"source/photos/index.md","hash":"3c71351445c0b212d92bca9d059771bc740f6893","modified":1626179228658},{"_id":"source/tags/index.md","hash":"3c2a439512dab273cfb191070db53088f4d298f1","modified":1626179228658},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"285a95aca36e0ac770bcde2b35e3b572d45d1518","modified":1626179228767},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1626179228767},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1626179228768},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1626179228770},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"492b2c159d871e5b5d4c70d259f36e603afe192d","modified":1626179228769},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1626179228770},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1626179228770},{"_id":"themes/next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1626179228771},{"_id":"themes/next/.github/release-drafter.yml","hash":"b4476ada5c62ee7d63ba2e59ead2ec4897086e3c","modified":1626179228772},{"_id":"themes/next/.github/mergeable.yml","hash":"8e3a6abc74b5cba57f9586fe6d98762fd4fc9b04","modified":1626179228771},{"_id":"themes/next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1626179228772},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1626179228772},{"_id":"themes/next/.github/topissuebot.yml","hash":"10665bf2b5aba351725715c71e94ad183a0e8f18","modified":1626179228773},{"_id":"themes/next/.github/weekly-digest.yml","hash":"404e4ccb7fcd6587bc9b0247a7a7ff256d21f2cb","modified":1626179228773},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"0d2f22ea09dd1ef63c66164e048d8239d2ccb2b8","modified":1626179228778},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1626179228777},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1626179228778},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1626179228778},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1626179228779},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1626179228779},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1626179228780},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1626179228781},{"_id":"themes/next/languages/de.yml","hash":"9e524b2bdfb848504b93a51c5650e76bba5fa9e0","modified":1626179228787},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1626179228788},{"_id":"themes/next/docs/MATH.md","hash":"e6023505dcccaef0b856102543585a13fc6af0b1","modified":1626179228780},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1626179228788},{"_id":"themes/next/languages/es.yml","hash":"1752429687861b5cedd063c6ebe5dacefbe7e5a7","modified":1626179228788},{"_id":"themes/next/languages/fr.yml","hash":"7005c2b42c2c6e82bd7a1be5cc2f443b5fc79105","modified":1626179228788},{"_id":"themes/next/languages/id.yml","hash":"1c4868837f5109f1df863b04fe627352c31d404b","modified":1626179228789},{"_id":"themes/next/languages/it.yml","hash":"b30ff77ad8044e3b021a3b09187cd377dc789fd2","modified":1626179228789},{"_id":"themes/next/languages/ja.yml","hash":"1dc35e436da6214cdb3c2ff44bc4a06d0be5b9a0","modified":1626179228789},{"_id":"themes/next/languages/ko.yml","hash":"20bfaa7600d35235996c18e5c13dcef89c119626","modified":1626179228789},{"_id":"themes/next/languages/nl.yml","hash":"1c44b3cb2f817808607f3bf6ef47f58ce7599995","modified":1626179228790},{"_id":"themes/next/languages/pt-BR.yml","hash":"08b913a5cf4cc160083069cb4dfb2d66eecd1218","modified":1626179228790},{"_id":"themes/next/languages/pt.yml","hash":"8ddac820e2c17b484b56c0da8881e142b10e221b","modified":1626179228790},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1626179228791},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1626179228791},{"_id":"themes/next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1626179228791},{"_id":"themes/next/languages/zh-CN.yml","hash":"4059b526a97a43745fce965af590f2bb10292d89","modified":1626179228792},{"_id":"themes/next/languages/vi.yml","hash":"ba7aff8f88e03f69a0acf7f1b90ee03e077ee88e","modified":1626179228792},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1626179228792},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1626179228792},{"_id":"themes/next/layout/_layout.swig","hash":"f39bf8ed1d081b63b0495c3e493c203546b5b598","modified":1626179228793},{"_id":"themes/next/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1626179228813},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1626179228813},{"_id":"themes/next/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1626179228813},{"_id":"themes/next/layout/page.swig","hash":"d8a6cbf6f611c5d68d5da430cb6dc7010ff2c7e0","modified":1626179228814},{"_id":"themes/next/layout/photo.swig","hash":"b1f37dacae9cee9b706776ab71365e530e0c8dc4","modified":1626179228814},{"_id":"themes/next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1626179228814},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1626179228815},{"_id":"themes/next/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1626179228815},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1626179228817},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1626179228817},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1626179228882},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1626179228883},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1626179228883},{"_id":"source/images/acquire-relase.png","hash":"e0422605b1cf7470a920d7a4159488d075f05469","modified":1626179228597},{"_id":"source/images/acquireShared-relaseShared.png","hash":"a4b481147aee1a43e11e48714aaef6c7397a21a2","modified":1626179228598},{"_id":"source/images/dump问题2.png","hash":"a5855e25ca2718a41d2d9b0061d83a2c3021f47d","modified":1626179228602},{"_id":"source/images/dump问题1.png","hash":"3061473794352b3d752546bb98380035adcf77e5","modified":1626179228601},{"_id":"source/images/headicon.jpg","hash":"930537dcf0c3c3b19063193dde98f4562ea1023f","modified":1626179228606},{"_id":"source/images/k8s.png","hash":"e5f10f0ea5abf432f7924029602ddeafb81f6b27","modified":1626179228609},{"_id":"source/images/pasted-16.png","hash":"11e90a23857da45db33de61c3ee9812889f87f44","modified":1626179228618},{"_id":"source/images/pasted-14.png","hash":"bac56750503668e0b55d76ef610e3dc7ed037252","modified":1626179228617},{"_id":"source/images/pasted-27.png","hash":"e7bb100355d63569ac559d2013d4695589aa488a","modified":1626179228631},{"_id":"source/images/pasted-28.png","hash":"3fae585e504609edd7e5299216bd4274105ac0e8","modified":1626179228633},{"_id":"source/images/pasted-29.png","hash":"5c8d308e529fe73b7f75e5c9c1dd5cef185ae1ea","modified":1626179228634},{"_id":"source/images/pasted-33.png","hash":"2be34196664323aeb03f1b22f9e3f9969ee10bf7","modified":1626179228637},{"_id":"source/images/pasted-7.png","hash":"1fc02632c2ffc7b09db21d45cc37cd94b64ac5cd","modified":1626179228641},{"_id":"source/images/pasted-6.png","hash":"b35a677216e3afbe39a09eee389056753e02d741","modified":1626179228640},{"_id":"source/images/pasted-8.png","hash":"af66b0403aff0ff457b7b50e3994e47e02b97874","modified":1626179228642},{"_id":"source/images/pasted-9.png","hash":"4bda639dcafc2d05504d56f796ee6a7dbbc4df6c","modified":1626179228642},{"_id":"source/images/spring-bean生命周期2.png","hash":"8cf27eccea21090ecd2544ecd83ae9f2164b9252","modified":1626179228654},{"_id":"source/images/微服务.png","hash":"79c63b41d6d258fea3666f99997e130b6db5c5de","modified":1626179228657},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626179228852},{"_id":"source/images/dump问题4.png","hash":"57e1c3bd4a6513d3c94493f70e07b493ac4052e2","modified":1626179228605},{"_id":"source/images/pasted-17.png","hash":"387724b5a08ba107a96147a526fc09ecde5b964e","modified":1626179228619},{"_id":"source/images/pasted-18.png","hash":"fac95ddccdda23e3c01bc2d6fcaf2da379583d88","modified":1626179228620},{"_id":"source/images/pasted-19.png","hash":"453da449329007985ba8d18a75092623e68c3d09","modified":1626179228622},{"_id":"source/images/pasted-5.png","hash":"890b514e022b1080037fcd0d85764e5b6bb7a440","modified":1626179228640},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1626179228768},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1626179228768},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1626179228769},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"0b0727ff4d5180ae67f930fb4f8e9488e33eda9f","modified":1626179228769},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"caa624092175d44e3d3a8c6ca23922718da2354c","modified":1626179228783},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bc43beb3af74d64fbd3920539d08861e4cadb9a0","modified":1626179228784},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1626179228784},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"b218e30df4126b6adc87684775ac4c86ea7f7958","modified":1626179228783},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1626179228785},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1626179228785},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b76ccbc658024e86639cfa5f8a3817647fc8d651","modified":1626179228785},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1626179228786},{"_id":"themes/next/docs/zh-CN/README.md","hash":"1b5bd6ae5781137d81dc8667e912d3df6eeab260","modified":1626179228786},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1626179228781},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1626179228782},{"_id":"themes/next/docs/ru/README.md","hash":"4d7ef717d0b57288e606996ee56c20ffd59d5a99","modified":1626179228782},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1626179228783},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1626179228792},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1626179228793},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1626179228793},{"_id":"themes/next/layout/_macro/high.swig","hash":"cfb56f740cc82559e86e07db0e62c8c7fdb0a0f4","modified":1626179228793},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1626179228794},{"_id":"themes/next/layout/_macro/post.swig","hash":"e3f5a59e57801e8c9610c8b0e026cd0b813a7c30","modified":1626179228794},{"_id":"themes/next/layout/_macro/post.swig2","hash":"d116a16521b5c31598a415a407fc74cdb0f069b4","modified":1626179228794},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"bcc1e1987f021bf9d62cf71b753911d43ebf660e","modified":1626179228794},{"_id":"themes/next/layout/_partials/comments.swig","hash":"bfaf95d487fa681c80130bd494eec331705eaab3","modified":1626179228795},{"_id":"themes/next/layout/_partials/footer.swig","hash":"8ffb85022e0570f465d6efb459507e301a44801f","modified":1626179228795},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"6357537ac0bb114aed4d61bafb39e6690a413697","modified":1626179228795},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1626179228798},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1626179228798},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"13cedacb4de07500bef2e40d7048c0b24c9c07b9","modified":1626179228807},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1626179228807},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"eefb68b69b4b0ed558ee0324ccd711990059b20d","modified":1626179228807},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"01ded5e1bad89a6f8d64cd063e3e4e42c20d33bc","modified":1626179228809},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"d6e6ddda836bd9e2e8d9767a910c7d3280080e81","modified":1626179228810},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1626179228810},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1626179228810},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"810a9b2a6059f46c4a2ddb178f1eaa4c5e23750b","modified":1626179228810},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5db80e8d7ea3f29e998320f79508f7e14342a33c","modified":1626179228810},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1626179228811},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1626179228811},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"912368c41de675f458b267a49a99ae3e7e420ebb","modified":1626179228812},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"50be1762f60222379a8bef5e42ab1a0f3872b7ff","modified":1626179228801},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"61ae10d41f67ece004a025077fdb28724af05090","modified":1626179228801},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"012e3ece672cc3b13d5e032139f328d3426d7d65","modified":1626179228801},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1626179228801},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"ccd13d73429ef91ef5e8b7d9fa43c8188facdf41","modified":1626179228803},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"83470eb401f78f4683907c48ad6760b90730daa3","modified":1626179228803},{"_id":"themes/next/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1626179228816},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1626179228816},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1626179228816},{"_id":"themes/next/scripts/tags/button.js","hash":"f3b4f7ae7e58072bbf410d950a99a0b53cbc866d","modified":1626179228818},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1626179228818},{"_id":"themes/next/scripts/tags/exturl.js","hash":"d605918cf819887e9555212dbe12da97fd887a0b","modified":1626179228819},{"_id":"themes/next/scripts/tags/full-image.js","hash":"fcb41c1c81560ed49dc4024654388a28ee7d32b0","modified":1626179228819},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"598220fa92ff3540dcab74f633ba41523daa8364","modified":1626179228819},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1626179228820},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1626179228820},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1626179228820},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1626179228821},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1626179228821},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1626179228821},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1626179228822},{"_id":"themes/next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1626179228852},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1626179228853},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1626179228855},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1626179228855},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1626179228857},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1626179228857},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1626179228857},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1626179228858},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1626179228858},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1626179228858},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1626179228858},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1626179228858},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1626179228859},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1626179228859},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1626179228859},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1626179228859},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1626179228859},{"_id":"themes/next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1626179228859},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1626179228859},{"_id":"themes/next/source/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1626179228861},{"_id":"themes/next/source/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1626179228861},{"_id":"themes/next/source/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1626179228862},{"_id":"themes/next/source/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1626179228862},{"_id":"themes/next/source/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1626179228863},{"_id":"themes/next/source/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1626179228863},{"_id":"themes/next/source/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1626179228863},{"_id":"themes/next/source/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1626179228865},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1626179228864},{"_id":"themes/next/source/lib/JS&CSS.zip","hash":"13c4da5345bdd9ea27344ab7570f6dd4b344f050","modified":1626179228867},{"_id":"themes/next/source/js/utils.js","hash":"3c987de7cfb944c33e9e527f1214724c7aafc796","modified":1626179228866},{"_id":"source/images/dump问题3.png","hash":"351fc510e71c86fc9d726c8b0d0787e4dbb6725b","modified":1626179228603},{"_id":"themes/next/source/lib/album.zip","hash":"6392f1f8a1a3d73407e20cd112b30bc1d2edab53","modified":1626179228867},{"_id":"source/images/pasted-4.png","hash":"6994b751082da62e5cdb6999aa7ed6d0080fcb47","modified":1626179228639},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626179228846},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626179228846},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626179228847},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626179228851},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626179228852},{"_id":"themes/next/source/images/alipay.jpg","hash":"3dbc0cc352e25447d0a04b1baa09235c63de4ff3","modified":1626179228853},{"_id":"themes/next/source/images/wechatpay.png","hash":"162f9bfda66e21447ce4860b6ffaa4077098fb1f","modified":1626179228861},{"_id":"source/images/iptables1.png","hash":"4551f55bc15eaf0a9cdf83f2f12c26ca18b77769","modified":1626179361661},{"_id":"source/images/pasted-2.png","hash":"b757bcad3ce18c153c0fe6c24506aff643495240","modified":1626179228624},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1626179228793},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1626179228794},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1626179228795},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"02bb5748e8540b024e7f4008a9e640890b45280f","modified":1626179228796},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"e5e6f21342c50ca1769ec284f695927573db92fd","modified":1626179228796},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"648bf7eda66629592cb915c4004534b3913cbc22","modified":1626179228796},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1626179228797},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1626179228797},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1626179228797},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"0fa4fadb39467b01cede49f21b22e86b1a2da805","modified":1626179228798},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1626179228798},{"_id":"themes/next/layout/_partials/post/livere.swig","hash":"96f87fb5d930d2914b0018386709d8fc3da18d4a","modified":1626179228799},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1626179228799},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1626179228799},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"d44f025eb93c99ddf90202d8293ccf80689a00c7","modified":1626179228799},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1626179228799},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1626179228800},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1626179228800},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1626179228800},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1626179228800},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1626179228800},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1626179228800},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"b45e934d24d76ec6b6a790e92bdb3d56186b0e2a","modified":1626179228801},{"_id":"themes/next/layout/_partials/share/sharesdk.swig","hash":"4177100a664665dc1102d745661928079ddec3fa","modified":1626179228801},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1626179228804},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1626179228804},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1626179228804},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1626179228804},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1626179228805},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"050ea01f25cfe492be9bb77b409644d623fdf2dc","modified":1626179228805},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1626179228805},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"d422beaf35a5d2646feaa098bc3e5adf691c7565","modified":1626179228805},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1626179228806},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1626179228806},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c754f699c90f6278b9159eff1855c17bc713ee96","modified":1626179228806},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1626179228806},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1626179228807},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1626179228806},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1626179228807},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"c77a2e7ef5f449a445fb4d36b055721fba4a81af","modified":1626179228808},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"3cfeafefc672d9a7704650ebfb2f9d8668b38d9a","modified":1626179228808},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"e8f91c571ceb4b80aafebc4d36b89fb41b1ae040","modified":1626179228808},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"388efc86af7f19c05ad0e26720cd24ee012d20b9","modified":1626179228808},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"2cbaae65a020bbb0e9265364488aff8bf84fa48d","modified":1626179228808},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1626179228808},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4a908b613518878b9b69576c5dba4a5185f552ab","modified":1626179228809},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1626179228809},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1626179228809},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"601774d8672577aefbcefac82c94b01f0338da31","modified":1626179228809},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"0a13dfd2de52a96901039098c6fc7b515edfc50b","modified":1626179228811},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1626179228812},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1626179228812},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"184d064284849489b6f935f12e76e3217428f9b4","modified":1626179228802},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1626179228802},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1626179228802},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0097e45e7b671f8006b8b2d3c4f95cacc76a983c","modified":1626179228803},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"e42604fbb17648484e5f12afe230d826de089388","modified":1626179228803},{"_id":"themes/next/source/css/_common/custom.styl","hash":"9a5dde65d85cc6197480622747e04cdd52408d23","modified":1626179228844},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"643143da513f885ea72f7b7fbcb075c060018a0c","modified":1626179228846},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1626179228846},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"2036bbb73afd43251982ce824f06c6e88d35a2ef","modified":1626179228846},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2e8fb29aa92325df39054b5450757858c6cebc41","modified":1626179228846},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1626179228851},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1626179228851},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1626179228852},{"_id":"themes/next/source/css/_variables/base.styl","hash":"640f25a63770af5566ccc9cec79c40a4f1c0b29e","modified":1626179228852},{"_id":"themes/next/source/images/alipay.png","hash":"4f13366f0b93b23f76c6d9c609d211f4629b2bc7","modified":1626179228854},{"_id":"themes/next/source/images/background.jpg","hash":"2d16af5a2d2da958566b307fe45e3355d3ae62d2","modified":1626179228856},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"a58df6863013ce105c122bf06d73c4ad3c65925f","modified":1626179228860},{"_id":"themes/next/source/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1626179228864},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1626179228864},{"_id":"themes/next/source/js/src/photoswipe-ui-default.min.js","hash":"b34f592dc9765f1e6f91343197a623dfb7acfaab","modified":1626179228865},{"_id":"themes/next/source/js/src/photoswipe.min.js","hash":"def03cfc3e7333b081e4cea1508bab3015e860c9","modified":1626179228866},{"_id":"themes/next/source/lib/album/data.json","hash":"79f7a7922b993889987a2a786f72222bcde0354a","modified":1626179228868},{"_id":"themes/next/source/lib/album/ins.css","hash":"cf96c6a18c3835380043c769d49a51a3e2d646e3","modified":1626179228870},{"_id":"themes/next/source/lib/album/ins.js","hash":"747853cfd21c8221deaf6e14d70321c528970abb","modified":1626179228871},{"_id":"themes/next/source/lib/album/photoswipe.css","hash":"e6d93b786de172eca4fbd96527cc0dadd202aee6","modified":1626179228871},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1626179228873},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1626179228873},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1626179228872},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1626179228873},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1626179228874},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1626179228882},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1626179228882},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1626179228881},{"_id":"source/images/pasted-23.png","hash":"116d70403015d6084eeb8070ab99c446a3fd7531","modified":1626179228628},{"_id":"source/images/一张图看懂CPU.png","hash":"4541a736da6dafee8c1a4a5e7e21d6380fcf8456","modified":1626179228656},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1626179228879},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"c8b3225396cb444d8baeb94bac78e5216b992a81","modified":1626179228823},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"fe5ff961b86004a306778c7d33a85b32e5e00e48","modified":1626179228823},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"b98c65006e2546fbf3870c16fbbcbc009dbaab15","modified":1626179228823},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"9d71f34fa13a41b8c8cd2fbdf3fdea608385277c","modified":1626179228824},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1626179228823},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"ce826aedf42b9eca424a044452f5d193866726a6","modified":1626179228830},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"ce2aae8f3ed8ceac3a2417e0481044cf69c788aa","modified":1626179228836},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1626179228844},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"d7b8bcf2a6031296c84bb4f4ecfb037af01d2d82","modified":1626179228836},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"6d900b4159eeb869196a619602578bf4d83a117b","modified":1626179228844},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"a5305a2fa0b03b1dc1dfd156bb1a590b4819f1f3","modified":1626179228845},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"8e0740a9ad349ce5555122325da872923135a698","modified":1626179228845},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1626179228845},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"33456264a74d1bba38264d14713544d67d003733","modified":1626179228845},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1626179228845},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1626179228847},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"24230e46fc9fb7b8551f97bb36e9bc1f7423098e","modified":1626179228847},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9a2d298dbdcbfd758518fd74b63897bc80ce15a5","modified":1626179228847},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1626179228848},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"75d2d92af070eb10273558b2436972d3f12b361c","modified":1626179228848},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1626179228848},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1626179228848},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a96e46a6ae86c423f932bc2bc78b9f7453e4e4e5","modified":1626179228848},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"57044a6d19eb418c1c3d28787e82c69efa9e0ca6","modified":1626179228850},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"2cc50b6ece82830b0d8c147236c1a115c6384e27","modified":1626179228851},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"75737591682a2bafa71db4c03fb79e970ac0e7aa","modified":1626179228850},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"b6dac5bbf20f090cf4b67d156f030d7170dfb39c","modified":1626179228850},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"232aedbd44243b3b80c4503c947060d3269c1afc","modified":1626179228851},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1626179228851},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1626179228849},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6565b4a309325596768d0d32e022c80ef23066cb","modified":1626179228849},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"1edf4e69d0ec0dc9cefed6c35d3e803e0da4093d","modified":1626179228849},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1626179228849},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1626179228850},{"_id":"themes/next/source/images/background2.jbg","hash":"2d16af5a2d2da958566b307fe45e3355d3ae62d2","modified":1626179228857},{"_id":"themes/next/source/lib/album/assets/empty.png","hash":"eb4025983c8b24539bb70db4b9b3e8d0a092ee61","modified":1626179228868},{"_id":"themes/next/source/lib/album/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1626179228870},{"_id":"themes/next/source/lib/album/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1626179228869},{"_id":"themes/next/source/lib/album/default-skin/default-skin.css","hash":"9106e9fabb78ef1ce4cc896cfec003fcbd9e1256","modified":1626179228869},{"_id":"themes/next/source/lib/album/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1626179228870},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1626179228875},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1626179228874},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1626179228874},{"_id":"source/images/hugodemo.png","hash":"c47600860a5167f6d49b35d824edf62feccbc81d","modified":1626179228608},{"_id":"source/images/background.jpg","hash":"c6433e8cfc5ca3a6564eb65bf007385106ebf221","modified":1626179228600},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1626179228877},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1626179228878},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1626179228824},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"71d8d1cc22a2a7627a6db7240f0c4902a14f9bea","modified":1626179228826},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"e9dd8de7d98f1478ac7d351624fffd3d8738c905","modified":1626179228827},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1626179228827},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ca97f0b6990eef947039faede80c56d9c4381ee1","modified":1626179228825},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"6c4990d375b640ee4551e62c48c1cbe4c3d62212","modified":1626179228825},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1626179228825},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"a410ed529afd46ddf4a96ecf0de6599488716887","modified":1626179228826},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1626179228826},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"cc6ee18f47f2e1e06df6fa0eadb37079e580fd11","modified":1626179228826},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1626179228827},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1626179228828},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1626179228828},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f1d52954b9a5d1ca8e224382349f525e598dd923","modified":1626179228828},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1626179228830},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1626179228829},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"80addb9b725e329915c05c27b9fadaf56457a9b3","modified":1626179228829},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1626179228830},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"6a75bb1f2435f4e895cbbb5abbddf6e8f7257804","modified":1626179228831},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1626179228831},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"1385862a5c0bd845015d165aadbd1a6add7b72d7","modified":1626179228832},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"c961d37190d9bec58a36306c7e716c4e72c4582f","modified":1626179228832},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1626179228832},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b082d07b13a3d55b4c032fd351dfa9a4fd74edec","modified":1626179228833},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"496f931e3a7e313ba8088fb91bb20789cace72c9","modified":1626179228833},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"3f33bb862c2aa993f54987fbb345da067b79b112","modified":1626179228833},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1626179228834},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1626179228834},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"5440013a081201ca791582db98159dce93ea9e75","modified":1626179228834},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1626179228835},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"d5c8ffed7f2c701052b7a53abaf5ef437374ea72","modified":1626179228835},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1626179228834},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"021d9ba821b5fecb07d25d08135da48726e27ed2","modified":1626179228835},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"9224b566cd2632f64c1a964e2c786cee93b93286","modified":1626179228836},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"f521a0b87bf3bdd87bc54192ec16d3b0efea1e8d","modified":1626179228837},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"cc83816614f21c7e1d8d3f867d547ff7c658cec4","modified":1626179228837},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"517d541a80d59ad99a3f648be74891e0c7bc72a8","modified":1626179228837},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"c2d9c3b6fbfa65544e6b5a55d3cb2149df04a8a9","modified":1626179228838},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1626179228838},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"8a24b56524a388fbabd408ffc8ba9b56eb9e01ce","modified":1626179228838},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c01609176929590f8f347075a9a12b661acd661e","modified":1626179228839},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e5c884fb950937afa350c608545455c87aa6129","modified":1626179228839},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"967fb3a3c6c851b34ec5df2d945dc266ed63d146","modified":1626179228840},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fc58498d4f5081fcf6218e9e18c5bf2328275bef","modified":1626179228842},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"688ca3eccc26727d050ad098b32b40934719588a","modified":1626179228843},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1626179228843},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"f1d9ee1f86a179741f2478f8c70ca11ab578810e","modified":1626179228843},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"7059e24235b7c57a07f3f8abaa06b0bd6a7eda2f","modified":1626179228843},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"9fac89c8146eb2675721a26f528d7d0f8be7debe","modified":1626179228843},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1626179228843},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"61466e3e5459960b5802a267751a0c8018918b0b","modified":1626179228843},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"3ae3f3c276d444862033fd3434c632ad0d2f84e6","modified":1626179228844},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"03c4fa9573fddd930552784cf484fd2ee7825323","modified":1626179228844},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"58ec00eebe68d0eebd2eea435c710063877447df","modified":1626179228840},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1626179228841},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1626179228841},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"d7501ae01fc45fa15b00d1bc5233b9fffa20a3c9","modified":1626179228841},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"21b32840d8b3a14b10770153114778304ba6d1b0","modified":1626179228842},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"da8d34729fb6eb0fcb8ee81e67d2be3c02bc1bc4","modified":1626179228842},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"cbc0be5a3285b469858ec9ead48e2ea90bd47ae1","modified":1626179228842},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"fcda60fecff1479adaf6521cf629cda2506337a8","modified":1626179228842},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1626179228848},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1626179228849},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1626179228850},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1626179228880},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1626179228876},{"_id":"source/images/pasted-0.png","hash":"26cc0bea420fd1617165549ba7122552b3f13b4f","modified":1626179228613},{"_id":"source/images/spring-bean生命周期1.png","hash":"5428cafbf348f530a5501f7e7cea5e460a496b52","modified":1626179228653},{"_id":"public/baidusitemap.xml","hash":"9a2ff037c1a7033f015b54bd5fd97c17ae49c4a3","modified":1626344582677},{"_id":"public/atom.xml","hash":"1acd5bdb1512d96ff428edb2899cb3e07b59276e","modified":1626344582915},{"_id":"public/sitemap.xml","hash":"6cad1c85f081db19e8e97d55c4c648cbef861a76","modified":1626344582916},{"_id":"public/search.xml","hash":"932726c960096c9fa9e4dc1d3cb9f4b48217dc94","modified":1626344582955},{"_id":"public/about/index.html","hash":"0c763d0f531edac9b61acbf88180a8ba17fdf710","modified":1626344582972},{"_id":"public/msgboard/index.html","hash":"3a0170fa87792c300a75c3a9b513fd7bc4e22bf1","modified":1626344582972},{"_id":"public/photos/index.html","hash":"94ced5eb715304c4084cc0e08d1545b3821bc67b","modified":1626344582973},{"_id":"public/tags/index.html","hash":"7de66bab2fb953fab38df1a4b838a06266127e3a","modified":1626344582973},{"_id":"public/2021/05/13/hexo迁移到hugo方案-续/index.html","hash":"2e40c37ada05b47cb065fbaf5e340f2a097f7a93","modified":1626344582973},{"_id":"public/2021/05/08/Istio流量管理简单实践/index.html","hash":"30176edc7b768666fa5805f7cd6723e921028216","modified":1626344582973},{"_id":"public/2021/07/13/iptables/index.html","hash":"a399ebfb4dd3c3e536e42e731411dba46e69522d","modified":1626344582973},{"_id":"public/2021/03/04/hexo迁移到hugo方案/index.html","hash":"570394a9577eb65d1ab062d11c34e0140fc953f1","modified":1626344582973},{"_id":"public/2021/02/08/2020 又是起起落落落落的一年/index.html","hash":"2e897930305c300a6129cac32563031735f9c070","modified":1626344582973},{"_id":"public/2020/11/17/一次MySQL死锁的踩坑记录/index.html","hash":"99733609f5c617c9e1da5d7fadc89f32081b3d77","modified":1626344582973},{"_id":"public/2020/11/16/捋一捋MySQL的锁/index.html","hash":"768dda6900eb42f6108257456b88cd2b68cca244","modified":1626344582973},{"_id":"public/2020/10/23/JavaNIO/index.html","hash":"d2db33b2c457d207fc7858ea63b81f9a001529f3","modified":1626344582973},{"_id":"public/2020/10/19/分布式锁的套路-watchdog实现/index.html","hash":"8fb40c47bafb51c89410240a6d2fed405d1e99bc","modified":1626344582974},{"_id":"public/2020/10/09/Spring生命周期总结/index.html","hash":"18694b5c1f04dabecce31385bd361379d1161dde","modified":1626344582974},{"_id":"public/2020/06/30/我又来入门k8s了/index.html","hash":"ad3881ca78f79c09c505f3aef794a84bcd175837","modified":1626344582974},{"_id":"public/2020/06/25/一年菜鸡带你看微服务/index.html","hash":"628353b45b75e9e2acf41d508334e35031f4dc2a","modified":1626344582974},{"_id":"public/2020/06/11/蓦然回首servlet/index.html","hash":"f7f0a9ec162e8028bd85497b6d67eb49ba527631","modified":1626344582974},{"_id":"public/2020/05/28/震惊!系统崩了竟然因为这个/index.html","hash":"8f1130bc1682301132c7cd61119c1a9174078146","modified":1626344582974},{"_id":"public/2020/05/20/AQS分析/index.html","hash":"c7f6ab1f3f0cd1d14f307c84161169f4713e7e04","modified":1626344582974},{"_id":"public/2020/05/19/ThreadLocal分析/index.html","hash":"c9768ea6386ba4cf95e0d288b18b1c83d998aa72","modified":1626344582974},{"_id":"public/2020/05/14/get限流姿势/index.html","hash":"19f63a257b55592049e891cd47d6b151fe29c83d","modified":1626344582974},{"_id":"public/2020/05/11/初识Guava Cache/index.html","hash":"9a496286929ed2cfa5e1cc54ef6a3c058e43464d","modified":1626344582974},{"_id":"public/2020/04/19/将Hexo博客迁移到docker（究极解决方案）/index.html","hash":"7da288886039056f8988b91029a7d6e8cc335b70","modified":1626344582974},{"_id":"public/2020/03/27/揭秘京东微服务框架的负载均衡算法/index.html","hash":"eb86bec810053ac9891283fea1d0810489dab4df","modified":1626344582974},{"_id":"public/2020/03/20/一张图看懂CPU/index.html","hash":"611438e8dcb1344bc8888e06926124b6260c0c8a","modified":1626344582974},{"_id":"public/2020/02/14/将Hexo博客迁移到docker（二）/index.html","hash":"172cf226a92650c0d8a7bae7d4b4892179a4e057","modified":1626344582974},{"_id":"public/2020/02/13/将Hexo博客迁移到docker（一）/index.html","hash":"b422301200c45beff5a92d940a51d1879dabeb6b","modified":1626344582975},{"_id":"public/2020/02/13/将Hexo博客迁移到docker（总）/index.html","hash":"dc2022aa057792235d4da772d0830722524a561d","modified":1626344582975},{"_id":"public/2020/02/12/Docker入门/index.html","hash":"b7250d7a1d84ebdbbc2aaae6629bf461e62b537b","modified":1626344582975},{"_id":"public/2019/12/31/2019年终总结（新的开始）/index.html","hash":"efa3b7ef15334ebee1fb5864c37127290960b385","modified":1626344582975},{"_id":"public/2019/12/31/2019的最后一天踩坑正则表达式/index.html","hash":"5447c399e5eb0cebb13ea961b1730d486ed09f76","modified":1626344582975},{"_id":"public/2019/12/26/TCP/index.html","hash":"601d284e70bb8ba878d467e72d28884013362d63","modified":1626344582975},{"_id":"public/2019/12/20/I-O模型/index.html","hash":"6a706a03bc83450a239a2d932de1487ca9ecc635","modified":1626344582975},{"_id":"public/2019/11/22/回调与监听器模式/index.html","hash":"26d94fa36b3eadc20147bd9561ba2b15e82b9877","modified":1626344582975},{"_id":"public/2019/11/16/SQL-Explain记录/index.html","hash":"6398c3fd1d7cc09a0432374791172ad162b8d55b","modified":1626344582975},{"_id":"public/2019/11/16/SQL/index.html","hash":"bf8b9ddb972aac318254aa5c9272ce8e7a3054b3","modified":1626344582975},{"_id":"public/2019/11/06/踩坑记录/index.html","hash":"f7edf10367a1d5693fbb863d43ab14a66bd7496b","modified":1626344582975},{"_id":"public/2019/10/11/maven-assembly插件打zip包/index.html","hash":"1de42472fe888688ce26c50f15e74972c659752d","modified":1626344582975},{"_id":"public/2019/09/19/观察者模式/index.html","hash":"c25f60f93a5a7c38350ac3e40f70b4bf0635675f","modified":1626344582975},{"_id":"public/2019/08/29/Zookeeper扫盲/index.html","hash":"b93642c34e31efee46844af9748052390fde8af3","modified":1626344582976},{"_id":"public/2019/08/26/CAP和BASE/index.html","hash":"19e3dfc13b7ba526466f902b2b1d8bee38e262ac","modified":1626344582976},{"_id":"public/2019/08/21/缓存更新的套路-总结与感受/index.html","hash":"a6aea7ba97e428b56c40dedcbde91f7fb8db2a6a","modified":1626344582976},{"_id":"public/2019/08/16/一次Spring事务不回滚的踩坑记录/index.html","hash":"d32286ff1b395fe3282e5d67eadcc1697506f9f0","modified":1626344582976},{"_id":"public/2019/08/15/Optional/index.html","hash":"980983d4372445bf1501132780e17150cc6f3713","modified":1626344582976},{"_id":"public/2019/08/13/mac-设置/index.html","hash":"2693bd172528f37ebe4849416c8e8f6d0e8a32db","modified":1626344582976},{"_id":"public/2019/08/05/Lambda表达式/index.html","hash":"651b70946223d6e1d1b54a0a20cc8b22ead13a4d","modified":1626344582976},{"_id":"public/2019/07/26/StringUtils/index.html","hash":"1d7f5a4268e550462c8e76a84ea8103fae76e848","modified":1626344582976},{"_id":"public/2019/07/26/Arrays/index.html","hash":"dd75ab70b4e38eee68cbcf80a2ae132b45e6d540","modified":1626344582976},{"_id":"public/2019/07/26/ArrayList/index.html","hash":"3baf19a12af67865b8208dc6b869366d10c01a75","modified":1626344582976},{"_id":"public/2019/07/12/MyBatis入门续-CRUD测试/index.html","hash":"af868f8be4f724fc635d840b60fa312fa232315b","modified":1626344582976},{"_id":"public/2019/07/12/IDEA配置Junit测试/index.html","hash":"aa9c00df0a771c66d5f6d61f9a35af5d6e5b5126","modified":1626344582976},{"_id":"public/2019/07/12/MyBatis入门/index.html","hash":"faf5f2c8df18a4255eaf8602e14e449603094095","modified":1626344582976},{"_id":"public/2019/07/11/SpringMVC/index.html","hash":"6bfed31538d21d098656b7c52880aadf310f55b1","modified":1626344582976},{"_id":"public/2019/07/11/异常/index.html","hash":"1e1ad6ef7130739705f9c367c42d9ae59a7e54db","modified":1626344582977},{"_id":"public/2019/07/11/IDEA使用笔记/index.html","hash":"a3bd4f378e34bbd023b6822839cbb610c6e83218","modified":1626344582977},{"_id":"public/2019/07/09/知识点复习/index.html","hash":"d58dbdaadb35fd25dc0a69f2c79c9840c4b97160","modified":1626344582977},{"_id":"public/2019/05/11/第一篇博客/index.html","hash":"060486ac3b75a47375b9fcf5a555a8a73543d185","modified":1626344582977},{"_id":"public/archives/index.html","hash":"89fd5bddb9be2777625d4c5c66cf150682a14a7c","modified":1626344582977},{"_id":"public/archives/page/2/index.html","hash":"1a8d72a1cc863f15fa4705b97789d9f8c289ca4e","modified":1626344582977},{"_id":"public/archives/page/3/index.html","hash":"e1e79f7b775634d5a5bf6a06d8ebb36378b7aa80","modified":1626344582977},{"_id":"public/archives/page/4/index.html","hash":"03fecd6cfe500fe0ffd470dd3bdd0c13e5bbb706","modified":1626344582977},{"_id":"public/archives/page/5/index.html","hash":"37f97f47bdc3b79bd43f48c78706c087f0fa55c3","modified":1626344582977},{"_id":"public/archives/page/6/index.html","hash":"314486e3801afbe02e9f59d35ab9282857cb28b5","modified":1626344582977},{"_id":"public/archives/2019/index.html","hash":"872016cab937d68f17ab44726818d23da50d7e32","modified":1626344582978},{"_id":"public/archives/2019/page/2/index.html","hash":"ea56e10c140f2327f2d64239846346825a4bb823","modified":1626344582978},{"_id":"public/archives/2019/page/3/index.html","hash":"66b8ff19137e084bdf8ad5a7d67986135d676f99","modified":1626344582978},{"_id":"public/archives/2019/05/index.html","hash":"39a3ced10713a0f4eabf529bc89723370ec42d7b","modified":1626344582978},{"_id":"public/archives/2019/07/index.html","hash":"b7c0f5f91e582479ef558839c174e36364a999ef","modified":1626344582978},{"_id":"public/archives/2019/08/index.html","hash":"24774918feb06bcb499d377d377dc6f5bf20884a","modified":1626344582978},{"_id":"public/archives/2019/09/index.html","hash":"4bac500c9ee27bd6c8b3c4247a459b4d2d414b28","modified":1626344582978},{"_id":"public/archives/2019/10/index.html","hash":"a71227160c07d4f0d7b2eb8563e728408736c984","modified":1626344582978},{"_id":"public/archives/2019/11/index.html","hash":"a84fd805e8ee5627042b61dcf68349fdd9042cfd","modified":1626344582978},{"_id":"public/archives/2019/12/index.html","hash":"8c1e3cc41a49d363e821d61ae54d86d92ee0cc7d","modified":1626344582978},{"_id":"public/archives/2020/index.html","hash":"1ef540b22afd444bd274d0bd9d42ad542a86ca14","modified":1626344582978},{"_id":"public/archives/2020/page/2/index.html","hash":"94c34a4981d51de1210d4a10514ed12be7ef7370","modified":1626344582979},{"_id":"public/archives/2020/02/index.html","hash":"5faa3836de1c98e50f465228a21384e10e58340e","modified":1626344582979},{"_id":"public/archives/2020/03/index.html","hash":"2280b4467ddbcda5ba6c971d1a7e1a2ed790f13b","modified":1626344582979},{"_id":"public/archives/2020/04/index.html","hash":"9ddbd786c81477e7551d1edb98a52b9443792d1d","modified":1626344582979},{"_id":"public/archives/2020/05/index.html","hash":"87552e0b84d3c217aa8569dec5df48f993815aab","modified":1626344582979},{"_id":"public/archives/2020/06/index.html","hash":"de6ea270bdf149edf5d634389371f8b2178efce0","modified":1626344582979},{"_id":"public/archives/2020/10/index.html","hash":"aa26b93e2ce52357d9b4f52a5e3632c4dd98c1aa","modified":1626344582979},{"_id":"public/archives/2020/11/index.html","hash":"8bc3a06c62fbfe58e161c6b4865dee10bdcceb9b","modified":1626344582979},{"_id":"public/archives/2021/index.html","hash":"a768c47f308bf484d142cd984fac7819ccc74e5e","modified":1626344582979},{"_id":"public/archives/2021/02/index.html","hash":"dbf4b92cd91e0a77598ba911216378fe2fa6a0a3","modified":1626344582979},{"_id":"public/archives/2021/03/index.html","hash":"0798b5098d7931bcc770a5d36408efefde05dc83","modified":1626344582979},{"_id":"public/archives/2021/05/index.html","hash":"705b22db0669bfd54de00976ad790340e0757fe3","modified":1626344582979},{"_id":"public/archives/2021/07/index.html","hash":"871389303bd4d83465c486eae2cfef9196577e6a","modified":1626344582980},{"_id":"public/categories/生活杂谈/index.html","hash":"0d537c643db5b0902fafd8c29499fe9f568feb62","modified":1626344582980},{"_id":"public/categories/Java/index.html","hash":"0459c45531cbc8b096738e22650b096d490a999f","modified":1626344582980},{"_id":"public/categories/Java/page/2/index.html","hash":"1e46a618883cc74e2a442457825e5ed4d2607fe6","modified":1626344582980},{"_id":"public/categories/分布式/index.html","hash":"c91cd71cece13a80ec13f7aa89f3d87089323414","modified":1626344582980},{"_id":"public/categories/容器/index.html","hash":"0f979f8e624f7d9c9afbb9525e0698ed67acda78","modified":1626344582980},{"_id":"public/categories/IDEA/index.html","hash":"3b35638b7abc80acfdf3d7eee60ea8c079cb9ef2","modified":1626344582980},{"_id":"public/categories/MyBatis/index.html","hash":"73af8d781ca1734515cb462112e114506e84b992","modified":1626344582980},{"_id":"public/categories/hugo/index.html","hash":"62cad44872b7f38459618dc43cb39bee904a554f","modified":1626344582980},{"_id":"public/categories/Linux/index.html","hash":"79d3e569d27020f4161b20a882da49e9f5199fe0","modified":1626344582980},{"_id":"public/categories/MySQL/index.html","hash":"e0c1ebf97f40e45dad4ec405ba5cbba58833f847","modified":1626344582980},{"_id":"public/categories/微服务/index.html","hash":"43171d176014db17a4102e02c9059dc92f14e4b0","modified":1626344582980},{"_id":"public/categories/设计模式/index.html","hash":"f9bf00e3ce6d9566a524a2315967dc37f223fc6a","modified":1626344582981},{"_id":"public/index.html","hash":"bcc240e4da58046645497c1da96c91e2d213ac66","modified":1626344582981},{"_id":"public/page/2/index.html","hash":"459ddc088838269a31fce6435fcb927b18746920","modified":1626344582981},{"_id":"public/page/3/index.html","hash":"f562f41107cd1f37d4ea11e26d354f0b0d67e0dd","modified":1626344582981},{"_id":"public/page/4/index.html","hash":"7838012dd4b6c7f268f99ca03de80eaff462b010","modified":1626344582981},{"_id":"public/page/5/index.html","hash":"8af841944c6b22074cf3da0d2911b867f96b4680","modified":1626344582981},{"_id":"public/page/6/index.html","hash":"a2af4f0c8be12691fd0474b9e62e5c69f6281968","modified":1626344582981},{"_id":"public/tags/生活杂谈/index.html","hash":"1fa177bfa4fbefc9bd712a24c4b41f20a1a3b977","modified":1626344582981},{"_id":"public/tags/Java/index.html","hash":"fb677c0d08dec7496ac2d359af5eab840cbf0e03","modified":1626344582981},{"_id":"public/tags/Java/page/2/index.html","hash":"e2963c33471bc0475f056796c764381f93cf1dff","modified":1626344582981},{"_id":"public/tags/分布式/index.html","hash":"518a6bcb5fae20985315617a44685ecf36300f2b","modified":1626344582981},{"_id":"public/tags/容器/index.html","hash":"2af044f456b2ee4c215fde98257ea7afe23bb05a","modified":1626344582982},{"_id":"public/tags/IDEA/index.html","hash":"ac4e322c0ed319b534f469c724b0207878184953","modified":1626344582982},{"_id":"public/tags/Istio/index.html","hash":"999813eaeebe7f38ad0c82ec862c8dc1f60fb1b6","modified":1626344582982},{"_id":"public/tags/MyBatis/index.html","hash":"4b0b963af89ee8a94cbd5df59e5ac91919baa325","modified":1626344582982},{"_id":"public/tags/SpringMVC/index.html","hash":"e644c6fbe29cee10d03823dadd1f662fc3bfaaaf","modified":1626344582982},{"_id":"public/tags/SQL/index.html","hash":"fc5b9cf01a819ae6728a81bbe19ff24ee6269fd6","modified":1626344582982},{"_id":"public/tags/hugo/index.html","hash":"01f66cd362adb900a5ae97a818d28c938079d1c5","modified":1626344582982},{"_id":"public/tags/Linux/index.html","hash":"5fcb8891e4a5efefc19adf1eb08c6713a2c5dd79","modified":1626344582982},{"_id":"public/tags/MySQL/index.html","hash":"a442a08645976f8544930e40ba8a925dbea71122","modified":1626344582982},{"_id":"public/tags/Spring/index.html","hash":"0d7b539e47f8c424355b68d0a21b2f9fc22135fc","modified":1626344582982},{"_id":"public/tags/设计模式/index.html","hash":"412aeb9854728e83fc7791ecef74caf99d3cac2c","modified":1626344582982},{"_id":"public/tags/exception/index.html","hash":"3b68c8cd9dcabebc06f3dd85d23a5948fb5f345c","modified":1626344582982},{"_id":"public/tags/k8s/index.html","hash":"d086283575000ade20363b5c00fb05f000cfb03b","modified":1626344582983},{"_id":"public/tags/微服务/index.html","hash":"4b3a6913fc43432206ab519ee575919ab6987717","modified":1626344582983},{"_id":"public/tags/Redis/index.html","hash":"f5cdbf4cd219761c31a03681cc7faa78f376830e","modified":1626344582983},{"_id":"public/images/pasted-1.png","hash":"a6b2bad5ca73d7e0aa2e85bc4692114e65bbcbce","modified":1626344582994},{"_id":"public/images/pasted-10.png","hash":"910ea9e2c22766b7f0725e869b24f81f894ea235","modified":1626344582994},{"_id":"public/images/ThreadLocal.png","hash":"400720431cae82ede9c3d77ce2b6ad4a88d1e0eb","modified":1626344582994},{"_id":"public/CCCCNAME","hash":"48069849998c5d46d540279e4630690ef8437408","modified":1626344582994},{"_id":"public/images/pasted-15.png","hash":"3b4098d9ce7731df51228028c96523d9473ffad7","modified":1626344582994},{"_id":"public/images/pasted-21.png","hash":"9c5327e6759c4726dbecc9573cf7b46a373e2775","modified":1626344582994},{"_id":"public/images/pasted-20.png","hash":"6f2e47afd33443f4979cd6e15cf5284e828c61af","modified":1626344582994},{"_id":"public/images/pasted-25.png","hash":"cafeebb2bd45c21a5f5bc8a6f98069f53f96e3dd","modified":1626344582994},{"_id":"public/images/pasted-22.png","hash":"2ee31637a7339f6ed1d258bc7cb27635b31733af","modified":1626344582994},{"_id":"public/images/pasted-24.png","hash":"9a2d1d1ca8bfd168ef05a949e0eb4d7a8f4a2f44","modified":1626344582994},{"_id":"public/images/pasted-3.png","hash":"d2cca0dd1493ab1518692e571f4611db6f80d6a9","modified":1626344582994},{"_id":"public/images/pasted-34.png","hash":"dca284a4cc293aafaf44d1d46e6d2cfca2bd5c65","modified":1626344582995},{"_id":"public/images/pasted-32.png","hash":"692fe3bddd13d4c184cf89fa77194412656f6a92","modified":1626344582995},{"_id":"public/images/servlet.png","hash":"3a675a4e00e3e5032fb1042c7dea1259a488d8c2","modified":1626344582995},{"_id":"public/images/分布式锁.png","hash":"66901563cb834f8695659e86db817a90002a28bd","modified":1626344582995},{"_id":"public/images/pasted-31.png","hash":"a92c5e7ca8afa728008546d53d26bb23d014f37d","modified":1626344582995},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1626344582995},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1626344582995},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1626344582995},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1626344582995},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1626344582995},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1626344582995},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1626344582995},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1626344582995},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1626344582995},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1626344582995},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1626344582995},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1626344582995},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1626344582995},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1626344582995},{"_id":"public/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1626344582996},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1626344582996},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1626344582996},{"_id":"public/lib/JS&CSS.zip","hash":"13c4da5345bdd9ea27344ab7570f6dd4b344f050","modified":1626344582996},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1626344582996},{"_id":"public/lib/album.zip","hash":"6392f1f8a1a3d73407e20cd112b30bc1d2edab53","modified":1626344582996},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1626344582996},{"_id":"public/lib/album/assets/empty.png","hash":"eb4025983c8b24539bb70db4b9b3e8d0a092ee61","modified":1626344582996},{"_id":"public/lib/album/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1626344582996},{"_id":"public/lib/album/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1626344582996},{"_id":"public/lib/album/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1626344582996},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1626344582996},{"_id":"public/live2dw/assets/assets/mtn/idle_01.mtn","hash":"908abce18f6cf7fd4bc1486f048c25a517f4a34a","modified":1626344582996},{"_id":"public/live2dw/assets/assets/mtn/idle_02.mtn","hash":"865874c50848fbc9a55011391531e2ec171c9b91","modified":1626344582996},{"_id":"public/live2dw/assets/assets/mtn/idle_03.mtn","hash":"84684914ebf5dc5b2df160338bb97dcc0a978476","modified":1626344582996},{"_id":"public/live2dw/assets/assets/mtn/shake_02.mtn","hash":"7b6c914f6c33450eda2e53d9b638fd7045c0f683","modified":1626344582996},{"_id":"public/live2dw/assets/assets/mtn/idle_04.mtn","hash":"78e22091792abb0600f724a5dfd60371257954e8","modified":1626344582996},{"_id":"public/live2dw/assets/assets/mtn/shake_01.mtn","hash":"dffc54733127832f8f5e91aced55a83da58fa215","modified":1626344582996},{"_id":"public/live2dw/assets/assets/mtn/touch_02.mtn","hash":"4d1f099fbd18d15c598a644227ed5bf942a2ba71","modified":1626344582997},{"_id":"public/live2dw/assets/assets/mtn/touch_01.mtn","hash":"99270ea8fe1f8f5d88eadb94f36bd0810009d1e6","modified":1626344582997},{"_id":"public/live2dw/assets/assets/mtn/touch_05.mtn","hash":"9610bb8a937ba9b11445a3894d8cc0733a2b67e5","modified":1626344582997},{"_id":"public/live2dw/assets/assets/mtn/touch_04.mtn","hash":"8d2302cfdaec698e575048797ff4f30ae4d202de","modified":1626344582997},{"_id":"public/live2dw/assets/assets/mtn/touch_03.mtn","hash":"9c394975083915f0f3786caff1762381348b041e","modified":1626344582997},{"_id":"public/live2dw/assets/assets/mtn/touch_06.mtn","hash":"feb9237c73f2045ed1704c01b5362c9a54ee5a18","modified":1626344582997},{"_id":"public/live2dw/assets/assets/wanko.model.json","hash":"b98a8ce54fbcf1606a489f1bc5f26b1a18c82d79","modified":1626344582997},{"_id":"public/live2dw/assets/package.json","hash":"0747e7505d348bdc15d900fa80ade8cff2dc0c05","modified":1626344582997},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1626344582997},{"_id":"public/images/iptables2.png","hash":"5c612ee461def39206400798ba4c17f2513db1ad","modified":1626344583448},{"_id":"public/images/istio-1.png","hash":"9406318d95fc366d411be3a5b83563aca3db0a2c","modified":1626344583448},{"_id":"public/images/pasted-12.png","hash":"8f8d99cb0ad0146a5e8bb50e3d75757090959515","modified":1626344583450},{"_id":"public/images/pasted-13.png","hash":"113cb73fb83f9df4619661573bc686a94ddb39ad","modified":1626344583450},{"_id":"public/images/pasted-11.png","hash":"87534ddfdb10ecfdc24312e3b07b66a07cb18d0f","modified":1626344583450},{"_id":"public/images/pasted-26.png","hash":"e20770c093b1d98545492744141d3a14ea9b38be","modified":1626344583450},{"_id":"public/images/pasted-30.png","hash":"26b94b246b0f602c5389d8bf041176f6b33f22d7","modified":1626344583450},{"_id":"public/images/acquire-relase.png","hash":"e0422605b1cf7470a920d7a4159488d075f05469","modified":1626344583450},{"_id":"public/images/dump问题2.png","hash":"a5855e25ca2718a41d2d9b0061d83a2c3021f47d","modified":1626344583450},{"_id":"public/images/dump问题1.png","hash":"3061473794352b3d752546bb98380035adcf77e5","modified":1626344583450},{"_id":"public/images/headicon.jpg","hash":"930537dcf0c3c3b19063193dde98f4562ea1023f","modified":1626344583451},{"_id":"public/images/k8s.png","hash":"e5f10f0ea5abf432f7924029602ddeafb81f6b27","modified":1626344583451},{"_id":"public/images/pasted-16.png","hash":"11e90a23857da45db33de61c3ee9812889f87f44","modified":1626344583451},{"_id":"public/images/pasted-14.png","hash":"bac56750503668e0b55d76ef610e3dc7ed037252","modified":1626344583451},{"_id":"public/images/pasted-28.png","hash":"3fae585e504609edd7e5299216bd4274105ac0e8","modified":1626344583451},{"_id":"public/images/pasted-33.png","hash":"2be34196664323aeb03f1b22f9e3f9969ee10bf7","modified":1626344583451},{"_id":"public/images/pasted-29.png","hash":"5c8d308e529fe73b7f75e5c9c1dd5cef185ae1ea","modified":1626344583451},{"_id":"public/images/pasted-27.png","hash":"e7bb100355d63569ac559d2013d4695589aa488a","modified":1626344583452},{"_id":"public/images/pasted-7.png","hash":"1fc02632c2ffc7b09db21d45cc37cd94b64ac5cd","modified":1626344583452},{"_id":"public/images/pasted-8.png","hash":"af66b0403aff0ff457b7b50e3994e47e02b97874","modified":1626344583452},{"_id":"public/images/pasted-9.png","hash":"4bda639dcafc2d05504d56f796ee6a7dbbc4df6c","modified":1626344583452},{"_id":"public/images/pasted-6.png","hash":"b35a677216e3afbe39a09eee389056753e02d741","modified":1626344583452},{"_id":"public/images/微服务.png","hash":"79c63b41d6d258fea3666f99997e130b6db5c5de","modified":1626344583452},{"_id":"public/images/alipay.jpg","hash":"3dbc0cc352e25447d0a04b1baa09235c63de4ff3","modified":1626344583452},{"_id":"public/images/wechatpay.png","hash":"162f9bfda66e21447ce4860b6ffaa4077098fb1f","modified":1626344583453},{"_id":"public/images/wechatpay.jpg","hash":"a58df6863013ce105c122bf06d73c4ad3c65925f","modified":1626344583453},{"_id":"public/images/alipay.png","hash":"4f13366f0b93b23f76c6d9c609d211f4629b2bc7","modified":1626344583453},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1626344583453},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1626344583453},{"_id":"public/live2dw/assets/assets/moc/wanko.1024/texture_00.png","hash":"c405c1eeb82bcced7aa7a20f04a76168f60ad561","modified":1626344583453},{"_id":"public/live2dw/assets/assets/moc/wanko.moc","hash":"7b188cd4dcddfe5bdba8ec51a65cb1c21cd2e57a","modified":1626344583453},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1626344583453},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1626344583459},{"_id":"public/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1626344583459},{"_id":"public/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1626344583460},{"_id":"public/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1626344583460},{"_id":"public/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1626344583460},{"_id":"public/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1626344583460},{"_id":"public/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1626344583460},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1626344583460},{"_id":"public/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1626344583460},{"_id":"public/js/utils.js","hash":"3c987de7cfb944c33e9e527f1214724c7aafc796","modified":1626344583460},{"_id":"public/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1626344583460},{"_id":"public/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1626344583460},{"_id":"public/js/src/photoswipe-ui-default.min.js","hash":"d80b713ca1bab90f27a8af7d8e43563f0fe81860","modified":1626344583460},{"_id":"public/lib/album/ins.css","hash":"161ab35ceec43d19c9c1e5adfe17569adf701342","modified":1626344583460},{"_id":"public/lib/album/data.json","hash":"1821073e53c845169306643b24e617769b0c53e8","modified":1626344583460},{"_id":"public/lib/album/photoswipe.css","hash":"a31fa495095783ef5a84ba4dba0bd6f7de3b07ea","modified":1626344583460},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1626344583460},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1626344583460},{"_id":"public/lib/album/default-skin/default-skin.css","hash":"5763bd1a8015774f37215359bfcb5edd65d198a6","modified":1626344583461},{"_id":"public/css/main.css","hash":"2f0e356accf66a3ba3ace62f0b5074b6e11574f9","modified":1626344583461},{"_id":"public/js/src/photoswipe.min.js","hash":"791703278e7c576b08b67f18404bae9eb8cebfaf","modified":1626344583461},{"_id":"public/lib/album/ins.js","hash":"ba8dc029e6cf30c68f9d01c5f21c267d82cca686","modified":1626344583461},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1626344583461},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1626344583461},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1626344583461},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1626344583461},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1626344583461},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1626344583461},{"_id":"public/images/acquireShared-relaseShared.png","hash":"a4b481147aee1a43e11e48714aaef6c7397a21a2","modified":1626344583461},{"_id":"public/images/dump问题4.png","hash":"57e1c3bd4a6513d3c94493f70e07b493ac4052e2","modified":1626344583461},{"_id":"public/images/pasted-5.png","hash":"890b514e022b1080037fcd0d85764e5b6bb7a440","modified":1626344583461},{"_id":"public/images/pasted-4.png","hash":"6994b751082da62e5cdb6999aa7ed6d0080fcb47","modified":1626344583462},{"_id":"public/images/iptables1.png","hash":"4551f55bc15eaf0a9cdf83f2f12c26ca18b77769","modified":1626344583462},{"_id":"public/images/background2.jbg","hash":"2d16af5a2d2da958566b307fe45e3355d3ae62d2","modified":1626344583462},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1626344583462},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1626344583462},{"_id":"public/images/spring-bean生命周期2.png","hash":"8cf27eccea21090ecd2544ecd83ae9f2164b9252","modified":1626344583469},{"_id":"public/images/pasted-17.png","hash":"387724b5a08ba107a96147a526fc09ecde5b964e","modified":1626344583469},{"_id":"public/images/pasted-18.png","hash":"fac95ddccdda23e3c01bc2d6fcaf2da379583d88","modified":1626344583469},{"_id":"public/images/pasted-19.png","hash":"453da449329007985ba8d18a75092623e68c3d09","modified":1626344583469},{"_id":"public/images/pasted-2.png","hash":"b757bcad3ce18c153c0fe6c24506aff643495240","modified":1626344583469},{"_id":"public/images/pasted-23.png","hash":"116d70403015d6084eeb8070ab99c446a3fd7531","modified":1626344583473},{"_id":"public/images/dump问题3.png","hash":"351fc510e71c86fc9d726c8b0d0787e4dbb6725b","modified":1626344583477},{"_id":"public/images/一张图看懂CPU.png","hash":"4541a736da6dafee8c1a4a5e7e21d6380fcf8456","modified":1626344583491},{"_id":"public/images/background.jpg","hash":"c6433e8cfc5ca3a6564eb65bf007385106ebf221","modified":1626344583506},{"_id":"public/images/hugodemo.png","hash":"c47600860a5167f6d49b35d824edf62feccbc81d","modified":1626344583508},{"_id":"public/images/pasted-0.png","hash":"26cc0bea420fd1617165549ba7122552b3f13b4f","modified":1626344583521},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1626344583522},{"_id":"public/images/spring-bean生命周期1.png","hash":"5428cafbf348f530a5501f7e7cea5e460a496b52","modified":1626344583526}],"Category":[{"name":"生活杂谈","_id":"ckr4rkj6e000781fyhvhsq53r"},{"name":"Java","_id":"ckr4rkj6p000l81fyg5k1bjhi"},{"name":"分布式","_id":"ckr4rkj6t000t81fy5t2xp2gy"},{"name":"容器","_id":"ckr4rkj6v000z81fyw0s20xtd"},{"name":"IDEA","_id":"ckr4rkj6x001581fyiwv1tug6"},{"name":"MyBatis","_id":"ckr4rkj72001j81fylmt3l4xp"},{"name":"hugo","_id":"ckr4rkj7h002i81fyxd7iz74b"},{"name":"Linux","_id":"ckr4rkj7l002u81fygs32jfud"},{"name":"MySQL","_id":"ckr4rkj7r003881fyilsw6vh6"},{"name":"微服务","_id":"ckr4rkj84004b81fybldmiop5"},{"name":"设计模式","_id":"ckr4rkj87004l81fy41fzrslg"}],"Data":[],"Page":[{"title":"关于我","date":"2019-04-22T02:44:55.000Z","_content":"- 90后一枚程序员，2019届硕士毕业生，毕业后入职京东亦庄总部\n+ 热爱技术，对心理学有兴趣会看一些非专业的书（其实只在火车上看而已，看过高铭的几本）\n- 宅的时候喜欢逛逛A站B站排行榜和鬼畜，A站的老司机、发条张、木鱼、刘老师......B站的纪录片、TESTV、董买买、影视飓风......都是我的最爱\n+ 偶尔玩玩游戏，年纪大了对这些逐渐不感冒了，和朋友一起玩比较多，LOL的TeamWE战队粉\n- 时间多了喜欢出去玩，上学的时候去过一些地方，想去看世间所有美景，读万卷书行万里路\n+ 很多事总是以没时间为借口不了了之，所以用没时间的王先森嘲讽自己，喜欢的事就去做，想得太多最终都会一事无成\n- 欢迎各位大佬互相交流 sbsbjs@qq.com\n\n\n* 2021-01-29 准备入坑云原生，先收藏几个大佬的博客\n* [云原生实验室](https://fuckcloudnative.io/)\n* [阳明的博客](https://www.qikqiak.com/)\n* [kuboard for k8s](https://kuboard.cn/)\n","source":"about/index.md","raw":"title: 关于我\ndate: 2019-04-22 10:44:55\n---\n- 90后一枚程序员，2019届硕士毕业生，毕业后入职京东亦庄总部\n+ 热爱技术，对心理学有兴趣会看一些非专业的书（其实只在火车上看而已，看过高铭的几本）\n- 宅的时候喜欢逛逛A站B站排行榜和鬼畜，A站的老司机、发条张、木鱼、刘老师......B站的纪录片、TESTV、董买买、影视飓风......都是我的最爱\n+ 偶尔玩玩游戏，年纪大了对这些逐渐不感冒了，和朋友一起玩比较多，LOL的TeamWE战队粉\n- 时间多了喜欢出去玩，上学的时候去过一些地方，想去看世间所有美景，读万卷书行万里路\n+ 很多事总是以没时间为借口不了了之，所以用没时间的王先森嘲讽自己，喜欢的事就去做，想得太多最终都会一事无成\n- 欢迎各位大佬互相交流 sbsbjs@qq.com\n\n\n* 2021-01-29 准备入坑云原生，先收藏几个大佬的博客\n* [云原生实验室](https://fuckcloudnative.io/)\n* [阳明的博客](https://www.qikqiak.com/)\n* [kuboard for k8s](https://kuboard.cn/)\n","updated":"2021-07-13T12:27:08.596Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckr4rkj68000181fy2tmwns1p","content":"<ul>\n<li>90后一枚程序员，2019届硕士毕业生，毕业后入职京东亦庄总部</li>\n</ul>\n<ul>\n<li>热爱技术，对心理学有兴趣会看一些非专业的书（其实只在火车上看而已，看过高铭的几本）</li>\n</ul>\n<ul>\n<li>宅的时候喜欢逛逛A站B站排行榜和鬼畜，A站的老司机、发条张、木鱼、刘老师……B站的纪录片、TESTV、董买买、影视飓风……都是我的最爱</li>\n</ul>\n<ul>\n<li>偶尔玩玩游戏，年纪大了对这些逐渐不感冒了，和朋友一起玩比较多，LOL的TeamWE战队粉</li>\n</ul>\n<ul>\n<li>时间多了喜欢出去玩，上学的时候去过一些地方，想去看世间所有美景，读万卷书行万里路</li>\n</ul>\n<ul>\n<li>很多事总是以没时间为借口不了了之，所以用没时间的王先森嘲讽自己，喜欢的事就去做，想得太多最终都会一事无成</li>\n</ul>\n<ul>\n<li>欢迎各位大佬互相交流 <a href=\"mailto:sbsbjs@qq.com\" target=\"_blank\" rel=\"noopener\">sbsbjs@qq.com</a></li>\n</ul>\n<ul>\n<li>2021-01-29 准备入坑云原生，先收藏几个大佬的博客</li>\n<li><a href=\"https://fuckcloudnative.io/\" target=\"_blank\" rel=\"noopener\">云原生实验室</a></li>\n<li><a href=\"https://www.qikqiak.com/\" target=\"_blank\" rel=\"noopener\">阳明的博客</a></li>\n<li><a href=\"https://kuboard.cn/\" target=\"_blank\" rel=\"noopener\">kuboard for k8s</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>90后一枚程序员，2019届硕士毕业生，毕业后入职京东亦庄总部</li>\n</ul>\n<ul>\n<li>热爱技术，对心理学有兴趣会看一些非专业的书（其实只在火车上看而已，看过高铭的几本）</li>\n</ul>\n<ul>\n<li>宅的时候喜欢逛逛A站B站排行榜和鬼畜，A站的老司机、发条张、木鱼、刘老师……B站的纪录片、TESTV、董买买、影视飓风……都是我的最爱</li>\n</ul>\n<ul>\n<li>偶尔玩玩游戏，年纪大了对这些逐渐不感冒了，和朋友一起玩比较多，LOL的TeamWE战队粉</li>\n</ul>\n<ul>\n<li>时间多了喜欢出去玩，上学的时候去过一些地方，想去看世间所有美景，读万卷书行万里路</li>\n</ul>\n<ul>\n<li>很多事总是以没时间为借口不了了之，所以用没时间的王先森嘲讽自己，喜欢的事就去做，想得太多最终都会一事无成</li>\n</ul>\n<ul>\n<li>欢迎各位大佬互相交流 <a href=\"mailto:sbsbjs@qq.com\" target=\"_blank\" rel=\"noopener\">sbsbjs@qq.com</a></li>\n</ul>\n<ul>\n<li>2021-01-29 准备入坑云原生，先收藏几个大佬的博客</li>\n<li><a href=\"https://fuckcloudnative.io/\" target=\"_blank\" rel=\"noopener\">云原生实验室</a></li>\n<li><a href=\"https://www.qikqiak.com/\" target=\"_blank\" rel=\"noopener\">阳明的博客</a></li>\n<li><a href=\"https://kuboard.cn/\" target=\"_blank\" rel=\"noopener\">kuboard for k8s</a></li>\n</ul>\n"},{"title":"留言板","date":"2019-04-21T10:36:05.000Z","_content":"","source":"msgboard/index.md","raw":"title: 留言板\ndate: 2019-04-21 18:36:05\n---\n","updated":"2021-07-13T12:27:08.657Z","path":"msgboard/index.html","comments":1,"layout":"page","_id":"ckr4rkjc5004x81fyjaqb3e6f","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"我的相册","type":"photos","fancybox":false,"comments":1,"date":"2021-07-13T12:27:08.658Z","_content":"<link rel=\"stylesheet\" href=\"../lib/album/ins.css\">\n<link rel=\"stylesheet\" href=\"../lib/album/photoswipe.css\"> \n<link rel=\"stylesheet\" href=\"../lib/album/default-skin/default-skin.css\"> \n<div class=\"photos-btn-wrap\">\n  <a class=\"photos-btn active\" href=\"javascript:void(0)\" target=\"_blank\" rel=\"external\">相册</a>\n</div>\n<div class=\"instagram itemscope\">\n  <a href=\"http://yourbolg.com\" target=\"_blank\" class=\"open-ins\">图片正在加载中…</a>\n</div>\n \n<script>\n  (function() {\n    var loadScript = function(path) {\n      var $script = document.createElement('script')\n      document.getElementsByTagName('body')[0].appendChild($script)\n      $script.setAttribute('src', path)\n    }\n    setTimeout(function() {\n        loadScript('../lib/album/ins.js')\n    }, 0)\n  })()\n</script>","source":"photos/index.md","raw":"title: 我的相册\ntype: photos\nfancybox: false\ncomments: true\ndate: NaN-NaN-NaN NaN:NaN:NaN\n---\n<link rel=\"stylesheet\" href=\"../lib/album/ins.css\">\n<link rel=\"stylesheet\" href=\"../lib/album/photoswipe.css\"> \n<link rel=\"stylesheet\" href=\"../lib/album/default-skin/default-skin.css\"> \n<div class=\"photos-btn-wrap\">\n  <a class=\"photos-btn active\" href=\"javascript:void(0)\" target=\"_blank\" rel=\"external\">相册</a>\n</div>\n<div class=\"instagram itemscope\">\n  <a href=\"http://yourbolg.com\" target=\"_blank\" class=\"open-ins\">图片正在加载中…</a>\n</div>\n \n<script>\n  (function() {\n    var loadScript = function(path) {\n      var $script = document.createElement('script')\n      document.getElementsByTagName('body')[0].appendChild($script)\n      $script.setAttribute('src', path)\n    }\n    setTimeout(function() {\n        loadScript('../lib/album/ins.js')\n    }, 0)\n  })()\n</script>","updated":"2021-07-13T12:27:08.658Z","path":"photos/index.html","layout":"page","_id":"ckr4rkjc6004y81fy11wxahot","content":"<p><link rel=\"stylesheet\" href=\"../lib/album/ins.css\"></p>\n<p><link rel=\"stylesheet\" href=\"../lib/album/photoswipe.css\"> </p>\n<p><link rel=\"stylesheet\" href=\"../lib/album/default-skin/default-skin.css\"> </p>\n<div class=\"photos-btn-wrap\"><br>  <a class=\"photos-btn active\" href=\"javascript:void(0)\" target=\"_blank\" rel=\"external\">相册</a><br></div><br><div class=\"instagram itemscope\"><br>  <a href=\"http://yourbolg.com\" target=\"_blank\" class=\"open-ins\">图片正在加载中…</a><br></div>\n\n<script>\n  (function() {\n    var loadScript = function(path) {\n      var $script = document.createElement('script')\n      document.getElementsByTagName('body')[0].appendChild($script)\n      $script.setAttribute('src', path)\n    }\n    setTimeout(function() {\n        loadScript('../lib/album/ins.js')\n    }, 0)\n  })()\n</script>","site":{"data":{}},"excerpt":"","more":"<p><link rel=\"stylesheet\" href=\"../lib/album/ins.css\"></p>\n<p><link rel=\"stylesheet\" href=\"../lib/album/photoswipe.css\"> </p>\n<p><link rel=\"stylesheet\" href=\"../lib/album/default-skin/default-skin.css\"> </p>\n<div class=\"photos-btn-wrap\"><br>  <a class=\"photos-btn active\" href=\"javascript:void(0)\" target=\"_blank\" rel=\"external\">相册</a><br></div><br><div class=\"instagram itemscope\"><br>  <a href=\"http://yourbolg.com\" target=\"_blank\" class=\"open-ins\">图片正在加载中…</a><br></div>\n\n<script>\n  (function() {\n    var loadScript = function(path) {\n      var $script = document.createElement('script')\n      document.getElementsByTagName('body')[0].appendChild($script)\n      $script.setAttribute('src', path)\n    }\n    setTimeout(function() {\n        loadScript('../lib/album/ins.js')\n    }, 0)\n  })()\n</script>"},{"title":"标签","type":"tags","comments":0,"date":"2019-04-21T07:44:59.000Z","_content":"","source":"tags/index.md","raw":"title: 标签\ntype: tags\ncomments: false\ndate: 2019-04-21 15:44:59\n---\n","updated":"2021-07-13T12:27:08.658Z","path":"tags/index.html","layout":"page","_id":"ckr4rkjc8004z81fyu188vh0x","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"目录结构","author":"YyWang","_content":"","source":"_drafts/目录结构.md","raw":"---\ntitle: 目录结构\nauthor: YyWang\ntags:\n---\n","slug":"目录结构","published":0,"date":"2021-07-13T12:27:08.578Z","updated":"2021-07-13T12:27:08.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj64000081fyljj77ju9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"SpringMVC+Veloctiy 入门","author":"YyWang","date":"2019-07-23T01:42:30.000Z","_content":"### Velocity\n+ 项目中用到了，快速入门一下jsp相同是基于Java的模板引擎\n\n### 与SpringMVC整合\n### Velocity语法","source":"_drafts/SpringMVC-Veloctiy-入门.md","raw":"title: SpringMVC+Veloctiy 入门\nauthor: YyWang\ndate: 2019-07-23 09:42:30\ntags:\n---\n### Velocity\n+ 项目中用到了，快速入门一下jsp相同是基于Java的模板引擎\n\n### 与SpringMVC整合\n### Velocity语法","slug":"SpringMVC-Veloctiy-入门","published":0,"updated":"2021-07-13T12:27:08.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj68000281fyozucfeoj","content":"<h3 id=\"Velocity\"><a href=\"#Velocity\" class=\"headerlink\" title=\"Velocity\"></a>Velocity</h3><ul>\n<li>项目中用到了，快速入门一下jsp相同是基于Java的模板引擎</li>\n</ul>\n<h3 id=\"与SpringMVC整合\"><a href=\"#与SpringMVC整合\" class=\"headerlink\" title=\"与SpringMVC整合\"></a>与SpringMVC整合</h3><h3 id=\"Velocity语法\"><a href=\"#Velocity语法\" class=\"headerlink\" title=\"Velocity语法\"></a>Velocity语法</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Velocity\"><a href=\"#Velocity\" class=\"headerlink\" title=\"Velocity\"></a>Velocity</h3><ul>\n<li>项目中用到了，快速入门一下jsp相同是基于Java的模板引擎</li>\n</ul>\n<h3 id=\"与SpringMVC整合\"><a href=\"#与SpringMVC整合\" class=\"headerlink\" title=\"与SpringMVC整合\"></a>与SpringMVC整合</h3><h3 id=\"Velocity语法\"><a href=\"#Velocity语法\" class=\"headerlink\" title=\"Velocity语法\"></a>Velocity语法</h3>"},{"title":"未做的工作","author":"YyWang","date":"2019-05-12T04:48:46.000Z","_content":"- 参考这个人的 https://malizhi.cn/\n\n- https://timding.top/2017/09/18/Hexo-NexT-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%86%8C-%E4%B8%80/\n- 相册 ~~https://me.idealli.com/post/73ad4183.html~~ https://www.jianshu.com/p/8b5ace009307   ~~顺序混乱bug~~\n- 视频选项卡 有思路 https://www.jianshu.com/p/26a7fc7cc185\n- ~~文章的分享（等待sharesdk认证后测试）https://segmentfault.com/a/1190000009254884~~ 最后选择用了百度分享\n- 标签云（待测试） http://www.aomanhao.top/2019/04/20/hexo_Tag_cloud/\n- ~~百度收录自己的文章 https://www.jianshu.com/p/1ff2fcbdd155~~\n+ 整理博客的配置过程\n\n\n+ 待整理\n+ Python3安装 https://www.cnblogs.com/JahanGu/p/7452527.html\n\n\njava8 https://www.cnblogs.com/webor2006/category/1093021.html","source":"_drafts/未做的工作.md","raw":"title: 未做的工作\nauthor: YyWang\ndate: 2019-05-12 12:48:46\ntags:\n---\n- 参考这个人的 https://malizhi.cn/\n\n- https://timding.top/2017/09/18/Hexo-NexT-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%86%8C-%E4%B8%80/\n- 相册 ~~https://me.idealli.com/post/73ad4183.html~~ https://www.jianshu.com/p/8b5ace009307   ~~顺序混乱bug~~\n- 视频选项卡 有思路 https://www.jianshu.com/p/26a7fc7cc185\n- ~~文章的分享（等待sharesdk认证后测试）https://segmentfault.com/a/1190000009254884~~ 最后选择用了百度分享\n- 标签云（待测试） http://www.aomanhao.top/2019/04/20/hexo_Tag_cloud/\n- ~~百度收录自己的文章 https://www.jianshu.com/p/1ff2fcbdd155~~\n+ 整理博客的配置过程\n\n\n+ 待整理\n+ Python3安装 https://www.cnblogs.com/JahanGu/p/7452527.html\n\n\njava8 https://www.cnblogs.com/webor2006/category/1093021.html","slug":"未做的工作","published":0,"updated":"2021-07-13T12:27:08.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj6a000381fyi9as1tux","content":"<ul>\n<li><p>参考这个人的 <a href=\"https://malizhi.cn/\" target=\"_blank\" rel=\"noopener\">https://malizhi.cn/</a></p>\n</li>\n<li><p><a href=\"https://timding.top/2017/09/18/Hexo-NexT-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%86%8C-%E4%B8%80/\" target=\"_blank\" rel=\"noopener\">https://timding.top/2017/09/18/Hexo-NexT-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%86%8C-%E4%B8%80/</a></p>\n</li>\n<li>相册 <del><a href=\"https://me.idealli.com/post/73ad4183.html\" target=\"_blank\" rel=\"noopener\">https://me.idealli.com/post/73ad4183.html</a></del> <a href=\"https://www.jianshu.com/p/8b5ace009307\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/8b5ace009307</a>   <del>顺序混乱bug</del></li>\n<li>视频选项卡 有思路 <a href=\"https://www.jianshu.com/p/26a7fc7cc185\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/26a7fc7cc185</a></li>\n<li><del>文章的分享（等待sharesdk认证后测试）<a href=\"https://segmentfault.com/a/1190000009254884\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000009254884</a></del> 最后选择用了百度分享</li>\n<li>标签云（待测试） <a href=\"http://www.aomanhao.top/2019/04/20/hexo_Tag_cloud/\" target=\"_blank\" rel=\"noopener\">http://www.aomanhao.top/2019/04/20/hexo_Tag_cloud/</a></li>\n<li><del>百度收录自己的文章 <a href=\"https://www.jianshu.com/p/1ff2fcbdd155\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/1ff2fcbdd155</a></del></li>\n</ul>\n<ul>\n<li>整理博客的配置过程</li>\n</ul>\n<ul>\n<li>待整理</li>\n<li>Python3安装 <a href=\"https://www.cnblogs.com/JahanGu/p/7452527.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/JahanGu/p/7452527.html</a></li>\n</ul>\n<p>java8 <a href=\"https://www.cnblogs.com/webor2006/category/1093021.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/webor2006/category/1093021.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>参考这个人的 <a href=\"https://malizhi.cn/\" target=\"_blank\" rel=\"noopener\">https://malizhi.cn/</a></p>\n</li>\n<li><p><a href=\"https://timding.top/2017/09/18/Hexo-NexT-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%86%8C-%E4%B8%80/\" target=\"_blank\" rel=\"noopener\">https://timding.top/2017/09/18/Hexo-NexT-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%86%8C-%E4%B8%80/</a></p>\n</li>\n<li>相册 <del><a href=\"https://me.idealli.com/post/73ad4183.html\" target=\"_blank\" rel=\"noopener\">https://me.idealli.com/post/73ad4183.html</a></del> <a href=\"https://www.jianshu.com/p/8b5ace009307\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/8b5ace009307</a>   <del>顺序混乱bug</del></li>\n<li>视频选项卡 有思路 <a href=\"https://www.jianshu.com/p/26a7fc7cc185\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/26a7fc7cc185</a></li>\n<li><del>文章的分享（等待sharesdk认证后测试）<a href=\"https://segmentfault.com/a/1190000009254884\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000009254884</a></del> 最后选择用了百度分享</li>\n<li>标签云（待测试） <a href=\"http://www.aomanhao.top/2019/04/20/hexo_Tag_cloud/\" target=\"_blank\" rel=\"noopener\">http://www.aomanhao.top/2019/04/20/hexo_Tag_cloud/</a></li>\n<li><del>百度收录自己的文章 <a href=\"https://www.jianshu.com/p/1ff2fcbdd155\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/1ff2fcbdd155</a></del></li>\n</ul>\n<ul>\n<li>整理博客的配置过程</li>\n</ul>\n<ul>\n<li>待整理</li>\n<li>Python3安装 <a href=\"https://www.cnblogs.com/JahanGu/p/7452527.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/JahanGu/p/7452527.html</a></li>\n</ul>\n<p>java8 <a href=\"https://www.cnblogs.com/webor2006/category/1093021.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/webor2006/category/1093021.html</a></p>\n"},{"title":"Spring自定义标签","author":"YyWang","date":"2019-07-16T08:42:12.000Z","_content":"Spring自定义标签主要分两步\n+ 编写xsd文件，xml的约束规则\n+ 将xsd文件在xml中引入到名称空间中\n\n\n#### xsd约束\n##### 元素 element\n###### 简单元素\n+ 类型是一般类型的元素(xsd:string、xsd:decimal、xsd:integer、xsd:boolean、xsd:date、xs:time)\n\n+ eg: \n```\n<xsd:element name=\"yywang\" type=\"xsd:string\"></xsd:element>```\n对应的xml应该为：\n```\n<yywang>test</yywang>```\n\n###### 复杂元素\n+ 与简单元素相对，类型不是一般的类型，可能是包含其他元素，此时除了指定类型外还需要指定类型的约束\n+ eg:\n```\n<xsd:element name=\"yywang\" type=\"yywangType\">\n\t<xsd:complexType>\n     <xsd:attribute name=\"id\" type=\"xsd:IDREF\" use=\"required\"></xsd:attribute>\n     <xsd:attribute name=\"address\" type=\"xsd:string\" default=\"string\"></xsd:attribute>\n     <xsd:attribute name=\"age\" type=\"xsd:integer\" use=\"optional\"></xsd:attribute>\n   </xsd:complexType>\n</xsd:element>```\n对应的xml为：\n```\n<yywang id=\"yywang1\" address=\"xxxx\" age=20></yywang>```\n\n\n\n\n\n\n+ xsd文件中的注释\n\t```\n    <xsd:annotation>\n    \t<xsd:documentation><![CDATA[ 这里是注释的内容 ]]></xsd:documentation>\n    </xsd:annotation>```","source":"_drafts/Spring自定义标签.md","raw":"title: Spring自定义标签\nauthor: YyWang\ndate: 2019-07-16 16:42:12\ntags:\n---\nSpring自定义标签主要分两步\n+ 编写xsd文件，xml的约束规则\n+ 将xsd文件在xml中引入到名称空间中\n\n\n#### xsd约束\n##### 元素 element\n###### 简单元素\n+ 类型是一般类型的元素(xsd:string、xsd:decimal、xsd:integer、xsd:boolean、xsd:date、xs:time)\n\n+ eg: \n```\n<xsd:element name=\"yywang\" type=\"xsd:string\"></xsd:element>```\n对应的xml应该为：\n```\n<yywang>test</yywang>```\n\n###### 复杂元素\n+ 与简单元素相对，类型不是一般的类型，可能是包含其他元素，此时除了指定类型外还需要指定类型的约束\n+ eg:\n```\n<xsd:element name=\"yywang\" type=\"yywangType\">\n\t<xsd:complexType>\n     <xsd:attribute name=\"id\" type=\"xsd:IDREF\" use=\"required\"></xsd:attribute>\n     <xsd:attribute name=\"address\" type=\"xsd:string\" default=\"string\"></xsd:attribute>\n     <xsd:attribute name=\"age\" type=\"xsd:integer\" use=\"optional\"></xsd:attribute>\n   </xsd:complexType>\n</xsd:element>```\n对应的xml为：\n```\n<yywang id=\"yywang1\" address=\"xxxx\" age=20></yywang>```\n\n\n\n\n\n\n+ xsd文件中的注释\n\t```\n    <xsd:annotation>\n    \t<xsd:documentation><![CDATA[ 这里是注释的内容 ]]></xsd:documentation>\n    </xsd:annotation>```","slug":"Spring自定义标签","published":0,"updated":"2021-07-13T12:27:08.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj6b000481fyfr7ga976","content":"<p>Spring自定义标签主要分两步</p>\n<ul>\n<li>编写xsd文件，xml的约束规则</li>\n<li>将xsd文件在xml中引入到名称空间中</li>\n</ul>\n<h4 id=\"xsd约束\"><a href=\"#xsd约束\" class=\"headerlink\" title=\"xsd约束\"></a>xsd约束</h4><h5 id=\"元素-element\"><a href=\"#元素-element\" class=\"headerlink\" title=\"元素 element\"></a>元素 element</h5><h6 id=\"简单元素\"><a href=\"#简单元素\" class=\"headerlink\" title=\"简单元素\"></a>简单元素</h6><ul>\n<li><p>类型是一般类型的元素(xsd:string、xsd:decimal、xsd:integer、xsd:boolean、xsd:date、xs:time)</p>\n</li>\n<li><p>eg: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;xsd:element name=&quot;yywang&quot; type=&quot;xsd:string&quot;&gt;&lt;/xsd:element&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>对应的xml应该为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;yywang&gt;test&lt;/yywang&gt;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"复杂元素\"><a href=\"#复杂元素\" class=\"headerlink\" title=\"复杂元素\"></a>复杂元素</h6><ul>\n<li>与简单元素相对，类型不是一般的类型，可能是包含其他元素，此时除了指定类型外还需要指定类型的约束</li>\n<li>eg:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;xsd:element name=&quot;yywang&quot; type=&quot;yywangType&quot;&gt;</span><br><span class=\"line\">\t&lt;xsd:complexType&gt;</span><br><span class=\"line\">     &lt;xsd:attribute name=&quot;id&quot; type=&quot;xsd:IDREF&quot; use=&quot;required&quot;&gt;&lt;/xsd:attribute&gt;</span><br><span class=\"line\">     &lt;xsd:attribute name=&quot;address&quot; type=&quot;xsd:string&quot; default=&quot;string&quot;&gt;&lt;/xsd:attribute&gt;</span><br><span class=\"line\">     &lt;xsd:attribute name=&quot;age&quot; type=&quot;xsd:integer&quot; use=&quot;optional&quot;&gt;&lt;/xsd:attribute&gt;</span><br><span class=\"line\">   &lt;/xsd:complexType&gt;</span><br><span class=\"line\">&lt;/xsd:element&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>对应的xml为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;yywang id=&quot;yywang1&quot; address=&quot;xxxx&quot; age=20&gt;&lt;/yywang&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>xsd文件中的注释  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;xsd:annotation&gt;</span><br><span class=\"line\">    \t&lt;xsd:documentation&gt;&lt;![CDATA[ 这里是注释的内容 ]]&gt;&lt;/xsd:documentation&gt;</span><br><span class=\"line\">&lt;/xsd:annotation&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Spring自定义标签主要分两步</p>\n<ul>\n<li>编写xsd文件，xml的约束规则</li>\n<li>将xsd文件在xml中引入到名称空间中</li>\n</ul>\n<h4 id=\"xsd约束\"><a href=\"#xsd约束\" class=\"headerlink\" title=\"xsd约束\"></a>xsd约束</h4><h5 id=\"元素-element\"><a href=\"#元素-element\" class=\"headerlink\" title=\"元素 element\"></a>元素 element</h5><h6 id=\"简单元素\"><a href=\"#简单元素\" class=\"headerlink\" title=\"简单元素\"></a>简单元素</h6><ul>\n<li><p>类型是一般类型的元素(xsd:string、xsd:decimal、xsd:integer、xsd:boolean、xsd:date、xs:time)</p>\n</li>\n<li><p>eg: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;xsd:element name=&quot;yywang&quot; type=&quot;xsd:string&quot;&gt;&lt;/xsd:element&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>对应的xml应该为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;yywang&gt;test&lt;/yywang&gt;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"复杂元素\"><a href=\"#复杂元素\" class=\"headerlink\" title=\"复杂元素\"></a>复杂元素</h6><ul>\n<li>与简单元素相对，类型不是一般的类型，可能是包含其他元素，此时除了指定类型外还需要指定类型的约束</li>\n<li>eg:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;xsd:element name=&quot;yywang&quot; type=&quot;yywangType&quot;&gt;</span><br><span class=\"line\">\t&lt;xsd:complexType&gt;</span><br><span class=\"line\">     &lt;xsd:attribute name=&quot;id&quot; type=&quot;xsd:IDREF&quot; use=&quot;required&quot;&gt;&lt;/xsd:attribute&gt;</span><br><span class=\"line\">     &lt;xsd:attribute name=&quot;address&quot; type=&quot;xsd:string&quot; default=&quot;string&quot;&gt;&lt;/xsd:attribute&gt;</span><br><span class=\"line\">     &lt;xsd:attribute name=&quot;age&quot; type=&quot;xsd:integer&quot; use=&quot;optional&quot;&gt;&lt;/xsd:attribute&gt;</span><br><span class=\"line\">   &lt;/xsd:complexType&gt;</span><br><span class=\"line\">&lt;/xsd:element&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>对应的xml为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;yywang id=&quot;yywang1&quot; address=&quot;xxxx&quot; age=20&gt;&lt;/yywang&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>xsd文件中的注释  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;xsd:annotation&gt;</span><br><span class=\"line\">    \t&lt;xsd:documentation&gt;&lt;![CDATA[ 这里是注释的内容 ]]&gt;&lt;/xsd:documentation&gt;</span><br><span class=\"line\">&lt;/xsd:annotation&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"2019年终总结（新的开始）","author":"YyWang","date":"2019-12-31T12:39:27.000Z","_content":"光阴似箭岁月如梭，时光如水生命如歌，转眼间2019年到了最后的时刻，这一年对我来说是不平凡的，来盘点一下自己这一年都做了什么，主要有两件大事，一个是研究生毕业，一个是入职，上半年忙着毕业，下半年忙着上班。接下来进入回忆\n\n#### 博客\n\n* 上半年基本一心扑在毕业的事情上，在等发毕业证的时间比较无聊，游戏已经打吐了，随后和马哥（实验室同门）一起租了服务器搭了博客，我选了Next，他选了另一个主题，我们俩就各自开始装修，再后来我弄好了相册功能，奈何他的主题相册的资料很少，所以这个不要脸的就复制了我的主题，博客搭好了之后也更新什么，打算工作后再说\n\n#### EOS\n\n* 这个EOS入坑也是马哥带的，记得是18年第二季度忘了是哪个月，比特币大涨在马哥的蛊惑下研究了一番当时EOS很火，是第三代区块链技术吹得特别的牛，没忍住入坑，￥58左右入坑，后面涨到了￥158，心态开始膨胀，当时的舆论也是一片看好，能够复现比特币的辉煌，随后我记得是马老师的一句话，对就是提前退休的那个马老师，大概意思是区块链是个好东西，比特币不是，接着开始大跌到底已经￥20左右，就被套了，就当交学费了。今年也是第二季度忘了哪个月EOS回涨了，到￥53想都没想马上脱坑，及时止损\n* 不经历一下真的很难感受到人的欲望是无限的，当时在最高点的心态现在想想都后怕，还好及时止损了没亏多少，但也买了教训，期间看到各种人梭哈，想着翻盘不顾一切的那种，最后被套就很恐怖，和赌博很像，经历过就深有体会，关爱生命远离币圈，哈哈\n\n#### 西北大环线\n\n* 拿着EOS脱坑的钱我换了一身行头，和同学去了西北大环线，青海湖，大柴旦，翡翠湖，最美公路，魔鬼城，莫高窟，丹霞，祁连大草原这些地方（都忘的差不多了，看微博想起来的），感受了祖国的大好河山\n* 我的梦想就是能够和另一半读万卷书，行万里路，看遍天下的奇闻异事，这次是4个同学一起还都是男的，也算完成了一点点梦想吧\n\n#### 毕业\n\n* 研究生阶段让我收获最大的是鱼人沟通和思考问题的方式，从开始的愣头青变成了会思考的愣头青；简单总结一下研究生的生活吧，心态从抱怨->无望->庆幸，抱怨开始工作学习太多被压着喘不过气，无望是看不到自己毕业的希望以出路->庆幸自己能够到这个实验室遇见最好的各位，也正是和优秀的各位一起学习和努力，顺利毕业，找到满意的工作，也有了新的规划\n* 毕业前我还玩了一个月的尤克里里，会了几个和弦，能弹两个简单的曲子不过现在忘了，还有个小插曲马哥分手了，给我打电话嚎啕大哭，7年的感情说没就没，周哥说就像满级的号被盗了一样，我瞬间感受到了马哥的痛苦，哈哈；按照实验室的传统，毕业三顿饭，吃一顿少一顿，今年由于不可抗力因素变成两顿，最后一顿也是玩的非常开心，也说了我一直想说的话，即使没有结果，起码没留遗憾，之后我便回家呆了几天就去入职了\n\n#### 入职\n\n* 入职前，我一直关注脉脉，都是职场环境不好的言论，各种甩锅，扯皮，明争暗斗，看的我十分害怕，给自己定的基调就是多听多看少说话，保证不出错，进了这个部门非常和谐，所有人都很nice，我的问题所有都会被解答，非常庆幸能够加入这个团队\n* 到现在入职已有半年了，有过几次培训认识了很多人，发现身边大多都是97年以后的，很多活动自己已经提不起兴趣了，而他们还激情满满，暗暗感叹自己心态老了,中秋节是个转折点我有了新的收获\n* 技术上自己成长了很多，这段时间刷新了对很多知识的理解，遇到的所有知识点都写下来，到现在为止已经写了26篇博客，目前来看都是偏应用和概念性的，大多都是扫盲，之前没有接触过这些东西，只能先了解一个大概，到后期再细细钻研\n\n总结我的2019---->有自己的小确幸\n\t\t\t\n2020年继续加油，目标（暂时这么些吧，刚毕业还是积累为主）\n\n* 每月平均两篇博客的更新\n* 把19年欠下的博客补上：spring/spring boot、WAL、设计模式 netty \n* 把部门核心业务吃透，核心产品源码看完，最好能开始学习下一代微服务学习\n* 一次5天以上旅行\n\n奥利给~~~~~~\n","source":"_posts/2019年终总结（新的开始）.md","raw":"title: 2019年终总结（新的开始）\nauthor: YyWang\ndate: 2019-12-31 20:39:27\ntags: 生活杂谈\ncategories: 生活杂谈\n---\n光阴似箭岁月如梭，时光如水生命如歌，转眼间2019年到了最后的时刻，这一年对我来说是不平凡的，来盘点一下自己这一年都做了什么，主要有两件大事，一个是研究生毕业，一个是入职，上半年忙着毕业，下半年忙着上班。接下来进入回忆\n\n#### 博客\n\n* 上半年基本一心扑在毕业的事情上，在等发毕业证的时间比较无聊，游戏已经打吐了，随后和马哥（实验室同门）一起租了服务器搭了博客，我选了Next，他选了另一个主题，我们俩就各自开始装修，再后来我弄好了相册功能，奈何他的主题相册的资料很少，所以这个不要脸的就复制了我的主题，博客搭好了之后也更新什么，打算工作后再说\n\n#### EOS\n\n* 这个EOS入坑也是马哥带的，记得是18年第二季度忘了是哪个月，比特币大涨在马哥的蛊惑下研究了一番当时EOS很火，是第三代区块链技术吹得特别的牛，没忍住入坑，￥58左右入坑，后面涨到了￥158，心态开始膨胀，当时的舆论也是一片看好，能够复现比特币的辉煌，随后我记得是马老师的一句话，对就是提前退休的那个马老师，大概意思是区块链是个好东西，比特币不是，接着开始大跌到底已经￥20左右，就被套了，就当交学费了。今年也是第二季度忘了哪个月EOS回涨了，到￥53想都没想马上脱坑，及时止损\n* 不经历一下真的很难感受到人的欲望是无限的，当时在最高点的心态现在想想都后怕，还好及时止损了没亏多少，但也买了教训，期间看到各种人梭哈，想着翻盘不顾一切的那种，最后被套就很恐怖，和赌博很像，经历过就深有体会，关爱生命远离币圈，哈哈\n\n#### 西北大环线\n\n* 拿着EOS脱坑的钱我换了一身行头，和同学去了西北大环线，青海湖，大柴旦，翡翠湖，最美公路，魔鬼城，莫高窟，丹霞，祁连大草原这些地方（都忘的差不多了，看微博想起来的），感受了祖国的大好河山\n* 我的梦想就是能够和另一半读万卷书，行万里路，看遍天下的奇闻异事，这次是4个同学一起还都是男的，也算完成了一点点梦想吧\n\n#### 毕业\n\n* 研究生阶段让我收获最大的是鱼人沟通和思考问题的方式，从开始的愣头青变成了会思考的愣头青；简单总结一下研究生的生活吧，心态从抱怨->无望->庆幸，抱怨开始工作学习太多被压着喘不过气，无望是看不到自己毕业的希望以出路->庆幸自己能够到这个实验室遇见最好的各位，也正是和优秀的各位一起学习和努力，顺利毕业，找到满意的工作，也有了新的规划\n* 毕业前我还玩了一个月的尤克里里，会了几个和弦，能弹两个简单的曲子不过现在忘了，还有个小插曲马哥分手了，给我打电话嚎啕大哭，7年的感情说没就没，周哥说就像满级的号被盗了一样，我瞬间感受到了马哥的痛苦，哈哈；按照实验室的传统，毕业三顿饭，吃一顿少一顿，今年由于不可抗力因素变成两顿，最后一顿也是玩的非常开心，也说了我一直想说的话，即使没有结果，起码没留遗憾，之后我便回家呆了几天就去入职了\n\n#### 入职\n\n* 入职前，我一直关注脉脉，都是职场环境不好的言论，各种甩锅，扯皮，明争暗斗，看的我十分害怕，给自己定的基调就是多听多看少说话，保证不出错，进了这个部门非常和谐，所有人都很nice，我的问题所有都会被解答，非常庆幸能够加入这个团队\n* 到现在入职已有半年了，有过几次培训认识了很多人，发现身边大多都是97年以后的，很多活动自己已经提不起兴趣了，而他们还激情满满，暗暗感叹自己心态老了,中秋节是个转折点我有了新的收获\n* 技术上自己成长了很多，这段时间刷新了对很多知识的理解，遇到的所有知识点都写下来，到现在为止已经写了26篇博客，目前来看都是偏应用和概念性的，大多都是扫盲，之前没有接触过这些东西，只能先了解一个大概，到后期再细细钻研\n\n总结我的2019---->有自己的小确幸\n\t\t\t\n2020年继续加油，目标（暂时这么些吧，刚毕业还是积累为主）\n\n* 每月平均两篇博客的更新\n* 把19年欠下的博客补上：spring/spring boot、WAL、设计模式 netty \n* 把部门核心业务吃透，核心产品源码看完，最好能开始学习下一代微服务学习\n* 一次5天以上旅行\n\n奥利给~~~~~~\n","slug":"2019年终总结（新的开始）","published":1,"updated":"2021-07-13T12:27:08.579Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj6c000581fyrdp8ufip","content":"<p>光阴似箭岁月如梭，时光如水生命如歌，转眼间2019年到了最后的时刻，这一年对我来说是不平凡的，来盘点一下自己这一年都做了什么，主要有两件大事，一个是研究生毕业，一个是入职，上半年忙着毕业，下半年忙着上班。接下来进入回忆</p>\n<h4 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h4><ul>\n<li>上半年基本一心扑在毕业的事情上，在等发毕业证的时间比较无聊，游戏已经打吐了，随后和马哥（实验室同门）一起租了服务器搭了博客，我选了Next，他选了另一个主题，我们俩就各自开始装修，再后来我弄好了相册功能，奈何他的主题相册的资料很少，所以这个不要脸的就复制了我的主题，博客搭好了之后也更新什么，打算工作后再说</li>\n</ul>\n<h4 id=\"EOS\"><a href=\"#EOS\" class=\"headerlink\" title=\"EOS\"></a>EOS</h4><ul>\n<li>这个EOS入坑也是马哥带的，记得是18年第二季度忘了是哪个月，比特币大涨在马哥的蛊惑下研究了一番当时EOS很火，是第三代区块链技术吹得特别的牛，没忍住入坑，￥58左右入坑，后面涨到了￥158，心态开始膨胀，当时的舆论也是一片看好，能够复现比特币的辉煌，随后我记得是马老师的一句话，对就是提前退休的那个马老师，大概意思是区块链是个好东西，比特币不是，接着开始大跌到底已经￥20左右，就被套了，就当交学费了。今年也是第二季度忘了哪个月EOS回涨了，到￥53想都没想马上脱坑，及时止损</li>\n<li>不经历一下真的很难感受到人的欲望是无限的，当时在最高点的心态现在想想都后怕，还好及时止损了没亏多少，但也买了教训，期间看到各种人梭哈，想着翻盘不顾一切的那种，最后被套就很恐怖，和赌博很像，经历过就深有体会，关爱生命远离币圈，哈哈</li>\n</ul>\n<h4 id=\"西北大环线\"><a href=\"#西北大环线\" class=\"headerlink\" title=\"西北大环线\"></a>西北大环线</h4><ul>\n<li>拿着EOS脱坑的钱我换了一身行头，和同学去了西北大环线，青海湖，大柴旦，翡翠湖，最美公路，魔鬼城，莫高窟，丹霞，祁连大草原这些地方（都忘的差不多了，看微博想起来的），感受了祖国的大好河山</li>\n<li>我的梦想就是能够和另一半读万卷书，行万里路，看遍天下的奇闻异事，这次是4个同学一起还都是男的，也算完成了一点点梦想吧</li>\n</ul>\n<h4 id=\"毕业\"><a href=\"#毕业\" class=\"headerlink\" title=\"毕业\"></a>毕业</h4><ul>\n<li>研究生阶段让我收获最大的是鱼人沟通和思考问题的方式，从开始的愣头青变成了会思考的愣头青；简单总结一下研究生的生活吧，心态从抱怨-&gt;无望-&gt;庆幸，抱怨开始工作学习太多被压着喘不过气，无望是看不到自己毕业的希望以出路-&gt;庆幸自己能够到这个实验室遇见最好的各位，也正是和优秀的各位一起学习和努力，顺利毕业，找到满意的工作，也有了新的规划</li>\n<li>毕业前我还玩了一个月的尤克里里，会了几个和弦，能弹两个简单的曲子不过现在忘了，还有个小插曲马哥分手了，给我打电话嚎啕大哭，7年的感情说没就没，周哥说就像满级的号被盗了一样，我瞬间感受到了马哥的痛苦，哈哈；按照实验室的传统，毕业三顿饭，吃一顿少一顿，今年由于不可抗力因素变成两顿，最后一顿也是玩的非常开心，也说了我一直想说的话，即使没有结果，起码没留遗憾，之后我便回家呆了几天就去入职了</li>\n</ul>\n<h4 id=\"入职\"><a href=\"#入职\" class=\"headerlink\" title=\"入职\"></a>入职</h4><ul>\n<li>入职前，我一直关注脉脉，都是职场环境不好的言论，各种甩锅，扯皮，明争暗斗，看的我十分害怕，给自己定的基调就是多听多看少说话，保证不出错，进了这个部门非常和谐，所有人都很nice，我的问题所有都会被解答，非常庆幸能够加入这个团队</li>\n<li>到现在入职已有半年了，有过几次培训认识了很多人，发现身边大多都是97年以后的，很多活动自己已经提不起兴趣了，而他们还激情满满，暗暗感叹自己心态老了,中秋节是个转折点我有了新的收获</li>\n<li>技术上自己成长了很多，这段时间刷新了对很多知识的理解，遇到的所有知识点都写下来，到现在为止已经写了26篇博客，目前来看都是偏应用和概念性的，大多都是扫盲，之前没有接触过这些东西，只能先了解一个大概，到后期再细细钻研</li>\n</ul>\n<p>总结我的2019—-&gt;有自己的小确幸</p>\n<p>2020年继续加油，目标（暂时这么些吧，刚毕业还是积累为主）</p>\n<ul>\n<li>每月平均两篇博客的更新</li>\n<li>把19年欠下的博客补上：spring/spring boot、WAL、设计模式 netty </li>\n<li>把部门核心业务吃透，核心产品源码看完，最好能开始学习下一代微服务学习</li>\n<li>一次5天以上旅行</li>\n</ul>\n<p>奥利给<del>~</del>~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>光阴似箭岁月如梭，时光如水生命如歌，转眼间2019年到了最后的时刻，这一年对我来说是不平凡的，来盘点一下自己这一年都做了什么，主要有两件大事，一个是研究生毕业，一个是入职，上半年忙着毕业，下半年忙着上班。接下来进入回忆</p>\n<h4 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h4><ul>\n<li>上半年基本一心扑在毕业的事情上，在等发毕业证的时间比较无聊，游戏已经打吐了，随后和马哥（实验室同门）一起租了服务器搭了博客，我选了Next，他选了另一个主题，我们俩就各自开始装修，再后来我弄好了相册功能，奈何他的主题相册的资料很少，所以这个不要脸的就复制了我的主题，博客搭好了之后也更新什么，打算工作后再说</li>\n</ul>\n<h4 id=\"EOS\"><a href=\"#EOS\" class=\"headerlink\" title=\"EOS\"></a>EOS</h4><ul>\n<li>这个EOS入坑也是马哥带的，记得是18年第二季度忘了是哪个月，比特币大涨在马哥的蛊惑下研究了一番当时EOS很火，是第三代区块链技术吹得特别的牛，没忍住入坑，￥58左右入坑，后面涨到了￥158，心态开始膨胀，当时的舆论也是一片看好，能够复现比特币的辉煌，随后我记得是马老师的一句话，对就是提前退休的那个马老师，大概意思是区块链是个好东西，比特币不是，接着开始大跌到底已经￥20左右，就被套了，就当交学费了。今年也是第二季度忘了哪个月EOS回涨了，到￥53想都没想马上脱坑，及时止损</li>\n<li>不经历一下真的很难感受到人的欲望是无限的，当时在最高点的心态现在想想都后怕，还好及时止损了没亏多少，但也买了教训，期间看到各种人梭哈，想着翻盘不顾一切的那种，最后被套就很恐怖，和赌博很像，经历过就深有体会，关爱生命远离币圈，哈哈</li>\n</ul>\n<h4 id=\"西北大环线\"><a href=\"#西北大环线\" class=\"headerlink\" title=\"西北大环线\"></a>西北大环线</h4><ul>\n<li>拿着EOS脱坑的钱我换了一身行头，和同学去了西北大环线，青海湖，大柴旦，翡翠湖，最美公路，魔鬼城，莫高窟，丹霞，祁连大草原这些地方（都忘的差不多了，看微博想起来的），感受了祖国的大好河山</li>\n<li>我的梦想就是能够和另一半读万卷书，行万里路，看遍天下的奇闻异事，这次是4个同学一起还都是男的，也算完成了一点点梦想吧</li>\n</ul>\n<h4 id=\"毕业\"><a href=\"#毕业\" class=\"headerlink\" title=\"毕业\"></a>毕业</h4><ul>\n<li>研究生阶段让我收获最大的是鱼人沟通和思考问题的方式，从开始的愣头青变成了会思考的愣头青；简单总结一下研究生的生活吧，心态从抱怨-&gt;无望-&gt;庆幸，抱怨开始工作学习太多被压着喘不过气，无望是看不到自己毕业的希望以出路-&gt;庆幸自己能够到这个实验室遇见最好的各位，也正是和优秀的各位一起学习和努力，顺利毕业，找到满意的工作，也有了新的规划</li>\n<li>毕业前我还玩了一个月的尤克里里，会了几个和弦，能弹两个简单的曲子不过现在忘了，还有个小插曲马哥分手了，给我打电话嚎啕大哭，7年的感情说没就没，周哥说就像满级的号被盗了一样，我瞬间感受到了马哥的痛苦，哈哈；按照实验室的传统，毕业三顿饭，吃一顿少一顿，今年由于不可抗力因素变成两顿，最后一顿也是玩的非常开心，也说了我一直想说的话，即使没有结果，起码没留遗憾，之后我便回家呆了几天就去入职了</li>\n</ul>\n<h4 id=\"入职\"><a href=\"#入职\" class=\"headerlink\" title=\"入职\"></a>入职</h4><ul>\n<li>入职前，我一直关注脉脉，都是职场环境不好的言论，各种甩锅，扯皮，明争暗斗，看的我十分害怕，给自己定的基调就是多听多看少说话，保证不出错，进了这个部门非常和谐，所有人都很nice，我的问题所有都会被解答，非常庆幸能够加入这个团队</li>\n<li>到现在入职已有半年了，有过几次培训认识了很多人，发现身边大多都是97年以后的，很多活动自己已经提不起兴趣了，而他们还激情满满，暗暗感叹自己心态老了,中秋节是个转折点我有了新的收获</li>\n<li>技术上自己成长了很多，这段时间刷新了对很多知识的理解，遇到的所有知识点都写下来，到现在为止已经写了26篇博客，目前来看都是偏应用和概念性的，大多都是扫盲，之前没有接触过这些东西，只能先了解一个大概，到后期再细细钻研</li>\n</ul>\n<p>总结我的2019—-&gt;有自己的小确幸</p>\n<p>2020年继续加油，目标（暂时这么些吧，刚毕业还是积累为主）</p>\n<ul>\n<li>每月平均两篇博客的更新</li>\n<li>把19年欠下的博客补上：spring/spring boot、WAL、设计模式 netty </li>\n<li>把部门核心业务吃透，核心产品源码看完，最好能开始学习下一代微服务学习</li>\n<li>一次5天以上旅行</li>\n</ul>\n<p>奥利给<del>~</del>~</p>\n"},{"title":"术语总结","author":"YyWang","date":"2019-08-13T09:16:58.000Z","_content":"#### TPS\nTransactions Per Second 服务器每秒处理事务的数量（一个完整的事务包括从请求开始，处理业务逻辑，数据持久化，最后相应给客户端）\n#### QPS\nQuery Per Second 数据库每秒查询的数据量，一般用来衡量数据库服务器的吞吐量","source":"_drafts/术语总结.md","raw":"title: 术语总结\nauthor: YyWang\ndate: 2019-08-13 17:16:58\ntags:\n---\n#### TPS\nTransactions Per Second 服务器每秒处理事务的数量（一个完整的事务包括从请求开始，处理业务逻辑，数据持久化，最后相应给客户端）\n#### QPS\nQuery Per Second 数据库每秒查询的数据量，一般用来衡量数据库服务器的吞吐量","slug":"术语总结","published":0,"updated":"2021-07-13T12:27:08.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj6d000681fytbspvba4","content":"<h4 id=\"TPS\"><a href=\"#TPS\" class=\"headerlink\" title=\"TPS\"></a>TPS</h4><p>Transactions Per Second 服务器每秒处理事务的数量（一个完整的事务包括从请求开始，处理业务逻辑，数据持久化，最后相应给客户端）</p>\n<h4 id=\"QPS\"><a href=\"#QPS\" class=\"headerlink\" title=\"QPS\"></a>QPS</h4><p>Query Per Second 数据库每秒查询的数据量，一般用来衡量数据库服务器的吞吐量</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"TPS\"><a href=\"#TPS\" class=\"headerlink\" title=\"TPS\"></a>TPS</h4><p>Transactions Per Second 服务器每秒处理事务的数量（一个完整的事务包括从请求开始，处理业务逻辑，数据持久化，最后相应给客户端）</p>\n<h4 id=\"QPS\"><a href=\"#QPS\" class=\"headerlink\" title=\"QPS\"></a>QPS</h4><p>Query Per Second 数据库每秒查询的数据量，一般用来衡量数据库服务器的吞吐量</p>\n"},{"title":"2019的最后一天踩坑正则表达式","author":"YyWang","date":"2019-12-31T07:37:54.000Z","_content":"#### 背景\n\n2019年的最后一天，和往常一样高高兴兴写着bug，遇到一个了需求\n\n需要判断字符串前后是否有空白，返回true和false即可\n\n#### 思路\n\n正则表达式呗（条件反射的方案）\n\n#### 做法\n\n* 第一步，打开浏览器用Google百度一下判断字符前后空白的正则 \n\t* /(^\\s*)|(\\s*$)/g （看了一眼没毛病）\n* 第二步，command+c出来\n* 第三步，编写代码，把正则command+v过去\n\n```\nPattern.matches(\"/(^\\\\s*)|(\\\\s*$)/g\", ” test “)\n```\n* 第四步，验证，run之后，返回false，嗯，bug来了\n\n#### 挣扎\n\n是我拷贝的姿势不对吗？换姿势试试\n\n* (^\\s*)|(\\s*$)\n* ^\\s*|\\s*$\n* ^\\s*\n* \\s*$\n\n结果还是false，团灭\n\n字符串改成 ” “，返回true了，emmm...想不到了\n\n看看源码是怎么说的，Pattern的matches方法底层调用的时Matcher的matches方法，先看注释\n\nAttempts to match the **entire** region against the pattern. \n\nentire->整个的，意思是说matches方法是会匹配整个字符串\n\n#### 解决\n\n知道原因了，正则不对，网上的正则是匹配字符串前后的空白字符，并不是整个一起匹配，所以得重写正则\n\n* 复制的正则  /(^\\s*)|(\\s*$)/g\n* 修改后正则  (^\\s*.*)|(.*\\s*$)  试一下，所有都能匹配 是 * 的问题\n* 修改一下    (^\\s+.*)|(.*\\s+$)  完美\n\n中间补了一下正则表达式 [五分钟搞定正则表达式，如果没搞定，再加两分钟](https://juejin.im/post/5dab30c26fb9a04de818face)","source":"_posts/2019的最后一天踩坑正则表达式.md","raw":"title: 2019的最后一天踩坑正则表达式\nauthor: YyWang\ndate: 2019-12-31 15:37:54\ntags:\n---\n#### 背景\n\n2019年的最后一天，和往常一样高高兴兴写着bug，遇到一个了需求\n\n需要判断字符串前后是否有空白，返回true和false即可\n\n#### 思路\n\n正则表达式呗（条件反射的方案）\n\n#### 做法\n\n* 第一步，打开浏览器用Google百度一下判断字符前后空白的正则 \n\t* /(^\\s*)|(\\s*$)/g （看了一眼没毛病）\n* 第二步，command+c出来\n* 第三步，编写代码，把正则command+v过去\n\n```\nPattern.matches(\"/(^\\\\s*)|(\\\\s*$)/g\", ” test “)\n```\n* 第四步，验证，run之后，返回false，嗯，bug来了\n\n#### 挣扎\n\n是我拷贝的姿势不对吗？换姿势试试\n\n* (^\\s*)|(\\s*$)\n* ^\\s*|\\s*$\n* ^\\s*\n* \\s*$\n\n结果还是false，团灭\n\n字符串改成 ” “，返回true了，emmm...想不到了\n\n看看源码是怎么说的，Pattern的matches方法底层调用的时Matcher的matches方法，先看注释\n\nAttempts to match the **entire** region against the pattern. \n\nentire->整个的，意思是说matches方法是会匹配整个字符串\n\n#### 解决\n\n知道原因了，正则不对，网上的正则是匹配字符串前后的空白字符，并不是整个一起匹配，所以得重写正则\n\n* 复制的正则  /(^\\s*)|(\\s*$)/g\n* 修改后正则  (^\\s*.*)|(.*\\s*$)  试一下，所有都能匹配 是 * 的问题\n* 修改一下    (^\\s+.*)|(.*\\s+$)  完美\n\n中间补了一下正则表达式 [五分钟搞定正则表达式，如果没搞定，再加两分钟](https://juejin.im/post/5dab30c26fb9a04de818face)","slug":"2019的最后一天踩坑正则表达式","published":1,"updated":"2021-07-13T12:27:08.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj6g000981fynhftst77","content":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>2019年的最后一天，和往常一样高高兴兴写着bug，遇到一个了需求</p>\n<p>需要判断字符串前后是否有空白，返回true和false即可</p>\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>正则表达式呗（条件反射的方案）</p>\n<h4 id=\"做法\"><a href=\"#做法\" class=\"headerlink\" title=\"做法\"></a>做法</h4><ul>\n<li>第一步，打开浏览器用Google百度一下判断字符前后空白的正则 <ul>\n<li>/(^\\s<em>)|(\\s</em>$)/g （看了一眼没毛病）</li>\n</ul>\n</li>\n<li>第二步，command+c出来</li>\n<li>第三步，编写代码，把正则command+v过去</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pattern.matches(&quot;/(^\\\\s*)|(\\\\s*$)/g&quot;, ” test “)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第四步，验证，run之后，返回false，嗯，bug来了</li>\n</ul>\n<h4 id=\"挣扎\"><a href=\"#挣扎\" class=\"headerlink\" title=\"挣扎\"></a>挣扎</h4><p>是我拷贝的姿势不对吗？换姿势试试</p>\n<ul>\n<li>(^\\s<em>)|(\\s</em>$)</li>\n<li>^\\s<em>|\\s</em>$</li>\n<li>^\\s*</li>\n<li>\\s*$</li>\n</ul>\n<p>结果还是false，团灭</p>\n<p>字符串改成 ” “，返回true了，emmm…想不到了</p>\n<p>看看源码是怎么说的，Pattern的matches方法底层调用的时Matcher的matches方法，先看注释</p>\n<p>Attempts to match the <strong>entire</strong> region against the pattern. </p>\n<p>entire-&gt;整个的，意思是说matches方法是会匹配整个字符串</p>\n<h4 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h4><p>知道原因了，正则不对，网上的正则是匹配字符串前后的空白字符，并不是整个一起匹配，所以得重写正则</p>\n<ul>\n<li>复制的正则  /(^\\s<em>)|(\\s</em>$)/g</li>\n<li>修改后正则  (^\\s<em>.</em>)|(.<em>\\s</em>$)  试一下，所有都能匹配 是 * 的问题</li>\n<li>修改一下    (^\\s+.<em>)|(.</em>\\s+$)  完美</li>\n</ul>\n<p>中间补了一下正则表达式 <a href=\"https://juejin.im/post/5dab30c26fb9a04de818face\" target=\"_blank\" rel=\"noopener\">五分钟搞定正则表达式，如果没搞定，再加两分钟</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>2019年的最后一天，和往常一样高高兴兴写着bug，遇到一个了需求</p>\n<p>需要判断字符串前后是否有空白，返回true和false即可</p>\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>正则表达式呗（条件反射的方案）</p>\n<h4 id=\"做法\"><a href=\"#做法\" class=\"headerlink\" title=\"做法\"></a>做法</h4><ul>\n<li>第一步，打开浏览器用Google百度一下判断字符前后空白的正则 <ul>\n<li>/(^\\s<em>)|(\\s</em>$)/g （看了一眼没毛病）</li>\n</ul>\n</li>\n<li>第二步，command+c出来</li>\n<li>第三步，编写代码，把正则command+v过去</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pattern.matches(&quot;/(^\\\\s*)|(\\\\s*$)/g&quot;, ” test “)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第四步，验证，run之后，返回false，嗯，bug来了</li>\n</ul>\n<h4 id=\"挣扎\"><a href=\"#挣扎\" class=\"headerlink\" title=\"挣扎\"></a>挣扎</h4><p>是我拷贝的姿势不对吗？换姿势试试</p>\n<ul>\n<li>(^\\s<em>)|(\\s</em>$)</li>\n<li>^\\s<em>|\\s</em>$</li>\n<li>^\\s*</li>\n<li>\\s*$</li>\n</ul>\n<p>结果还是false，团灭</p>\n<p>字符串改成 ” “，返回true了，emmm…想不到了</p>\n<p>看看源码是怎么说的，Pattern的matches方法底层调用的时Matcher的matches方法，先看注释</p>\n<p>Attempts to match the <strong>entire</strong> region against the pattern. </p>\n<p>entire-&gt;整个的，意思是说matches方法是会匹配整个字符串</p>\n<h4 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h4><p>知道原因了，正则不对，网上的正则是匹配字符串前后的空白字符，并不是整个一起匹配，所以得重写正则</p>\n<ul>\n<li>复制的正则  /(^\\s<em>)|(\\s</em>$)/g</li>\n<li>修改后正则  (^\\s<em>.</em>)|(.<em>\\s</em>$)  试一下，所有都能匹配 是 * 的问题</li>\n<li>修改一下    (^\\s+.<em>)|(.</em>\\s+$)  完美</li>\n</ul>\n<p>中间补了一下正则表达式 <a href=\"https://juejin.im/post/5dab30c26fb9a04de818face\" target=\"_blank\" rel=\"noopener\">五分钟搞定正则表达式，如果没搞定，再加两分钟</a></p>\n"},{"title":"ArrayList","author":"YyWang","date":"2019-07-26T11:31:05.000Z","catagories":"Java","_content":"### ArrayList\n#### toArray(T[] a)\n\n~~~\npublic <T> T[] toArray(T[] a) {\n    if (a.length < size)\n        // Make a new array of a's runtime type, but my contents:\n        return (T[]) Arrays.copyOf(elementData, size, a.getClass());\n    System.arraycopy(elementData, 0, a, 0, size);\n    if (a.length > size)\n        a[size] = null;\n    return a;\n}\n~~~\n使用了Arrays.copyOf方法\n","source":"_posts/ArrayList.md","raw":"title: ArrayList\nauthor: YyWang\ndate: 2019-07-26 19:31:05\ntags: Java\ncatagories: Java\n---\n### ArrayList\n#### toArray(T[] a)\n\n~~~\npublic <T> T[] toArray(T[] a) {\n    if (a.length < size)\n        // Make a new array of a's runtime type, but my contents:\n        return (T[]) Arrays.copyOf(elementData, size, a.getClass());\n    System.arraycopy(elementData, 0, a, 0, size);\n    if (a.length > size)\n        a[size] = null;\n    return a;\n}\n~~~\n使用了Arrays.copyOf方法\n","slug":"ArrayList","published":1,"updated":"2021-07-13T12:27:08.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj6h000a81fyplp29o9t","content":"<h3 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h3><h4 id=\"toArray-T-a\"><a href=\"#toArray-T-a\" class=\"headerlink\" title=\"toArray(T[] a)\"></a>toArray(T[] a)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class=\"line\">    if (a.length &lt; size)</span><br><span class=\"line\">        // Make a new array of a&apos;s runtime type, but my contents:</span><br><span class=\"line\">        return (T[]) Arrays.copyOf(elementData, size, a.getClass());</span><br><span class=\"line\">    System.arraycopy(elementData, 0, a, 0, size);</span><br><span class=\"line\">    if (a.length &gt; size)</span><br><span class=\"line\">        a[size] = null;</span><br><span class=\"line\">    return a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用了Arrays.copyOf方法</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h3><h4 id=\"toArray-T-a\"><a href=\"#toArray-T-a\" class=\"headerlink\" title=\"toArray(T[] a)\"></a>toArray(T[] a)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class=\"line\">    if (a.length &lt; size)</span><br><span class=\"line\">        // Make a new array of a&apos;s runtime type, but my contents:</span><br><span class=\"line\">        return (T[]) Arrays.copyOf(elementData, size, a.getClass());</span><br><span class=\"line\">    System.arraycopy(elementData, 0, a, 0, size);</span><br><span class=\"line\">    if (a.length &gt; size)</span><br><span class=\"line\">        a[size] = null;</span><br><span class=\"line\">    return a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用了Arrays.copyOf方法</p>\n"},{"title":"2020 又是起起落落落落的一年","author":"YyWang","date":"2021-02-08T09:57:12.000Z","_content":"\n\n2021年已经过去了39天，上一年的总结赶紧补上，先盘点下之前立过的Flag，然后写一下自己的心路历程吧\n\n### Flag\n\n还记得19年写总结的时候立下了的Flag，一一盘点一下子\n\n##### 每月平均两篇博客的更新\n  \n  截止到最后一篇文章11月17日一共有20篇，离24篇还差点意思，完成率83%吧，怎么硕呢~ 看数据的话可就是没完成，但是，其中有4个月的时间因为一些事情没有写文章更新，可以算是及格吧\n  \n##### 博客填坑\n\n  当时计划要学习：spring/spring boot、WAL、设计模式、netty这些，并写文章出来，学习是学了文章没写，没啥好说的妥妥没完成\n  \n##### 部门业务深入\n\n  Flag是部门业务吃透，这里话太满了我撤回，吃透算不上应该说得上是深入了解，本来计划是每天看一点点不紧不慢的节奏，后来有人离职我代替他值班，驱动我不得不加快学习速度，感觉已经完全适应工作状态了，另外下一代微服务也学习了，本来计划了解一些能吹牛逼就行，后来发现这个还挺有意思的也就多看了看，意外收获，哈哈，这个是超额完成\n  \n##### 一次5天以上的旅行\n\n  因为疫情上半年的假期基本都是在北京度过，国庆的时候去上海玩了4天，心疼机票钱选择国庆后出门🤣，这项也算完成了吧\n  \n  综合来看，Flag完成情况可以说是及格吧，毕竟计划往往是赶不上变化的，心里记着目标努力去完成就好，Flag也设定的稍微大一些，反正最后肯定完不成，结果肯定会比低预期的Flag要好很多~\n  \n### 小算盘\n\n  从参加工作以来，工作内容一直都是后台系统的优化和维护，申请不到前端资源甚至连前端页面也写，更像一个全栈。这个工作内容和读研时期一模一样，而且工作氛围有些封闭感觉我更像外包一样，道理我都懂，这些活总要有人来做，我是新人当然是我来做，等再有新人来我不就解放了嘛，就这样我打起了自己的小算盘😬，可后面要做些什么我不知道，我就看身边的大佬搞什么就想办法往那边去靠，厚着脸皮跟着大佬去做一个operator的项目，也就从这开始我接触到了k8s和云原生发现这真是一个神奇的东西\n  \n### 打杂的？\n\n  就在快有新人来之前，我的计划也按部就班的来，找老板提出我的想法去做云原生的项目或者SDK，不料被驳回了，理由是这两个项目都不缺人，然后安排我做另外一个项目，希望破灭，在新的项目里倒是不用写前端了，可还是一个 API Boy 在我看来工作内容都是一样的，没有好的机会就做吧还能咋的。后来，晋升答辩T2->T3，以往都不需要答辩今年不知怎么了，我汇报了一年的工作，台下一个评委说感觉你像打杂的，结果没过，心想我一个T2不打杂干什么，让我做T10的活吗？\n  \n### 打杂的！\n\n  我为自己感到不公，便开始找新的机会，期间边看机会边准备也就空出3个月没有更新文章，原因在这🤣，起初还是按照基础架构这个方向去找，毕竟做了有1年的时间想在这个方向多深入一些，刚开始还是一直碰壁，简历不过的，理解深度不够的，自己暴露的问题有很多，因为我说想做一些更有挑战性的工作，被灵魂拷问你想做什么的时候，我脑子一片空白，只是有想法但做什么却不知道，这算什么，投递简历很多都是不过的，简历过了面试的问题也答不好，我这一年到底干了什么？结论：我这一年光打杂了，就是一个打杂的！\n  \n### 自省\n\n  自我反省一下，自己确实是个打杂的，工作内容没有亮点，首先我要明确自己想做什么，业务还是基础架构？业务接触的技术广，机会多，好的业务往往绩效也好，相应的压力会大一些；基础架构方向有技术的深度，绩效往往一般；相比之下我更喜欢基础架构多一些，更喜欢偏研究类型的工作，经过面试看下来基础架构往往需求工作经验丰富的人，我打杂一年希望渺茫；我选择先找业务方向工作一段时间再入坑基础架构，这样希望大些，随后我投递了业务方向的岗位，最终拿到了美团的offer，当时已经进入第4季度加上我年限少涨幅也没有到预期，决定年底再看，这个阶段我明确了我想要什么，有了短期的规划\n  \n### 前行\n\n  有了规划开始按部就班的走，工作之余每天抽出时间刷题、学习给自己充电，计划是过完年再开始找机会，到了12月几乎每天都有5个猎头或者hr要简历，感觉需求量很大，随之调整计划，填鸭式的学习，打算在年前把这事搞定，这一个月我也没更新文章😬，从元旦后开始投递简历，有了充分的准备，这次结果还不错，收到了3家offer，其他的5家也都通过3面，还有一家是我主动放弃的，这结果我还是很欣慰的，其中拒了百度（感觉没有诚意），拒了阿里（纠结了很久），最终选择一个规模不大的独角兽，做云原生基础架构（不忘初心吧）\n  \n### 云原生 GO GO GO\n\n   自己也没想到会有选offer的一天，本来幻想着去快手挣快钱，二面一个半小时3道算法题也都做了，莫名其妙的就挂了，墨菲定律，越是想去的地方越没有机会，越是不在意的地方往往会有惊喜，比如阿里和蚂蚁，业务都还不错本来想试试可没想到都过了还🤣，玄学，最后打算选做云原生，转Go语言，选择初心，希望这次不要选错，我可是拒了阿里\n   \n### 结语\n\n  这一年最大的收获就是知道自己想要什么了，未来的路也逐渐清晰，面试过程中听到最多的话就是你还年轻，路还很长，毕竟工作不久，也算是一点点优势吧。最后，该开始新一年的Flag了\n  \n  * 博客不能断，一年不能少于20篇吧\n  * Go语言、k8s、Istio、Mosn都整明白了，最起码能独立解决问题吧\n  * 买了相机不能吃灰吧，整两篇文章看下成功\n  * 旅行不能少哦，读万卷书行万里路\n  * 参与开源项目或者社区（终极目标😬）","source":"_posts/2020 又是起起落落落落的一年.md","raw":"title: 2020 又是起起落落落落的一年\nauthor: YyWang\ntags: 生活杂谈\ncategories: 生活杂谈\ndate: 2021-02-08 17:57:12\n---\n\n\n2021年已经过去了39天，上一年的总结赶紧补上，先盘点下之前立过的Flag，然后写一下自己的心路历程吧\n\n### Flag\n\n还记得19年写总结的时候立下了的Flag，一一盘点一下子\n\n##### 每月平均两篇博客的更新\n  \n  截止到最后一篇文章11月17日一共有20篇，离24篇还差点意思，完成率83%吧，怎么硕呢~ 看数据的话可就是没完成，但是，其中有4个月的时间因为一些事情没有写文章更新，可以算是及格吧\n  \n##### 博客填坑\n\n  当时计划要学习：spring/spring boot、WAL、设计模式、netty这些，并写文章出来，学习是学了文章没写，没啥好说的妥妥没完成\n  \n##### 部门业务深入\n\n  Flag是部门业务吃透，这里话太满了我撤回，吃透算不上应该说得上是深入了解，本来计划是每天看一点点不紧不慢的节奏，后来有人离职我代替他值班，驱动我不得不加快学习速度，感觉已经完全适应工作状态了，另外下一代微服务也学习了，本来计划了解一些能吹牛逼就行，后来发现这个还挺有意思的也就多看了看，意外收获，哈哈，这个是超额完成\n  \n##### 一次5天以上的旅行\n\n  因为疫情上半年的假期基本都是在北京度过，国庆的时候去上海玩了4天，心疼机票钱选择国庆后出门🤣，这项也算完成了吧\n  \n  综合来看，Flag完成情况可以说是及格吧，毕竟计划往往是赶不上变化的，心里记着目标努力去完成就好，Flag也设定的稍微大一些，反正最后肯定完不成，结果肯定会比低预期的Flag要好很多~\n  \n### 小算盘\n\n  从参加工作以来，工作内容一直都是后台系统的优化和维护，申请不到前端资源甚至连前端页面也写，更像一个全栈。这个工作内容和读研时期一模一样，而且工作氛围有些封闭感觉我更像外包一样，道理我都懂，这些活总要有人来做，我是新人当然是我来做，等再有新人来我不就解放了嘛，就这样我打起了自己的小算盘😬，可后面要做些什么我不知道，我就看身边的大佬搞什么就想办法往那边去靠，厚着脸皮跟着大佬去做一个operator的项目，也就从这开始我接触到了k8s和云原生发现这真是一个神奇的东西\n  \n### 打杂的？\n\n  就在快有新人来之前，我的计划也按部就班的来，找老板提出我的想法去做云原生的项目或者SDK，不料被驳回了，理由是这两个项目都不缺人，然后安排我做另外一个项目，希望破灭，在新的项目里倒是不用写前端了，可还是一个 API Boy 在我看来工作内容都是一样的，没有好的机会就做吧还能咋的。后来，晋升答辩T2->T3，以往都不需要答辩今年不知怎么了，我汇报了一年的工作，台下一个评委说感觉你像打杂的，结果没过，心想我一个T2不打杂干什么，让我做T10的活吗？\n  \n### 打杂的！\n\n  我为自己感到不公，便开始找新的机会，期间边看机会边准备也就空出3个月没有更新文章，原因在这🤣，起初还是按照基础架构这个方向去找，毕竟做了有1年的时间想在这个方向多深入一些，刚开始还是一直碰壁，简历不过的，理解深度不够的，自己暴露的问题有很多，因为我说想做一些更有挑战性的工作，被灵魂拷问你想做什么的时候，我脑子一片空白，只是有想法但做什么却不知道，这算什么，投递简历很多都是不过的，简历过了面试的问题也答不好，我这一年到底干了什么？结论：我这一年光打杂了，就是一个打杂的！\n  \n### 自省\n\n  自我反省一下，自己确实是个打杂的，工作内容没有亮点，首先我要明确自己想做什么，业务还是基础架构？业务接触的技术广，机会多，好的业务往往绩效也好，相应的压力会大一些；基础架构方向有技术的深度，绩效往往一般；相比之下我更喜欢基础架构多一些，更喜欢偏研究类型的工作，经过面试看下来基础架构往往需求工作经验丰富的人，我打杂一年希望渺茫；我选择先找业务方向工作一段时间再入坑基础架构，这样希望大些，随后我投递了业务方向的岗位，最终拿到了美团的offer，当时已经进入第4季度加上我年限少涨幅也没有到预期，决定年底再看，这个阶段我明确了我想要什么，有了短期的规划\n  \n### 前行\n\n  有了规划开始按部就班的走，工作之余每天抽出时间刷题、学习给自己充电，计划是过完年再开始找机会，到了12月几乎每天都有5个猎头或者hr要简历，感觉需求量很大，随之调整计划，填鸭式的学习，打算在年前把这事搞定，这一个月我也没更新文章😬，从元旦后开始投递简历，有了充分的准备，这次结果还不错，收到了3家offer，其他的5家也都通过3面，还有一家是我主动放弃的，这结果我还是很欣慰的，其中拒了百度（感觉没有诚意），拒了阿里（纠结了很久），最终选择一个规模不大的独角兽，做云原生基础架构（不忘初心吧）\n  \n### 云原生 GO GO GO\n\n   自己也没想到会有选offer的一天，本来幻想着去快手挣快钱，二面一个半小时3道算法题也都做了，莫名其妙的就挂了，墨菲定律，越是想去的地方越没有机会，越是不在意的地方往往会有惊喜，比如阿里和蚂蚁，业务都还不错本来想试试可没想到都过了还🤣，玄学，最后打算选做云原生，转Go语言，选择初心，希望这次不要选错，我可是拒了阿里\n   \n### 结语\n\n  这一年最大的收获就是知道自己想要什么了，未来的路也逐渐清晰，面试过程中听到最多的话就是你还年轻，路还很长，毕竟工作不久，也算是一点点优势吧。最后，该开始新一年的Flag了\n  \n  * 博客不能断，一年不能少于20篇吧\n  * Go语言、k8s、Istio、Mosn都整明白了，最起码能独立解决问题吧\n  * 买了相机不能吃灰吧，整两篇文章看下成功\n  * 旅行不能少哦，读万卷书行万里路\n  * 参与开源项目或者社区（终极目标😬）","slug":"2020 又是起起落落落落的一年","published":1,"updated":"2021-07-13T12:27:08.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj6j000b81fycipumu2w","content":"<p>2021年已经过去了39天，上一年的总结赶紧补上，先盘点下之前立过的Flag，然后写一下自己的心路历程吧</p>\n<h3 id=\"Flag\"><a href=\"#Flag\" class=\"headerlink\" title=\"Flag\"></a>Flag</h3><p>还记得19年写总结的时候立下了的Flag，一一盘点一下子</p>\n<h5 id=\"每月平均两篇博客的更新\"><a href=\"#每月平均两篇博客的更新\" class=\"headerlink\" title=\"每月平均两篇博客的更新\"></a>每月平均两篇博客的更新</h5><p>  截止到最后一篇文章11月17日一共有20篇，离24篇还差点意思，完成率83%吧，怎么硕呢~ 看数据的话可就是没完成，但是，其中有4个月的时间因为一些事情没有写文章更新，可以算是及格吧</p>\n<h5 id=\"博客填坑\"><a href=\"#博客填坑\" class=\"headerlink\" title=\"博客填坑\"></a>博客填坑</h5><p>  当时计划要学习：spring/spring boot、WAL、设计模式、netty这些，并写文章出来，学习是学了文章没写，没啥好说的妥妥没完成</p>\n<h5 id=\"部门业务深入\"><a href=\"#部门业务深入\" class=\"headerlink\" title=\"部门业务深入\"></a>部门业务深入</h5><p>  Flag是部门业务吃透，这里话太满了我撤回，吃透算不上应该说得上是深入了解，本来计划是每天看一点点不紧不慢的节奏，后来有人离职我代替他值班，驱动我不得不加快学习速度，感觉已经完全适应工作状态了，另外下一代微服务也学习了，本来计划了解一些能吹牛逼就行，后来发现这个还挺有意思的也就多看了看，意外收获，哈哈，这个是超额完成</p>\n<h5 id=\"一次5天以上的旅行\"><a href=\"#一次5天以上的旅行\" class=\"headerlink\" title=\"一次5天以上的旅行\"></a>一次5天以上的旅行</h5><p>  因为疫情上半年的假期基本都是在北京度过，国庆的时候去上海玩了4天，心疼机票钱选择国庆后出门🤣，这项也算完成了吧</p>\n<p>  综合来看，Flag完成情况可以说是及格吧，毕竟计划往往是赶不上变化的，心里记着目标努力去完成就好，Flag也设定的稍微大一些，反正最后肯定完不成，结果肯定会比低预期的Flag要好很多~</p>\n<h3 id=\"小算盘\"><a href=\"#小算盘\" class=\"headerlink\" title=\"小算盘\"></a>小算盘</h3><p>  从参加工作以来，工作内容一直都是后台系统的优化和维护，申请不到前端资源甚至连前端页面也写，更像一个全栈。这个工作内容和读研时期一模一样，而且工作氛围有些封闭感觉我更像外包一样，道理我都懂，这些活总要有人来做，我是新人当然是我来做，等再有新人来我不就解放了嘛，就这样我打起了自己的小算盘😬，可后面要做些什么我不知道，我就看身边的大佬搞什么就想办法往那边去靠，厚着脸皮跟着大佬去做一个operator的项目，也就从这开始我接触到了k8s和云原生发现这真是一个神奇的东西</p>\n<h3 id=\"打杂的？\"><a href=\"#打杂的？\" class=\"headerlink\" title=\"打杂的？\"></a>打杂的？</h3><p>  就在快有新人来之前，我的计划也按部就班的来，找老板提出我的想法去做云原生的项目或者SDK，不料被驳回了，理由是这两个项目都不缺人，然后安排我做另外一个项目，希望破灭，在新的项目里倒是不用写前端了，可还是一个 API Boy 在我看来工作内容都是一样的，没有好的机会就做吧还能咋的。后来，晋升答辩T2-&gt;T3，以往都不需要答辩今年不知怎么了，我汇报了一年的工作，台下一个评委说感觉你像打杂的，结果没过，心想我一个T2不打杂干什么，让我做T10的活吗？</p>\n<h3 id=\"打杂的！\"><a href=\"#打杂的！\" class=\"headerlink\" title=\"打杂的！\"></a>打杂的！</h3><p>  我为自己感到不公，便开始找新的机会，期间边看机会边准备也就空出3个月没有更新文章，原因在这🤣，起初还是按照基础架构这个方向去找，毕竟做了有1年的时间想在这个方向多深入一些，刚开始还是一直碰壁，简历不过的，理解深度不够的，自己暴露的问题有很多，因为我说想做一些更有挑战性的工作，被灵魂拷问你想做什么的时候，我脑子一片空白，只是有想法但做什么却不知道，这算什么，投递简历很多都是不过的，简历过了面试的问题也答不好，我这一年到底干了什么？结论：我这一年光打杂了，就是一个打杂的！</p>\n<h3 id=\"自省\"><a href=\"#自省\" class=\"headerlink\" title=\"自省\"></a>自省</h3><p>  自我反省一下，自己确实是个打杂的，工作内容没有亮点，首先我要明确自己想做什么，业务还是基础架构？业务接触的技术广，机会多，好的业务往往绩效也好，相应的压力会大一些；基础架构方向有技术的深度，绩效往往一般；相比之下我更喜欢基础架构多一些，更喜欢偏研究类型的工作，经过面试看下来基础架构往往需求工作经验丰富的人，我打杂一年希望渺茫；我选择先找业务方向工作一段时间再入坑基础架构，这样希望大些，随后我投递了业务方向的岗位，最终拿到了美团的offer，当时已经进入第4季度加上我年限少涨幅也没有到预期，决定年底再看，这个阶段我明确了我想要什么，有了短期的规划</p>\n<h3 id=\"前行\"><a href=\"#前行\" class=\"headerlink\" title=\"前行\"></a>前行</h3><p>  有了规划开始按部就班的走，工作之余每天抽出时间刷题、学习给自己充电，计划是过完年再开始找机会，到了12月几乎每天都有5个猎头或者hr要简历，感觉需求量很大，随之调整计划，填鸭式的学习，打算在年前把这事搞定，这一个月我也没更新文章😬，从元旦后开始投递简历，有了充分的准备，这次结果还不错，收到了3家offer，其他的5家也都通过3面，还有一家是我主动放弃的，这结果我还是很欣慰的，其中拒了百度（感觉没有诚意），拒了阿里（纠结了很久），最终选择一个规模不大的独角兽，做云原生基础架构（不忘初心吧）</p>\n<h3 id=\"云原生-GO-GO-GO\"><a href=\"#云原生-GO-GO-GO\" class=\"headerlink\" title=\"云原生 GO GO GO\"></a>云原生 GO GO GO</h3><p>   自己也没想到会有选offer的一天，本来幻想着去快手挣快钱，二面一个半小时3道算法题也都做了，莫名其妙的就挂了，墨菲定律，越是想去的地方越没有机会，越是不在意的地方往往会有惊喜，比如阿里和蚂蚁，业务都还不错本来想试试可没想到都过了还🤣，玄学，最后打算选做云原生，转Go语言，选择初心，希望这次不要选错，我可是拒了阿里</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>  这一年最大的收获就是知道自己想要什么了，未来的路也逐渐清晰，面试过程中听到最多的话就是你还年轻，路还很长，毕竟工作不久，也算是一点点优势吧。最后，该开始新一年的Flag了</p>\n<ul>\n<li>博客不能断，一年不能少于20篇吧</li>\n<li>Go语言、k8s、Istio、Mosn都整明白了，最起码能独立解决问题吧</li>\n<li>买了相机不能吃灰吧，整两篇文章看下成功</li>\n<li>旅行不能少哦，读万卷书行万里路</li>\n<li>参与开源项目或者社区（终极目标😬）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>2021年已经过去了39天，上一年的总结赶紧补上，先盘点下之前立过的Flag，然后写一下自己的心路历程吧</p>\n<h3 id=\"Flag\"><a href=\"#Flag\" class=\"headerlink\" title=\"Flag\"></a>Flag</h3><p>还记得19年写总结的时候立下了的Flag，一一盘点一下子</p>\n<h5 id=\"每月平均两篇博客的更新\"><a href=\"#每月平均两篇博客的更新\" class=\"headerlink\" title=\"每月平均两篇博客的更新\"></a>每月平均两篇博客的更新</h5><p>  截止到最后一篇文章11月17日一共有20篇，离24篇还差点意思，完成率83%吧，怎么硕呢~ 看数据的话可就是没完成，但是，其中有4个月的时间因为一些事情没有写文章更新，可以算是及格吧</p>\n<h5 id=\"博客填坑\"><a href=\"#博客填坑\" class=\"headerlink\" title=\"博客填坑\"></a>博客填坑</h5><p>  当时计划要学习：spring/spring boot、WAL、设计模式、netty这些，并写文章出来，学习是学了文章没写，没啥好说的妥妥没完成</p>\n<h5 id=\"部门业务深入\"><a href=\"#部门业务深入\" class=\"headerlink\" title=\"部门业务深入\"></a>部门业务深入</h5><p>  Flag是部门业务吃透，这里话太满了我撤回，吃透算不上应该说得上是深入了解，本来计划是每天看一点点不紧不慢的节奏，后来有人离职我代替他值班，驱动我不得不加快学习速度，感觉已经完全适应工作状态了，另外下一代微服务也学习了，本来计划了解一些能吹牛逼就行，后来发现这个还挺有意思的也就多看了看，意外收获，哈哈，这个是超额完成</p>\n<h5 id=\"一次5天以上的旅行\"><a href=\"#一次5天以上的旅行\" class=\"headerlink\" title=\"一次5天以上的旅行\"></a>一次5天以上的旅行</h5><p>  因为疫情上半年的假期基本都是在北京度过，国庆的时候去上海玩了4天，心疼机票钱选择国庆后出门🤣，这项也算完成了吧</p>\n<p>  综合来看，Flag完成情况可以说是及格吧，毕竟计划往往是赶不上变化的，心里记着目标努力去完成就好，Flag也设定的稍微大一些，反正最后肯定完不成，结果肯定会比低预期的Flag要好很多~</p>\n<h3 id=\"小算盘\"><a href=\"#小算盘\" class=\"headerlink\" title=\"小算盘\"></a>小算盘</h3><p>  从参加工作以来，工作内容一直都是后台系统的优化和维护，申请不到前端资源甚至连前端页面也写，更像一个全栈。这个工作内容和读研时期一模一样，而且工作氛围有些封闭感觉我更像外包一样，道理我都懂，这些活总要有人来做，我是新人当然是我来做，等再有新人来我不就解放了嘛，就这样我打起了自己的小算盘😬，可后面要做些什么我不知道，我就看身边的大佬搞什么就想办法往那边去靠，厚着脸皮跟着大佬去做一个operator的项目，也就从这开始我接触到了k8s和云原生发现这真是一个神奇的东西</p>\n<h3 id=\"打杂的？\"><a href=\"#打杂的？\" class=\"headerlink\" title=\"打杂的？\"></a>打杂的？</h3><p>  就在快有新人来之前，我的计划也按部就班的来，找老板提出我的想法去做云原生的项目或者SDK，不料被驳回了，理由是这两个项目都不缺人，然后安排我做另外一个项目，希望破灭，在新的项目里倒是不用写前端了，可还是一个 API Boy 在我看来工作内容都是一样的，没有好的机会就做吧还能咋的。后来，晋升答辩T2-&gt;T3，以往都不需要答辩今年不知怎么了，我汇报了一年的工作，台下一个评委说感觉你像打杂的，结果没过，心想我一个T2不打杂干什么，让我做T10的活吗？</p>\n<h3 id=\"打杂的！\"><a href=\"#打杂的！\" class=\"headerlink\" title=\"打杂的！\"></a>打杂的！</h3><p>  我为自己感到不公，便开始找新的机会，期间边看机会边准备也就空出3个月没有更新文章，原因在这🤣，起初还是按照基础架构这个方向去找，毕竟做了有1年的时间想在这个方向多深入一些，刚开始还是一直碰壁，简历不过的，理解深度不够的，自己暴露的问题有很多，因为我说想做一些更有挑战性的工作，被灵魂拷问你想做什么的时候，我脑子一片空白，只是有想法但做什么却不知道，这算什么，投递简历很多都是不过的，简历过了面试的问题也答不好，我这一年到底干了什么？结论：我这一年光打杂了，就是一个打杂的！</p>\n<h3 id=\"自省\"><a href=\"#自省\" class=\"headerlink\" title=\"自省\"></a>自省</h3><p>  自我反省一下，自己确实是个打杂的，工作内容没有亮点，首先我要明确自己想做什么，业务还是基础架构？业务接触的技术广，机会多，好的业务往往绩效也好，相应的压力会大一些；基础架构方向有技术的深度，绩效往往一般；相比之下我更喜欢基础架构多一些，更喜欢偏研究类型的工作，经过面试看下来基础架构往往需求工作经验丰富的人，我打杂一年希望渺茫；我选择先找业务方向工作一段时间再入坑基础架构，这样希望大些，随后我投递了业务方向的岗位，最终拿到了美团的offer，当时已经进入第4季度加上我年限少涨幅也没有到预期，决定年底再看，这个阶段我明确了我想要什么，有了短期的规划</p>\n<h3 id=\"前行\"><a href=\"#前行\" class=\"headerlink\" title=\"前行\"></a>前行</h3><p>  有了规划开始按部就班的走，工作之余每天抽出时间刷题、学习给自己充电，计划是过完年再开始找机会，到了12月几乎每天都有5个猎头或者hr要简历，感觉需求量很大，随之调整计划，填鸭式的学习，打算在年前把这事搞定，这一个月我也没更新文章😬，从元旦后开始投递简历，有了充分的准备，这次结果还不错，收到了3家offer，其他的5家也都通过3面，还有一家是我主动放弃的，这结果我还是很欣慰的，其中拒了百度（感觉没有诚意），拒了阿里（纠结了很久），最终选择一个规模不大的独角兽，做云原生基础架构（不忘初心吧）</p>\n<h3 id=\"云原生-GO-GO-GO\"><a href=\"#云原生-GO-GO-GO\" class=\"headerlink\" title=\"云原生 GO GO GO\"></a>云原生 GO GO GO</h3><p>   自己也没想到会有选offer的一天，本来幻想着去快手挣快钱，二面一个半小时3道算法题也都做了，莫名其妙的就挂了，墨菲定律，越是想去的地方越没有机会，越是不在意的地方往往会有惊喜，比如阿里和蚂蚁，业务都还不错本来想试试可没想到都过了还🤣，玄学，最后打算选做云原生，转Go语言，选择初心，希望这次不要选错，我可是拒了阿里</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>  这一年最大的收获就是知道自己想要什么了，未来的路也逐渐清晰，面试过程中听到最多的话就是你还年轻，路还很长，毕竟工作不久，也算是一点点优势吧。最后，该开始新一年的Flag了</p>\n<ul>\n<li>博客不能断，一年不能少于20篇吧</li>\n<li>Go语言、k8s、Istio、Mosn都整明白了，最起码能独立解决问题吧</li>\n<li>买了相机不能吃灰吧，整两篇文章看下成功</li>\n<li>旅行不能少哦，读万卷书行万里路</li>\n<li>参与开源项目或者社区（终极目标😬）</li>\n</ul>\n"},{"title":"Arrays","author":"YyWang","catagories":"Java","date":"2019-07-26T11:31:27.000Z","_content":"### Arrays\n#### copyOf\n~~~\npublic static <T,U> T[] copyOf(U[] original, int newLength, Class<? extends T[]> newType) {\n    @SuppressWarnings(\"unchecked\")\n    T[] copy = ((Object)newType == (Object)Object[].class)\n        ? (T[]) new Object[newLength]\n        : (T[]) Array.newInstance(newType.getComponentType(), newLength);\n    System.arraycopy(original, 0, copy, 0,\n                     Math.min(original.length, newLength));\n    return copy;\n}\n~~~\n\n先看要被拷贝到的数组长度是不是够用，够用的话直接调用System.arraycopy方法；不够用创建一个新的与源数组同样长度的数组进行拷贝\n**如果数组中是引用类型，Arrays.copy拷贝的是引用，不会新创建对象，如果要对拷贝的数组做修改操作源数组同样会受到影响，而字符串数组由于字符串常量池的存在，当修改字符串的时候会新创建一个字符串并将新的引用付给数组，所以源数组对应的字符串并不会发生变化**\n\n##### System.arraycopy\n~~~\npublic static native void arraycopy(Object src,  int  srcPos,\n                                    Object dest, int destPos,\n                                    int length);\n~~~\n这是一个本地方法，就看一下参数吧\n\n+ src----the source array. \n+ srcPos----starting position in the source array.\n+ dest----the destination array.\n+ destPos----starting position in the destination data.\n+ length----the number of array elements to be copied.\n\n\n#### asList\n将字符串转成ArrayList集合\n\n~~~\npublic static <T> List<T> asList(T... a) {\n    return new ArrayList<>(a);\n}\n~~~\n\n这里的ArrayList是Arrays中的一个内部类，继承了AbstractList方法，内部值实现了部分方法，简单点说这个集合是只读的，不能进行修改和删除操作，因为没有重写相关的方法。\n\n#### copyOfRange\n按照范围拷贝数组 [from,to) 左开右闭\n```\npublic static <T> T[] copyOfRange(T[] original, int from, int to) {\n    return copyOfRange(original, from, to, (Class<? extends T[]>) original.getClass());\n}\n```\n\n#### sort \n\n集合工具类 Collections.sort 其实就是调用 Arrays.sort 方法对集合进行排序的，该方法先调用 toArray 方法将集合转成object数组，然后再调用 Arrays.sort 方法对数组进行排序，最后再将排序号的数组通过迭代器set到新的集合中去。\n\n```\npublic static void sort(Object[] a) {\n    if (LegacyMergeSort.userRequested)\n        legacyMergeSort(a);\n    else\n        ComparableTimSort.sort(a, 0, a.length, null, 0, 0);\n}\n```\n可以看到sort方法是通过userRequested的标志来选中排序的方式，从jdk7以后默认为false，使用TimSort的方式排序，（通过System.setProperty(\"java.util.Arrays.useLegacyMergeSort\", \"true\")修改）\n\n- userRequested为true使用LegacyMergeSort的方式进行排序，当数组长度小于7时使用插入排序，当数组长度大于7时使用归并排序，归并到长度小于7的长度再次使用插入排序\n- userRequested为false采用TimSort的方式排序\n\n##### TimSort\n+ 1.数组长度小于32时，首先在数组中从开头开始寻找升序的子数组，没有的话找降序的子数组再反转，然后将数组中的剩余元素使用二分查找的方式插入到子数组中\n+ 2.数组长度大于32时，将数组切分若干个长度在[16,32)的区块（jdk里叫run，我理解为区块）\n+ 3.每个区块再使用第一步的方式进行排序排序后将每个区块进行合并，合并的过程有两点优化\n + a.合并区块的过程中通过限制条件来完成将连续的三个区块中较小的两个优先合并降低复杂度\n + b.两个区块合并时，先将区块1的头元素和尾元素插入到区块2中，相当于缩小了插入区块2的范围降低复杂度\n\n```\nstatic void sort(Object[] a, int lo, int hi, Object[] work, int workBase, int workLen) {\n    assert a != null && lo >= 0 && lo <= hi && hi <= a.length;\n\n    int nRemaining  = hi - lo;\n    if (nRemaining < 2)\n        return;  // Arrays of size 0 and 1 are always sorted\n\n    // If array is small, do a \"mini-TimSort\" with no merges\n    if (nRemaining < MIN_MERGE) {\n        int initRunLen = countRunAndMakeAscending(a, lo, hi);\n        binarySort(a, lo, hi, lo + initRunLen);\n        return;\n    }\n\n    /**\n     * March over the array once, left to right, finding natural runs,\n     * extending short natural runs to minRun elements, and merging runs\n     * to maintain stack invariant.\n     */\n    ComparableTimSort ts = new ComparableTimSort(a, work, workBase, workLen);\n    int minRun = minRunLength(nRemaining);\n    do {\n        // Identify next run\n        int runLen = countRunAndMakeAscending(a, lo, hi);\n\n        // If run is short, extend to min(minRun, nRemaining)\n        if (runLen < minRun) {\n            int force = nRemaining <= minRun ? nRemaining : minRun;\n            binarySort(a, lo, lo + force, lo + runLen);\n            runLen = force;\n        }\n\n        // Push run onto pending-run stack, and maybe merge\n        ts.pushRun(lo, runLen);\n        ts.mergeCollapse();\n\n        // Advance to find next run\n        lo += runLen;\n        nRemaining -= runLen;\n    } while (nRemaining != 0);\n\n    // Merge all remaining runs to complete sort\n    assert lo == hi;\n    ts.mergeForceCollapse();\n    assert ts.stackSize == 1;\n}\n```\n","source":"_posts/Arrays.md","raw":"title: Arrays\nauthor: YyWang\ntags: Java\ncatagories: Java\ndate: 2019-07-26 19:31:27\n---\n### Arrays\n#### copyOf\n~~~\npublic static <T,U> T[] copyOf(U[] original, int newLength, Class<? extends T[]> newType) {\n    @SuppressWarnings(\"unchecked\")\n    T[] copy = ((Object)newType == (Object)Object[].class)\n        ? (T[]) new Object[newLength]\n        : (T[]) Array.newInstance(newType.getComponentType(), newLength);\n    System.arraycopy(original, 0, copy, 0,\n                     Math.min(original.length, newLength));\n    return copy;\n}\n~~~\n\n先看要被拷贝到的数组长度是不是够用，够用的话直接调用System.arraycopy方法；不够用创建一个新的与源数组同样长度的数组进行拷贝\n**如果数组中是引用类型，Arrays.copy拷贝的是引用，不会新创建对象，如果要对拷贝的数组做修改操作源数组同样会受到影响，而字符串数组由于字符串常量池的存在，当修改字符串的时候会新创建一个字符串并将新的引用付给数组，所以源数组对应的字符串并不会发生变化**\n\n##### System.arraycopy\n~~~\npublic static native void arraycopy(Object src,  int  srcPos,\n                                    Object dest, int destPos,\n                                    int length);\n~~~\n这是一个本地方法，就看一下参数吧\n\n+ src----the source array. \n+ srcPos----starting position in the source array.\n+ dest----the destination array.\n+ destPos----starting position in the destination data.\n+ length----the number of array elements to be copied.\n\n\n#### asList\n将字符串转成ArrayList集合\n\n~~~\npublic static <T> List<T> asList(T... a) {\n    return new ArrayList<>(a);\n}\n~~~\n\n这里的ArrayList是Arrays中的一个内部类，继承了AbstractList方法，内部值实现了部分方法，简单点说这个集合是只读的，不能进行修改和删除操作，因为没有重写相关的方法。\n\n#### copyOfRange\n按照范围拷贝数组 [from,to) 左开右闭\n```\npublic static <T> T[] copyOfRange(T[] original, int from, int to) {\n    return copyOfRange(original, from, to, (Class<? extends T[]>) original.getClass());\n}\n```\n\n#### sort \n\n集合工具类 Collections.sort 其实就是调用 Arrays.sort 方法对集合进行排序的，该方法先调用 toArray 方法将集合转成object数组，然后再调用 Arrays.sort 方法对数组进行排序，最后再将排序号的数组通过迭代器set到新的集合中去。\n\n```\npublic static void sort(Object[] a) {\n    if (LegacyMergeSort.userRequested)\n        legacyMergeSort(a);\n    else\n        ComparableTimSort.sort(a, 0, a.length, null, 0, 0);\n}\n```\n可以看到sort方法是通过userRequested的标志来选中排序的方式，从jdk7以后默认为false，使用TimSort的方式排序，（通过System.setProperty(\"java.util.Arrays.useLegacyMergeSort\", \"true\")修改）\n\n- userRequested为true使用LegacyMergeSort的方式进行排序，当数组长度小于7时使用插入排序，当数组长度大于7时使用归并排序，归并到长度小于7的长度再次使用插入排序\n- userRequested为false采用TimSort的方式排序\n\n##### TimSort\n+ 1.数组长度小于32时，首先在数组中从开头开始寻找升序的子数组，没有的话找降序的子数组再反转，然后将数组中的剩余元素使用二分查找的方式插入到子数组中\n+ 2.数组长度大于32时，将数组切分若干个长度在[16,32)的区块（jdk里叫run，我理解为区块）\n+ 3.每个区块再使用第一步的方式进行排序排序后将每个区块进行合并，合并的过程有两点优化\n + a.合并区块的过程中通过限制条件来完成将连续的三个区块中较小的两个优先合并降低复杂度\n + b.两个区块合并时，先将区块1的头元素和尾元素插入到区块2中，相当于缩小了插入区块2的范围降低复杂度\n\n```\nstatic void sort(Object[] a, int lo, int hi, Object[] work, int workBase, int workLen) {\n    assert a != null && lo >= 0 && lo <= hi && hi <= a.length;\n\n    int nRemaining  = hi - lo;\n    if (nRemaining < 2)\n        return;  // Arrays of size 0 and 1 are always sorted\n\n    // If array is small, do a \"mini-TimSort\" with no merges\n    if (nRemaining < MIN_MERGE) {\n        int initRunLen = countRunAndMakeAscending(a, lo, hi);\n        binarySort(a, lo, hi, lo + initRunLen);\n        return;\n    }\n\n    /**\n     * March over the array once, left to right, finding natural runs,\n     * extending short natural runs to minRun elements, and merging runs\n     * to maintain stack invariant.\n     */\n    ComparableTimSort ts = new ComparableTimSort(a, work, workBase, workLen);\n    int minRun = minRunLength(nRemaining);\n    do {\n        // Identify next run\n        int runLen = countRunAndMakeAscending(a, lo, hi);\n\n        // If run is short, extend to min(minRun, nRemaining)\n        if (runLen < minRun) {\n            int force = nRemaining <= minRun ? nRemaining : minRun;\n            binarySort(a, lo, lo + force, lo + runLen);\n            runLen = force;\n        }\n\n        // Push run onto pending-run stack, and maybe merge\n        ts.pushRun(lo, runLen);\n        ts.mergeCollapse();\n\n        // Advance to find next run\n        lo += runLen;\n        nRemaining -= runLen;\n    } while (nRemaining != 0);\n\n    // Merge all remaining runs to complete sort\n    assert lo == hi;\n    ts.mergeForceCollapse();\n    assert ts.stackSize == 1;\n}\n```\n","slug":"Arrays","published":1,"updated":"2021-07-13T12:27:08.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj6l000e81fy0jwn0fo7","content":"<h3 id=\"Arrays\"><a href=\"#Arrays\" class=\"headerlink\" title=\"Arrays\"></a>Arrays</h3><h4 id=\"copyOf\"><a href=\"#copyOf\" class=\"headerlink\" title=\"copyOf\"></a>copyOf</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static &lt;T,U&gt; T[] copyOf(U[] original, int newLength, Class&lt;? extends T[]&gt; newType) &#123;</span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    T[] copy = ((Object)newType == (Object)Object[].class)</span><br><span class=\"line\">        ? (T[]) new Object[newLength]</span><br><span class=\"line\">        : (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class=\"line\">    System.arraycopy(original, 0, copy, 0,</span><br><span class=\"line\">                     Math.min(original.length, newLength));</span><br><span class=\"line\">    return copy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>先看要被拷贝到的数组长度是不是够用，够用的话直接调用System.arraycopy方法；不够用创建一个新的与源数组同样长度的数组进行拷贝<br><strong>如果数组中是引用类型，Arrays.copy拷贝的是引用，不会新创建对象，如果要对拷贝的数组做修改操作源数组同样会受到影响，而字符串数组由于字符串常量池的存在，当修改字符串的时候会新创建一个字符串并将新的引用付给数组，所以源数组对应的字符串并不会发生变化</strong></p>\n<h5 id=\"System-arraycopy\"><a href=\"#System-arraycopy\" class=\"headerlink\" title=\"System.arraycopy\"></a>System.arraycopy</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static native void arraycopy(Object src,  int  srcPos,</span><br><span class=\"line\">                                    Object dest, int destPos,</span><br><span class=\"line\">                                    int length);</span><br></pre></td></tr></table></figure>\n<p>这是一个本地方法，就看一下参数吧</p>\n<ul>\n<li>src—-the source array. </li>\n<li>srcPos—-starting position in the source array.</li>\n<li>dest—-the destination array.</li>\n<li>destPos—-starting position in the destination data.</li>\n<li>length—-the number of array elements to be copied.</li>\n</ul>\n<h4 id=\"asList\"><a href=\"#asList\" class=\"headerlink\" title=\"asList\"></a>asList</h4><p>将字符串转成ArrayList集合</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static &lt;T&gt; List&lt;T&gt; asList(T... a) &#123;</span><br><span class=\"line\">    return new ArrayList&lt;&gt;(a);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的ArrayList是Arrays中的一个内部类，继承了AbstractList方法，内部值实现了部分方法，简单点说这个集合是只读的，不能进行修改和删除操作，因为没有重写相关的方法。</p>\n<h4 id=\"copyOfRange\"><a href=\"#copyOfRange\" class=\"headerlink\" title=\"copyOfRange\"></a>copyOfRange</h4><p>按照范围拷贝数组 [from,to) 左开右闭<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static &lt;T&gt; T[] copyOfRange(T[] original, int from, int to) &#123;</span><br><span class=\"line\">    return copyOfRange(original, from, to, (Class&lt;? extends T[]&gt;) original.getClass());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h4><p>集合工具类 Collections.sort 其实就是调用 Arrays.sort 方法对集合进行排序的，该方法先调用 toArray 方法将集合转成object数组，然后再调用 Arrays.sort 方法对数组进行排序，最后再将排序号的数组通过迭代器set到新的集合中去。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void sort(Object[] a) &#123;</span><br><span class=\"line\">    if (LegacyMergeSort.userRequested)</span><br><span class=\"line\">        legacyMergeSort(a);</span><br><span class=\"line\">    else</span><br><span class=\"line\">        ComparableTimSort.sort(a, 0, a.length, null, 0, 0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到sort方法是通过userRequested的标志来选中排序的方式，从jdk7以后默认为false，使用TimSort的方式排序，（通过System.setProperty(“java.util.Arrays.useLegacyMergeSort”, “true”)修改）</p>\n<ul>\n<li>userRequested为true使用LegacyMergeSort的方式进行排序，当数组长度小于7时使用插入排序，当数组长度大于7时使用归并排序，归并到长度小于7的长度再次使用插入排序</li>\n<li>userRequested为false采用TimSort的方式排序</li>\n</ul>\n<h5 id=\"TimSort\"><a href=\"#TimSort\" class=\"headerlink\" title=\"TimSort\"></a>TimSort</h5><ul>\n<li>1.数组长度小于32时，首先在数组中从开头开始寻找升序的子数组，没有的话找降序的子数组再反转，然后将数组中的剩余元素使用二分查找的方式插入到子数组中</li>\n<li>2.数组长度大于32时，将数组切分若干个长度在[16,32)的区块（jdk里叫run，我理解为区块）</li>\n<li>3.每个区块再使用第一步的方式进行排序排序后将每个区块进行合并，合并的过程有两点优化<ul>\n<li>a.合并区块的过程中通过限制条件来完成将连续的三个区块中较小的两个优先合并降低复杂度</li>\n<li>b.两个区块合并时，先将区块1的头元素和尾元素插入到区块2中，相当于缩小了插入区块2的范围降低复杂度</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static void sort(Object[] a, int lo, int hi, Object[] work, int workBase, int workLen) &#123;</span><br><span class=\"line\">    assert a != null &amp;&amp; lo &gt;= 0 &amp;&amp; lo &lt;= hi &amp;&amp; hi &lt;= a.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    int nRemaining  = hi - lo;</span><br><span class=\"line\">    if (nRemaining &lt; 2)</span><br><span class=\"line\">        return;  // Arrays of size 0 and 1 are always sorted</span><br><span class=\"line\"></span><br><span class=\"line\">    // If array is small, do a &quot;mini-TimSort&quot; with no merges</span><br><span class=\"line\">    if (nRemaining &lt; MIN_MERGE) &#123;</span><br><span class=\"line\">        int initRunLen = countRunAndMakeAscending(a, lo, hi);</span><br><span class=\"line\">        binarySort(a, lo, hi, lo + initRunLen);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * March over the array once, left to right, finding natural runs,</span><br><span class=\"line\">     * extending short natural runs to minRun elements, and merging runs</span><br><span class=\"line\">     * to maintain stack invariant.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    ComparableTimSort ts = new ComparableTimSort(a, work, workBase, workLen);</span><br><span class=\"line\">    int minRun = minRunLength(nRemaining);</span><br><span class=\"line\">    do &#123;</span><br><span class=\"line\">        // Identify next run</span><br><span class=\"line\">        int runLen = countRunAndMakeAscending(a, lo, hi);</span><br><span class=\"line\"></span><br><span class=\"line\">        // If run is short, extend to min(minRun, nRemaining)</span><br><span class=\"line\">        if (runLen &lt; minRun) &#123;</span><br><span class=\"line\">            int force = nRemaining &lt;= minRun ? nRemaining : minRun;</span><br><span class=\"line\">            binarySort(a, lo, lo + force, lo + runLen);</span><br><span class=\"line\">            runLen = force;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Push run onto pending-run stack, and maybe merge</span><br><span class=\"line\">        ts.pushRun(lo, runLen);</span><br><span class=\"line\">        ts.mergeCollapse();</span><br><span class=\"line\"></span><br><span class=\"line\">        // Advance to find next run</span><br><span class=\"line\">        lo += runLen;</span><br><span class=\"line\">        nRemaining -= runLen;</span><br><span class=\"line\">    &#125; while (nRemaining != 0);</span><br><span class=\"line\"></span><br><span class=\"line\">    // Merge all remaining runs to complete sort</span><br><span class=\"line\">    assert lo == hi;</span><br><span class=\"line\">    ts.mergeForceCollapse();</span><br><span class=\"line\">    assert ts.stackSize == 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Arrays\"><a href=\"#Arrays\" class=\"headerlink\" title=\"Arrays\"></a>Arrays</h3><h4 id=\"copyOf\"><a href=\"#copyOf\" class=\"headerlink\" title=\"copyOf\"></a>copyOf</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static &lt;T,U&gt; T[] copyOf(U[] original, int newLength, Class&lt;? extends T[]&gt; newType) &#123;</span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    T[] copy = ((Object)newType == (Object)Object[].class)</span><br><span class=\"line\">        ? (T[]) new Object[newLength]</span><br><span class=\"line\">        : (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class=\"line\">    System.arraycopy(original, 0, copy, 0,</span><br><span class=\"line\">                     Math.min(original.length, newLength));</span><br><span class=\"line\">    return copy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>先看要被拷贝到的数组长度是不是够用，够用的话直接调用System.arraycopy方法；不够用创建一个新的与源数组同样长度的数组进行拷贝<br><strong>如果数组中是引用类型，Arrays.copy拷贝的是引用，不会新创建对象，如果要对拷贝的数组做修改操作源数组同样会受到影响，而字符串数组由于字符串常量池的存在，当修改字符串的时候会新创建一个字符串并将新的引用付给数组，所以源数组对应的字符串并不会发生变化</strong></p>\n<h5 id=\"System-arraycopy\"><a href=\"#System-arraycopy\" class=\"headerlink\" title=\"System.arraycopy\"></a>System.arraycopy</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static native void arraycopy(Object src,  int  srcPos,</span><br><span class=\"line\">                                    Object dest, int destPos,</span><br><span class=\"line\">                                    int length);</span><br></pre></td></tr></table></figure>\n<p>这是一个本地方法，就看一下参数吧</p>\n<ul>\n<li>src—-the source array. </li>\n<li>srcPos—-starting position in the source array.</li>\n<li>dest—-the destination array.</li>\n<li>destPos—-starting position in the destination data.</li>\n<li>length—-the number of array elements to be copied.</li>\n</ul>\n<h4 id=\"asList\"><a href=\"#asList\" class=\"headerlink\" title=\"asList\"></a>asList</h4><p>将字符串转成ArrayList集合</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static &lt;T&gt; List&lt;T&gt; asList(T... a) &#123;</span><br><span class=\"line\">    return new ArrayList&lt;&gt;(a);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的ArrayList是Arrays中的一个内部类，继承了AbstractList方法，内部值实现了部分方法，简单点说这个集合是只读的，不能进行修改和删除操作，因为没有重写相关的方法。</p>\n<h4 id=\"copyOfRange\"><a href=\"#copyOfRange\" class=\"headerlink\" title=\"copyOfRange\"></a>copyOfRange</h4><p>按照范围拷贝数组 [from,to) 左开右闭<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static &lt;T&gt; T[] copyOfRange(T[] original, int from, int to) &#123;</span><br><span class=\"line\">    return copyOfRange(original, from, to, (Class&lt;? extends T[]&gt;) original.getClass());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h4><p>集合工具类 Collections.sort 其实就是调用 Arrays.sort 方法对集合进行排序的，该方法先调用 toArray 方法将集合转成object数组，然后再调用 Arrays.sort 方法对数组进行排序，最后再将排序号的数组通过迭代器set到新的集合中去。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void sort(Object[] a) &#123;</span><br><span class=\"line\">    if (LegacyMergeSort.userRequested)</span><br><span class=\"line\">        legacyMergeSort(a);</span><br><span class=\"line\">    else</span><br><span class=\"line\">        ComparableTimSort.sort(a, 0, a.length, null, 0, 0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到sort方法是通过userRequested的标志来选中排序的方式，从jdk7以后默认为false，使用TimSort的方式排序，（通过System.setProperty(“java.util.Arrays.useLegacyMergeSort”, “true”)修改）</p>\n<ul>\n<li>userRequested为true使用LegacyMergeSort的方式进行排序，当数组长度小于7时使用插入排序，当数组长度大于7时使用归并排序，归并到长度小于7的长度再次使用插入排序</li>\n<li>userRequested为false采用TimSort的方式排序</li>\n</ul>\n<h5 id=\"TimSort\"><a href=\"#TimSort\" class=\"headerlink\" title=\"TimSort\"></a>TimSort</h5><ul>\n<li>1.数组长度小于32时，首先在数组中从开头开始寻找升序的子数组，没有的话找降序的子数组再反转，然后将数组中的剩余元素使用二分查找的方式插入到子数组中</li>\n<li>2.数组长度大于32时，将数组切分若干个长度在[16,32)的区块（jdk里叫run，我理解为区块）</li>\n<li>3.每个区块再使用第一步的方式进行排序排序后将每个区块进行合并，合并的过程有两点优化<ul>\n<li>a.合并区块的过程中通过限制条件来完成将连续的三个区块中较小的两个优先合并降低复杂度</li>\n<li>b.两个区块合并时，先将区块1的头元素和尾元素插入到区块2中，相当于缩小了插入区块2的范围降低复杂度</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static void sort(Object[] a, int lo, int hi, Object[] work, int workBase, int workLen) &#123;</span><br><span class=\"line\">    assert a != null &amp;&amp; lo &gt;= 0 &amp;&amp; lo &lt;= hi &amp;&amp; hi &lt;= a.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    int nRemaining  = hi - lo;</span><br><span class=\"line\">    if (nRemaining &lt; 2)</span><br><span class=\"line\">        return;  // Arrays of size 0 and 1 are always sorted</span><br><span class=\"line\"></span><br><span class=\"line\">    // If array is small, do a &quot;mini-TimSort&quot; with no merges</span><br><span class=\"line\">    if (nRemaining &lt; MIN_MERGE) &#123;</span><br><span class=\"line\">        int initRunLen = countRunAndMakeAscending(a, lo, hi);</span><br><span class=\"line\">        binarySort(a, lo, hi, lo + initRunLen);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * March over the array once, left to right, finding natural runs,</span><br><span class=\"line\">     * extending short natural runs to minRun elements, and merging runs</span><br><span class=\"line\">     * to maintain stack invariant.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    ComparableTimSort ts = new ComparableTimSort(a, work, workBase, workLen);</span><br><span class=\"line\">    int minRun = minRunLength(nRemaining);</span><br><span class=\"line\">    do &#123;</span><br><span class=\"line\">        // Identify next run</span><br><span class=\"line\">        int runLen = countRunAndMakeAscending(a, lo, hi);</span><br><span class=\"line\"></span><br><span class=\"line\">        // If run is short, extend to min(minRun, nRemaining)</span><br><span class=\"line\">        if (runLen &lt; minRun) &#123;</span><br><span class=\"line\">            int force = nRemaining &lt;= minRun ? nRemaining : minRun;</span><br><span class=\"line\">            binarySort(a, lo, lo + force, lo + runLen);</span><br><span class=\"line\">            runLen = force;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Push run onto pending-run stack, and maybe merge</span><br><span class=\"line\">        ts.pushRun(lo, runLen);</span><br><span class=\"line\">        ts.mergeCollapse();</span><br><span class=\"line\"></span><br><span class=\"line\">        // Advance to find next run</span><br><span class=\"line\">        lo += runLen;</span><br><span class=\"line\">        nRemaining -= runLen;</span><br><span class=\"line\">    &#125; while (nRemaining != 0);</span><br><span class=\"line\"></span><br><span class=\"line\">    // Merge all remaining runs to complete sort</span><br><span class=\"line\">    assert lo == hi;</span><br><span class=\"line\">    ts.mergeForceCollapse();</span><br><span class=\"line\">    assert ts.stackSize == 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"AQS分析","author":"YyWang","date":"2020-05-20T09:16:07.000Z","_content":"\n### AQS AbstraceQueuedSynchronizer\n* 维护了一个共享变量state（int类型被volatile修饰保证线程的可见性）\n* 通过不同线程修改state的状态来决定线程获取锁的状态，并将这些线程维护在一个队列里，每个线程都封装成一个Node对象\n* Node中定义了线程的状态 复制表示Node处于有效的等待状态，正值表示Node被取消\n\t* CANCELLED（1） 当前Node已经取消调度，超时或中断会变更为次状态，进入该状态后的Node不再变化\n\t* SIGNAL（-1）表示后继Node等待当前Node唤醒，后继Node入队，会修改前驱Node状态为SIGNAL\n\t* CONDITION（-2）表示Node等待在Condition上，其他线程调用signal()方法后，CONDITION的Node会从等待队列中转移到同步队列，等待获取同步锁\n\t* PROPAGATE（-3）共享模式下，前驱节点不仅会唤醒后继Node，还可能唤醒后继的后继Node\n\t* 0 新节点入队时的默认状态\n* 定义了独占（Exclusive）和共享（share）两种对state的使用方式\n\n1. 独占 exclusive 只能一个线程操作state；使用 acquire-relase 方法获取和释放资源\n   * acquire\n     * tryAcquire 根据需要具体实现 尝试获取资源，成功返回true，失败返回false\n     * 获取资源失败，将当前线程入队，找到安全点进入等待状态\n     * 当被唤醒后判断自己是否是队列中的老二，不是老二找到安全点进入等待状态；是老二尝试获取资源，获取失败继续进入等待状态，等待别唤醒\n   * relase\n     * tryRelase 根据需要具体实现 尝试释放资源，成功返回true，失败返回false\n     * 当资源全部被释放后（state=0，可能被重入state的值大于0）会唤醒队列中的老二来获取资源\n\n![upload successful](/images/acquire-relase.png)\n\n2. 共享 share 多个线程可以同时操作state；使用 acquireShared-relaseShared 方法获取和释放资源\n   * acquireShared\n\t   * tryAcquireShared 根据需要具体实现 尝试获取资源，负数表示失败；正数表示成功，数值表示剩余的资源数量\n\t   * 获取资源失败，将当前线程入队，入队后如果是老二节点尝试获取资源，老二节点获取资源成功，根据剩余资源量唤醒后面的线程\n\t   * 不是老二节点或者老二节点获取资源失败，找到安全点进入等待状态，等待被唤醒\n   * relaseShared\n\t   * tryRelaseShared 根据需要具体实现 尝试释放资源，成功返回true，失败返回false\n\t   * 释放资源成功就去唤醒队列中的老二，老二被唤醒尝试获取资源进入到acquireShared中的第二步\n\n![upload successful](/images/acquireShared-relaseShared.png)\n\n**总结**\n\nAQS其实是一个抽象的基于队列同步器（正如其名称所示，但是并没有使用抽象方法，而是将可扩展的方法默认抛出异常，留给子类去重写覆盖，可能是考虑到单独扩展共享模式或者独占模式，只需实现两个方法即可，不需要全都重写，根据需要选择重写，这样更灵活一些），其中封装了独占模式和共享模式下获取和释放资源的方法，其中没有给出tryAcquire-tryRelase和tryAcquireShared-tryRelaseShared的具体实现，可以根据需要重写这些方法即可，不需要去关心队列中线程的状态变化；比如ReentrantLock就是重写了独占模式中的方法实现；CountDownLatch是重写了共享模式中的方法实现\n\n### ReentrantLock\n\nReentrantLock中重写了tryAcquire和tryRelase，所有是独占模式，所以ReentrantLock是独占锁并且是可重入的，其中分别有公平和非公平两种实现，默认是非公平的\n\n#### 公平\n1. lock() -> acquire(1) 获取锁（修改资源的状态为1）其中使用的时AQS的实现\n2. 重写了tryAcquire方法，*如果资源状态是空闲（state=0）并且队列中没有等待资源的线程，才会去获取资源*；如果是当前线程获取资源，直接修改状态并获得锁成功（state += n；可重入；）；其他情况返回false获取资源失败\n3. 之后就是AQS中的逻辑 入队、等待被唤醒 balabala...\n\n```\n// 公平锁的实现 Sync继承了AQS\nstatic final class FairSync extends Sync {\n\n    final void lock() {\n        acquire(1);// 获取资源，调用AQS中的 acquire(1) 方法\n    }\n\n    // AQS中的 acquire 方法调用了 tryAcquire 方法，在这里重写执行\n    protected final boolean tryAcquire(int acquires) {\n        final Thread current = Thread.currentThread();\n        int c = getState();\n        if (c == 0) {\n            // 当前资源空闲并且队列中没有等待资源的线程才会去CAS获取资源\n            if (!hasQueuedPredecessors() &&\n                compareAndSetState(0, acquires)) {\n                setExclusiveOwnerThread(current);\n                return true;\n            }\n        }// 如果是当前线程直接修改资源，返回成功；可重入\n        else if (current == getExclusiveOwnerThread()) {\n            int nextc = c + acquires;\n            if (nextc < 0)\n                throw new Error(\"Maximum lock count exceeded\");\n            setState(nextc);\n            return true;\n        }\n        eturn false;\n    }\n}\n```\n\n#### 非公平\n1. lock -> 抢占锁（CAS修改资源状态） -> 抢锁失败调用acquire(1)获取锁，同样适用AQS的实现\n2. 重写了tryAcquire方法，*如果资源状态是空闲（state=0）就CAS修改状态的值获取资源*；如果是当前线程获取资源，修改状态获取资源成功（与公平锁相同，CAS修改state，可重入）；其他情况返回false获取资源失败\n3. （相同逻辑）入队、等待被唤醒 balabala...\n\n\n```\n// Sync继承了AQS\nstatic final class NonfairSync extends Sync {\n    \n    final void lock() {\n        // lock的时候抢占一次资源\n        if (compareAndSetState(0, 1))\n            setExclusiveOwnerThread(Thread.currentThread());\n        else\n            acquire(1);// 没抢占到调用 acquire 方法（AQS中）\n    }\n    // AQS中的 acquire 方法调用了 tryAcquire 方法，在这里重写执行\n    protected final boolean tryAcquire(int acquires) {\n        return nonfairTryAcquire(acquires);// 父类中实现\n    }\n}\n\nfinal boolean nonfairTryAcquire(int acquires) {\n    final Thread current = Thread.currentThread();\n    int c = getState();\n    if (c == 0) {// 与公平锁的实现不同，这资源空闲会再抢占一次资源\n        if (compareAndSetState(0, acquires)) {\n            setExclusiveOwnerThread(current);\n            return true;\n        }\n    }// 与公平锁一样 可重入\n    else if (current == getExclusiveOwnerThread()) {\n        int nextc = c + acquires;\n        if (nextc < 0) // overflow\n            throw new Error(\"Maximum lock count exceeded\");\n        setState(nextc);\n        return true;\n    }\n    return false;\n}\n```\n#### 总结\n1. 公平锁和非公平锁释放资源都使用的父类中的 tryRelase 方法，简单的逻辑，确认当前线程在占用资源后cas修改资源的状态，返回资源是否空闲（state==0?）其他逻辑和AQS中的 relase 相同\n2. 可以看到斜体的地方就是公平锁和非公平锁的区别，在资源状态空闲的时候，非公平锁会去抢占资源而公平锁判断队列中没有等待资源的线程才会去获取资源；还有在Acquire之前非公平锁会去抢占一次资源；非公平锁会在lock的时候抢占资源，没有抢到会执行tryAcquire方法，如果此时刚好资源被释放还会去抢占一次资源，都失败了就会入队进入等待状态\n\n### 共享模式的实现\n\n本来想找一个共享模式的实现来分析一下，在AQS中查到实现有这么几个，Semaphore、CountDownLatch和ReentrantReadWriteLock，前两个比较简单来分析一下，后一个比较复杂段时间还搞不定（柿子要挑软的捏是不是？这里再挖个坑吧）\n\n#### Semaphore\nSemaphore用来控制线程的并发量，指定并发量就是Semaphore中的许可，拿到许可可以运行，没有拿到许可进入等待状态，有释放的许可唤醒等待的线程，保证线程运行的数量，类似于令牌桶的亚子；其中重写了 tryAcquireShared 和 tryRelaseShared 方法，所以Semaphore是共享模式的实现，同样有公平和非公平两种方式，默认非公平的；\n\n1. acquire 获取许可 -> 调用 acquireSharedInterruptibly 方法，与acquireShared不同的是先判断线程的中断状态，如果中断抛异常，\n2. 调用 tryAcquireShared 方法获取资源（公平模式下线判断队列中是否有等待资源的线程，有则返回-1表示失败；没有返回剩余资源数量，获取资源成功；非公平模式下不用判断队列是否有线程直接去获取资源，返回剩余的资源），后面同AQS中的逻辑 \n\n\n```\n// 构造方法初始化AQS的state为permit的数量\npublic Semaphore(int permits) {\n    sync = new NonfairSync(permits);\n}\n// 转调AQS中 acquireSharedInterruptibly 方法\npublic void acquire() throws InterruptedException {\n    sync.acquireSharedInterruptibly(1);// AQS中的实现\n}\npublic final void acquireSharedInterruptibly(int arg)\n        throws InterruptedException {\n    if (Thread.interrupted())\n        throw new InterruptedException();\n    if (tryAcquireShared(arg) < 0)// 这里调用 tryAcquireShared 方法\n        doAcquireSharedInterruptibly(arg);\n} \n// 非公平模式下转调 nonfairTryAcquireShared 方法\nprotected int tryAcquireShared(int acquires) {\n    return nonfairTryAcquireShared(acquires);\n}\nfinal int nonfairTryAcquireShared(int acquires) {\n    for (;;) {\n        int available = getState();\n        int remaining = available - acquires;// 获取资源后的余量\n        if (remaining < 0 ||\n            compareAndSetState(available, remaining))// 余量大于0 CAS修改状态获取资源成功 否则执行AQS中剩下的逻辑 入队、等待...\n            return remaining;\n    }\n}\n// 公平模式下直接重写 tryAcquireShared 方法\nprotected int tryAcquireShared(int acquires) {\n    for (;;) {\n        if (hasQueuedPredecessors())// 比非公平模式多了判断队列中是否有等待的线程\n            return -1;\n        int available = getState();\n        int remaining = available - acquires;\n        if (remaining < 0 ||\n            compareAndSetState(available, remaining))\n            return remaining;\n    }\n}\n// relase 方法转调AQS中的 relaseShared 方法\npublic void release(int permits) {\n    if (permits < 0) throw new IllegalArgumentException();\n    sync.releaseShared(permits);// 其中调用 tryRelaseShared 方法\n}\n// 重写 tryRelaseShared 方法(公平非公平相同) 循环CAS改变状态，判断边界范围\nprotected final boolean tryReleaseShared(int releases) {\n    for (;;) {\n        int current = getState();\n        int next = current + releases;\n        if (next < current) // overflow\n            throw new Error(\"Maximum permit count exceeded\");\n        if (compareAndSetState(current, next))\n            return true;\n    }\n}\n```\n#### CountDownLatch\nCountDownLatch通常用来判断多个线程是否都执行完毕，初始化的时候将AQS中的state设置为等待的线程数量（n），表示资源被n个线程获取；\n\t\n1. await方法转调acquireSharedInterruptibly其中又转调 tryAcquireShared ，返回state是否为0，因为初始化为n所以不为0返回-1，表示获取资源失败将线程入队等待\n2. 线程执行完毕后调用countDown方法，转调relaseShared方法将资源的数量减一，当所有线程都调用了countDown此时资源被完全释放（state=0）线程被唤醒，再次 tryAcquireShared 获取state为0返回0，表示获取资源成功，执行后面的逻辑\n\n\n```\n// 构造方法初始化AQS的state为count；Sync继承AQS\npublic CountDownLatch(int count) {\n    if (count < 0) throw new IllegalArgumentException(\"count < 0\");\n    this.sync = new Sync(count);\n}\n// 转调AQS中 acquireSharedInterruptibly 方法\npublic void await() throws InterruptedException {\n    sync.acquireSharedInterruptibly(1);// AQS中的实现\n}\npublic final void acquireSharedInterruptibly(int arg)\n        throws InterruptedException {\n    if (Thread.interrupted())\n        throw new InterruptedException();\n    if (tryAcquireShared(arg) < 0)// 这里调用 tryAcquireShared 方法\n        doAcquireSharedInterruptibly(arg);\n}\n// 重写了 tryAcquireShared 方法\nprotected int tryAcquireShared(int acquires) {\n    // state为0返回1表示获取资源成功，不为0返回-1表示获取资源失败\n    // 由于刚刚初始化了state=count，假设当前还没有释放资源，state不为0返回-1表示失败，后面就是AQS中的逻辑，入队、等待...\n    return (getState() == 0) ? 1 : -1;\n}\n// countDown 方法转调 relaseShared 方法\npublic void countDown() {\n    sync.releaseShared(1);// AQS中的实现 其中调用了 tryRelaseShared 方法\n}\n// 重写了 tryRelaseShared 方法，如果state-1之后还不为0返回false表示释放失败，其实是成功的，返回失败是因为还要等待其他线程\n// 先不去唤醒等待的线程，当释放资源后state为0返回成功，这时候再去唤醒等待的线程\nprotected boolean tryReleaseShared(int releases) {\n    // 循环CAS操作将state-1\n    for (;;) {\n        int c = getState();\n        if (c == 0)\n            return false;\n        int nextc = c-1;\n        if (compareAndSetState(c, nextc))\n            return nextc == 0;\n    }\n}\n```\n\n\n### 参考文献\n[Java并发之AQS详解](https://www.cnblogs.com/waterystone/p/4920797.html)\n","source":"_posts/AQS分析.md","raw":"title: AQS分析\nauthor: YyWang\ntags: Java\ncategories: Java\ndate: 2020-05-20 17:16:07\n---\n\n### AQS AbstraceQueuedSynchronizer\n* 维护了一个共享变量state（int类型被volatile修饰保证线程的可见性）\n* 通过不同线程修改state的状态来决定线程获取锁的状态，并将这些线程维护在一个队列里，每个线程都封装成一个Node对象\n* Node中定义了线程的状态 复制表示Node处于有效的等待状态，正值表示Node被取消\n\t* CANCELLED（1） 当前Node已经取消调度，超时或中断会变更为次状态，进入该状态后的Node不再变化\n\t* SIGNAL（-1）表示后继Node等待当前Node唤醒，后继Node入队，会修改前驱Node状态为SIGNAL\n\t* CONDITION（-2）表示Node等待在Condition上，其他线程调用signal()方法后，CONDITION的Node会从等待队列中转移到同步队列，等待获取同步锁\n\t* PROPAGATE（-3）共享模式下，前驱节点不仅会唤醒后继Node，还可能唤醒后继的后继Node\n\t* 0 新节点入队时的默认状态\n* 定义了独占（Exclusive）和共享（share）两种对state的使用方式\n\n1. 独占 exclusive 只能一个线程操作state；使用 acquire-relase 方法获取和释放资源\n   * acquire\n     * tryAcquire 根据需要具体实现 尝试获取资源，成功返回true，失败返回false\n     * 获取资源失败，将当前线程入队，找到安全点进入等待状态\n     * 当被唤醒后判断自己是否是队列中的老二，不是老二找到安全点进入等待状态；是老二尝试获取资源，获取失败继续进入等待状态，等待别唤醒\n   * relase\n     * tryRelase 根据需要具体实现 尝试释放资源，成功返回true，失败返回false\n     * 当资源全部被释放后（state=0，可能被重入state的值大于0）会唤醒队列中的老二来获取资源\n\n![upload successful](/images/acquire-relase.png)\n\n2. 共享 share 多个线程可以同时操作state；使用 acquireShared-relaseShared 方法获取和释放资源\n   * acquireShared\n\t   * tryAcquireShared 根据需要具体实现 尝试获取资源，负数表示失败；正数表示成功，数值表示剩余的资源数量\n\t   * 获取资源失败，将当前线程入队，入队后如果是老二节点尝试获取资源，老二节点获取资源成功，根据剩余资源量唤醒后面的线程\n\t   * 不是老二节点或者老二节点获取资源失败，找到安全点进入等待状态，等待被唤醒\n   * relaseShared\n\t   * tryRelaseShared 根据需要具体实现 尝试释放资源，成功返回true，失败返回false\n\t   * 释放资源成功就去唤醒队列中的老二，老二被唤醒尝试获取资源进入到acquireShared中的第二步\n\n![upload successful](/images/acquireShared-relaseShared.png)\n\n**总结**\n\nAQS其实是一个抽象的基于队列同步器（正如其名称所示，但是并没有使用抽象方法，而是将可扩展的方法默认抛出异常，留给子类去重写覆盖，可能是考虑到单独扩展共享模式或者独占模式，只需实现两个方法即可，不需要全都重写，根据需要选择重写，这样更灵活一些），其中封装了独占模式和共享模式下获取和释放资源的方法，其中没有给出tryAcquire-tryRelase和tryAcquireShared-tryRelaseShared的具体实现，可以根据需要重写这些方法即可，不需要去关心队列中线程的状态变化；比如ReentrantLock就是重写了独占模式中的方法实现；CountDownLatch是重写了共享模式中的方法实现\n\n### ReentrantLock\n\nReentrantLock中重写了tryAcquire和tryRelase，所有是独占模式，所以ReentrantLock是独占锁并且是可重入的，其中分别有公平和非公平两种实现，默认是非公平的\n\n#### 公平\n1. lock() -> acquire(1) 获取锁（修改资源的状态为1）其中使用的时AQS的实现\n2. 重写了tryAcquire方法，*如果资源状态是空闲（state=0）并且队列中没有等待资源的线程，才会去获取资源*；如果是当前线程获取资源，直接修改状态并获得锁成功（state += n；可重入；）；其他情况返回false获取资源失败\n3. 之后就是AQS中的逻辑 入队、等待被唤醒 balabala...\n\n```\n// 公平锁的实现 Sync继承了AQS\nstatic final class FairSync extends Sync {\n\n    final void lock() {\n        acquire(1);// 获取资源，调用AQS中的 acquire(1) 方法\n    }\n\n    // AQS中的 acquire 方法调用了 tryAcquire 方法，在这里重写执行\n    protected final boolean tryAcquire(int acquires) {\n        final Thread current = Thread.currentThread();\n        int c = getState();\n        if (c == 0) {\n            // 当前资源空闲并且队列中没有等待资源的线程才会去CAS获取资源\n            if (!hasQueuedPredecessors() &&\n                compareAndSetState(0, acquires)) {\n                setExclusiveOwnerThread(current);\n                return true;\n            }\n        }// 如果是当前线程直接修改资源，返回成功；可重入\n        else if (current == getExclusiveOwnerThread()) {\n            int nextc = c + acquires;\n            if (nextc < 0)\n                throw new Error(\"Maximum lock count exceeded\");\n            setState(nextc);\n            return true;\n        }\n        eturn false;\n    }\n}\n```\n\n#### 非公平\n1. lock -> 抢占锁（CAS修改资源状态） -> 抢锁失败调用acquire(1)获取锁，同样适用AQS的实现\n2. 重写了tryAcquire方法，*如果资源状态是空闲（state=0）就CAS修改状态的值获取资源*；如果是当前线程获取资源，修改状态获取资源成功（与公平锁相同，CAS修改state，可重入）；其他情况返回false获取资源失败\n3. （相同逻辑）入队、等待被唤醒 balabala...\n\n\n```\n// Sync继承了AQS\nstatic final class NonfairSync extends Sync {\n    \n    final void lock() {\n        // lock的时候抢占一次资源\n        if (compareAndSetState(0, 1))\n            setExclusiveOwnerThread(Thread.currentThread());\n        else\n            acquire(1);// 没抢占到调用 acquire 方法（AQS中）\n    }\n    // AQS中的 acquire 方法调用了 tryAcquire 方法，在这里重写执行\n    protected final boolean tryAcquire(int acquires) {\n        return nonfairTryAcquire(acquires);// 父类中实现\n    }\n}\n\nfinal boolean nonfairTryAcquire(int acquires) {\n    final Thread current = Thread.currentThread();\n    int c = getState();\n    if (c == 0) {// 与公平锁的实现不同，这资源空闲会再抢占一次资源\n        if (compareAndSetState(0, acquires)) {\n            setExclusiveOwnerThread(current);\n            return true;\n        }\n    }// 与公平锁一样 可重入\n    else if (current == getExclusiveOwnerThread()) {\n        int nextc = c + acquires;\n        if (nextc < 0) // overflow\n            throw new Error(\"Maximum lock count exceeded\");\n        setState(nextc);\n        return true;\n    }\n    return false;\n}\n```\n#### 总结\n1. 公平锁和非公平锁释放资源都使用的父类中的 tryRelase 方法，简单的逻辑，确认当前线程在占用资源后cas修改资源的状态，返回资源是否空闲（state==0?）其他逻辑和AQS中的 relase 相同\n2. 可以看到斜体的地方就是公平锁和非公平锁的区别，在资源状态空闲的时候，非公平锁会去抢占资源而公平锁判断队列中没有等待资源的线程才会去获取资源；还有在Acquire之前非公平锁会去抢占一次资源；非公平锁会在lock的时候抢占资源，没有抢到会执行tryAcquire方法，如果此时刚好资源被释放还会去抢占一次资源，都失败了就会入队进入等待状态\n\n### 共享模式的实现\n\n本来想找一个共享模式的实现来分析一下，在AQS中查到实现有这么几个，Semaphore、CountDownLatch和ReentrantReadWriteLock，前两个比较简单来分析一下，后一个比较复杂段时间还搞不定（柿子要挑软的捏是不是？这里再挖个坑吧）\n\n#### Semaphore\nSemaphore用来控制线程的并发量，指定并发量就是Semaphore中的许可，拿到许可可以运行，没有拿到许可进入等待状态，有释放的许可唤醒等待的线程，保证线程运行的数量，类似于令牌桶的亚子；其中重写了 tryAcquireShared 和 tryRelaseShared 方法，所以Semaphore是共享模式的实现，同样有公平和非公平两种方式，默认非公平的；\n\n1. acquire 获取许可 -> 调用 acquireSharedInterruptibly 方法，与acquireShared不同的是先判断线程的中断状态，如果中断抛异常，\n2. 调用 tryAcquireShared 方法获取资源（公平模式下线判断队列中是否有等待资源的线程，有则返回-1表示失败；没有返回剩余资源数量，获取资源成功；非公平模式下不用判断队列是否有线程直接去获取资源，返回剩余的资源），后面同AQS中的逻辑 \n\n\n```\n// 构造方法初始化AQS的state为permit的数量\npublic Semaphore(int permits) {\n    sync = new NonfairSync(permits);\n}\n// 转调AQS中 acquireSharedInterruptibly 方法\npublic void acquire() throws InterruptedException {\n    sync.acquireSharedInterruptibly(1);// AQS中的实现\n}\npublic final void acquireSharedInterruptibly(int arg)\n        throws InterruptedException {\n    if (Thread.interrupted())\n        throw new InterruptedException();\n    if (tryAcquireShared(arg) < 0)// 这里调用 tryAcquireShared 方法\n        doAcquireSharedInterruptibly(arg);\n} \n// 非公平模式下转调 nonfairTryAcquireShared 方法\nprotected int tryAcquireShared(int acquires) {\n    return nonfairTryAcquireShared(acquires);\n}\nfinal int nonfairTryAcquireShared(int acquires) {\n    for (;;) {\n        int available = getState();\n        int remaining = available - acquires;// 获取资源后的余量\n        if (remaining < 0 ||\n            compareAndSetState(available, remaining))// 余量大于0 CAS修改状态获取资源成功 否则执行AQS中剩下的逻辑 入队、等待...\n            return remaining;\n    }\n}\n// 公平模式下直接重写 tryAcquireShared 方法\nprotected int tryAcquireShared(int acquires) {\n    for (;;) {\n        if (hasQueuedPredecessors())// 比非公平模式多了判断队列中是否有等待的线程\n            return -1;\n        int available = getState();\n        int remaining = available - acquires;\n        if (remaining < 0 ||\n            compareAndSetState(available, remaining))\n            return remaining;\n    }\n}\n// relase 方法转调AQS中的 relaseShared 方法\npublic void release(int permits) {\n    if (permits < 0) throw new IllegalArgumentException();\n    sync.releaseShared(permits);// 其中调用 tryRelaseShared 方法\n}\n// 重写 tryRelaseShared 方法(公平非公平相同) 循环CAS改变状态，判断边界范围\nprotected final boolean tryReleaseShared(int releases) {\n    for (;;) {\n        int current = getState();\n        int next = current + releases;\n        if (next < current) // overflow\n            throw new Error(\"Maximum permit count exceeded\");\n        if (compareAndSetState(current, next))\n            return true;\n    }\n}\n```\n#### CountDownLatch\nCountDownLatch通常用来判断多个线程是否都执行完毕，初始化的时候将AQS中的state设置为等待的线程数量（n），表示资源被n个线程获取；\n\t\n1. await方法转调acquireSharedInterruptibly其中又转调 tryAcquireShared ，返回state是否为0，因为初始化为n所以不为0返回-1，表示获取资源失败将线程入队等待\n2. 线程执行完毕后调用countDown方法，转调relaseShared方法将资源的数量减一，当所有线程都调用了countDown此时资源被完全释放（state=0）线程被唤醒，再次 tryAcquireShared 获取state为0返回0，表示获取资源成功，执行后面的逻辑\n\n\n```\n// 构造方法初始化AQS的state为count；Sync继承AQS\npublic CountDownLatch(int count) {\n    if (count < 0) throw new IllegalArgumentException(\"count < 0\");\n    this.sync = new Sync(count);\n}\n// 转调AQS中 acquireSharedInterruptibly 方法\npublic void await() throws InterruptedException {\n    sync.acquireSharedInterruptibly(1);// AQS中的实现\n}\npublic final void acquireSharedInterruptibly(int arg)\n        throws InterruptedException {\n    if (Thread.interrupted())\n        throw new InterruptedException();\n    if (tryAcquireShared(arg) < 0)// 这里调用 tryAcquireShared 方法\n        doAcquireSharedInterruptibly(arg);\n}\n// 重写了 tryAcquireShared 方法\nprotected int tryAcquireShared(int acquires) {\n    // state为0返回1表示获取资源成功，不为0返回-1表示获取资源失败\n    // 由于刚刚初始化了state=count，假设当前还没有释放资源，state不为0返回-1表示失败，后面就是AQS中的逻辑，入队、等待...\n    return (getState() == 0) ? 1 : -1;\n}\n// countDown 方法转调 relaseShared 方法\npublic void countDown() {\n    sync.releaseShared(1);// AQS中的实现 其中调用了 tryRelaseShared 方法\n}\n// 重写了 tryRelaseShared 方法，如果state-1之后还不为0返回false表示释放失败，其实是成功的，返回失败是因为还要等待其他线程\n// 先不去唤醒等待的线程，当释放资源后state为0返回成功，这时候再去唤醒等待的线程\nprotected boolean tryReleaseShared(int releases) {\n    // 循环CAS操作将state-1\n    for (;;) {\n        int c = getState();\n        if (c == 0)\n            return false;\n        int nextc = c-1;\n        if (compareAndSetState(c, nextc))\n            return nextc == 0;\n    }\n}\n```\n\n\n### 参考文献\n[Java并发之AQS详解](https://www.cnblogs.com/waterystone/p/4920797.html)\n","slug":"AQS分析","published":1,"updated":"2021-07-13T12:27:08.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj6m000g81fy4fxpl5x1","content":"<h3 id=\"AQS-AbstraceQueuedSynchronizer\"><a href=\"#AQS-AbstraceQueuedSynchronizer\" class=\"headerlink\" title=\"AQS AbstraceQueuedSynchronizer\"></a>AQS AbstraceQueuedSynchronizer</h3><ul>\n<li>维护了一个共享变量state（int类型被volatile修饰保证线程的可见性）</li>\n<li>通过不同线程修改state的状态来决定线程获取锁的状态，并将这些线程维护在一个队列里，每个线程都封装成一个Node对象</li>\n<li>Node中定义了线程的状态 复制表示Node处于有效的等待状态，正值表示Node被取消<ul>\n<li>CANCELLED（1） 当前Node已经取消调度，超时或中断会变更为次状态，进入该状态后的Node不再变化</li>\n<li>SIGNAL（-1）表示后继Node等待当前Node唤醒，后继Node入队，会修改前驱Node状态为SIGNAL</li>\n<li>CONDITION（-2）表示Node等待在Condition上，其他线程调用signal()方法后，CONDITION的Node会从等待队列中转移到同步队列，等待获取同步锁</li>\n<li>PROPAGATE（-3）共享模式下，前驱节点不仅会唤醒后继Node，还可能唤醒后继的后继Node</li>\n<li>0 新节点入队时的默认状态</li>\n</ul>\n</li>\n<li>定义了独占（Exclusive）和共享（share）两种对state的使用方式</li>\n</ul>\n<ol>\n<li>独占 exclusive 只能一个线程操作state；使用 acquire-relase 方法获取和释放资源<ul>\n<li>acquire<ul>\n<li>tryAcquire 根据需要具体实现 尝试获取资源，成功返回true，失败返回false</li>\n<li>获取资源失败，将当前线程入队，找到安全点进入等待状态</li>\n<li>当被唤醒后判断自己是否是队列中的老二，不是老二找到安全点进入等待状态；是老二尝试获取资源，获取失败继续进入等待状态，等待别唤醒</li>\n</ul>\n</li>\n<li>relase<ul>\n<li>tryRelase 根据需要具体实现 尝试释放资源，成功返回true，失败返回false</li>\n<li>当资源全部被释放后（state=0，可能被重入state的值大于0）会唤醒队列中的老二来获取资源</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/acquire-relase.png\" alt=\"upload successful\"></p>\n<ol start=\"2\">\n<li>共享 share 多个线程可以同时操作state；使用 acquireShared-relaseShared 方法获取和释放资源<ul>\n<li>acquireShared<ul>\n<li>tryAcquireShared 根据需要具体实现 尝试获取资源，负数表示失败；正数表示成功，数值表示剩余的资源数量</li>\n<li>获取资源失败，将当前线程入队，入队后如果是老二节点尝试获取资源，老二节点获取资源成功，根据剩余资源量唤醒后面的线程</li>\n<li>不是老二节点或者老二节点获取资源失败，找到安全点进入等待状态，等待被唤醒</li>\n</ul>\n</li>\n<li>relaseShared<ul>\n<li>tryRelaseShared 根据需要具体实现 尝试释放资源，成功返回true，失败返回false</li>\n<li>释放资源成功就去唤醒队列中的老二，老二被唤醒尝试获取资源进入到acquireShared中的第二步</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/acquireShared-relaseShared.png\" alt=\"upload successful\"></p>\n<p><strong>总结</strong></p>\n<p>AQS其实是一个抽象的基于队列同步器（正如其名称所示，但是并没有使用抽象方法，而是将可扩展的方法默认抛出异常，留给子类去重写覆盖，可能是考虑到单独扩展共享模式或者独占模式，只需实现两个方法即可，不需要全都重写，根据需要选择重写，这样更灵活一些），其中封装了独占模式和共享模式下获取和释放资源的方法，其中没有给出tryAcquire-tryRelase和tryAcquireShared-tryRelaseShared的具体实现，可以根据需要重写这些方法即可，不需要去关心队列中线程的状态变化；比如ReentrantLock就是重写了独占模式中的方法实现；CountDownLatch是重写了共享模式中的方法实现</p>\n<h3 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h3><p>ReentrantLock中重写了tryAcquire和tryRelase，所有是独占模式，所以ReentrantLock是独占锁并且是可重入的，其中分别有公平和非公平两种实现，默认是非公平的</p>\n<h4 id=\"公平\"><a href=\"#公平\" class=\"headerlink\" title=\"公平\"></a>公平</h4><ol>\n<li>lock() -&gt; acquire(1) 获取锁（修改资源的状态为1）其中使用的时AQS的实现</li>\n<li>重写了tryAcquire方法，<em>如果资源状态是空闲（state=0）并且队列中没有等待资源的线程，才会去获取资源</em>；如果是当前线程获取资源，直接修改状态并获得锁成功（state += n；可重入；）；其他情况返回false获取资源失败</li>\n<li>之后就是AQS中的逻辑 入队、等待被唤醒 balabala…</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 公平锁的实现 Sync继承了AQS</span><br><span class=\"line\">static final class FairSync extends Sync &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    final void lock() &#123;</span><br><span class=\"line\">        acquire(1);// 获取资源，调用AQS中的 acquire(1) 方法</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // AQS中的 acquire 方法调用了 tryAcquire 方法，在这里重写执行</span><br><span class=\"line\">    protected final boolean tryAcquire(int acquires) &#123;</span><br><span class=\"line\">        final Thread current = Thread.currentThread();</span><br><span class=\"line\">        int c = getState();</span><br><span class=\"line\">        if (c == 0) &#123;</span><br><span class=\"line\">            // 当前资源空闲并且队列中没有等待资源的线程才会去CAS获取资源</span><br><span class=\"line\">            if (!hasQueuedPredecessors() &amp;&amp;</span><br><span class=\"line\">                compareAndSetState(0, acquires)) &#123;</span><br><span class=\"line\">                setExclusiveOwnerThread(current);</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;// 如果是当前线程直接修改资源，返回成功；可重入</span><br><span class=\"line\">        else if (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\">            int nextc = c + acquires;</span><br><span class=\"line\">            if (nextc &lt; 0)</span><br><span class=\"line\">                throw new Error(&quot;Maximum lock count exceeded&quot;);</span><br><span class=\"line\">            setState(nextc);</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        eturn false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"非公平\"><a href=\"#非公平\" class=\"headerlink\" title=\"非公平\"></a>非公平</h4><ol>\n<li>lock -&gt; 抢占锁（CAS修改资源状态） -&gt; 抢锁失败调用acquire(1)获取锁，同样适用AQS的实现</li>\n<li>重写了tryAcquire方法，<em>如果资源状态是空闲（state=0）就CAS修改状态的值获取资源</em>；如果是当前线程获取资源，修改状态获取资源成功（与公平锁相同，CAS修改state，可重入）；其他情况返回false获取资源失败</li>\n<li>（相同逻辑）入队、等待被唤醒 balabala…</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Sync继承了AQS</span><br><span class=\"line\">static final class NonfairSync extends Sync &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    final void lock() &#123;</span><br><span class=\"line\">        // lock的时候抢占一次资源</span><br><span class=\"line\">        if (compareAndSetState(0, 1))</span><br><span class=\"line\">            setExclusiveOwnerThread(Thread.currentThread());</span><br><span class=\"line\">        else</span><br><span class=\"line\">            acquire(1);// 没抢占到调用 acquire 方法（AQS中）</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // AQS中的 acquire 方法调用了 tryAcquire 方法，在这里重写执行</span><br><span class=\"line\">    protected final boolean tryAcquire(int acquires) &#123;</span><br><span class=\"line\">        return nonfairTryAcquire(acquires);// 父类中实现</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">final boolean nonfairTryAcquire(int acquires) &#123;</span><br><span class=\"line\">    final Thread current = Thread.currentThread();</span><br><span class=\"line\">    int c = getState();</span><br><span class=\"line\">    if (c == 0) &#123;// 与公平锁的实现不同，这资源空闲会再抢占一次资源</span><br><span class=\"line\">        if (compareAndSetState(0, acquires)) &#123;</span><br><span class=\"line\">            setExclusiveOwnerThread(current);</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;// 与公平锁一样 可重入</span><br><span class=\"line\">    else if (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\">        int nextc = c + acquires;</span><br><span class=\"line\">        if (nextc &lt; 0) // overflow</span><br><span class=\"line\">            throw new Error(&quot;Maximum lock count exceeded&quot;);</span><br><span class=\"line\">        setState(nextc);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ol>\n<li>公平锁和非公平锁释放资源都使用的父类中的 tryRelase 方法，简单的逻辑，确认当前线程在占用资源后cas修改资源的状态，返回资源是否空闲（state==0?）其他逻辑和AQS中的 relase 相同</li>\n<li>可以看到斜体的地方就是公平锁和非公平锁的区别，在资源状态空闲的时候，非公平锁会去抢占资源而公平锁判断队列中没有等待资源的线程才会去获取资源；还有在Acquire之前非公平锁会去抢占一次资源；非公平锁会在lock的时候抢占资源，没有抢到会执行tryAcquire方法，如果此时刚好资源被释放还会去抢占一次资源，都失败了就会入队进入等待状态</li>\n</ol>\n<h3 id=\"共享模式的实现\"><a href=\"#共享模式的实现\" class=\"headerlink\" title=\"共享模式的实现\"></a>共享模式的实现</h3><p>本来想找一个共享模式的实现来分析一下，在AQS中查到实现有这么几个，Semaphore、CountDownLatch和ReentrantReadWriteLock，前两个比较简单来分析一下，后一个比较复杂段时间还搞不定（柿子要挑软的捏是不是？这里再挖个坑吧）</p>\n<h4 id=\"Semaphore\"><a href=\"#Semaphore\" class=\"headerlink\" title=\"Semaphore\"></a>Semaphore</h4><p>Semaphore用来控制线程的并发量，指定并发量就是Semaphore中的许可，拿到许可可以运行，没有拿到许可进入等待状态，有释放的许可唤醒等待的线程，保证线程运行的数量，类似于令牌桶的亚子；其中重写了 tryAcquireShared 和 tryRelaseShared 方法，所以Semaphore是共享模式的实现，同样有公平和非公平两种方式，默认非公平的；</p>\n<ol>\n<li>acquire 获取许可 -&gt; 调用 acquireSharedInterruptibly 方法，与acquireShared不同的是先判断线程的中断状态，如果中断抛异常，</li>\n<li>调用 tryAcquireShared 方法获取资源（公平模式下线判断队列中是否有等待资源的线程，有则返回-1表示失败；没有返回剩余资源数量，获取资源成功；非公平模式下不用判断队列是否有线程直接去获取资源，返回剩余的资源），后面同AQS中的逻辑 </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 构造方法初始化AQS的state为permit的数量</span><br><span class=\"line\">public Semaphore(int permits) &#123;</span><br><span class=\"line\">    sync = new NonfairSync(permits);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 转调AQS中 acquireSharedInterruptibly 方法</span><br><span class=\"line\">public void acquire() throws InterruptedException &#123;</span><br><span class=\"line\">    sync.acquireSharedInterruptibly(1);// AQS中的实现</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public final void acquireSharedInterruptibly(int arg)</span><br><span class=\"line\">        throws InterruptedException &#123;</span><br><span class=\"line\">    if (Thread.interrupted())</span><br><span class=\"line\">        throw new InterruptedException();</span><br><span class=\"line\">    if (tryAcquireShared(arg) &lt; 0)// 这里调用 tryAcquireShared 方法</span><br><span class=\"line\">        doAcquireSharedInterruptibly(arg);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">// 非公平模式下转调 nonfairTryAcquireShared 方法</span><br><span class=\"line\">protected int tryAcquireShared(int acquires) &#123;</span><br><span class=\"line\">    return nonfairTryAcquireShared(acquires);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">final int nonfairTryAcquireShared(int acquires) &#123;</span><br><span class=\"line\">    for (;;) &#123;</span><br><span class=\"line\">        int available = getState();</span><br><span class=\"line\">        int remaining = available - acquires;// 获取资源后的余量</span><br><span class=\"line\">        if (remaining &lt; 0 ||</span><br><span class=\"line\">            compareAndSetState(available, remaining))// 余量大于0 CAS修改状态获取资源成功 否则执行AQS中剩下的逻辑 入队、等待...</span><br><span class=\"line\">            return remaining;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 公平模式下直接重写 tryAcquireShared 方法</span><br><span class=\"line\">protected int tryAcquireShared(int acquires) &#123;</span><br><span class=\"line\">    for (;;) &#123;</span><br><span class=\"line\">        if (hasQueuedPredecessors())// 比非公平模式多了判断队列中是否有等待的线程</span><br><span class=\"line\">            return -1;</span><br><span class=\"line\">        int available = getState();</span><br><span class=\"line\">        int remaining = available - acquires;</span><br><span class=\"line\">        if (remaining &lt; 0 ||</span><br><span class=\"line\">            compareAndSetState(available, remaining))</span><br><span class=\"line\">            return remaining;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// relase 方法转调AQS中的 relaseShared 方法</span><br><span class=\"line\">public void release(int permits) &#123;</span><br><span class=\"line\">    if (permits &lt; 0) throw new IllegalArgumentException();</span><br><span class=\"line\">    sync.releaseShared(permits);// 其中调用 tryRelaseShared 方法</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 重写 tryRelaseShared 方法(公平非公平相同) 循环CAS改变状态，判断边界范围</span><br><span class=\"line\">protected final boolean tryReleaseShared(int releases) &#123;</span><br><span class=\"line\">    for (;;) &#123;</span><br><span class=\"line\">        int current = getState();</span><br><span class=\"line\">        int next = current + releases;</span><br><span class=\"line\">        if (next &lt; current) // overflow</span><br><span class=\"line\">            throw new Error(&quot;Maximum permit count exceeded&quot;);</span><br><span class=\"line\">        if (compareAndSetState(current, next))</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a>CountDownLatch</h4><p>CountDownLatch通常用来判断多个线程是否都执行完毕，初始化的时候将AQS中的state设置为等待的线程数量（n），表示资源被n个线程获取；</p>\n<ol>\n<li>await方法转调acquireSharedInterruptibly其中又转调 tryAcquireShared ，返回state是否为0，因为初始化为n所以不为0返回-1，表示获取资源失败将线程入队等待</li>\n<li>线程执行完毕后调用countDown方法，转调relaseShared方法将资源的数量减一，当所有线程都调用了countDown此时资源被完全释放（state=0）线程被唤醒，再次 tryAcquireShared 获取state为0返回0，表示获取资源成功，执行后面的逻辑</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 构造方法初始化AQS的state为count；Sync继承AQS</span><br><span class=\"line\">public CountDownLatch(int count) &#123;</span><br><span class=\"line\">    if (count &lt; 0) throw new IllegalArgumentException(&quot;count &lt; 0&quot;);</span><br><span class=\"line\">    this.sync = new Sync(count);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 转调AQS中 acquireSharedInterruptibly 方法</span><br><span class=\"line\">public void await() throws InterruptedException &#123;</span><br><span class=\"line\">    sync.acquireSharedInterruptibly(1);// AQS中的实现</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public final void acquireSharedInterruptibly(int arg)</span><br><span class=\"line\">        throws InterruptedException &#123;</span><br><span class=\"line\">    if (Thread.interrupted())</span><br><span class=\"line\">        throw new InterruptedException();</span><br><span class=\"line\">    if (tryAcquireShared(arg) &lt; 0)// 这里调用 tryAcquireShared 方法</span><br><span class=\"line\">        doAcquireSharedInterruptibly(arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 重写了 tryAcquireShared 方法</span><br><span class=\"line\">protected int tryAcquireShared(int acquires) &#123;</span><br><span class=\"line\">    // state为0返回1表示获取资源成功，不为0返回-1表示获取资源失败</span><br><span class=\"line\">    // 由于刚刚初始化了state=count，假设当前还没有释放资源，state不为0返回-1表示失败，后面就是AQS中的逻辑，入队、等待...</span><br><span class=\"line\">    return (getState() == 0) ? 1 : -1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// countDown 方法转调 relaseShared 方法</span><br><span class=\"line\">public void countDown() &#123;</span><br><span class=\"line\">    sync.releaseShared(1);// AQS中的实现 其中调用了 tryRelaseShared 方法</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 重写了 tryRelaseShared 方法，如果state-1之后还不为0返回false表示释放失败，其实是成功的，返回失败是因为还要等待其他线程</span><br><span class=\"line\">// 先不去唤醒等待的线程，当释放资源后state为0返回成功，这时候再去唤醒等待的线程</span><br><span class=\"line\">protected boolean tryReleaseShared(int releases) &#123;</span><br><span class=\"line\">    // 循环CAS操作将state-1</span><br><span class=\"line\">    for (;;) &#123;</span><br><span class=\"line\">        int c = getState();</span><br><span class=\"line\">        if (c == 0)</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        int nextc = c-1;</span><br><span class=\"line\">        if (compareAndSetState(c, nextc))</span><br><span class=\"line\">            return nextc == 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><p><a href=\"https://www.cnblogs.com/waterystone/p/4920797.html\" target=\"_blank\" rel=\"noopener\">Java并发之AQS详解</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"AQS-AbstraceQueuedSynchronizer\"><a href=\"#AQS-AbstraceQueuedSynchronizer\" class=\"headerlink\" title=\"AQS AbstraceQueuedSynchronizer\"></a>AQS AbstraceQueuedSynchronizer</h3><ul>\n<li>维护了一个共享变量state（int类型被volatile修饰保证线程的可见性）</li>\n<li>通过不同线程修改state的状态来决定线程获取锁的状态，并将这些线程维护在一个队列里，每个线程都封装成一个Node对象</li>\n<li>Node中定义了线程的状态 复制表示Node处于有效的等待状态，正值表示Node被取消<ul>\n<li>CANCELLED（1） 当前Node已经取消调度，超时或中断会变更为次状态，进入该状态后的Node不再变化</li>\n<li>SIGNAL（-1）表示后继Node等待当前Node唤醒，后继Node入队，会修改前驱Node状态为SIGNAL</li>\n<li>CONDITION（-2）表示Node等待在Condition上，其他线程调用signal()方法后，CONDITION的Node会从等待队列中转移到同步队列，等待获取同步锁</li>\n<li>PROPAGATE（-3）共享模式下，前驱节点不仅会唤醒后继Node，还可能唤醒后继的后继Node</li>\n<li>0 新节点入队时的默认状态</li>\n</ul>\n</li>\n<li>定义了独占（Exclusive）和共享（share）两种对state的使用方式</li>\n</ul>\n<ol>\n<li>独占 exclusive 只能一个线程操作state；使用 acquire-relase 方法获取和释放资源<ul>\n<li>acquire<ul>\n<li>tryAcquire 根据需要具体实现 尝试获取资源，成功返回true，失败返回false</li>\n<li>获取资源失败，将当前线程入队，找到安全点进入等待状态</li>\n<li>当被唤醒后判断自己是否是队列中的老二，不是老二找到安全点进入等待状态；是老二尝试获取资源，获取失败继续进入等待状态，等待别唤醒</li>\n</ul>\n</li>\n<li>relase<ul>\n<li>tryRelase 根据需要具体实现 尝试释放资源，成功返回true，失败返回false</li>\n<li>当资源全部被释放后（state=0，可能被重入state的值大于0）会唤醒队列中的老二来获取资源</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/acquire-relase.png\" alt=\"upload successful\"></p>\n<ol start=\"2\">\n<li>共享 share 多个线程可以同时操作state；使用 acquireShared-relaseShared 方法获取和释放资源<ul>\n<li>acquireShared<ul>\n<li>tryAcquireShared 根据需要具体实现 尝试获取资源，负数表示失败；正数表示成功，数值表示剩余的资源数量</li>\n<li>获取资源失败，将当前线程入队，入队后如果是老二节点尝试获取资源，老二节点获取资源成功，根据剩余资源量唤醒后面的线程</li>\n<li>不是老二节点或者老二节点获取资源失败，找到安全点进入等待状态，等待被唤醒</li>\n</ul>\n</li>\n<li>relaseShared<ul>\n<li>tryRelaseShared 根据需要具体实现 尝试释放资源，成功返回true，失败返回false</li>\n<li>释放资源成功就去唤醒队列中的老二，老二被唤醒尝试获取资源进入到acquireShared中的第二步</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/images/acquireShared-relaseShared.png\" alt=\"upload successful\"></p>\n<p><strong>总结</strong></p>\n<p>AQS其实是一个抽象的基于队列同步器（正如其名称所示，但是并没有使用抽象方法，而是将可扩展的方法默认抛出异常，留给子类去重写覆盖，可能是考虑到单独扩展共享模式或者独占模式，只需实现两个方法即可，不需要全都重写，根据需要选择重写，这样更灵活一些），其中封装了独占模式和共享模式下获取和释放资源的方法，其中没有给出tryAcquire-tryRelase和tryAcquireShared-tryRelaseShared的具体实现，可以根据需要重写这些方法即可，不需要去关心队列中线程的状态变化；比如ReentrantLock就是重写了独占模式中的方法实现；CountDownLatch是重写了共享模式中的方法实现</p>\n<h3 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h3><p>ReentrantLock中重写了tryAcquire和tryRelase，所有是独占模式，所以ReentrantLock是独占锁并且是可重入的，其中分别有公平和非公平两种实现，默认是非公平的</p>\n<h4 id=\"公平\"><a href=\"#公平\" class=\"headerlink\" title=\"公平\"></a>公平</h4><ol>\n<li>lock() -&gt; acquire(1) 获取锁（修改资源的状态为1）其中使用的时AQS的实现</li>\n<li>重写了tryAcquire方法，<em>如果资源状态是空闲（state=0）并且队列中没有等待资源的线程，才会去获取资源</em>；如果是当前线程获取资源，直接修改状态并获得锁成功（state += n；可重入；）；其他情况返回false获取资源失败</li>\n<li>之后就是AQS中的逻辑 入队、等待被唤醒 balabala…</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 公平锁的实现 Sync继承了AQS</span><br><span class=\"line\">static final class FairSync extends Sync &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    final void lock() &#123;</span><br><span class=\"line\">        acquire(1);// 获取资源，调用AQS中的 acquire(1) 方法</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // AQS中的 acquire 方法调用了 tryAcquire 方法，在这里重写执行</span><br><span class=\"line\">    protected final boolean tryAcquire(int acquires) &#123;</span><br><span class=\"line\">        final Thread current = Thread.currentThread();</span><br><span class=\"line\">        int c = getState();</span><br><span class=\"line\">        if (c == 0) &#123;</span><br><span class=\"line\">            // 当前资源空闲并且队列中没有等待资源的线程才会去CAS获取资源</span><br><span class=\"line\">            if (!hasQueuedPredecessors() &amp;&amp;</span><br><span class=\"line\">                compareAndSetState(0, acquires)) &#123;</span><br><span class=\"line\">                setExclusiveOwnerThread(current);</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;// 如果是当前线程直接修改资源，返回成功；可重入</span><br><span class=\"line\">        else if (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\">            int nextc = c + acquires;</span><br><span class=\"line\">            if (nextc &lt; 0)</span><br><span class=\"line\">                throw new Error(&quot;Maximum lock count exceeded&quot;);</span><br><span class=\"line\">            setState(nextc);</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        eturn false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"非公平\"><a href=\"#非公平\" class=\"headerlink\" title=\"非公平\"></a>非公平</h4><ol>\n<li>lock -&gt; 抢占锁（CAS修改资源状态） -&gt; 抢锁失败调用acquire(1)获取锁，同样适用AQS的实现</li>\n<li>重写了tryAcquire方法，<em>如果资源状态是空闲（state=0）就CAS修改状态的值获取资源</em>；如果是当前线程获取资源，修改状态获取资源成功（与公平锁相同，CAS修改state，可重入）；其他情况返回false获取资源失败</li>\n<li>（相同逻辑）入队、等待被唤醒 balabala…</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Sync继承了AQS</span><br><span class=\"line\">static final class NonfairSync extends Sync &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    final void lock() &#123;</span><br><span class=\"line\">        // lock的时候抢占一次资源</span><br><span class=\"line\">        if (compareAndSetState(0, 1))</span><br><span class=\"line\">            setExclusiveOwnerThread(Thread.currentThread());</span><br><span class=\"line\">        else</span><br><span class=\"line\">            acquire(1);// 没抢占到调用 acquire 方法（AQS中）</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // AQS中的 acquire 方法调用了 tryAcquire 方法，在这里重写执行</span><br><span class=\"line\">    protected final boolean tryAcquire(int acquires) &#123;</span><br><span class=\"line\">        return nonfairTryAcquire(acquires);// 父类中实现</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">final boolean nonfairTryAcquire(int acquires) &#123;</span><br><span class=\"line\">    final Thread current = Thread.currentThread();</span><br><span class=\"line\">    int c = getState();</span><br><span class=\"line\">    if (c == 0) &#123;// 与公平锁的实现不同，这资源空闲会再抢占一次资源</span><br><span class=\"line\">        if (compareAndSetState(0, acquires)) &#123;</span><br><span class=\"line\">            setExclusiveOwnerThread(current);</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;// 与公平锁一样 可重入</span><br><span class=\"line\">    else if (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\">        int nextc = c + acquires;</span><br><span class=\"line\">        if (nextc &lt; 0) // overflow</span><br><span class=\"line\">            throw new Error(&quot;Maximum lock count exceeded&quot;);</span><br><span class=\"line\">        setState(nextc);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ol>\n<li>公平锁和非公平锁释放资源都使用的父类中的 tryRelase 方法，简单的逻辑，确认当前线程在占用资源后cas修改资源的状态，返回资源是否空闲（state==0?）其他逻辑和AQS中的 relase 相同</li>\n<li>可以看到斜体的地方就是公平锁和非公平锁的区别，在资源状态空闲的时候，非公平锁会去抢占资源而公平锁判断队列中没有等待资源的线程才会去获取资源；还有在Acquire之前非公平锁会去抢占一次资源；非公平锁会在lock的时候抢占资源，没有抢到会执行tryAcquire方法，如果此时刚好资源被释放还会去抢占一次资源，都失败了就会入队进入等待状态</li>\n</ol>\n<h3 id=\"共享模式的实现\"><a href=\"#共享模式的实现\" class=\"headerlink\" title=\"共享模式的实现\"></a>共享模式的实现</h3><p>本来想找一个共享模式的实现来分析一下，在AQS中查到实现有这么几个，Semaphore、CountDownLatch和ReentrantReadWriteLock，前两个比较简单来分析一下，后一个比较复杂段时间还搞不定（柿子要挑软的捏是不是？这里再挖个坑吧）</p>\n<h4 id=\"Semaphore\"><a href=\"#Semaphore\" class=\"headerlink\" title=\"Semaphore\"></a>Semaphore</h4><p>Semaphore用来控制线程的并发量，指定并发量就是Semaphore中的许可，拿到许可可以运行，没有拿到许可进入等待状态，有释放的许可唤醒等待的线程，保证线程运行的数量，类似于令牌桶的亚子；其中重写了 tryAcquireShared 和 tryRelaseShared 方法，所以Semaphore是共享模式的实现，同样有公平和非公平两种方式，默认非公平的；</p>\n<ol>\n<li>acquire 获取许可 -&gt; 调用 acquireSharedInterruptibly 方法，与acquireShared不同的是先判断线程的中断状态，如果中断抛异常，</li>\n<li>调用 tryAcquireShared 方法获取资源（公平模式下线判断队列中是否有等待资源的线程，有则返回-1表示失败；没有返回剩余资源数量，获取资源成功；非公平模式下不用判断队列是否有线程直接去获取资源，返回剩余的资源），后面同AQS中的逻辑 </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 构造方法初始化AQS的state为permit的数量</span><br><span class=\"line\">public Semaphore(int permits) &#123;</span><br><span class=\"line\">    sync = new NonfairSync(permits);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 转调AQS中 acquireSharedInterruptibly 方法</span><br><span class=\"line\">public void acquire() throws InterruptedException &#123;</span><br><span class=\"line\">    sync.acquireSharedInterruptibly(1);// AQS中的实现</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public final void acquireSharedInterruptibly(int arg)</span><br><span class=\"line\">        throws InterruptedException &#123;</span><br><span class=\"line\">    if (Thread.interrupted())</span><br><span class=\"line\">        throw new InterruptedException();</span><br><span class=\"line\">    if (tryAcquireShared(arg) &lt; 0)// 这里调用 tryAcquireShared 方法</span><br><span class=\"line\">        doAcquireSharedInterruptibly(arg);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">// 非公平模式下转调 nonfairTryAcquireShared 方法</span><br><span class=\"line\">protected int tryAcquireShared(int acquires) &#123;</span><br><span class=\"line\">    return nonfairTryAcquireShared(acquires);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">final int nonfairTryAcquireShared(int acquires) &#123;</span><br><span class=\"line\">    for (;;) &#123;</span><br><span class=\"line\">        int available = getState();</span><br><span class=\"line\">        int remaining = available - acquires;// 获取资源后的余量</span><br><span class=\"line\">        if (remaining &lt; 0 ||</span><br><span class=\"line\">            compareAndSetState(available, remaining))// 余量大于0 CAS修改状态获取资源成功 否则执行AQS中剩下的逻辑 入队、等待...</span><br><span class=\"line\">            return remaining;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 公平模式下直接重写 tryAcquireShared 方法</span><br><span class=\"line\">protected int tryAcquireShared(int acquires) &#123;</span><br><span class=\"line\">    for (;;) &#123;</span><br><span class=\"line\">        if (hasQueuedPredecessors())// 比非公平模式多了判断队列中是否有等待的线程</span><br><span class=\"line\">            return -1;</span><br><span class=\"line\">        int available = getState();</span><br><span class=\"line\">        int remaining = available - acquires;</span><br><span class=\"line\">        if (remaining &lt; 0 ||</span><br><span class=\"line\">            compareAndSetState(available, remaining))</span><br><span class=\"line\">            return remaining;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// relase 方法转调AQS中的 relaseShared 方法</span><br><span class=\"line\">public void release(int permits) &#123;</span><br><span class=\"line\">    if (permits &lt; 0) throw new IllegalArgumentException();</span><br><span class=\"line\">    sync.releaseShared(permits);// 其中调用 tryRelaseShared 方法</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 重写 tryRelaseShared 方法(公平非公平相同) 循环CAS改变状态，判断边界范围</span><br><span class=\"line\">protected final boolean tryReleaseShared(int releases) &#123;</span><br><span class=\"line\">    for (;;) &#123;</span><br><span class=\"line\">        int current = getState();</span><br><span class=\"line\">        int next = current + releases;</span><br><span class=\"line\">        if (next &lt; current) // overflow</span><br><span class=\"line\">            throw new Error(&quot;Maximum permit count exceeded&quot;);</span><br><span class=\"line\">        if (compareAndSetState(current, next))</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a>CountDownLatch</h4><p>CountDownLatch通常用来判断多个线程是否都执行完毕，初始化的时候将AQS中的state设置为等待的线程数量（n），表示资源被n个线程获取；</p>\n<ol>\n<li>await方法转调acquireSharedInterruptibly其中又转调 tryAcquireShared ，返回state是否为0，因为初始化为n所以不为0返回-1，表示获取资源失败将线程入队等待</li>\n<li>线程执行完毕后调用countDown方法，转调relaseShared方法将资源的数量减一，当所有线程都调用了countDown此时资源被完全释放（state=0）线程被唤醒，再次 tryAcquireShared 获取state为0返回0，表示获取资源成功，执行后面的逻辑</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 构造方法初始化AQS的state为count；Sync继承AQS</span><br><span class=\"line\">public CountDownLatch(int count) &#123;</span><br><span class=\"line\">    if (count &lt; 0) throw new IllegalArgumentException(&quot;count &lt; 0&quot;);</span><br><span class=\"line\">    this.sync = new Sync(count);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 转调AQS中 acquireSharedInterruptibly 方法</span><br><span class=\"line\">public void await() throws InterruptedException &#123;</span><br><span class=\"line\">    sync.acquireSharedInterruptibly(1);// AQS中的实现</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public final void acquireSharedInterruptibly(int arg)</span><br><span class=\"line\">        throws InterruptedException &#123;</span><br><span class=\"line\">    if (Thread.interrupted())</span><br><span class=\"line\">        throw new InterruptedException();</span><br><span class=\"line\">    if (tryAcquireShared(arg) &lt; 0)// 这里调用 tryAcquireShared 方法</span><br><span class=\"line\">        doAcquireSharedInterruptibly(arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 重写了 tryAcquireShared 方法</span><br><span class=\"line\">protected int tryAcquireShared(int acquires) &#123;</span><br><span class=\"line\">    // state为0返回1表示获取资源成功，不为0返回-1表示获取资源失败</span><br><span class=\"line\">    // 由于刚刚初始化了state=count，假设当前还没有释放资源，state不为0返回-1表示失败，后面就是AQS中的逻辑，入队、等待...</span><br><span class=\"line\">    return (getState() == 0) ? 1 : -1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// countDown 方法转调 relaseShared 方法</span><br><span class=\"line\">public void countDown() &#123;</span><br><span class=\"line\">    sync.releaseShared(1);// AQS中的实现 其中调用了 tryRelaseShared 方法</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 重写了 tryRelaseShared 方法，如果state-1之后还不为0返回false表示释放失败，其实是成功的，返回失败是因为还要等待其他线程</span><br><span class=\"line\">// 先不去唤醒等待的线程，当释放资源后state为0返回成功，这时候再去唤醒等待的线程</span><br><span class=\"line\">protected boolean tryReleaseShared(int releases) &#123;</span><br><span class=\"line\">    // 循环CAS操作将state-1</span><br><span class=\"line\">    for (;;) &#123;</span><br><span class=\"line\">        int c = getState();</span><br><span class=\"line\">        if (c == 0)</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        int nextc = c-1;</span><br><span class=\"line\">        if (compareAndSetState(c, nextc))</span><br><span class=\"line\">            return nextc == 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><p><a href=\"https://www.cnblogs.com/waterystone/p/4920797.html\" target=\"_blank\" rel=\"noopener\">Java并发之AQS详解</a></p>\n"},{"title":"CAP和BASE","author":"YyWang","date":"2019-08-26T08:52:51.000Z","_content":"### CAP理论\n\nConsistency（一致性） Availability（可用性） Partition tolerance（分区容错性）\n\nCAP理论的内容是在分布式系统中出现网络故障时最多只能满足CAP中的两项\n\n* Consistency 一致性\n\t* “all node see the same data at the same time” 就是指分布式系统的数据一致性，可用看出这里的一致性指的是强一致性，要求分布式系统数据发生改变后所有节点在后续的请求中都能感知到\n\t* 强一致性，当数据发生改变，系统中的其他节点在下次请求都会感知到\n\t* 弱一致性，保证某个时间级别（比如xx秒），数据能够达到数据一致的状态\n\t* 最终一致性，弱一致性的一个特例，保证在一段时间内达到数据一致的状态\n* Availability 可用性\n\t* “Reads and Writes always succeed”，这里的succeed指的是请求和响应的过程成功，也每次请求都会在有限的时间内收到回复，换句话说就是服务器可用；并不是请求的返回值是成功的意思，返回值是失败也是有返回值的，同样说明请求响应的过程是成功的。\n\t* 系统可用性5个9，意为分布式系统的可用水平为99.999%，全年停机时间不超过 **(1-0.99999)*365*24*60 = 5.256 min**\n* Partition tolerance 分区容错性\n\t* \"the system continues to operate despite arbitrary message loss or failure of part of the system\" 分区指的是由于网络异常集群中只有部分节点能够正常通信，可能存在多个能够通信的子网络，这些子网络就是分区；又或者说集群中部分服务器宕机，其他服务器依然可用，这部分可用的服务器组成的子网络也可以称为分区。分区容错性是指当出现网络延迟或者故障的情况时系统依然能够提供服务\n\n怎么理解呢？简单来说就是在分布式系统中发生故障时，CAP最多只能满足其中的两项，也就是CAP三选二呗，但是我们发现P（分区容错性）说白了就是指网络出问题后系统依然可用，这可是分布式系统的基础条件，应该必须满足；在满足分区容错性时有可能会存在两种问题\n\n* 1.用户访问部分服务器间的网络异常，这时只需将请求转发到可用的服务器即可，这时在理想情况下（服务器间的网络通畅）是可以满足CAP的，除非和所有服务器的网络都有问题（**这只是理想情况**）\n* 2.除了用户访问服务器的网络异常之外，分布式系统中不同服务器直接的网络也可能存在异常，例如分布式系统中有A、B两台服务器，假设A、B之间存在网络故障，当服务器A改变数据之后无法同步到服务器B，此时就不能保证强一致性和可用性同时满足\n\t* 放弃强一致性（C），用户请求A可以得到最新的数据，用户请求B得到的是旧数据；可以保证用户每次请求都会返回结果，但不能保证数据的一致性\n\t* 放弃可用性（A），为了保证数据的强一致性，数据每次修改后都需要等待所有的数据源都同步后才能进行读写，用户请求服务器A或者B，由于数据始终不能同步，最后会一直阻塞下去，不能保证用户的每次都能短时间内得到返回值甚至得不到返回值\n\t\n综上，我认为的CAP理论是在分布式系统中服务器之间网络出现问题时，CAP最多只能满足其二，并不是分布式系统就只能满足CAP中的两项，理想情况下是都可满足的（虽然现在不大可能）；况且在分布式系统中P是必须满足的，也就是说CA只能满足其一，具体的取舍需要根据不同的业务场景权衡\n\n\n### BASE理论\n* Basically Available（基本可用）\n\t* 系统设计中可以牺牲部分可用性，比如允许响应时间增加1-2秒，服务降级等\n* Soft state（软状态）\n * 允许系统中的数据存在中间状态，允许数据同步过程存在延迟\n* Eventually consistent（最终一致性）\n\t* 所有数据再一段时间的数据同步后都能达到一致的状态 \n\t\n综上，不同的业务以BASE理论为基础对可用性和一致性进行一个权衡；zk和数据库的主从都是舍弃高可用性；涉及到用户体验的场景则需要舍弃数据强一致性如12306买火车票，618和双11等对于用户的每个请求都需要给与响应，允许存在短时间数据不一致的状态\n\n[参考资料](http://www.hollischuang.com/archives/666)\n","source":"_posts/CAP和BASE.md","raw":"title: CAP和BASE\nauthor: YyWang\ndate: 2019-08-26 16:52:51\ntags: 分布式\ncategories: 分布式\n---\n### CAP理论\n\nConsistency（一致性） Availability（可用性） Partition tolerance（分区容错性）\n\nCAP理论的内容是在分布式系统中出现网络故障时最多只能满足CAP中的两项\n\n* Consistency 一致性\n\t* “all node see the same data at the same time” 就是指分布式系统的数据一致性，可用看出这里的一致性指的是强一致性，要求分布式系统数据发生改变后所有节点在后续的请求中都能感知到\n\t* 强一致性，当数据发生改变，系统中的其他节点在下次请求都会感知到\n\t* 弱一致性，保证某个时间级别（比如xx秒），数据能够达到数据一致的状态\n\t* 最终一致性，弱一致性的一个特例，保证在一段时间内达到数据一致的状态\n* Availability 可用性\n\t* “Reads and Writes always succeed”，这里的succeed指的是请求和响应的过程成功，也每次请求都会在有限的时间内收到回复，换句话说就是服务器可用；并不是请求的返回值是成功的意思，返回值是失败也是有返回值的，同样说明请求响应的过程是成功的。\n\t* 系统可用性5个9，意为分布式系统的可用水平为99.999%，全年停机时间不超过 **(1-0.99999)*365*24*60 = 5.256 min**\n* Partition tolerance 分区容错性\n\t* \"the system continues to operate despite arbitrary message loss or failure of part of the system\" 分区指的是由于网络异常集群中只有部分节点能够正常通信，可能存在多个能够通信的子网络，这些子网络就是分区；又或者说集群中部分服务器宕机，其他服务器依然可用，这部分可用的服务器组成的子网络也可以称为分区。分区容错性是指当出现网络延迟或者故障的情况时系统依然能够提供服务\n\n怎么理解呢？简单来说就是在分布式系统中发生故障时，CAP最多只能满足其中的两项，也就是CAP三选二呗，但是我们发现P（分区容错性）说白了就是指网络出问题后系统依然可用，这可是分布式系统的基础条件，应该必须满足；在满足分区容错性时有可能会存在两种问题\n\n* 1.用户访问部分服务器间的网络异常，这时只需将请求转发到可用的服务器即可，这时在理想情况下（服务器间的网络通畅）是可以满足CAP的，除非和所有服务器的网络都有问题（**这只是理想情况**）\n* 2.除了用户访问服务器的网络异常之外，分布式系统中不同服务器直接的网络也可能存在异常，例如分布式系统中有A、B两台服务器，假设A、B之间存在网络故障，当服务器A改变数据之后无法同步到服务器B，此时就不能保证强一致性和可用性同时满足\n\t* 放弃强一致性（C），用户请求A可以得到最新的数据，用户请求B得到的是旧数据；可以保证用户每次请求都会返回结果，但不能保证数据的一致性\n\t* 放弃可用性（A），为了保证数据的强一致性，数据每次修改后都需要等待所有的数据源都同步后才能进行读写，用户请求服务器A或者B，由于数据始终不能同步，最后会一直阻塞下去，不能保证用户的每次都能短时间内得到返回值甚至得不到返回值\n\t\n综上，我认为的CAP理论是在分布式系统中服务器之间网络出现问题时，CAP最多只能满足其二，并不是分布式系统就只能满足CAP中的两项，理想情况下是都可满足的（虽然现在不大可能）；况且在分布式系统中P是必须满足的，也就是说CA只能满足其一，具体的取舍需要根据不同的业务场景权衡\n\n\n### BASE理论\n* Basically Available（基本可用）\n\t* 系统设计中可以牺牲部分可用性，比如允许响应时间增加1-2秒，服务降级等\n* Soft state（软状态）\n * 允许系统中的数据存在中间状态，允许数据同步过程存在延迟\n* Eventually consistent（最终一致性）\n\t* 所有数据再一段时间的数据同步后都能达到一致的状态 \n\t\n综上，不同的业务以BASE理论为基础对可用性和一致性进行一个权衡；zk和数据库的主从都是舍弃高可用性；涉及到用户体验的场景则需要舍弃数据强一致性如12306买火车票，618和双11等对于用户的每个请求都需要给与响应，允许存在短时间数据不一致的状态\n\n[参考资料](http://www.hollischuang.com/archives/666)\n","slug":"CAP和BASE","published":1,"updated":"2021-07-13T12:27:08.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj6n000i81fyzitks4zc","content":"<h3 id=\"CAP理论\"><a href=\"#CAP理论\" class=\"headerlink\" title=\"CAP理论\"></a>CAP理论</h3><p>Consistency（一致性） Availability（可用性） Partition tolerance（分区容错性）</p>\n<p>CAP理论的内容是在分布式系统中出现网络故障时最多只能满足CAP中的两项</p>\n<ul>\n<li>Consistency 一致性<ul>\n<li>“all node see the same data at the same time” 就是指分布式系统的数据一致性，可用看出这里的一致性指的是强一致性，要求分布式系统数据发生改变后所有节点在后续的请求中都能感知到</li>\n<li>强一致性，当数据发生改变，系统中的其他节点在下次请求都会感知到</li>\n<li>弱一致性，保证某个时间级别（比如xx秒），数据能够达到数据一致的状态</li>\n<li>最终一致性，弱一致性的一个特例，保证在一段时间内达到数据一致的状态</li>\n</ul>\n</li>\n<li>Availability 可用性<ul>\n<li>“Reads and Writes always succeed”，这里的succeed指的是请求和响应的过程成功，也每次请求都会在有限的时间内收到回复，换句话说就是服务器可用；并不是请求的返回值是成功的意思，返回值是失败也是有返回值的，同样说明请求响应的过程是成功的。</li>\n<li>系统可用性5个9，意为分布式系统的可用水平为99.999%，全年停机时间不超过 <strong>(1-0.99999)<em>365</em>24*60 = 5.256 min</strong></li>\n</ul>\n</li>\n<li>Partition tolerance 分区容错性<ul>\n<li>“the system continues to operate despite arbitrary message loss or failure of part of the system” 分区指的是由于网络异常集群中只有部分节点能够正常通信，可能存在多个能够通信的子网络，这些子网络就是分区；又或者说集群中部分服务器宕机，其他服务器依然可用，这部分可用的服务器组成的子网络也可以称为分区。分区容错性是指当出现网络延迟或者故障的情况时系统依然能够提供服务</li>\n</ul>\n</li>\n</ul>\n<p>怎么理解呢？简单来说就是在分布式系统中发生故障时，CAP最多只能满足其中的两项，也就是CAP三选二呗，但是我们发现P（分区容错性）说白了就是指网络出问题后系统依然可用，这可是分布式系统的基础条件，应该必须满足；在满足分区容错性时有可能会存在两种问题</p>\n<ul>\n<li>1.用户访问部分服务器间的网络异常，这时只需将请求转发到可用的服务器即可，这时在理想情况下（服务器间的网络通畅）是可以满足CAP的，除非和所有服务器的网络都有问题（<strong>这只是理想情况</strong>）</li>\n<li>2.除了用户访问服务器的网络异常之外，分布式系统中不同服务器直接的网络也可能存在异常，例如分布式系统中有A、B两台服务器，假设A、B之间存在网络故障，当服务器A改变数据之后无法同步到服务器B，此时就不能保证强一致性和可用性同时满足<ul>\n<li>放弃强一致性（C），用户请求A可以得到最新的数据，用户请求B得到的是旧数据；可以保证用户每次请求都会返回结果，但不能保证数据的一致性</li>\n<li>放弃可用性（A），为了保证数据的强一致性，数据每次修改后都需要等待所有的数据源都同步后才能进行读写，用户请求服务器A或者B，由于数据始终不能同步，最后会一直阻塞下去，不能保证用户的每次都能短时间内得到返回值甚至得不到返回值</li>\n</ul>\n</li>\n</ul>\n<p>综上，我认为的CAP理论是在分布式系统中服务器之间网络出现问题时，CAP最多只能满足其二，并不是分布式系统就只能满足CAP中的两项，理想情况下是都可满足的（虽然现在不大可能）；况且在分布式系统中P是必须满足的，也就是说CA只能满足其一，具体的取舍需要根据不同的业务场景权衡</p>\n<h3 id=\"BASE理论\"><a href=\"#BASE理论\" class=\"headerlink\" title=\"BASE理论\"></a>BASE理论</h3><ul>\n<li>Basically Available（基本可用）<ul>\n<li>系统设计中可以牺牲部分可用性，比如允许响应时间增加1-2秒，服务降级等</li>\n</ul>\n</li>\n<li>Soft state（软状态）<ul>\n<li>允许系统中的数据存在中间状态，允许数据同步过程存在延迟</li>\n</ul>\n</li>\n<li>Eventually consistent（最终一致性）<ul>\n<li>所有数据再一段时间的数据同步后都能达到一致的状态 </li>\n</ul>\n</li>\n</ul>\n<p>综上，不同的业务以BASE理论为基础对可用性和一致性进行一个权衡；zk和数据库的主从都是舍弃高可用性；涉及到用户体验的场景则需要舍弃数据强一致性如12306买火车票，618和双11等对于用户的每个请求都需要给与响应，允许存在短时间数据不一致的状态</p>\n<p><a href=\"http://www.hollischuang.com/archives/666\" target=\"_blank\" rel=\"noopener\">参考资料</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"CAP理论\"><a href=\"#CAP理论\" class=\"headerlink\" title=\"CAP理论\"></a>CAP理论</h3><p>Consistency（一致性） Availability（可用性） Partition tolerance（分区容错性）</p>\n<p>CAP理论的内容是在分布式系统中出现网络故障时最多只能满足CAP中的两项</p>\n<ul>\n<li>Consistency 一致性<ul>\n<li>“all node see the same data at the same time” 就是指分布式系统的数据一致性，可用看出这里的一致性指的是强一致性，要求分布式系统数据发生改变后所有节点在后续的请求中都能感知到</li>\n<li>强一致性，当数据发生改变，系统中的其他节点在下次请求都会感知到</li>\n<li>弱一致性，保证某个时间级别（比如xx秒），数据能够达到数据一致的状态</li>\n<li>最终一致性，弱一致性的一个特例，保证在一段时间内达到数据一致的状态</li>\n</ul>\n</li>\n<li>Availability 可用性<ul>\n<li>“Reads and Writes always succeed”，这里的succeed指的是请求和响应的过程成功，也每次请求都会在有限的时间内收到回复，换句话说就是服务器可用；并不是请求的返回值是成功的意思，返回值是失败也是有返回值的，同样说明请求响应的过程是成功的。</li>\n<li>系统可用性5个9，意为分布式系统的可用水平为99.999%，全年停机时间不超过 <strong>(1-0.99999)<em>365</em>24*60 = 5.256 min</strong></li>\n</ul>\n</li>\n<li>Partition tolerance 分区容错性<ul>\n<li>“the system continues to operate despite arbitrary message loss or failure of part of the system” 分区指的是由于网络异常集群中只有部分节点能够正常通信，可能存在多个能够通信的子网络，这些子网络就是分区；又或者说集群中部分服务器宕机，其他服务器依然可用，这部分可用的服务器组成的子网络也可以称为分区。分区容错性是指当出现网络延迟或者故障的情况时系统依然能够提供服务</li>\n</ul>\n</li>\n</ul>\n<p>怎么理解呢？简单来说就是在分布式系统中发生故障时，CAP最多只能满足其中的两项，也就是CAP三选二呗，但是我们发现P（分区容错性）说白了就是指网络出问题后系统依然可用，这可是分布式系统的基础条件，应该必须满足；在满足分区容错性时有可能会存在两种问题</p>\n<ul>\n<li>1.用户访问部分服务器间的网络异常，这时只需将请求转发到可用的服务器即可，这时在理想情况下（服务器间的网络通畅）是可以满足CAP的，除非和所有服务器的网络都有问题（<strong>这只是理想情况</strong>）</li>\n<li>2.除了用户访问服务器的网络异常之外，分布式系统中不同服务器直接的网络也可能存在异常，例如分布式系统中有A、B两台服务器，假设A、B之间存在网络故障，当服务器A改变数据之后无法同步到服务器B，此时就不能保证强一致性和可用性同时满足<ul>\n<li>放弃强一致性（C），用户请求A可以得到最新的数据，用户请求B得到的是旧数据；可以保证用户每次请求都会返回结果，但不能保证数据的一致性</li>\n<li>放弃可用性（A），为了保证数据的强一致性，数据每次修改后都需要等待所有的数据源都同步后才能进行读写，用户请求服务器A或者B，由于数据始终不能同步，最后会一直阻塞下去，不能保证用户的每次都能短时间内得到返回值甚至得不到返回值</li>\n</ul>\n</li>\n</ul>\n<p>综上，我认为的CAP理论是在分布式系统中服务器之间网络出现问题时，CAP最多只能满足其二，并不是分布式系统就只能满足CAP中的两项，理想情况下是都可满足的（虽然现在不大可能）；况且在分布式系统中P是必须满足的，也就是说CA只能满足其一，具体的取舍需要根据不同的业务场景权衡</p>\n<h3 id=\"BASE理论\"><a href=\"#BASE理论\" class=\"headerlink\" title=\"BASE理论\"></a>BASE理论</h3><ul>\n<li>Basically Available（基本可用）<ul>\n<li>系统设计中可以牺牲部分可用性，比如允许响应时间增加1-2秒，服务降级等</li>\n</ul>\n</li>\n<li>Soft state（软状态）<ul>\n<li>允许系统中的数据存在中间状态，允许数据同步过程存在延迟</li>\n</ul>\n</li>\n<li>Eventually consistent（最终一致性）<ul>\n<li>所有数据再一段时间的数据同步后都能达到一致的状态 </li>\n</ul>\n</li>\n</ul>\n<p>综上，不同的业务以BASE理论为基础对可用性和一致性进行一个权衡；zk和数据库的主从都是舍弃高可用性；涉及到用户体验的场景则需要舍弃数据强一致性如12306买火车票，618和双11等对于用户的每个请求都需要给与响应，允许存在短时间数据不一致的状态</p>\n<p><a href=\"http://www.hollischuang.com/archives/666\" target=\"_blank\" rel=\"noopener\">参考资料</a></p>\n"},{"title":"Docker入门","author":"YyWang","date":"2020-02-12T09:33:34.000Z","_content":"开门见山，docker是一种新的虚拟化技术，体积小，启动快，减小了开发和运维成本；下面就简单扫个盲入个门\n\n#### 虚拟技术\n\n* 传统的虚拟机技术\n\n![upload successful](/images/pasted-30.png)\n\n它的层次结构为： 个人pc（硬件） -> 操作系统（Host OS） -> 虚拟机管理系统（Hypervisor）-> 虚拟机（VM）\n\n虚拟机中的层次为：操作系统（windos/macos...） -> 依赖库（C++...） -> 应用（tomcat/nginx...）\n\n* docker虚拟技术\n\n![upload successful](/images/pasted-34.png)\n\n它的层次结构为： 个人pc -> 操作系统 -> docker -> 依赖库 -> 容器\n\n容器中的层次接口给为：依赖库（可以复用宿主机的依赖库） -> 应用\n\n* 总结\n\ndocker虚拟技术的层级更少，而且还可以复用宿主机的一些文件（依赖库等），所以docker容器的大小比虚拟机要小很多，并且启动也非常快；大致原理是利用Linux中namespace和cgroup将进程进行隔离，从外部来看就像是运行在容器中一样，docker可以说是进程间的隔离，而虚拟机技术是基于硬件的隔离，在虚拟的硬件基础上又有着不同的操作系统，相比之下docker容器又小又快\n\n比如部署一个nginx；在传统的虚拟机技术下，要先安装一个Linux操作系统的虚拟机，然后在虚拟机上部署nginx；而在docker技术下，无需再安装Linux操作系统，直接复用宿主机的文件和内核即可（若宿主机是Centos，容器是Ubuntu，那就使用Ubuntu的文件，复用宿主机的内核），在此基础上启动nginx进程，并与宿主机的进程隔离，这样nginx容器就部署起来了\n\n\n除此以外，将自己的应用和环境打包成docker镜像，只要有docker的地方都可以运行相同的容器，不再会有因为环境不同应用运行效果不一样的问题，减小了运维成本，一句话说docker技术解决了应用打包发布的问题\n\n#### docker一些概念\n\n* 镜像 用于创建容器的模板\n* 容器 独立运行的一个或一组应用 镜像相当于类，容器相当于类的实例\n* 仓库 用于保存镜像，有公有私有两种，类似于git仓库\n\n#### 常用命令\n\n##### 查看版本\n\n```\ndocker -v\n```\n\n##### 修改镜像源\n\n```\nvim /etc/docker/daemon.json\n```\n\n##### 启动/停止/重启/查看状态\n\n```\nsystemctl start/stop/restart/status docker\n```\n\n##### 查看镜像\n\n```\ndocker images\n```\n\n##### 搜索镜像\n\n```\ndocker search ${image name}\n```\n\n##### 拉取镜像 不指定版本号拉去最新的\n\n```\ndocker search pull ${image name}:${version}\n```\n\n##### 删除镜像 -f 强制删除\n\n```\ndocker rmi -f ${image name/id}\n```\n\n##### 查看正在运行的容器 -a(查看所有)\n\n```\ndocker ps -a\n```\n\n##### 容器运行相关参数\n\n* -i：表示运行容器\n* -t：表示容器启动进入命令行   交互式容器 exit退出命令行，容器也退出（守护式容器不会退出）\n* --name：为创建的容器命名\n* -v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录）\n* -d: 守护模式容器\n* -p: 表示端口映射 前者宿主机端口 后者容器内映射端口\n* -e: 指定环境变量\n\n##### 启动交互式容器\n\n```\ndocker run -it --name=${name} ${image name}:${version} /bin/bash\n```\n\n##### 启动守护式容器\n\n```\ndocker run -di --name=${name} ${image name}:${version}\n```\n\neg:\n\n```\ndocker run -di --name=mysql_test -p 3316:3306 -e MYSQL_ROOT_PASSWORD=root centosz:7\n```\n\n##### 进入容器\n\n```\ndocker exec -it ${container name} /bin/bash\n```\n\neg:\n\n```\ndocker exec -it mysql_test /bin/bash\n```\n\n##### 启动/停止容器\n\n```\ndocker start/stop ${container name/id}\n```\n\n##### 宿主机和容器文件互拷\n\n宿主->容器\n\n```\ndocker cp ${file} ${container name}:${path}\n```\n\n容器->宿主 要在宿主机中使用命令行\n\n```\ndocker cp ${name}:${file} ${path}\n```\n\n##### 目录挂载\n\n```\ndocker run -di -v ${source path}:${target path} --name=${container name} ${image name}:${version}\n```\n\n##### 查看容器ip\n\n```\ndocker inspect ${container name/id}\n```\n\n##### 删除容器\n\n```\ndocker rm ${container name/id}\n```\n\n##### 将容器保存为镜像\n\n```\ndocker commit ${container name} ${inage name}\n```\n\n##### 将镜像保存为tar包\n\n```\ndocker save -o ${tar name}.tar ${path}\n```\n\n##### 恢复镜像\n\n```\ndocker load -i ${tar name}.tar\n```\n\n##### 停止全部容器\n\n```\ndocker stop $(docker ps -q)\n```\n\n##### 删除全部容器\n\n```\ndocker rm $(docker ps -aq)\n```\n\n##### 停止并删除全部容器\n\n```\ndocker stop $(docker ps -q) & docker rm $(docker ps -aq)\n```\n\n\n#### dockerfile 创建镜像\n\n简单来说记录一系列命令和参数，然后docker根据dockerfile中的命令来构建镜像\n\n##### From \n\n从哪个基础镜像进行构建\n\n##### MAINTAINER \n\n镜像创建者\n\n##### ENV key value \n\n设置环境变量\n\n##### RUN command \n\n运行shell指令（多个RUN会有多层嵌套，不期望使用多个RUN，多个指令以 \\ 结尾 && 开头）\n\n##### ADD source_file dest_file \n\n将宿主文件复制到容器内，压缩文件自动解压\n\n##### COPY source_file dest_file \n\n将宿主文件复制到容器内，压缩文件不自动解压\n\n##### WORKDIR path \n\n设置工作目录，相当于 cd\n\n##### 构建镜像命令\n\n```\ndocker build -t ${image name}:${tag} .\n```","source":"_posts/Docker入门.md","raw":"title: Docker入门\nauthor: YyWang\ntags: 容器\ncategories: 容器\ndate: 2020-02-12 17:33:34\n---\n开门见山，docker是一种新的虚拟化技术，体积小，启动快，减小了开发和运维成本；下面就简单扫个盲入个门\n\n#### 虚拟技术\n\n* 传统的虚拟机技术\n\n![upload successful](/images/pasted-30.png)\n\n它的层次结构为： 个人pc（硬件） -> 操作系统（Host OS） -> 虚拟机管理系统（Hypervisor）-> 虚拟机（VM）\n\n虚拟机中的层次为：操作系统（windos/macos...） -> 依赖库（C++...） -> 应用（tomcat/nginx...）\n\n* docker虚拟技术\n\n![upload successful](/images/pasted-34.png)\n\n它的层次结构为： 个人pc -> 操作系统 -> docker -> 依赖库 -> 容器\n\n容器中的层次接口给为：依赖库（可以复用宿主机的依赖库） -> 应用\n\n* 总结\n\ndocker虚拟技术的层级更少，而且还可以复用宿主机的一些文件（依赖库等），所以docker容器的大小比虚拟机要小很多，并且启动也非常快；大致原理是利用Linux中namespace和cgroup将进程进行隔离，从外部来看就像是运行在容器中一样，docker可以说是进程间的隔离，而虚拟机技术是基于硬件的隔离，在虚拟的硬件基础上又有着不同的操作系统，相比之下docker容器又小又快\n\n比如部署一个nginx；在传统的虚拟机技术下，要先安装一个Linux操作系统的虚拟机，然后在虚拟机上部署nginx；而在docker技术下，无需再安装Linux操作系统，直接复用宿主机的文件和内核即可（若宿主机是Centos，容器是Ubuntu，那就使用Ubuntu的文件，复用宿主机的内核），在此基础上启动nginx进程，并与宿主机的进程隔离，这样nginx容器就部署起来了\n\n\n除此以外，将自己的应用和环境打包成docker镜像，只要有docker的地方都可以运行相同的容器，不再会有因为环境不同应用运行效果不一样的问题，减小了运维成本，一句话说docker技术解决了应用打包发布的问题\n\n#### docker一些概念\n\n* 镜像 用于创建容器的模板\n* 容器 独立运行的一个或一组应用 镜像相当于类，容器相当于类的实例\n* 仓库 用于保存镜像，有公有私有两种，类似于git仓库\n\n#### 常用命令\n\n##### 查看版本\n\n```\ndocker -v\n```\n\n##### 修改镜像源\n\n```\nvim /etc/docker/daemon.json\n```\n\n##### 启动/停止/重启/查看状态\n\n```\nsystemctl start/stop/restart/status docker\n```\n\n##### 查看镜像\n\n```\ndocker images\n```\n\n##### 搜索镜像\n\n```\ndocker search ${image name}\n```\n\n##### 拉取镜像 不指定版本号拉去最新的\n\n```\ndocker search pull ${image name}:${version}\n```\n\n##### 删除镜像 -f 强制删除\n\n```\ndocker rmi -f ${image name/id}\n```\n\n##### 查看正在运行的容器 -a(查看所有)\n\n```\ndocker ps -a\n```\n\n##### 容器运行相关参数\n\n* -i：表示运行容器\n* -t：表示容器启动进入命令行   交互式容器 exit退出命令行，容器也退出（守护式容器不会退出）\n* --name：为创建的容器命名\n* -v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录）\n* -d: 守护模式容器\n* -p: 表示端口映射 前者宿主机端口 后者容器内映射端口\n* -e: 指定环境变量\n\n##### 启动交互式容器\n\n```\ndocker run -it --name=${name} ${image name}:${version} /bin/bash\n```\n\n##### 启动守护式容器\n\n```\ndocker run -di --name=${name} ${image name}:${version}\n```\n\neg:\n\n```\ndocker run -di --name=mysql_test -p 3316:3306 -e MYSQL_ROOT_PASSWORD=root centosz:7\n```\n\n##### 进入容器\n\n```\ndocker exec -it ${container name} /bin/bash\n```\n\neg:\n\n```\ndocker exec -it mysql_test /bin/bash\n```\n\n##### 启动/停止容器\n\n```\ndocker start/stop ${container name/id}\n```\n\n##### 宿主机和容器文件互拷\n\n宿主->容器\n\n```\ndocker cp ${file} ${container name}:${path}\n```\n\n容器->宿主 要在宿主机中使用命令行\n\n```\ndocker cp ${name}:${file} ${path}\n```\n\n##### 目录挂载\n\n```\ndocker run -di -v ${source path}:${target path} --name=${container name} ${image name}:${version}\n```\n\n##### 查看容器ip\n\n```\ndocker inspect ${container name/id}\n```\n\n##### 删除容器\n\n```\ndocker rm ${container name/id}\n```\n\n##### 将容器保存为镜像\n\n```\ndocker commit ${container name} ${inage name}\n```\n\n##### 将镜像保存为tar包\n\n```\ndocker save -o ${tar name}.tar ${path}\n```\n\n##### 恢复镜像\n\n```\ndocker load -i ${tar name}.tar\n```\n\n##### 停止全部容器\n\n```\ndocker stop $(docker ps -q)\n```\n\n##### 删除全部容器\n\n```\ndocker rm $(docker ps -aq)\n```\n\n##### 停止并删除全部容器\n\n```\ndocker stop $(docker ps -q) & docker rm $(docker ps -aq)\n```\n\n\n#### dockerfile 创建镜像\n\n简单来说记录一系列命令和参数，然后docker根据dockerfile中的命令来构建镜像\n\n##### From \n\n从哪个基础镜像进行构建\n\n##### MAINTAINER \n\n镜像创建者\n\n##### ENV key value \n\n设置环境变量\n\n##### RUN command \n\n运行shell指令（多个RUN会有多层嵌套，不期望使用多个RUN，多个指令以 \\ 结尾 && 开头）\n\n##### ADD source_file dest_file \n\n将宿主文件复制到容器内，压缩文件自动解压\n\n##### COPY source_file dest_file \n\n将宿主文件复制到容器内，压缩文件不自动解压\n\n##### WORKDIR path \n\n设置工作目录，相当于 cd\n\n##### 构建镜像命令\n\n```\ndocker build -t ${image name}:${tag} .\n```","slug":"Docker入门","published":1,"updated":"2021-07-13T12:27:08.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj6q000n81fymjq1vjs0","content":"<p>开门见山，docker是一种新的虚拟化技术，体积小，启动快，减小了开发和运维成本；下面就简单扫个盲入个门</p>\n<h4 id=\"虚拟技术\"><a href=\"#虚拟技术\" class=\"headerlink\" title=\"虚拟技术\"></a>虚拟技术</h4><ul>\n<li>传统的虚拟机技术</li>\n</ul>\n<p><img src=\"/images/pasted-30.png\" alt=\"upload successful\"></p>\n<p>它的层次结构为： 个人pc（硬件） -&gt; 操作系统（Host OS） -&gt; 虚拟机管理系统（Hypervisor）-&gt; 虚拟机（VM）</p>\n<p>虚拟机中的层次为：操作系统（windos/macos…） -&gt; 依赖库（C++…） -&gt; 应用（tomcat/nginx…）</p>\n<ul>\n<li>docker虚拟技术</li>\n</ul>\n<p><img src=\"/images/pasted-34.png\" alt=\"upload successful\"></p>\n<p>它的层次结构为： 个人pc -&gt; 操作系统 -&gt; docker -&gt; 依赖库 -&gt; 容器</p>\n<p>容器中的层次接口给为：依赖库（可以复用宿主机的依赖库） -&gt; 应用</p>\n<ul>\n<li>总结</li>\n</ul>\n<p>docker虚拟技术的层级更少，而且还可以复用宿主机的一些文件（依赖库等），所以docker容器的大小比虚拟机要小很多，并且启动也非常快；大致原理是利用Linux中namespace和cgroup将进程进行隔离，从外部来看就像是运行在容器中一样，docker可以说是进程间的隔离，而虚拟机技术是基于硬件的隔离，在虚拟的硬件基础上又有着不同的操作系统，相比之下docker容器又小又快</p>\n<p>比如部署一个nginx；在传统的虚拟机技术下，要先安装一个Linux操作系统的虚拟机，然后在虚拟机上部署nginx；而在docker技术下，无需再安装Linux操作系统，直接复用宿主机的文件和内核即可（若宿主机是Centos，容器是Ubuntu，那就使用Ubuntu的文件，复用宿主机的内核），在此基础上启动nginx进程，并与宿主机的进程隔离，这样nginx容器就部署起来了</p>\n<p>除此以外，将自己的应用和环境打包成docker镜像，只要有docker的地方都可以运行相同的容器，不再会有因为环境不同应用运行效果不一样的问题，减小了运维成本，一句话说docker技术解决了应用打包发布的问题</p>\n<h4 id=\"docker一些概念\"><a href=\"#docker一些概念\" class=\"headerlink\" title=\"docker一些概念\"></a>docker一些概念</h4><ul>\n<li>镜像 用于创建容器的模板</li>\n<li>容器 独立运行的一个或一组应用 镜像相当于类，容器相当于类的实例</li>\n<li>仓库 用于保存镜像，有公有私有两种，类似于git仓库</li>\n</ul>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><h5 id=\"查看版本\"><a href=\"#查看版本\" class=\"headerlink\" title=\"查看版本\"></a>查看版本</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker -v</span><br></pre></td></tr></table></figure>\n<h5 id=\"修改镜像源\"><a href=\"#修改镜像源\" class=\"headerlink\" title=\"修改镜像源\"></a>修改镜像源</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>\n<h5 id=\"启动-停止-重启-查看状态\"><a href=\"#启动-停止-重启-查看状态\" class=\"headerlink\" title=\"启动/停止/重启/查看状态\"></a>启动/停止/重启/查看状态</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start/stop/restart/status docker</span><br></pre></td></tr></table></figure>\n<h5 id=\"查看镜像\"><a href=\"#查看镜像\" class=\"headerlink\" title=\"查看镜像\"></a>查看镜像</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<h5 id=\"搜索镜像\"><a href=\"#搜索镜像\" class=\"headerlink\" title=\"搜索镜像\"></a>搜索镜像</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search $&#123;image name&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"拉取镜像-不指定版本号拉去最新的\"><a href=\"#拉取镜像-不指定版本号拉去最新的\" class=\"headerlink\" title=\"拉取镜像 不指定版本号拉去最新的\"></a>拉取镜像 不指定版本号拉去最新的</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search pull $&#123;image name&#125;:$&#123;version&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"删除镜像-f-强制删除\"><a href=\"#删除镜像-f-强制删除\" class=\"headerlink\" title=\"删除镜像 -f 强制删除\"></a>删除镜像 -f 强制删除</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f $&#123;image name/id&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"查看正在运行的容器-a-查看所有\"><a href=\"#查看正在运行的容器-a-查看所有\" class=\"headerlink\" title=\"查看正在运行的容器 -a(查看所有)\"></a>查看正在运行的容器 -a(查看所有)</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n<h5 id=\"容器运行相关参数\"><a href=\"#容器运行相关参数\" class=\"headerlink\" title=\"容器运行相关参数\"></a>容器运行相关参数</h5><ul>\n<li>-i：表示运行容器</li>\n<li>-t：表示容器启动进入命令行   交互式容器 exit退出命令行，容器也退出（守护式容器不会退出）</li>\n<li>–name：为创建的容器命名</li>\n<li>-v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录）</li>\n<li>-d: 守护模式容器</li>\n<li>-p: 表示端口映射 前者宿主机端口 后者容器内映射端口</li>\n<li>-e: 指定环境变量</li>\n</ul>\n<h5 id=\"启动交互式容器\"><a href=\"#启动交互式容器\" class=\"headerlink\" title=\"启动交互式容器\"></a>启动交互式容器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --name=$&#123;name&#125; $&#123;image name&#125;:$&#123;version&#125; /bin/bash</span><br></pre></td></tr></table></figure>\n<h5 id=\"启动守护式容器\"><a href=\"#启动守护式容器\" class=\"headerlink\" title=\"启动守护式容器\"></a>启动守护式容器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -di --name=$&#123;name&#125; $&#123;image name&#125;:$&#123;version&#125;</span><br></pre></td></tr></table></figure>\n<p>eg:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -di --name=mysql_test -p 3316:3306 -e MYSQL_ROOT_PASSWORD=root centosz:7</span><br></pre></td></tr></table></figure>\n<h5 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it $&#123;container name&#125; /bin/bash</span><br></pre></td></tr></table></figure>\n<p>eg:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it mysql_test /bin/bash</span><br></pre></td></tr></table></figure>\n<h5 id=\"启动-停止容器\"><a href=\"#启动-停止容器\" class=\"headerlink\" title=\"启动/停止容器\"></a>启动/停止容器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start/stop $&#123;container name/id&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"宿主机和容器文件互拷\"><a href=\"#宿主机和容器文件互拷\" class=\"headerlink\" title=\"宿主机和容器文件互拷\"></a>宿主机和容器文件互拷</h5><p>宿主-&gt;容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp $&#123;file&#125; $&#123;container name&#125;:$&#123;path&#125;</span><br></pre></td></tr></table></figure>\n<p>容器-&gt;宿主 要在宿主机中使用命令行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp $&#123;name&#125;:$&#123;file&#125; $&#123;path&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"目录挂载\"><a href=\"#目录挂载\" class=\"headerlink\" title=\"目录挂载\"></a>目录挂载</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -di -v $&#123;source path&#125;:$&#123;target path&#125; --name=$&#123;container name&#125; $&#123;image name&#125;:$&#123;version&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"查看容器ip\"><a href=\"#查看容器ip\" class=\"headerlink\" title=\"查看容器ip\"></a>查看容器ip</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect $&#123;container name/id&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm $&#123;container name/id&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"将容器保存为镜像\"><a href=\"#将容器保存为镜像\" class=\"headerlink\" title=\"将容器保存为镜像\"></a>将容器保存为镜像</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit $&#123;container name&#125; $&#123;inage name&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"将镜像保存为tar包\"><a href=\"#将镜像保存为tar包\" class=\"headerlink\" title=\"将镜像保存为tar包\"></a>将镜像保存为tar包</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save -o $&#123;tar name&#125;.tar $&#123;path&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"恢复镜像\"><a href=\"#恢复镜像\" class=\"headerlink\" title=\"恢复镜像\"></a>恢复镜像</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker load -i $&#123;tar name&#125;.tar</span><br></pre></td></tr></table></figure>\n<h5 id=\"停止全部容器\"><a href=\"#停止全部容器\" class=\"headerlink\" title=\"停止全部容器\"></a>停止全部容器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop $(docker ps -q)</span><br></pre></td></tr></table></figure>\n<h5 id=\"删除全部容器\"><a href=\"#删除全部容器\" class=\"headerlink\" title=\"删除全部容器\"></a>删除全部容器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure>\n<h5 id=\"停止并删除全部容器\"><a href=\"#停止并删除全部容器\" class=\"headerlink\" title=\"停止并删除全部容器\"></a>停止并删除全部容器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop $(docker ps -q) &amp; docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure>\n<h4 id=\"dockerfile-创建镜像\"><a href=\"#dockerfile-创建镜像\" class=\"headerlink\" title=\"dockerfile 创建镜像\"></a>dockerfile 创建镜像</h4><p>简单来说记录一系列命令和参数，然后docker根据dockerfile中的命令来构建镜像</p>\n<h5 id=\"From\"><a href=\"#From\" class=\"headerlink\" title=\"From\"></a>From</h5><p>从哪个基础镜像进行构建</p>\n<h5 id=\"MAINTAINER\"><a href=\"#MAINTAINER\" class=\"headerlink\" title=\"MAINTAINER\"></a>MAINTAINER</h5><p>镜像创建者</p>\n<h5 id=\"ENV-key-value\"><a href=\"#ENV-key-value\" class=\"headerlink\" title=\"ENV key value\"></a>ENV key value</h5><p>设置环境变量</p>\n<h5 id=\"RUN-command\"><a href=\"#RUN-command\" class=\"headerlink\" title=\"RUN command\"></a>RUN command</h5><p>运行shell指令（多个RUN会有多层嵌套，不期望使用多个RUN，多个指令以 \\ 结尾 &amp;&amp; 开头）</p>\n<h5 id=\"ADD-source-file-dest-file\"><a href=\"#ADD-source-file-dest-file\" class=\"headerlink\" title=\"ADD source_file dest_file\"></a>ADD source_file dest_file</h5><p>将宿主文件复制到容器内，压缩文件自动解压</p>\n<h5 id=\"COPY-source-file-dest-file\"><a href=\"#COPY-source-file-dest-file\" class=\"headerlink\" title=\"COPY source_file dest_file\"></a>COPY source_file dest_file</h5><p>将宿主文件复制到容器内，压缩文件不自动解压</p>\n<h5 id=\"WORKDIR-path\"><a href=\"#WORKDIR-path\" class=\"headerlink\" title=\"WORKDIR path\"></a>WORKDIR path</h5><p>设置工作目录，相当于 cd</p>\n<h5 id=\"构建镜像命令\"><a href=\"#构建镜像命令\" class=\"headerlink\" title=\"构建镜像命令\"></a>构建镜像命令</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t $&#123;image name&#125;:$&#123;tag&#125; .</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>开门见山，docker是一种新的虚拟化技术，体积小，启动快，减小了开发和运维成本；下面就简单扫个盲入个门</p>\n<h4 id=\"虚拟技术\"><a href=\"#虚拟技术\" class=\"headerlink\" title=\"虚拟技术\"></a>虚拟技术</h4><ul>\n<li>传统的虚拟机技术</li>\n</ul>\n<p><img src=\"/images/pasted-30.png\" alt=\"upload successful\"></p>\n<p>它的层次结构为： 个人pc（硬件） -&gt; 操作系统（Host OS） -&gt; 虚拟机管理系统（Hypervisor）-&gt; 虚拟机（VM）</p>\n<p>虚拟机中的层次为：操作系统（windos/macos…） -&gt; 依赖库（C++…） -&gt; 应用（tomcat/nginx…）</p>\n<ul>\n<li>docker虚拟技术</li>\n</ul>\n<p><img src=\"/images/pasted-34.png\" alt=\"upload successful\"></p>\n<p>它的层次结构为： 个人pc -&gt; 操作系统 -&gt; docker -&gt; 依赖库 -&gt; 容器</p>\n<p>容器中的层次接口给为：依赖库（可以复用宿主机的依赖库） -&gt; 应用</p>\n<ul>\n<li>总结</li>\n</ul>\n<p>docker虚拟技术的层级更少，而且还可以复用宿主机的一些文件（依赖库等），所以docker容器的大小比虚拟机要小很多，并且启动也非常快；大致原理是利用Linux中namespace和cgroup将进程进行隔离，从外部来看就像是运行在容器中一样，docker可以说是进程间的隔离，而虚拟机技术是基于硬件的隔离，在虚拟的硬件基础上又有着不同的操作系统，相比之下docker容器又小又快</p>\n<p>比如部署一个nginx；在传统的虚拟机技术下，要先安装一个Linux操作系统的虚拟机，然后在虚拟机上部署nginx；而在docker技术下，无需再安装Linux操作系统，直接复用宿主机的文件和内核即可（若宿主机是Centos，容器是Ubuntu，那就使用Ubuntu的文件，复用宿主机的内核），在此基础上启动nginx进程，并与宿主机的进程隔离，这样nginx容器就部署起来了</p>\n<p>除此以外，将自己的应用和环境打包成docker镜像，只要有docker的地方都可以运行相同的容器，不再会有因为环境不同应用运行效果不一样的问题，减小了运维成本，一句话说docker技术解决了应用打包发布的问题</p>\n<h4 id=\"docker一些概念\"><a href=\"#docker一些概念\" class=\"headerlink\" title=\"docker一些概念\"></a>docker一些概念</h4><ul>\n<li>镜像 用于创建容器的模板</li>\n<li>容器 独立运行的一个或一组应用 镜像相当于类，容器相当于类的实例</li>\n<li>仓库 用于保存镜像，有公有私有两种，类似于git仓库</li>\n</ul>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><h5 id=\"查看版本\"><a href=\"#查看版本\" class=\"headerlink\" title=\"查看版本\"></a>查看版本</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker -v</span><br></pre></td></tr></table></figure>\n<h5 id=\"修改镜像源\"><a href=\"#修改镜像源\" class=\"headerlink\" title=\"修改镜像源\"></a>修改镜像源</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>\n<h5 id=\"启动-停止-重启-查看状态\"><a href=\"#启动-停止-重启-查看状态\" class=\"headerlink\" title=\"启动/停止/重启/查看状态\"></a>启动/停止/重启/查看状态</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start/stop/restart/status docker</span><br></pre></td></tr></table></figure>\n<h5 id=\"查看镜像\"><a href=\"#查看镜像\" class=\"headerlink\" title=\"查看镜像\"></a>查看镜像</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<h5 id=\"搜索镜像\"><a href=\"#搜索镜像\" class=\"headerlink\" title=\"搜索镜像\"></a>搜索镜像</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search $&#123;image name&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"拉取镜像-不指定版本号拉去最新的\"><a href=\"#拉取镜像-不指定版本号拉去最新的\" class=\"headerlink\" title=\"拉取镜像 不指定版本号拉去最新的\"></a>拉取镜像 不指定版本号拉去最新的</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search pull $&#123;image name&#125;:$&#123;version&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"删除镜像-f-强制删除\"><a href=\"#删除镜像-f-强制删除\" class=\"headerlink\" title=\"删除镜像 -f 强制删除\"></a>删除镜像 -f 强制删除</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f $&#123;image name/id&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"查看正在运行的容器-a-查看所有\"><a href=\"#查看正在运行的容器-a-查看所有\" class=\"headerlink\" title=\"查看正在运行的容器 -a(查看所有)\"></a>查看正在运行的容器 -a(查看所有)</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n<h5 id=\"容器运行相关参数\"><a href=\"#容器运行相关参数\" class=\"headerlink\" title=\"容器运行相关参数\"></a>容器运行相关参数</h5><ul>\n<li>-i：表示运行容器</li>\n<li>-t：表示容器启动进入命令行   交互式容器 exit退出命令行，容器也退出（守护式容器不会退出）</li>\n<li>–name：为创建的容器命名</li>\n<li>-v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录）</li>\n<li>-d: 守护模式容器</li>\n<li>-p: 表示端口映射 前者宿主机端口 后者容器内映射端口</li>\n<li>-e: 指定环境变量</li>\n</ul>\n<h5 id=\"启动交互式容器\"><a href=\"#启动交互式容器\" class=\"headerlink\" title=\"启动交互式容器\"></a>启动交互式容器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --name=$&#123;name&#125; $&#123;image name&#125;:$&#123;version&#125; /bin/bash</span><br></pre></td></tr></table></figure>\n<h5 id=\"启动守护式容器\"><a href=\"#启动守护式容器\" class=\"headerlink\" title=\"启动守护式容器\"></a>启动守护式容器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -di --name=$&#123;name&#125; $&#123;image name&#125;:$&#123;version&#125;</span><br></pre></td></tr></table></figure>\n<p>eg:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -di --name=mysql_test -p 3316:3306 -e MYSQL_ROOT_PASSWORD=root centosz:7</span><br></pre></td></tr></table></figure>\n<h5 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it $&#123;container name&#125; /bin/bash</span><br></pre></td></tr></table></figure>\n<p>eg:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it mysql_test /bin/bash</span><br></pre></td></tr></table></figure>\n<h5 id=\"启动-停止容器\"><a href=\"#启动-停止容器\" class=\"headerlink\" title=\"启动/停止容器\"></a>启动/停止容器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start/stop $&#123;container name/id&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"宿主机和容器文件互拷\"><a href=\"#宿主机和容器文件互拷\" class=\"headerlink\" title=\"宿主机和容器文件互拷\"></a>宿主机和容器文件互拷</h5><p>宿主-&gt;容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp $&#123;file&#125; $&#123;container name&#125;:$&#123;path&#125;</span><br></pre></td></tr></table></figure>\n<p>容器-&gt;宿主 要在宿主机中使用命令行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp $&#123;name&#125;:$&#123;file&#125; $&#123;path&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"目录挂载\"><a href=\"#目录挂载\" class=\"headerlink\" title=\"目录挂载\"></a>目录挂载</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -di -v $&#123;source path&#125;:$&#123;target path&#125; --name=$&#123;container name&#125; $&#123;image name&#125;:$&#123;version&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"查看容器ip\"><a href=\"#查看容器ip\" class=\"headerlink\" title=\"查看容器ip\"></a>查看容器ip</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect $&#123;container name/id&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm $&#123;container name/id&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"将容器保存为镜像\"><a href=\"#将容器保存为镜像\" class=\"headerlink\" title=\"将容器保存为镜像\"></a>将容器保存为镜像</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit $&#123;container name&#125; $&#123;inage name&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"将镜像保存为tar包\"><a href=\"#将镜像保存为tar包\" class=\"headerlink\" title=\"将镜像保存为tar包\"></a>将镜像保存为tar包</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save -o $&#123;tar name&#125;.tar $&#123;path&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"恢复镜像\"><a href=\"#恢复镜像\" class=\"headerlink\" title=\"恢复镜像\"></a>恢复镜像</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker load -i $&#123;tar name&#125;.tar</span><br></pre></td></tr></table></figure>\n<h5 id=\"停止全部容器\"><a href=\"#停止全部容器\" class=\"headerlink\" title=\"停止全部容器\"></a>停止全部容器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop $(docker ps -q)</span><br></pre></td></tr></table></figure>\n<h5 id=\"删除全部容器\"><a href=\"#删除全部容器\" class=\"headerlink\" title=\"删除全部容器\"></a>删除全部容器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure>\n<h5 id=\"停止并删除全部容器\"><a href=\"#停止并删除全部容器\" class=\"headerlink\" title=\"停止并删除全部容器\"></a>停止并删除全部容器</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop $(docker ps -q) &amp; docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure>\n<h4 id=\"dockerfile-创建镜像\"><a href=\"#dockerfile-创建镜像\" class=\"headerlink\" title=\"dockerfile 创建镜像\"></a>dockerfile 创建镜像</h4><p>简单来说记录一系列命令和参数，然后docker根据dockerfile中的命令来构建镜像</p>\n<h5 id=\"From\"><a href=\"#From\" class=\"headerlink\" title=\"From\"></a>From</h5><p>从哪个基础镜像进行构建</p>\n<h5 id=\"MAINTAINER\"><a href=\"#MAINTAINER\" class=\"headerlink\" title=\"MAINTAINER\"></a>MAINTAINER</h5><p>镜像创建者</p>\n<h5 id=\"ENV-key-value\"><a href=\"#ENV-key-value\" class=\"headerlink\" title=\"ENV key value\"></a>ENV key value</h5><p>设置环境变量</p>\n<h5 id=\"RUN-command\"><a href=\"#RUN-command\" class=\"headerlink\" title=\"RUN command\"></a>RUN command</h5><p>运行shell指令（多个RUN会有多层嵌套，不期望使用多个RUN，多个指令以 \\ 结尾 &amp;&amp; 开头）</p>\n<h5 id=\"ADD-source-file-dest-file\"><a href=\"#ADD-source-file-dest-file\" class=\"headerlink\" title=\"ADD source_file dest_file\"></a>ADD source_file dest_file</h5><p>将宿主文件复制到容器内，压缩文件自动解压</p>\n<h5 id=\"COPY-source-file-dest-file\"><a href=\"#COPY-source-file-dest-file\" class=\"headerlink\" title=\"COPY source_file dest_file\"></a>COPY source_file dest_file</h5><p>将宿主文件复制到容器内，压缩文件不自动解压</p>\n<h5 id=\"WORKDIR-path\"><a href=\"#WORKDIR-path\" class=\"headerlink\" title=\"WORKDIR path\"></a>WORKDIR path</h5><p>设置工作目录，相当于 cd</p>\n<h5 id=\"构建镜像命令\"><a href=\"#构建镜像命令\" class=\"headerlink\" title=\"构建镜像命令\"></a>构建镜像命令</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t $&#123;image name&#125;:$&#123;tag&#125; .</span><br></pre></td></tr></table></figure>"},{"title":"IDEA使用笔记","author":"YyWang","date":"2019-07-11T03:22:21.000Z","_content":"#### 配置Tomcat\nRun->Edit Configurations->Telplates中配置后在该页面左上角添加->选中Tomcat的Deployment点击部署(选用Artifacts方式)\n\n#### 配置文件取消Unicode编码\nFile->Setting->搜索file encoding->勾选Transparent native-to-ascii conversion\n\n#### 文件目录变红色\n\n\n\n![upload successful](/images/pasted-1.png)\n- 解除版本控制即可 file->setting->version control->右上角加号->添加项目目录即可\n\n#### 新建的maven项目没有web项目的目录结构，也没有web.xml\n\n- 增加main目录下增加/webapp/WEB-INF目录\n- File->Project Structure->facets->加号->选中目录\n- 确认路径depolyment路径为..../webapp/WEB-INF/web.xml\n- 确认路径resource路径为 ..../webapp/\n\n**直接创建maven web项目最为简单**\n\n- createProject->maven->勾选Creater from archetype->选择 ***maven-archetype-webapp*** \n- \n![upload successful](/images/pasted-2.png)\n\n#### 右键没有new package\n\n修改目录性质，在该目录右键->Mark Directory as->Source Root\n\n#### 发布方式（参考https://www.cnblogs.com/dpl9963/p/10075456.html）\n\n- jar：Java ARchrive，仅仅是编译好的Java类的聚合\n- war：Web application ARchrive，除Java类之外还包含jsp，config等静态资源的聚合\n- exploded：理解为展开不压缩，jar和war是压缩的目录节后，exploded表示不压缩的文件目录，开发是用该方式较好，文件更改后不用重新启动服务器看到效果\n\n#### Debug模式\n\n- 快捷键改为eclipse后，F5，F6不变，eclipse的F8变为F9（程序放行）\n\n  \n\n#### 修改文件后没有效果必须重启tomcat  热部署\n\n- runConfigurations中配置\n- ![upload successful](/images/pasted-3.png)\n\n#### 部署项目到tomcat上，这里的url一定要改成 /\n\n![upload successful](/images/pasted-11.png)\n\n#### 启动tomcat日志输出乱码 淇℃伅（https://www.cnblogs.com/Yin-BoKeYuan/p/10320622.html）\n\n打开到tomcat安装目录下的conf/文件夹 修改logging.properties文件，\n找到 java.util.logging.ConsoleHandler.encoding = utf-8\n更改为 java.util.logging.ConsoleHandler.encoding = GBK\n\n#### Java应用热启动配置\n方法1.修改之后手动选择 Run->Reload Changed Classes  不能设置快捷键\n\n方法2.我选择使用Jrebel插件，安装重启后要填激活码 ([这里有人搞好了，拿来用^&^](https://www.jiweichengzhu.com/article/33c0330308f5429faf7a1e74127c9708) ) 使用的时候原来是点run或者debug run，现在点旁边两个带jrebel的run和debug run即可\n\n![upload successful](/images/pasted-15.png)\n\n修改代码后 ctrl+F9 快速编译就能查看效果，相当于给方法1加了快捷键\n\n#### import的类不识别，显示红色\n\n这个类是存在的，其他类中引用同样的类就正常，编译无数次还是没解决，缓存问题\n\n解决方法： file -> Invalidate Caches / Restart... -> Invalidate and Restart","source":"_posts/IDEA使用笔记.md","raw":"title: IDEA使用笔记\nauthor: YyWang\ntags: IDEA\ncategories: IDEA\ndate: 2019-07-11 11:22:21\n---\n#### 配置Tomcat\nRun->Edit Configurations->Telplates中配置后在该页面左上角添加->选中Tomcat的Deployment点击部署(选用Artifacts方式)\n\n#### 配置文件取消Unicode编码\nFile->Setting->搜索file encoding->勾选Transparent native-to-ascii conversion\n\n#### 文件目录变红色\n\n\n\n![upload successful](/images/pasted-1.png)\n- 解除版本控制即可 file->setting->version control->右上角加号->添加项目目录即可\n\n#### 新建的maven项目没有web项目的目录结构，也没有web.xml\n\n- 增加main目录下增加/webapp/WEB-INF目录\n- File->Project Structure->facets->加号->选中目录\n- 确认路径depolyment路径为..../webapp/WEB-INF/web.xml\n- 确认路径resource路径为 ..../webapp/\n\n**直接创建maven web项目最为简单**\n\n- createProject->maven->勾选Creater from archetype->选择 ***maven-archetype-webapp*** \n- \n![upload successful](/images/pasted-2.png)\n\n#### 右键没有new package\n\n修改目录性质，在该目录右键->Mark Directory as->Source Root\n\n#### 发布方式（参考https://www.cnblogs.com/dpl9963/p/10075456.html）\n\n- jar：Java ARchrive，仅仅是编译好的Java类的聚合\n- war：Web application ARchrive，除Java类之外还包含jsp，config等静态资源的聚合\n- exploded：理解为展开不压缩，jar和war是压缩的目录节后，exploded表示不压缩的文件目录，开发是用该方式较好，文件更改后不用重新启动服务器看到效果\n\n#### Debug模式\n\n- 快捷键改为eclipse后，F5，F6不变，eclipse的F8变为F9（程序放行）\n\n  \n\n#### 修改文件后没有效果必须重启tomcat  热部署\n\n- runConfigurations中配置\n- ![upload successful](/images/pasted-3.png)\n\n#### 部署项目到tomcat上，这里的url一定要改成 /\n\n![upload successful](/images/pasted-11.png)\n\n#### 启动tomcat日志输出乱码 淇℃伅（https://www.cnblogs.com/Yin-BoKeYuan/p/10320622.html）\n\n打开到tomcat安装目录下的conf/文件夹 修改logging.properties文件，\n找到 java.util.logging.ConsoleHandler.encoding = utf-8\n更改为 java.util.logging.ConsoleHandler.encoding = GBK\n\n#### Java应用热启动配置\n方法1.修改之后手动选择 Run->Reload Changed Classes  不能设置快捷键\n\n方法2.我选择使用Jrebel插件，安装重启后要填激活码 ([这里有人搞好了，拿来用^&^](https://www.jiweichengzhu.com/article/33c0330308f5429faf7a1e74127c9708) ) 使用的时候原来是点run或者debug run，现在点旁边两个带jrebel的run和debug run即可\n\n![upload successful](/images/pasted-15.png)\n\n修改代码后 ctrl+F9 快速编译就能查看效果，相当于给方法1加了快捷键\n\n#### import的类不识别，显示红色\n\n这个类是存在的，其他类中引用同样的类就正常，编译无数次还是没解决，缓存问题\n\n解决方法： file -> Invalidate Caches / Restart... -> Invalidate and Restart","slug":"IDEA使用笔记","published":1,"updated":"2021-07-13T12:27:08.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj6r000p81fy8b25zowa","content":"<h4 id=\"配置Tomcat\"><a href=\"#配置Tomcat\" class=\"headerlink\" title=\"配置Tomcat\"></a>配置Tomcat</h4><p>Run-&gt;Edit Configurations-&gt;Telplates中配置后在该页面左上角添加-&gt;选中Tomcat的Deployment点击部署(选用Artifacts方式)</p>\n<h4 id=\"配置文件取消Unicode编码\"><a href=\"#配置文件取消Unicode编码\" class=\"headerlink\" title=\"配置文件取消Unicode编码\"></a>配置文件取消Unicode编码</h4><p>File-&gt;Setting-&gt;搜索file encoding-&gt;勾选Transparent native-to-ascii conversion</p>\n<h4 id=\"文件目录变红色\"><a href=\"#文件目录变红色\" class=\"headerlink\" title=\"文件目录变红色\"></a>文件目录变红色</h4><p><img src=\"/images/pasted-1.png\" alt=\"upload successful\"></p>\n<ul>\n<li>解除版本控制即可 file-&gt;setting-&gt;version control-&gt;右上角加号-&gt;添加项目目录即可</li>\n</ul>\n<h4 id=\"新建的maven项目没有web项目的目录结构，也没有web-xml\"><a href=\"#新建的maven项目没有web项目的目录结构，也没有web-xml\" class=\"headerlink\" title=\"新建的maven项目没有web项目的目录结构，也没有web.xml\"></a>新建的maven项目没有web项目的目录结构，也没有web.xml</h4><ul>\n<li>增加main目录下增加/webapp/WEB-INF目录</li>\n<li>File-&gt;Project Structure-&gt;facets-&gt;加号-&gt;选中目录</li>\n<li>确认路径depolyment路径为…./webapp/WEB-INF/web.xml</li>\n<li>确认路径resource路径为 …./webapp/</li>\n</ul>\n<p><strong>直接创建maven web项目最为简单</strong></p>\n<ul>\n<li>createProject-&gt;maven-&gt;勾选Creater from archetype-&gt;选择 <strong><em>maven-archetype-webapp</em></strong> </li>\n<li><img src=\"/images/pasted-2.png\" alt=\"upload successful\"></li>\n</ul>\n<h4 id=\"右键没有new-package\"><a href=\"#右键没有new-package\" class=\"headerlink\" title=\"右键没有new package\"></a>右键没有new package</h4><p>修改目录性质，在该目录右键-&gt;Mark Directory as-&gt;Source Root</p>\n<h4 id=\"发布方式（参考https-www-cnblogs-com-dpl9963-p-10075456-html）\"><a href=\"#发布方式（参考https-www-cnblogs-com-dpl9963-p-10075456-html）\" class=\"headerlink\" title=\"发布方式（参考https://www.cnblogs.com/dpl9963/p/10075456.html）\"></a>发布方式（参考<a href=\"https://www.cnblogs.com/dpl9963/p/10075456.html）\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/dpl9963/p/10075456.html）</a></h4><ul>\n<li>jar：Java ARchrive，仅仅是编译好的Java类的聚合</li>\n<li>war：Web application ARchrive，除Java类之外还包含jsp，config等静态资源的聚合</li>\n<li>exploded：理解为展开不压缩，jar和war是压缩的目录节后，exploded表示不压缩的文件目录，开发是用该方式较好，文件更改后不用重新启动服务器看到效果</li>\n</ul>\n<h4 id=\"Debug模式\"><a href=\"#Debug模式\" class=\"headerlink\" title=\"Debug模式\"></a>Debug模式</h4><ul>\n<li>快捷键改为eclipse后，F5，F6不变，eclipse的F8变为F9（程序放行）</li>\n</ul>\n<h4 id=\"修改文件后没有效果必须重启tomcat-热部署\"><a href=\"#修改文件后没有效果必须重启tomcat-热部署\" class=\"headerlink\" title=\"修改文件后没有效果必须重启tomcat  热部署\"></a>修改文件后没有效果必须重启tomcat  热部署</h4><ul>\n<li>runConfigurations中配置</li>\n<li><img src=\"/images/pasted-3.png\" alt=\"upload successful\"></li>\n</ul>\n<h4 id=\"部署项目到tomcat上，这里的url一定要改成\"><a href=\"#部署项目到tomcat上，这里的url一定要改成\" class=\"headerlink\" title=\"部署项目到tomcat上，这里的url一定要改成 /\"></a>部署项目到tomcat上，这里的url一定要改成 /</h4><p><img src=\"/images/pasted-11.png\" alt=\"upload successful\"></p>\n<h4 id=\"启动tomcat日志输出乱码-淇℃伅（https-www-cnblogs-com-Yin-BoKeYuan-p-10320622-html）\"><a href=\"#启动tomcat日志输出乱码-淇℃伅（https-www-cnblogs-com-Yin-BoKeYuan-p-10320622-html）\" class=\"headerlink\" title=\"启动tomcat日志输出乱码 淇℃伅（https://www.cnblogs.com/Yin-BoKeYuan/p/10320622.html）\"></a>启动tomcat日志输出乱码 淇℃伅（<a href=\"https://www.cnblogs.com/Yin-BoKeYuan/p/10320622.html）\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Yin-BoKeYuan/p/10320622.html）</a></h4><p>打开到tomcat安装目录下的conf/文件夹 修改logging.properties文件，<br>找到 java.util.logging.ConsoleHandler.encoding = utf-8<br>更改为 java.util.logging.ConsoleHandler.encoding = GBK</p>\n<h4 id=\"Java应用热启动配置\"><a href=\"#Java应用热启动配置\" class=\"headerlink\" title=\"Java应用热启动配置\"></a>Java应用热启动配置</h4><p>方法1.修改之后手动选择 Run-&gt;Reload Changed Classes  不能设置快捷键</p>\n<p>方法2.我选择使用Jrebel插件，安装重启后要填激活码 (<a href=\"https://www.jiweichengzhu.com/article/33c0330308f5429faf7a1e74127c9708\" target=\"_blank\" rel=\"noopener\">这里有人搞好了，拿来用^&amp;^</a> ) 使用的时候原来是点run或者debug run，现在点旁边两个带jrebel的run和debug run即可</p>\n<p><img src=\"/images/pasted-15.png\" alt=\"upload successful\"></p>\n<p>修改代码后 ctrl+F9 快速编译就能查看效果，相当于给方法1加了快捷键</p>\n<h4 id=\"import的类不识别，显示红色\"><a href=\"#import的类不识别，显示红色\" class=\"headerlink\" title=\"import的类不识别，显示红色\"></a>import的类不识别，显示红色</h4><p>这个类是存在的，其他类中引用同样的类就正常，编译无数次还是没解决，缓存问题</p>\n<p>解决方法： file -&gt; Invalidate Caches / Restart… -&gt; Invalidate and Restart</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"配置Tomcat\"><a href=\"#配置Tomcat\" class=\"headerlink\" title=\"配置Tomcat\"></a>配置Tomcat</h4><p>Run-&gt;Edit Configurations-&gt;Telplates中配置后在该页面左上角添加-&gt;选中Tomcat的Deployment点击部署(选用Artifacts方式)</p>\n<h4 id=\"配置文件取消Unicode编码\"><a href=\"#配置文件取消Unicode编码\" class=\"headerlink\" title=\"配置文件取消Unicode编码\"></a>配置文件取消Unicode编码</h4><p>File-&gt;Setting-&gt;搜索file encoding-&gt;勾选Transparent native-to-ascii conversion</p>\n<h4 id=\"文件目录变红色\"><a href=\"#文件目录变红色\" class=\"headerlink\" title=\"文件目录变红色\"></a>文件目录变红色</h4><p><img src=\"/images/pasted-1.png\" alt=\"upload successful\"></p>\n<ul>\n<li>解除版本控制即可 file-&gt;setting-&gt;version control-&gt;右上角加号-&gt;添加项目目录即可</li>\n</ul>\n<h4 id=\"新建的maven项目没有web项目的目录结构，也没有web-xml\"><a href=\"#新建的maven项目没有web项目的目录结构，也没有web-xml\" class=\"headerlink\" title=\"新建的maven项目没有web项目的目录结构，也没有web.xml\"></a>新建的maven项目没有web项目的目录结构，也没有web.xml</h4><ul>\n<li>增加main目录下增加/webapp/WEB-INF目录</li>\n<li>File-&gt;Project Structure-&gt;facets-&gt;加号-&gt;选中目录</li>\n<li>确认路径depolyment路径为…./webapp/WEB-INF/web.xml</li>\n<li>确认路径resource路径为 …./webapp/</li>\n</ul>\n<p><strong>直接创建maven web项目最为简单</strong></p>\n<ul>\n<li>createProject-&gt;maven-&gt;勾选Creater from archetype-&gt;选择 <strong><em>maven-archetype-webapp</em></strong> </li>\n<li><img src=\"/images/pasted-2.png\" alt=\"upload successful\"></li>\n</ul>\n<h4 id=\"右键没有new-package\"><a href=\"#右键没有new-package\" class=\"headerlink\" title=\"右键没有new package\"></a>右键没有new package</h4><p>修改目录性质，在该目录右键-&gt;Mark Directory as-&gt;Source Root</p>\n<h4 id=\"发布方式（参考https-www-cnblogs-com-dpl9963-p-10075456-html）\"><a href=\"#发布方式（参考https-www-cnblogs-com-dpl9963-p-10075456-html）\" class=\"headerlink\" title=\"发布方式（参考https://www.cnblogs.com/dpl9963/p/10075456.html）\"></a>发布方式（参考<a href=\"https://www.cnblogs.com/dpl9963/p/10075456.html）\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/dpl9963/p/10075456.html）</a></h4><ul>\n<li>jar：Java ARchrive，仅仅是编译好的Java类的聚合</li>\n<li>war：Web application ARchrive，除Java类之外还包含jsp，config等静态资源的聚合</li>\n<li>exploded：理解为展开不压缩，jar和war是压缩的目录节后，exploded表示不压缩的文件目录，开发是用该方式较好，文件更改后不用重新启动服务器看到效果</li>\n</ul>\n<h4 id=\"Debug模式\"><a href=\"#Debug模式\" class=\"headerlink\" title=\"Debug模式\"></a>Debug模式</h4><ul>\n<li>快捷键改为eclipse后，F5，F6不变，eclipse的F8变为F9（程序放行）</li>\n</ul>\n<h4 id=\"修改文件后没有效果必须重启tomcat-热部署\"><a href=\"#修改文件后没有效果必须重启tomcat-热部署\" class=\"headerlink\" title=\"修改文件后没有效果必须重启tomcat  热部署\"></a>修改文件后没有效果必须重启tomcat  热部署</h4><ul>\n<li>runConfigurations中配置</li>\n<li><img src=\"/images/pasted-3.png\" alt=\"upload successful\"></li>\n</ul>\n<h4 id=\"部署项目到tomcat上，这里的url一定要改成\"><a href=\"#部署项目到tomcat上，这里的url一定要改成\" class=\"headerlink\" title=\"部署项目到tomcat上，这里的url一定要改成 /\"></a>部署项目到tomcat上，这里的url一定要改成 /</h4><p><img src=\"/images/pasted-11.png\" alt=\"upload successful\"></p>\n<h4 id=\"启动tomcat日志输出乱码-淇℃伅（https-www-cnblogs-com-Yin-BoKeYuan-p-10320622-html）\"><a href=\"#启动tomcat日志输出乱码-淇℃伅（https-www-cnblogs-com-Yin-BoKeYuan-p-10320622-html）\" class=\"headerlink\" title=\"启动tomcat日志输出乱码 淇℃伅（https://www.cnblogs.com/Yin-BoKeYuan/p/10320622.html）\"></a>启动tomcat日志输出乱码 淇℃伅（<a href=\"https://www.cnblogs.com/Yin-BoKeYuan/p/10320622.html）\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Yin-BoKeYuan/p/10320622.html）</a></h4><p>打开到tomcat安装目录下的conf/文件夹 修改logging.properties文件，<br>找到 java.util.logging.ConsoleHandler.encoding = utf-8<br>更改为 java.util.logging.ConsoleHandler.encoding = GBK</p>\n<h4 id=\"Java应用热启动配置\"><a href=\"#Java应用热启动配置\" class=\"headerlink\" title=\"Java应用热启动配置\"></a>Java应用热启动配置</h4><p>方法1.修改之后手动选择 Run-&gt;Reload Changed Classes  不能设置快捷键</p>\n<p>方法2.我选择使用Jrebel插件，安装重启后要填激活码 (<a href=\"https://www.jiweichengzhu.com/article/33c0330308f5429faf7a1e74127c9708\" target=\"_blank\" rel=\"noopener\">这里有人搞好了，拿来用^&amp;^</a> ) 使用的时候原来是点run或者debug run，现在点旁边两个带jrebel的run和debug run即可</p>\n<p><img src=\"/images/pasted-15.png\" alt=\"upload successful\"></p>\n<p>修改代码后 ctrl+F9 快速编译就能查看效果，相当于给方法1加了快捷键</p>\n<h4 id=\"import的类不识别，显示红色\"><a href=\"#import的类不识别，显示红色\" class=\"headerlink\" title=\"import的类不识别，显示红色\"></a>import的类不识别，显示红色</h4><p>这个类是存在的，其他类中引用同样的类就正常，编译无数次还是没解决，缓存问题</p>\n<p>解决方法： file -&gt; Invalidate Caches / Restart… -&gt; Invalidate and Restart</p>\n"},{"title":"IDEA配置Junit测试","author":"YyWang","date":"2019-07-12T07:10:02.000Z","_content":"\n看了很多博客后感觉还是比较乱，这篇还不错马一下\n*https://blog.csdn.net/hanchao5272/article/details/79197989*\n\n#### 1.安装插件\nFile->setting->Plugins->搜索并安装Junit Generator 2.0->重启IDEA\n\n#### 2.配置插件\nFile->setting->\tOtherSettings->Junit Generator->properties\n+ 修改*Output Path[输出路径]*为*${SOURCEPATH}/../../test/java/${PACKAGE}/${FILENAME}*\n+ 修改 Default Template[默认模板]为JUnit4\n+ 选中JUnit4页签，将*package test.$entry.packageName;* 修改成*package $entry.packageName;*\n\n#### 3.配置测试的目录\nFile->Project Structure->Modules中将测试目录设置为Test Source Floder\n\n#### 4.生成测试类\n+ 在要测试的类中用快捷键 alt+insert -> Junit Test -> Junit4\n\n#### 5.测试\n+ 鼠标右键菜单\n\t+ 将鼠标光标放在方法相关代码中，右键弹出菜单中会显示运行此测试方法的菜单，点击就会运行方法单独测试。\n将鼠标光标放在方法之外的代码中，右键弹出菜单中会显示运行此类的所有测试方法的菜单，点击就会运行所有测试方法。\n+ 快捷键\n\t+ 将鼠标光标放在方法相关代码中，通过快捷键Ctrl+Shift+F10，运行当前测试方法。\n\t+ 将鼠标光标放在方法之外的代码中，通过快捷键Ctrl+Shift+F10，运行当前类的所有测试方法。\n+ 快捷按钮\n\t+ 点击方法左侧的Run Test按钮，运行当前测试方法。\n\t+ 点击类左侧的Run Test按钮，运行当前类的所有测试方法。\n    \n#### 6.测试结果\n\n![upload successful](/images/pasted-12.png)\n+ 1.方法测试成功\n+ 2.方法测试失败\n+ 3.测试用时（毫秒）\n+ 4.期望值\n+ 5.实际值\n+ 6.异常信息\n\n#### 7.异常\n+ \n![upload successful](/images/pasted-13.png)\n+ 原因：4.11以上版本不在包含hamcrest\n+ 解决：改用4.10  ^_^\n","source":"_posts/IDEA配置Junit测试.md","raw":"title: IDEA配置Junit测试\nauthor: YyWang\ndate: 2019-07-12 15:10:02\ntags: IDEA\ncategories: IDEA\n---\n\n看了很多博客后感觉还是比较乱，这篇还不错马一下\n*https://blog.csdn.net/hanchao5272/article/details/79197989*\n\n#### 1.安装插件\nFile->setting->Plugins->搜索并安装Junit Generator 2.0->重启IDEA\n\n#### 2.配置插件\nFile->setting->\tOtherSettings->Junit Generator->properties\n+ 修改*Output Path[输出路径]*为*${SOURCEPATH}/../../test/java/${PACKAGE}/${FILENAME}*\n+ 修改 Default Template[默认模板]为JUnit4\n+ 选中JUnit4页签，将*package test.$entry.packageName;* 修改成*package $entry.packageName;*\n\n#### 3.配置测试的目录\nFile->Project Structure->Modules中将测试目录设置为Test Source Floder\n\n#### 4.生成测试类\n+ 在要测试的类中用快捷键 alt+insert -> Junit Test -> Junit4\n\n#### 5.测试\n+ 鼠标右键菜单\n\t+ 将鼠标光标放在方法相关代码中，右键弹出菜单中会显示运行此测试方法的菜单，点击就会运行方法单独测试。\n将鼠标光标放在方法之外的代码中，右键弹出菜单中会显示运行此类的所有测试方法的菜单，点击就会运行所有测试方法。\n+ 快捷键\n\t+ 将鼠标光标放在方法相关代码中，通过快捷键Ctrl+Shift+F10，运行当前测试方法。\n\t+ 将鼠标光标放在方法之外的代码中，通过快捷键Ctrl+Shift+F10，运行当前类的所有测试方法。\n+ 快捷按钮\n\t+ 点击方法左侧的Run Test按钮，运行当前测试方法。\n\t+ 点击类左侧的Run Test按钮，运行当前类的所有测试方法。\n    \n#### 6.测试结果\n\n![upload successful](/images/pasted-12.png)\n+ 1.方法测试成功\n+ 2.方法测试失败\n+ 3.测试用时（毫秒）\n+ 4.期望值\n+ 5.实际值\n+ 6.异常信息\n\n#### 7.异常\n+ \n![upload successful](/images/pasted-13.png)\n+ 原因：4.11以上版本不在包含hamcrest\n+ 解决：改用4.10  ^_^\n","slug":"IDEA配置Junit测试","published":1,"updated":"2021-07-13T12:27:08.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj6s000s81fy4j67ncvl","content":"<p>看了很多博客后感觉还是比较乱，这篇还不错马一下<br><em><a href=\"https://blog.csdn.net/hanchao5272/article/details/79197989\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/hanchao5272/article/details/79197989</a></em></p>\n<h4 id=\"1-安装插件\"><a href=\"#1-安装插件\" class=\"headerlink\" title=\"1.安装插件\"></a>1.安装插件</h4><p>File-&gt;setting-&gt;Plugins-&gt;搜索并安装Junit Generator 2.0-&gt;重启IDEA</p>\n<h4 id=\"2-配置插件\"><a href=\"#2-配置插件\" class=\"headerlink\" title=\"2.配置插件\"></a>2.配置插件</h4><p>File-&gt;setting-&gt;    OtherSettings-&gt;Junit Generator-&gt;properties</p>\n<ul>\n<li>修改<em>Output Path[输出路径]</em>为<em>${SOURCEPATH}/../../test/java/${PACKAGE}/${FILENAME}</em></li>\n<li>修改 Default Template[默认模板]为JUnit4</li>\n<li>选中JUnit4页签，将<em>package test.$entry.packageName;</em> 修改成<em>package $entry.packageName;</em></li>\n</ul>\n<h4 id=\"3-配置测试的目录\"><a href=\"#3-配置测试的目录\" class=\"headerlink\" title=\"3.配置测试的目录\"></a>3.配置测试的目录</h4><p>File-&gt;Project Structure-&gt;Modules中将测试目录设置为Test Source Floder</p>\n<h4 id=\"4-生成测试类\"><a href=\"#4-生成测试类\" class=\"headerlink\" title=\"4.生成测试类\"></a>4.生成测试类</h4><ul>\n<li>在要测试的类中用快捷键 alt+insert -&gt; Junit Test -&gt; Junit4</li>\n</ul>\n<h4 id=\"5-测试\"><a href=\"#5-测试\" class=\"headerlink\" title=\"5.测试\"></a>5.测试</h4><ul>\n<li>鼠标右键菜单<ul>\n<li>将鼠标光标放在方法相关代码中，右键弹出菜单中会显示运行此测试方法的菜单，点击就会运行方法单独测试。<br>将鼠标光标放在方法之外的代码中，右键弹出菜单中会显示运行此类的所有测试方法的菜单，点击就会运行所有测试方法。</li>\n</ul>\n</li>\n<li>快捷键<ul>\n<li>将鼠标光标放在方法相关代码中，通过快捷键Ctrl+Shift+F10，运行当前测试方法。</li>\n<li>将鼠标光标放在方法之外的代码中，通过快捷键Ctrl+Shift+F10，运行当前类的所有测试方法。</li>\n</ul>\n</li>\n<li>快捷按钮<ul>\n<li>点击方法左侧的Run Test按钮，运行当前测试方法。</li>\n<li>点击类左侧的Run Test按钮，运行当前类的所有测试方法。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-测试结果\"><a href=\"#6-测试结果\" class=\"headerlink\" title=\"6.测试结果\"></a>6.测试结果</h4><p><img src=\"/images/pasted-12.png\" alt=\"upload successful\"></p>\n<ul>\n<li>1.方法测试成功</li>\n<li>2.方法测试失败</li>\n<li>3.测试用时（毫秒）</li>\n<li>4.期望值</li>\n<li>5.实际值</li>\n<li>6.异常信息</li>\n</ul>\n<h4 id=\"7-异常\"><a href=\"#7-异常\" class=\"headerlink\" title=\"7.异常\"></a>7.异常</h4><ul>\n<li><img src=\"/images/pasted-13.png\" alt=\"upload successful\"></li>\n<li>原因：4.11以上版本不在包含hamcrest</li>\n<li>解决：改用4.10  ^_^</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>看了很多博客后感觉还是比较乱，这篇还不错马一下<br><em><a href=\"https://blog.csdn.net/hanchao5272/article/details/79197989\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/hanchao5272/article/details/79197989</a></em></p>\n<h4 id=\"1-安装插件\"><a href=\"#1-安装插件\" class=\"headerlink\" title=\"1.安装插件\"></a>1.安装插件</h4><p>File-&gt;setting-&gt;Plugins-&gt;搜索并安装Junit Generator 2.0-&gt;重启IDEA</p>\n<h4 id=\"2-配置插件\"><a href=\"#2-配置插件\" class=\"headerlink\" title=\"2.配置插件\"></a>2.配置插件</h4><p>File-&gt;setting-&gt;    OtherSettings-&gt;Junit Generator-&gt;properties</p>\n<ul>\n<li>修改<em>Output Path[输出路径]</em>为<em>${SOURCEPATH}/../../test/java/${PACKAGE}/${FILENAME}</em></li>\n<li>修改 Default Template[默认模板]为JUnit4</li>\n<li>选中JUnit4页签，将<em>package test.$entry.packageName;</em> 修改成<em>package $entry.packageName;</em></li>\n</ul>\n<h4 id=\"3-配置测试的目录\"><a href=\"#3-配置测试的目录\" class=\"headerlink\" title=\"3.配置测试的目录\"></a>3.配置测试的目录</h4><p>File-&gt;Project Structure-&gt;Modules中将测试目录设置为Test Source Floder</p>\n<h4 id=\"4-生成测试类\"><a href=\"#4-生成测试类\" class=\"headerlink\" title=\"4.生成测试类\"></a>4.生成测试类</h4><ul>\n<li>在要测试的类中用快捷键 alt+insert -&gt; Junit Test -&gt; Junit4</li>\n</ul>\n<h4 id=\"5-测试\"><a href=\"#5-测试\" class=\"headerlink\" title=\"5.测试\"></a>5.测试</h4><ul>\n<li>鼠标右键菜单<ul>\n<li>将鼠标光标放在方法相关代码中，右键弹出菜单中会显示运行此测试方法的菜单，点击就会运行方法单独测试。<br>将鼠标光标放在方法之外的代码中，右键弹出菜单中会显示运行此类的所有测试方法的菜单，点击就会运行所有测试方法。</li>\n</ul>\n</li>\n<li>快捷键<ul>\n<li>将鼠标光标放在方法相关代码中，通过快捷键Ctrl+Shift+F10，运行当前测试方法。</li>\n<li>将鼠标光标放在方法之外的代码中，通过快捷键Ctrl+Shift+F10，运行当前类的所有测试方法。</li>\n</ul>\n</li>\n<li>快捷按钮<ul>\n<li>点击方法左侧的Run Test按钮，运行当前测试方法。</li>\n<li>点击类左侧的Run Test按钮，运行当前类的所有测试方法。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-测试结果\"><a href=\"#6-测试结果\" class=\"headerlink\" title=\"6.测试结果\"></a>6.测试结果</h4><p><img src=\"/images/pasted-12.png\" alt=\"upload successful\"></p>\n<ul>\n<li>1.方法测试成功</li>\n<li>2.方法测试失败</li>\n<li>3.测试用时（毫秒）</li>\n<li>4.期望值</li>\n<li>5.实际值</li>\n<li>6.异常信息</li>\n</ul>\n<h4 id=\"7-异常\"><a href=\"#7-异常\" class=\"headerlink\" title=\"7.异常\"></a>7.异常</h4><ul>\n<li><img src=\"/images/pasted-13.png\" alt=\"upload successful\"></li>\n<li>原因：4.11以上版本不在包含hamcrest</li>\n<li>解决：改用4.10  ^_^</li>\n</ul>\n"},{"title":"阻塞非阻塞，同步异步，网络I/O模型概念","author":"YyWang","date":"2019-12-20T02:59:28.000Z","_content":"### I/O\n\n* 进程或线程会产生I/O，后面都以线程为例，真正操作I/O的是操作系统，也就是说线程线程向操作系统发送I/O请求，由操作系统来完成I/O执行，整个过程为应用程序的I/O调用；\n* I/O调用的过程就是将进程中（用户空间）的数据输出到进程外部的的空间（系统空间），或者是将进程外部空间（系统空间）的数据输入到进程中（用户空间）；例如一个输入类型的I/O调用，线程首先向操作系统请求外部数据，操作系统将外部数据拷贝到内核缓冲区，进程中的线程再将内核缓冲区的数据拷贝到进程缓冲区，线程针对这部分数据继续后面的操作；\n* 一个线程发出I/O请求后，需要等待I/O数据就绪（操作系统将I/O数据从外部拷贝到系统空间）\n\n### 阻塞、非阻塞、同步、异步\n\n#### 阻塞非阻塞\n\n* 阻塞和非阻塞；等待I/O数据就绪是否可以做其他操作；一个线程请求I/O并且I/O数据未就绪，如果线程会一直等待不会做其他事情这种方式为阻塞，如果线程立即收到I/O数据未就绪的返回值，并不需要一直等待这个方式为非阻塞，通常是轮询去访问I/O数据是否就绪，虽然没有一直等也是需要不断去询问；\n\n#### 同步异步\n* 同步和异步；可以类比线程的同步和异步，同步必须拿到I/O数据才能进行后面的操作，有很强顺序性，没有I/O数据就不能完成后面的操作，而异步不需要拿到I/O数据，去做别的操作没有顺序性；或者我觉得是不是可以这么理解\n* 我来理解一下：简单来说同步异步的区别在于是否需要很强的顺序性；就是说同步异步区别在于用户线程是否需要拿到I/O数据再进行后面的操作，同步必须要用到这部分数据，I/O数据没有就绪就一直会等待，而异步不需要用到这部分数据，仅仅发送I/O请求等待操作系统通知即可，（这里同样提了等待，和阻塞的等待差不多都是等待I/O数据是否就绪，同步异步的关注点是是否需要等待I/O数据就绪完成下面的操作，类比于线程的同步和异步；而阻塞的关注点是等待I/O数据就绪的过程是否是一直在死等还是在做其他操作，非阻塞就是没有在死等，这段时间可以做其他的操作但是通常我们都会不断去询问I/O数据是否就绪）\n\n\n#### 组合概念\n* 同步阻塞；线程发起I/O请求，I/O数据未就绪线程等待，这是阻塞，拿到I/O数据之后才进行进一步操作，这是同步；从程序的角度来看线程一直阻塞直到I/O数据就绪\n* 同步非阻塞；线程发起I/O请求，I/O数据未就绪会立即收到一个返回值不用等待，这是非阻塞，拿到I/O数据之后才进行进一步操作，这是同步；这里虽然不需要等待I/O数据就绪，但是由于是同步的，用户线程必须拿到I/O数据，此时由于I/O数据未就绪，用户线程无法对数据进行拷贝用户线程只能通过轮询的方式去询问I/O数据是否就绪，再进行下一步操作；从程序的角度来看线程只是卡在了等待I/O数据就绪这里，不会阻塞，此时可以去做其他的操作，只是通常是去做询问I/O数据是否就绪的操作\n* 异步阻塞；其实这种情况是不存在的，异步和阻塞是矛盾的；\n* 异步非阻塞；用户线程发起I/O请求后，无须关心I/O数据是否就绪，待I/O数据就绪后由操作系统将数据拷贝到用户空间，再向用户线程发送通知进行下一步操作；从程序的角度看现场不会阻塞\n\n#### 网络I/O模型\n* 阻塞I/O\n\t* 线程发起I/O请求会一直阻塞等待I/O条件就绪\n* 非阻塞I/O\n\t* 线程发起I/O请求后，如果I/O条件不是就绪状态立即返回一个状态不会一直等待，可以先做其他的任务，间隔一段时间查看I/O条件是否就绪，如果就绪进行下一步操作\n* 多路复用I/O\n\t* 非阻塞I/O线程需要一直去询问I/O事件是否就绪，如果线程很多必将造成资源的浪费；多路复用I/O将所有线程的I/O请求注册到一个新的线程中（select），由这个线程进行轮询去查看I/O条件是否就绪，有就绪状态就通知对应的线程进行处理；相当于是把非阻塞I/O中多线程查看I/O条件的事情委托给了单独的一个线程，提高了系统的吞吐量\n* 信号驱动I/O\n\t* 这个感觉和多路复用I/O差不多，这里将多线程的I/O操作注册为一个信号，信号中有回调函数，当信号发生call回调函数通知用户线程，与本节无关先简单这么理解\n* 异步I/O\n\t* 线程发出I/O请求后不需要做任何操作，I/O操作完全由操作系统内核完成，之后会通知线程\n    \n![upload successful](/images/pasted-23.png)","source":"_posts/I-O模型.md","raw":"title: 阻塞非阻塞，同步异步，网络I/O模型概念\nauthor: YyWang\ndate: 2019-12-20 10:59:28\ntags:\n---\n### I/O\n\n* 进程或线程会产生I/O，后面都以线程为例，真正操作I/O的是操作系统，也就是说线程线程向操作系统发送I/O请求，由操作系统来完成I/O执行，整个过程为应用程序的I/O调用；\n* I/O调用的过程就是将进程中（用户空间）的数据输出到进程外部的的空间（系统空间），或者是将进程外部空间（系统空间）的数据输入到进程中（用户空间）；例如一个输入类型的I/O调用，线程首先向操作系统请求外部数据，操作系统将外部数据拷贝到内核缓冲区，进程中的线程再将内核缓冲区的数据拷贝到进程缓冲区，线程针对这部分数据继续后面的操作；\n* 一个线程发出I/O请求后，需要等待I/O数据就绪（操作系统将I/O数据从外部拷贝到系统空间）\n\n### 阻塞、非阻塞、同步、异步\n\n#### 阻塞非阻塞\n\n* 阻塞和非阻塞；等待I/O数据就绪是否可以做其他操作；一个线程请求I/O并且I/O数据未就绪，如果线程会一直等待不会做其他事情这种方式为阻塞，如果线程立即收到I/O数据未就绪的返回值，并不需要一直等待这个方式为非阻塞，通常是轮询去访问I/O数据是否就绪，虽然没有一直等也是需要不断去询问；\n\n#### 同步异步\n* 同步和异步；可以类比线程的同步和异步，同步必须拿到I/O数据才能进行后面的操作，有很强顺序性，没有I/O数据就不能完成后面的操作，而异步不需要拿到I/O数据，去做别的操作没有顺序性；或者我觉得是不是可以这么理解\n* 我来理解一下：简单来说同步异步的区别在于是否需要很强的顺序性；就是说同步异步区别在于用户线程是否需要拿到I/O数据再进行后面的操作，同步必须要用到这部分数据，I/O数据没有就绪就一直会等待，而异步不需要用到这部分数据，仅仅发送I/O请求等待操作系统通知即可，（这里同样提了等待，和阻塞的等待差不多都是等待I/O数据是否就绪，同步异步的关注点是是否需要等待I/O数据就绪完成下面的操作，类比于线程的同步和异步；而阻塞的关注点是等待I/O数据就绪的过程是否是一直在死等还是在做其他操作，非阻塞就是没有在死等，这段时间可以做其他的操作但是通常我们都会不断去询问I/O数据是否就绪）\n\n\n#### 组合概念\n* 同步阻塞；线程发起I/O请求，I/O数据未就绪线程等待，这是阻塞，拿到I/O数据之后才进行进一步操作，这是同步；从程序的角度来看线程一直阻塞直到I/O数据就绪\n* 同步非阻塞；线程发起I/O请求，I/O数据未就绪会立即收到一个返回值不用等待，这是非阻塞，拿到I/O数据之后才进行进一步操作，这是同步；这里虽然不需要等待I/O数据就绪，但是由于是同步的，用户线程必须拿到I/O数据，此时由于I/O数据未就绪，用户线程无法对数据进行拷贝用户线程只能通过轮询的方式去询问I/O数据是否就绪，再进行下一步操作；从程序的角度来看线程只是卡在了等待I/O数据就绪这里，不会阻塞，此时可以去做其他的操作，只是通常是去做询问I/O数据是否就绪的操作\n* 异步阻塞；其实这种情况是不存在的，异步和阻塞是矛盾的；\n* 异步非阻塞；用户线程发起I/O请求后，无须关心I/O数据是否就绪，待I/O数据就绪后由操作系统将数据拷贝到用户空间，再向用户线程发送通知进行下一步操作；从程序的角度看现场不会阻塞\n\n#### 网络I/O模型\n* 阻塞I/O\n\t* 线程发起I/O请求会一直阻塞等待I/O条件就绪\n* 非阻塞I/O\n\t* 线程发起I/O请求后，如果I/O条件不是就绪状态立即返回一个状态不会一直等待，可以先做其他的任务，间隔一段时间查看I/O条件是否就绪，如果就绪进行下一步操作\n* 多路复用I/O\n\t* 非阻塞I/O线程需要一直去询问I/O事件是否就绪，如果线程很多必将造成资源的浪费；多路复用I/O将所有线程的I/O请求注册到一个新的线程中（select），由这个线程进行轮询去查看I/O条件是否就绪，有就绪状态就通知对应的线程进行处理；相当于是把非阻塞I/O中多线程查看I/O条件的事情委托给了单独的一个线程，提高了系统的吞吐量\n* 信号驱动I/O\n\t* 这个感觉和多路复用I/O差不多，这里将多线程的I/O操作注册为一个信号，信号中有回调函数，当信号发生call回调函数通知用户线程，与本节无关先简单这么理解\n* 异步I/O\n\t* 线程发出I/O请求后不需要做任何操作，I/O操作完全由操作系统内核完成，之后会通知线程\n    \n![upload successful](/images/pasted-23.png)","slug":"I-O模型","published":1,"updated":"2021-07-13T12:27:08.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj6t000u81fy80sc017c","content":"<h3 id=\"I-O\"><a href=\"#I-O\" class=\"headerlink\" title=\"I/O\"></a>I/O</h3><ul>\n<li>进程或线程会产生I/O，后面都以线程为例，真正操作I/O的是操作系统，也就是说线程线程向操作系统发送I/O请求，由操作系统来完成I/O执行，整个过程为应用程序的I/O调用；</li>\n<li>I/O调用的过程就是将进程中（用户空间）的数据输出到进程外部的的空间（系统空间），或者是将进程外部空间（系统空间）的数据输入到进程中（用户空间）；例如一个输入类型的I/O调用，线程首先向操作系统请求外部数据，操作系统将外部数据拷贝到内核缓冲区，进程中的线程再将内核缓冲区的数据拷贝到进程缓冲区，线程针对这部分数据继续后面的操作；</li>\n<li>一个线程发出I/O请求后，需要等待I/O数据就绪（操作系统将I/O数据从外部拷贝到系统空间）</li>\n</ul>\n<h3 id=\"阻塞、非阻塞、同步、异步\"><a href=\"#阻塞、非阻塞、同步、异步\" class=\"headerlink\" title=\"阻塞、非阻塞、同步、异步\"></a>阻塞、非阻塞、同步、异步</h3><h4 id=\"阻塞非阻塞\"><a href=\"#阻塞非阻塞\" class=\"headerlink\" title=\"阻塞非阻塞\"></a>阻塞非阻塞</h4><ul>\n<li>阻塞和非阻塞；等待I/O数据就绪是否可以做其他操作；一个线程请求I/O并且I/O数据未就绪，如果线程会一直等待不会做其他事情这种方式为阻塞，如果线程立即收到I/O数据未就绪的返回值，并不需要一直等待这个方式为非阻塞，通常是轮询去访问I/O数据是否就绪，虽然没有一直等也是需要不断去询问；</li>\n</ul>\n<h4 id=\"同步异步\"><a href=\"#同步异步\" class=\"headerlink\" title=\"同步异步\"></a>同步异步</h4><ul>\n<li>同步和异步；可以类比线程的同步和异步，同步必须拿到I/O数据才能进行后面的操作，有很强顺序性，没有I/O数据就不能完成后面的操作，而异步不需要拿到I/O数据，去做别的操作没有顺序性；或者我觉得是不是可以这么理解</li>\n<li>我来理解一下：简单来说同步异步的区别在于是否需要很强的顺序性；就是说同步异步区别在于用户线程是否需要拿到I/O数据再进行后面的操作，同步必须要用到这部分数据，I/O数据没有就绪就一直会等待，而异步不需要用到这部分数据，仅仅发送I/O请求等待操作系统通知即可，（这里同样提了等待，和阻塞的等待差不多都是等待I/O数据是否就绪，同步异步的关注点是是否需要等待I/O数据就绪完成下面的操作，类比于线程的同步和异步；而阻塞的关注点是等待I/O数据就绪的过程是否是一直在死等还是在做其他操作，非阻塞就是没有在死等，这段时间可以做其他的操作但是通常我们都会不断去询问I/O数据是否就绪）</li>\n</ul>\n<h4 id=\"组合概念\"><a href=\"#组合概念\" class=\"headerlink\" title=\"组合概念\"></a>组合概念</h4><ul>\n<li>同步阻塞；线程发起I/O请求，I/O数据未就绪线程等待，这是阻塞，拿到I/O数据之后才进行进一步操作，这是同步；从程序的角度来看线程一直阻塞直到I/O数据就绪</li>\n<li>同步非阻塞；线程发起I/O请求，I/O数据未就绪会立即收到一个返回值不用等待，这是非阻塞，拿到I/O数据之后才进行进一步操作，这是同步；这里虽然不需要等待I/O数据就绪，但是由于是同步的，用户线程必须拿到I/O数据，此时由于I/O数据未就绪，用户线程无法对数据进行拷贝用户线程只能通过轮询的方式去询问I/O数据是否就绪，再进行下一步操作；从程序的角度来看线程只是卡在了等待I/O数据就绪这里，不会阻塞，此时可以去做其他的操作，只是通常是去做询问I/O数据是否就绪的操作</li>\n<li>异步阻塞；其实这种情况是不存在的，异步和阻塞是矛盾的；</li>\n<li>异步非阻塞；用户线程发起I/O请求后，无须关心I/O数据是否就绪，待I/O数据就绪后由操作系统将数据拷贝到用户空间，再向用户线程发送通知进行下一步操作；从程序的角度看现场不会阻塞</li>\n</ul>\n<h4 id=\"网络I-O模型\"><a href=\"#网络I-O模型\" class=\"headerlink\" title=\"网络I/O模型\"></a>网络I/O模型</h4><ul>\n<li>阻塞I/O<ul>\n<li>线程发起I/O请求会一直阻塞等待I/O条件就绪</li>\n</ul>\n</li>\n<li>非阻塞I/O<ul>\n<li>线程发起I/O请求后，如果I/O条件不是就绪状态立即返回一个状态不会一直等待，可以先做其他的任务，间隔一段时间查看I/O条件是否就绪，如果就绪进行下一步操作</li>\n</ul>\n</li>\n<li>多路复用I/O<ul>\n<li>非阻塞I/O线程需要一直去询问I/O事件是否就绪，如果线程很多必将造成资源的浪费；多路复用I/O将所有线程的I/O请求注册到一个新的线程中（select），由这个线程进行轮询去查看I/O条件是否就绪，有就绪状态就通知对应的线程进行处理；相当于是把非阻塞I/O中多线程查看I/O条件的事情委托给了单独的一个线程，提高了系统的吞吐量</li>\n</ul>\n</li>\n<li>信号驱动I/O<ul>\n<li>这个感觉和多路复用I/O差不多，这里将多线程的I/O操作注册为一个信号，信号中有回调函数，当信号发生call回调函数通知用户线程，与本节无关先简单这么理解</li>\n</ul>\n</li>\n<li>异步I/O<ul>\n<li>线程发出I/O请求后不需要做任何操作，I/O操作完全由操作系统内核完成，之后会通知线程</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/pasted-23.png\" alt=\"upload successful\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"I-O\"><a href=\"#I-O\" class=\"headerlink\" title=\"I/O\"></a>I/O</h3><ul>\n<li>进程或线程会产生I/O，后面都以线程为例，真正操作I/O的是操作系统，也就是说线程线程向操作系统发送I/O请求，由操作系统来完成I/O执行，整个过程为应用程序的I/O调用；</li>\n<li>I/O调用的过程就是将进程中（用户空间）的数据输出到进程外部的的空间（系统空间），或者是将进程外部空间（系统空间）的数据输入到进程中（用户空间）；例如一个输入类型的I/O调用，线程首先向操作系统请求外部数据，操作系统将外部数据拷贝到内核缓冲区，进程中的线程再将内核缓冲区的数据拷贝到进程缓冲区，线程针对这部分数据继续后面的操作；</li>\n<li>一个线程发出I/O请求后，需要等待I/O数据就绪（操作系统将I/O数据从外部拷贝到系统空间）</li>\n</ul>\n<h3 id=\"阻塞、非阻塞、同步、异步\"><a href=\"#阻塞、非阻塞、同步、异步\" class=\"headerlink\" title=\"阻塞、非阻塞、同步、异步\"></a>阻塞、非阻塞、同步、异步</h3><h4 id=\"阻塞非阻塞\"><a href=\"#阻塞非阻塞\" class=\"headerlink\" title=\"阻塞非阻塞\"></a>阻塞非阻塞</h4><ul>\n<li>阻塞和非阻塞；等待I/O数据就绪是否可以做其他操作；一个线程请求I/O并且I/O数据未就绪，如果线程会一直等待不会做其他事情这种方式为阻塞，如果线程立即收到I/O数据未就绪的返回值，并不需要一直等待这个方式为非阻塞，通常是轮询去访问I/O数据是否就绪，虽然没有一直等也是需要不断去询问；</li>\n</ul>\n<h4 id=\"同步异步\"><a href=\"#同步异步\" class=\"headerlink\" title=\"同步异步\"></a>同步异步</h4><ul>\n<li>同步和异步；可以类比线程的同步和异步，同步必须拿到I/O数据才能进行后面的操作，有很强顺序性，没有I/O数据就不能完成后面的操作，而异步不需要拿到I/O数据，去做别的操作没有顺序性；或者我觉得是不是可以这么理解</li>\n<li>我来理解一下：简单来说同步异步的区别在于是否需要很强的顺序性；就是说同步异步区别在于用户线程是否需要拿到I/O数据再进行后面的操作，同步必须要用到这部分数据，I/O数据没有就绪就一直会等待，而异步不需要用到这部分数据，仅仅发送I/O请求等待操作系统通知即可，（这里同样提了等待，和阻塞的等待差不多都是等待I/O数据是否就绪，同步异步的关注点是是否需要等待I/O数据就绪完成下面的操作，类比于线程的同步和异步；而阻塞的关注点是等待I/O数据就绪的过程是否是一直在死等还是在做其他操作，非阻塞就是没有在死等，这段时间可以做其他的操作但是通常我们都会不断去询问I/O数据是否就绪）</li>\n</ul>\n<h4 id=\"组合概念\"><a href=\"#组合概念\" class=\"headerlink\" title=\"组合概念\"></a>组合概念</h4><ul>\n<li>同步阻塞；线程发起I/O请求，I/O数据未就绪线程等待，这是阻塞，拿到I/O数据之后才进行进一步操作，这是同步；从程序的角度来看线程一直阻塞直到I/O数据就绪</li>\n<li>同步非阻塞；线程发起I/O请求，I/O数据未就绪会立即收到一个返回值不用等待，这是非阻塞，拿到I/O数据之后才进行进一步操作，这是同步；这里虽然不需要等待I/O数据就绪，但是由于是同步的，用户线程必须拿到I/O数据，此时由于I/O数据未就绪，用户线程无法对数据进行拷贝用户线程只能通过轮询的方式去询问I/O数据是否就绪，再进行下一步操作；从程序的角度来看线程只是卡在了等待I/O数据就绪这里，不会阻塞，此时可以去做其他的操作，只是通常是去做询问I/O数据是否就绪的操作</li>\n<li>异步阻塞；其实这种情况是不存在的，异步和阻塞是矛盾的；</li>\n<li>异步非阻塞；用户线程发起I/O请求后，无须关心I/O数据是否就绪，待I/O数据就绪后由操作系统将数据拷贝到用户空间，再向用户线程发送通知进行下一步操作；从程序的角度看现场不会阻塞</li>\n</ul>\n<h4 id=\"网络I-O模型\"><a href=\"#网络I-O模型\" class=\"headerlink\" title=\"网络I/O模型\"></a>网络I/O模型</h4><ul>\n<li>阻塞I/O<ul>\n<li>线程发起I/O请求会一直阻塞等待I/O条件就绪</li>\n</ul>\n</li>\n<li>非阻塞I/O<ul>\n<li>线程发起I/O请求后，如果I/O条件不是就绪状态立即返回一个状态不会一直等待，可以先做其他的任务，间隔一段时间查看I/O条件是否就绪，如果就绪进行下一步操作</li>\n</ul>\n</li>\n<li>多路复用I/O<ul>\n<li>非阻塞I/O线程需要一直去询问I/O事件是否就绪，如果线程很多必将造成资源的浪费；多路复用I/O将所有线程的I/O请求注册到一个新的线程中（select），由这个线程进行轮询去查看I/O条件是否就绪，有就绪状态就通知对应的线程进行处理；相当于是把非阻塞I/O中多线程查看I/O条件的事情委托给了单独的一个线程，提高了系统的吞吐量</li>\n</ul>\n</li>\n<li>信号驱动I/O<ul>\n<li>这个感觉和多路复用I/O差不多，这里将多线程的I/O操作注册为一个信号，信号中有回调函数，当信号发生call回调函数通知用户线程，与本节无关先简单这么理解</li>\n</ul>\n</li>\n<li>异步I/O<ul>\n<li>线程发出I/O请求后不需要做任何操作，I/O操作完全由操作系统内核完成，之后会通知线程</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/pasted-23.png\" alt=\"upload successful\"></p>\n"},{"title":"没有实践就不算入门 Istio","author":"YyWang","date":"2021-05-08T07:28:20.000Z","catagories":"Istio","_content":"\n### 简述\nIstio 是如何使用网关进行流量控制的呢？经过两天的实验和研究，有了一个简单的认识，记录一下子\n\nIstio 作为服务网格的控制面通过一些自定义的 CR，通过对这些 CR 的配置，并对这些 CR 和 k8s 中部分资源 listAndWatch 生成配置并下发（xds协议）\n到数据面，数据面接收到这些配置实时调整对流量的处理逻辑，这是大致的流程。在原生的 k8s 中，Service 可以通过筛选 label 将应用的多个实例暴露出去提\n供服务，Service 还可以服务发现和负载均衡，在此基础上 Istio 定义了一些 CR 来扩展 Service 的功能，本文就 Istio 针对 Http 协议的流量 控制进行\n实践，对 Istio 有一个简单的认识。\n\n### Demo 结构\n\n![istio-1](/images/istio-1.png)\n\n从右往左看\n* 通常使用 Deployment 来部署应用的多个实例即业务 Pod，对应图中 business Pod\n* 创建 Service 将业务 Pod 暴露提供服务，同时可以服务发现和负载均衡\n\n到这只是使用了 k8s 中的 CR，用户可以通过访问 Service 的 ClusterIp 和端口来访问服务，但是没有更细致的流量控制的功能，下面就开始使用 Istio\n\n* 需要创建 VirtualService 和 DestinationRule 来配置流量控制规则\n* VirtualService 可以配置不同维度的路由规则将流量传递给指定的 Service\n* DestinationRule 可以配置路由规则的不同子集(理解为 k8s Service 中 Endpoint 分组)，以及子集的复制均衡策略，还能配置异常检测\n* 还可以创建网关来进行流量控制，Istio 默认使用 Envoy 做网关，同样使用 Deployment 部署多个实例，（图中 gateway Pod）创建 Service（图中 \n  gateway service）提供服务，Gateway 是 Istio 的 CR 通过筛选 label 关联到创建好的网关，Gateway 规定能够通过网关的流量，并绑定 VisualService\n  和 DestinationRule 的规则\n  \nIstio 通过 ListAndWatch 这些 CR 感知到它们的变化通知给数据面（sidecar 或者 Gateway）\n\n### 实践\n\n#### 准备工作\n\n+ 首先用 Deployment 部署一个 HttpServer 的 Demo，有两个实例 \n\n```\nNAME                        READY   STATUS    RESTARTS   AGE   IP            NODE                  NOMINATED NODE   READINESS GATES\nhttp-sample.default-24tqt   1/1     Running   2          8d    10.0.76.95    op-arsenaldevk8s-03   <none>           1/1\nhttp-sample.default-crkvp   1/1     Running   4          8d    10.0.76.102   op-arsenaldevk8s-07   <none>           1/1\n```\n\n* 给 Demo 创建 Service 暴露服务，\n\n```\n\nNAME                   TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)             AGE\nhttp-sample--default   ClusterIP   10.0.75.60    <none>        8386/TCP            7d19h\n\n```\n\n* 创建 Gateway CR 用来接收所有 host 的请求\n\n```\n\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: httpsample-gateway\nspec:\n  selector:\n    istio: ingressgateway # use Istio default gateway implementation 使用 envoy \n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\" // 被网关管理 host，这里配置了所有；\n\n```\n\n* Istio 默认在 istio-system 下创建了网关的 Deployment 和 Service，同样 Service 通过筛选 label 关联 Deployment 的实例 \n\n```\n\nkubectl get deployment -n istio-system\nNAME                   READY   UP-TO-DATE   AVAILABLE   AGE\nistio-ingressgateway   2/2     2            2           28d\n\nubectl get svc -n istio-system\nNAME                   TYPE           CLUSTER-IP    EXTERNAL-IP   PORT(S)                                                                      AGE\nistio-ingressgateway   LoadBalancer   10.0.75.173   <pending>     15021:31214/TCP,80:30611/TCP,443:32529/TCP,15012:32583/TCP,15443:31725/TCP   28d\n\n```\n\n* 创建 VirtualService 绑定网关\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nspec:\n  gateways:\n  - httpsample-gateway // 绑定网关，被绑定的网关使用该 VirtualService 配置的规则进行流量控制\n  hosts:\n  - '*' // 针对某个 host 的应用路由规则，必须包含在被绑定的网关 hosts 范围中，配置成一样的就可以\n\n```\n\n* 创建 DestinationRule 划分两个子集不同版本的子集，\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: DestinationRule\nspec:\n  host: http-sample--default\n  subsets: // 通过筛选 label 划分不同的子集，label 是在业务 Pod 的 Service 中 Label Selector 基础上增加版本的标签\n  - labels:\n      app: http-sample // Service 中筛选标签的条件\n      version: v1 // 新增的筛选标签的条件\n    name: v1\n  - labels:\n      app: http-sample\n      version: v2\n    name: v2\n\n```\n\n最后，给 Demo 的两个实例分别打上 version 标签，本文规定10.0.76.95的 IP 是v1，10.0.76.102的 IP 是v2，准备工作完成\n\n#### 路由配置\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nspec:\n  gateways:\n  - httpsample-gateway\n  hosts:\n  - '*'\n  http:\n  - route:\n    - destination:\n        host: http-sample--default // 路由的目标 Service，流量会被路由到的 Service\n        port:\n          number: 8386 // 路由的目标 Service 端口\n        subset: v2 // 路由的目标子集，DestinationRule 中定义的子集\n        weight: 100 // 流量分配权重\n\n```\n\n验证\n\n```\n\n// 访问网关的 Service\ncurl http://10.0.75.173\n// Demo 程序返回时间，host，IP 信息可以看到流量被路由到了 v2 子集上\nhello!Sat, 08 May 2021 05:58:10 UTC,host:http-sample.default-crkvp,ip:10.0.76.102\n\n```\n\n#### 匹配规则\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nspec:\n  gateways:\n  - httpsample-gateway\n  hosts:\n  - '*'\n  http:\n  - match:\n    - headers: // 匹配请求头 还支持前缀匹配(prefix)和正则匹配(regex)\n        userpin:\n          exact: jason\n    - uri: // 匹配 uri 还支持精确匹配(exact)和正则匹配(regex)\n        prefix: /tov1\n    route: // match 的请求路由规则\n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n        subset: v1\n  - match:\n    - headers: // 匹配请求头 还支持前缀匹配(prefix)和正则匹配(regex)\n        userpin:\n          exact: yywang // 这里如果是 jason 会优先匹配到上条规则\n      uri:\n        prefix: /tov2\n    route:\n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n        subset: v2\n  - route: // 默认路由规则，即上面没有 match 到会直接路由到 http-sample--default 的 Service (Demo 暴露的 Service)上\n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n\n```\n\nmatch 中的匹配规则，在不同的数组下是或的关系如v1的配置，相同数组下是且的黄兴如v2的配置\n\n验证\n\n```\n\n// 路径匹配\ncurl http://10.0.75.173/tov1\nhello!Sat, 08 May 2021 06:15:25 UTC,host:http-sample.default-24tqt,ip:10.0.76.95\n// header 匹配\ncurl -H \"userpin:jason\" http://10.0.75.173/\nhello!Sat, 08 May 2021 06:15:05 UTC,host:http-sample.default-24tqt,ip:10.0.76.95\n// 优先匹配v1\ncurl -H 'userpin:jason'  http://10.0.75.173/tov2\nhello!Sat, 08 May 2021 06:19:48 UTC,host:http-sample.default-24tqt,ip:10.0.76.95\n// v2是且的关系，最后走了默认路由两个实例随机访问\ncurl  http://10.0.75.173/tov2\nhello!Sat, 08 May 2021 06:19:08 UTC,host:http-sample.default-24tqt,ip:10.0.76.95\ncurl  http://10.0.75.173/tov2\nhello!Sat, 08 May 2021 06:19:09 UTC,host:http-sample.default-24tqt,ip:10.0.76.95\ncurl  http://10.0.75.173/tov2\nhello!Sat, 08 May 2021 06:19:09 UTC,host:http-sample.default-crkvp,ip:10.0.76.102\n// 匹配v2\ncurl -H 'userpin:yywang'  http://10.0.75.173/tov2\nhello!Sat, 08 May 2021 06:26:17 UTC,host:http-sample.default-crkvp,ip:10.0.76.102\n\n```\n\n#### 流量镜像\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nspec:\n  gateways:\n  - httpsample-gateway\n  hosts:\n  - '*'\n  http:\n  - match:\n    - uri:\n        prefix: /tov1\n    mirror:\n      host: http-sample--default // 流量镜像的目标 Service\n      subset: v2 // 流量镜像的目标 子集\n    mirror_percent: 100 // 流量镜像的比例\n    route:\n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n        subset: v1\n  - match:\n      uri:\n        prefix: /tov2\n    route:\n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n        subset: v2\n  - route: \n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n\n```\n\n验证，curl http://10.0.75.173/tov1 在v2的 Pod 上查看日志\n\n#### CORS 策略\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nspec:\n  gateways:\n  - httpsample-gateway\n  hosts:\n  - '*'\n  http:\n  - route:\n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n        subset: v2\n        weight: 100\n    corsPolicy:\n      allowOrigin:\n      - new.com // 允许浏览器跨域访问的地址\n      allowMethods:\n      - GET // 允许浏览器跨域访问的请求方法\n      maxAge: \"2m\" // 跨域请求缓存的时间\n\n```\n\n目前没有遇到这个策略的场景，就没有做验证，据了解 CORS 会给原请求添加头信息，可以查看请求头验证，[参考](https://zhuanlan.zhihu.com/p/264800677)\n\n#### 重定向\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nspec:\n  gateways:\n  - httpsample-gateway\n  hosts:\n  - '*'\n  http:\n  - match:\n    - uri:\n        prefix: /tov1\n    redirect:\n      uri: /tov2 // 重定向的路径\n      authority: 172.16.26.126:8386 // 重定向的主机，不配置就是当前主机，这个是我本地的地址和端口\n  - match:\n      uri:\n        prefix: /tov2\n    route:\n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n        subset: v2\n\n```\n\n验证：curl http://10.0.75.173/tov1 查看本地日志发现被路由到了本地\n\n#### 重写\n\n类似于请求转发，浏览器 URL 不会变，由服务器转发新地址\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nspec:\n  gateways:\n  - httpsample-gateway\n  hosts:\n  - '*'\n  http:\n  - match:\n    - uri:\n        prefix: /tov1\n    rewrite:\n      uri: /print // 重写的路径\n      authority: 172.16.26.126:8386 // 重写的主机\n    route:\n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n        subset: v1\n  - match:\n      uri:\n        prefix: /tov2\n    route:\n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n        subset: v2\n\n```\n\n验证方式同重定向一样，有一点区别的是重写下面还可以配置路由，如果没有配置重写的主机名默认会路由到下面的子集，上面的例子如果没有配置重写的主机会路由\n到v1的 /print 的 path 上\n\n#### 重试\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nspec:\n  gateways:\n  - httpsample-gateway\n  hosts:\n  - '*'\n  http:\n  - route: \n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n    retries:\n      attempts: 3 // 重试次数\n      perTryTimeout: 2s // 重试超时等待时间\n      retryOn: 5xx,connect-failure // 重试条件 5xx 状态码或者连接失败\n\n```\n\n验证，Demo 中有一个返回500错误的方法，curl http://10.0.75.173/error500 打开两个 Pod 的实例观察请求的日志，加上重试一共请求4次\n\n#### 故障注入\n\n##### 延迟故障\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nspec:\n  gateways:\n  - httpsample-gateway\n  hosts:\n  - '*'\n  http:\n  - fault:\n      delay: // 注入延迟故障\n        percentage:\n          value: 10 // 注入百分比\n        fixedDelay: 5s // 延迟时间\n  - route: \n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n\n```\n\n##### 错误故障\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nspec:\n  gateways:\n  - httpsample-gateway\n  hosts:\n  - '*'\n  http:\n  - fault:\n      abort: // 错误故障\n        percentage:\n          value: 10 // 注入百分比 \n        httpStatus: 500 // 响应状态码\n  - route: \n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n\n```\n\ncurl http://10.0.75.173 即可验证\n\n#### 负载均衡\n\nIstio 除了 Service 本身带有的负载均衡，在 DestinationRule 中可以配置子集的负载均衡，支持更多算法\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: DestinationRule\nspec:\n  host: http-sample--default\n  subsets:\n  - labels:\n      version: v1\n      app: http-sample\n    name: v1\n    trafficPolicy:\n      lodaBalancer: // 负载均衡配置\n        simple: ROUND_ROBIN // 轮询负载均衡算法，还支持随机算法(RANDOM)，最少连接(LEAST_CONN)，直接转发(PASSTHROUTE)\n\n```\n\n#### 异常检测 - 熔断限流\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: DestinationRule\nspec:\n  host: http-sample--default\n  subsets:\n  - labels:\n      version: v1\n      app: http-sample\n    name: v1\n  - labels:\n      version: v2\n      app: http-sample\n    name: v2\n  trafficPolicy:\n    connectionPool:\n      http:\n        http1MaxPendingRequests: 1 // 最大请求等待数\n        maxRequestsPerConnection: 1 // 每个连接最大请求数\n      tcp:\n        macConnections: 1 // 最大连接数\n    outlierDetection:\n      baseEjectionTime: 100s // 基础熔断时间，实际时间是 = 基础熔断时间 x 熔断次数\n      consecutiveErrors: 1 // 触发熔断的连续错误次数\n      maxEjectionPercent: 100 // 熔断实例的比例，100%即为所有实例都可以同时熔断\n\n```\n\n验证，这里通过 fortio 验证了限流，再高于5个连接并发的情况下会有部分请求失败被限流，熔断还还不知道怎么验证，感觉应该没问题后面验证了再补充上\n\n```\n\nfortio load -c 5 -qps 0 -n 100 -loglevel Warning http://10.0.75.173\n17:45:28 I logger.go:127> Log level is now 3 Warning (was 2 Info)\nFortio 1.14.1 running at 0 queries per second, 8->8 procs, for 100 calls: http://10.0.75.173\nStarting at max qps with 5 thread(s) [gomax 8] for exactly 100 calls (20 per thread + 0)\n17:45:28 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:28 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:28 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:28 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:28 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:28 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:28 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:28 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:28 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:28 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:28 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:29 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:29 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:29 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:29 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:29 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:29 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:29 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\nEnded after 181.75592ms : 100 calls. qps=550.19\nAggregated Function Time : count 100 avg 0.0084987707 +/- 0.003829 min 0.003318402 max 0.01871654 sum 0.849877069\n# range, mid point, percentile, count\n>= 0.0033184 <= 0.004 , 0.0036592 , 8.00, 8\n> 0.004 <= 0.005 , 0.0045 , 15.00, 7\n> 0.005 <= 0.006 , 0.0055 , 26.00, 11\n> 0.006 <= 0.007 , 0.0065 , 44.00, 18\n> 0.007 <= 0.008 , 0.0075 , 58.00, 14\n> 0.008 <= 0.009 , 0.0085 , 64.00, 6\n> 0.009 <= 0.01 , 0.0095 , 73.00, 9\n> 0.01 <= 0.011 , 0.0105 , 75.00, 2\n> 0.011 <= 0.012 , 0.0115 , 80.00, 5\n> 0.012 <= 0.014 , 0.013 , 88.00, 8\n> 0.014 <= 0.016 , 0.015 , 94.00, 6\n> 0.016 <= 0.018 , 0.017 , 98.00, 4\n> 0.018 <= 0.0187165 , 0.0183583 , 100.00, 2\n# target 50% 0.00742857\n# target 75% 0.011\n# target 90% 0.0146667\n# target 99% 0.0183583\n# target 99.9% 0.0186807\nSockets used: 23 (for perfect keepalive, would be 5)\nJitter: false\nCode 200 : 82 (82.0 %)\nCode 503 : 18 (18.0 %)\nResponse Header Sizes : count 100 avg 141.04 +/- 66.08 min 0 max 172 sum 14104\nResponse Body/Total Sizes : count 100 avg 252.32 +/- 2.533 min 247 max 254 sum 25232\nAll done 100 calls (plus 0 warmup) 8.499 ms avg, 550.2 qps\n\n```\n","source":"_posts/Istio流量管理简单实践.md","raw":"---\ntitle: 没有实践就不算入门 Istio\nauthor: YyWang\ndate: 2021-05-08 15:28:20\ntags: Istio\ncatagories: Istio\n---\n\n### 简述\nIstio 是如何使用网关进行流量控制的呢？经过两天的实验和研究，有了一个简单的认识，记录一下子\n\nIstio 作为服务网格的控制面通过一些自定义的 CR，通过对这些 CR 的配置，并对这些 CR 和 k8s 中部分资源 listAndWatch 生成配置并下发（xds协议）\n到数据面，数据面接收到这些配置实时调整对流量的处理逻辑，这是大致的流程。在原生的 k8s 中，Service 可以通过筛选 label 将应用的多个实例暴露出去提\n供服务，Service 还可以服务发现和负载均衡，在此基础上 Istio 定义了一些 CR 来扩展 Service 的功能，本文就 Istio 针对 Http 协议的流量 控制进行\n实践，对 Istio 有一个简单的认识。\n\n### Demo 结构\n\n![istio-1](/images/istio-1.png)\n\n从右往左看\n* 通常使用 Deployment 来部署应用的多个实例即业务 Pod，对应图中 business Pod\n* 创建 Service 将业务 Pod 暴露提供服务，同时可以服务发现和负载均衡\n\n到这只是使用了 k8s 中的 CR，用户可以通过访问 Service 的 ClusterIp 和端口来访问服务，但是没有更细致的流量控制的功能，下面就开始使用 Istio\n\n* 需要创建 VirtualService 和 DestinationRule 来配置流量控制规则\n* VirtualService 可以配置不同维度的路由规则将流量传递给指定的 Service\n* DestinationRule 可以配置路由规则的不同子集(理解为 k8s Service 中 Endpoint 分组)，以及子集的复制均衡策略，还能配置异常检测\n* 还可以创建网关来进行流量控制，Istio 默认使用 Envoy 做网关，同样使用 Deployment 部署多个实例，（图中 gateway Pod）创建 Service（图中 \n  gateway service）提供服务，Gateway 是 Istio 的 CR 通过筛选 label 关联到创建好的网关，Gateway 规定能够通过网关的流量，并绑定 VisualService\n  和 DestinationRule 的规则\n  \nIstio 通过 ListAndWatch 这些 CR 感知到它们的变化通知给数据面（sidecar 或者 Gateway）\n\n### 实践\n\n#### 准备工作\n\n+ 首先用 Deployment 部署一个 HttpServer 的 Demo，有两个实例 \n\n```\nNAME                        READY   STATUS    RESTARTS   AGE   IP            NODE                  NOMINATED NODE   READINESS GATES\nhttp-sample.default-24tqt   1/1     Running   2          8d    10.0.76.95    op-arsenaldevk8s-03   <none>           1/1\nhttp-sample.default-crkvp   1/1     Running   4          8d    10.0.76.102   op-arsenaldevk8s-07   <none>           1/1\n```\n\n* 给 Demo 创建 Service 暴露服务，\n\n```\n\nNAME                   TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)             AGE\nhttp-sample--default   ClusterIP   10.0.75.60    <none>        8386/TCP            7d19h\n\n```\n\n* 创建 Gateway CR 用来接收所有 host 的请求\n\n```\n\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: httpsample-gateway\nspec:\n  selector:\n    istio: ingressgateway # use Istio default gateway implementation 使用 envoy \n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\" // 被网关管理 host，这里配置了所有；\n\n```\n\n* Istio 默认在 istio-system 下创建了网关的 Deployment 和 Service，同样 Service 通过筛选 label 关联 Deployment 的实例 \n\n```\n\nkubectl get deployment -n istio-system\nNAME                   READY   UP-TO-DATE   AVAILABLE   AGE\nistio-ingressgateway   2/2     2            2           28d\n\nubectl get svc -n istio-system\nNAME                   TYPE           CLUSTER-IP    EXTERNAL-IP   PORT(S)                                                                      AGE\nistio-ingressgateway   LoadBalancer   10.0.75.173   <pending>     15021:31214/TCP,80:30611/TCP,443:32529/TCP,15012:32583/TCP,15443:31725/TCP   28d\n\n```\n\n* 创建 VirtualService 绑定网关\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nspec:\n  gateways:\n  - httpsample-gateway // 绑定网关，被绑定的网关使用该 VirtualService 配置的规则进行流量控制\n  hosts:\n  - '*' // 针对某个 host 的应用路由规则，必须包含在被绑定的网关 hosts 范围中，配置成一样的就可以\n\n```\n\n* 创建 DestinationRule 划分两个子集不同版本的子集，\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: DestinationRule\nspec:\n  host: http-sample--default\n  subsets: // 通过筛选 label 划分不同的子集，label 是在业务 Pod 的 Service 中 Label Selector 基础上增加版本的标签\n  - labels:\n      app: http-sample // Service 中筛选标签的条件\n      version: v1 // 新增的筛选标签的条件\n    name: v1\n  - labels:\n      app: http-sample\n      version: v2\n    name: v2\n\n```\n\n最后，给 Demo 的两个实例分别打上 version 标签，本文规定10.0.76.95的 IP 是v1，10.0.76.102的 IP 是v2，准备工作完成\n\n#### 路由配置\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nspec:\n  gateways:\n  - httpsample-gateway\n  hosts:\n  - '*'\n  http:\n  - route:\n    - destination:\n        host: http-sample--default // 路由的目标 Service，流量会被路由到的 Service\n        port:\n          number: 8386 // 路由的目标 Service 端口\n        subset: v2 // 路由的目标子集，DestinationRule 中定义的子集\n        weight: 100 // 流量分配权重\n\n```\n\n验证\n\n```\n\n// 访问网关的 Service\ncurl http://10.0.75.173\n// Demo 程序返回时间，host，IP 信息可以看到流量被路由到了 v2 子集上\nhello!Sat, 08 May 2021 05:58:10 UTC,host:http-sample.default-crkvp,ip:10.0.76.102\n\n```\n\n#### 匹配规则\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nspec:\n  gateways:\n  - httpsample-gateway\n  hosts:\n  - '*'\n  http:\n  - match:\n    - headers: // 匹配请求头 还支持前缀匹配(prefix)和正则匹配(regex)\n        userpin:\n          exact: jason\n    - uri: // 匹配 uri 还支持精确匹配(exact)和正则匹配(regex)\n        prefix: /tov1\n    route: // match 的请求路由规则\n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n        subset: v1\n  - match:\n    - headers: // 匹配请求头 还支持前缀匹配(prefix)和正则匹配(regex)\n        userpin:\n          exact: yywang // 这里如果是 jason 会优先匹配到上条规则\n      uri:\n        prefix: /tov2\n    route:\n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n        subset: v2\n  - route: // 默认路由规则，即上面没有 match 到会直接路由到 http-sample--default 的 Service (Demo 暴露的 Service)上\n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n\n```\n\nmatch 中的匹配规则，在不同的数组下是或的关系如v1的配置，相同数组下是且的黄兴如v2的配置\n\n验证\n\n```\n\n// 路径匹配\ncurl http://10.0.75.173/tov1\nhello!Sat, 08 May 2021 06:15:25 UTC,host:http-sample.default-24tqt,ip:10.0.76.95\n// header 匹配\ncurl -H \"userpin:jason\" http://10.0.75.173/\nhello!Sat, 08 May 2021 06:15:05 UTC,host:http-sample.default-24tqt,ip:10.0.76.95\n// 优先匹配v1\ncurl -H 'userpin:jason'  http://10.0.75.173/tov2\nhello!Sat, 08 May 2021 06:19:48 UTC,host:http-sample.default-24tqt,ip:10.0.76.95\n// v2是且的关系，最后走了默认路由两个实例随机访问\ncurl  http://10.0.75.173/tov2\nhello!Sat, 08 May 2021 06:19:08 UTC,host:http-sample.default-24tqt,ip:10.0.76.95\ncurl  http://10.0.75.173/tov2\nhello!Sat, 08 May 2021 06:19:09 UTC,host:http-sample.default-24tqt,ip:10.0.76.95\ncurl  http://10.0.75.173/tov2\nhello!Sat, 08 May 2021 06:19:09 UTC,host:http-sample.default-crkvp,ip:10.0.76.102\n// 匹配v2\ncurl -H 'userpin:yywang'  http://10.0.75.173/tov2\nhello!Sat, 08 May 2021 06:26:17 UTC,host:http-sample.default-crkvp,ip:10.0.76.102\n\n```\n\n#### 流量镜像\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nspec:\n  gateways:\n  - httpsample-gateway\n  hosts:\n  - '*'\n  http:\n  - match:\n    - uri:\n        prefix: /tov1\n    mirror:\n      host: http-sample--default // 流量镜像的目标 Service\n      subset: v2 // 流量镜像的目标 子集\n    mirror_percent: 100 // 流量镜像的比例\n    route:\n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n        subset: v1\n  - match:\n      uri:\n        prefix: /tov2\n    route:\n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n        subset: v2\n  - route: \n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n\n```\n\n验证，curl http://10.0.75.173/tov1 在v2的 Pod 上查看日志\n\n#### CORS 策略\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nspec:\n  gateways:\n  - httpsample-gateway\n  hosts:\n  - '*'\n  http:\n  - route:\n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n        subset: v2\n        weight: 100\n    corsPolicy:\n      allowOrigin:\n      - new.com // 允许浏览器跨域访问的地址\n      allowMethods:\n      - GET // 允许浏览器跨域访问的请求方法\n      maxAge: \"2m\" // 跨域请求缓存的时间\n\n```\n\n目前没有遇到这个策略的场景，就没有做验证，据了解 CORS 会给原请求添加头信息，可以查看请求头验证，[参考](https://zhuanlan.zhihu.com/p/264800677)\n\n#### 重定向\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nspec:\n  gateways:\n  - httpsample-gateway\n  hosts:\n  - '*'\n  http:\n  - match:\n    - uri:\n        prefix: /tov1\n    redirect:\n      uri: /tov2 // 重定向的路径\n      authority: 172.16.26.126:8386 // 重定向的主机，不配置就是当前主机，这个是我本地的地址和端口\n  - match:\n      uri:\n        prefix: /tov2\n    route:\n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n        subset: v2\n\n```\n\n验证：curl http://10.0.75.173/tov1 查看本地日志发现被路由到了本地\n\n#### 重写\n\n类似于请求转发，浏览器 URL 不会变，由服务器转发新地址\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nspec:\n  gateways:\n  - httpsample-gateway\n  hosts:\n  - '*'\n  http:\n  - match:\n    - uri:\n        prefix: /tov1\n    rewrite:\n      uri: /print // 重写的路径\n      authority: 172.16.26.126:8386 // 重写的主机\n    route:\n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n        subset: v1\n  - match:\n      uri:\n        prefix: /tov2\n    route:\n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n        subset: v2\n\n```\n\n验证方式同重定向一样，有一点区别的是重写下面还可以配置路由，如果没有配置重写的主机名默认会路由到下面的子集，上面的例子如果没有配置重写的主机会路由\n到v1的 /print 的 path 上\n\n#### 重试\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nspec:\n  gateways:\n  - httpsample-gateway\n  hosts:\n  - '*'\n  http:\n  - route: \n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n    retries:\n      attempts: 3 // 重试次数\n      perTryTimeout: 2s // 重试超时等待时间\n      retryOn: 5xx,connect-failure // 重试条件 5xx 状态码或者连接失败\n\n```\n\n验证，Demo 中有一个返回500错误的方法，curl http://10.0.75.173/error500 打开两个 Pod 的实例观察请求的日志，加上重试一共请求4次\n\n#### 故障注入\n\n##### 延迟故障\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nspec:\n  gateways:\n  - httpsample-gateway\n  hosts:\n  - '*'\n  http:\n  - fault:\n      delay: // 注入延迟故障\n        percentage:\n          value: 10 // 注入百分比\n        fixedDelay: 5s // 延迟时间\n  - route: \n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n\n```\n\n##### 错误故障\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nspec:\n  gateways:\n  - httpsample-gateway\n  hosts:\n  - '*'\n  http:\n  - fault:\n      abort: // 错误故障\n        percentage:\n          value: 10 // 注入百分比 \n        httpStatus: 500 // 响应状态码\n  - route: \n    - destination:\n        host: http-sample--default\n        port:\n          number: 8386\n\n```\n\ncurl http://10.0.75.173 即可验证\n\n#### 负载均衡\n\nIstio 除了 Service 本身带有的负载均衡，在 DestinationRule 中可以配置子集的负载均衡，支持更多算法\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: DestinationRule\nspec:\n  host: http-sample--default\n  subsets:\n  - labels:\n      version: v1\n      app: http-sample\n    name: v1\n    trafficPolicy:\n      lodaBalancer: // 负载均衡配置\n        simple: ROUND_ROBIN // 轮询负载均衡算法，还支持随机算法(RANDOM)，最少连接(LEAST_CONN)，直接转发(PASSTHROUTE)\n\n```\n\n#### 异常检测 - 熔断限流\n\n```\n\napiVersion: networking.istio.io/v1beta1\nkind: DestinationRule\nspec:\n  host: http-sample--default\n  subsets:\n  - labels:\n      version: v1\n      app: http-sample\n    name: v1\n  - labels:\n      version: v2\n      app: http-sample\n    name: v2\n  trafficPolicy:\n    connectionPool:\n      http:\n        http1MaxPendingRequests: 1 // 最大请求等待数\n        maxRequestsPerConnection: 1 // 每个连接最大请求数\n      tcp:\n        macConnections: 1 // 最大连接数\n    outlierDetection:\n      baseEjectionTime: 100s // 基础熔断时间，实际时间是 = 基础熔断时间 x 熔断次数\n      consecutiveErrors: 1 // 触发熔断的连续错误次数\n      maxEjectionPercent: 100 // 熔断实例的比例，100%即为所有实例都可以同时熔断\n\n```\n\n验证，这里通过 fortio 验证了限流，再高于5个连接并发的情况下会有部分请求失败被限流，熔断还还不知道怎么验证，感觉应该没问题后面验证了再补充上\n\n```\n\nfortio load -c 5 -qps 0 -n 100 -loglevel Warning http://10.0.75.173\n17:45:28 I logger.go:127> Log level is now 3 Warning (was 2 Info)\nFortio 1.14.1 running at 0 queries per second, 8->8 procs, for 100 calls: http://10.0.75.173\nStarting at max qps with 5 thread(s) [gomax 8] for exactly 100 calls (20 per thread + 0)\n17:45:28 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:28 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:28 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:28 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:28 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:28 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:28 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:28 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:28 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:28 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:28 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:29 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:29 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:29 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:29 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:29 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:29 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\n17:45:29 W http_client.go:781> Parsed non ok code 503 (HTTP/1.1 503)\nEnded after 181.75592ms : 100 calls. qps=550.19\nAggregated Function Time : count 100 avg 0.0084987707 +/- 0.003829 min 0.003318402 max 0.01871654 sum 0.849877069\n# range, mid point, percentile, count\n>= 0.0033184 <= 0.004 , 0.0036592 , 8.00, 8\n> 0.004 <= 0.005 , 0.0045 , 15.00, 7\n> 0.005 <= 0.006 , 0.0055 , 26.00, 11\n> 0.006 <= 0.007 , 0.0065 , 44.00, 18\n> 0.007 <= 0.008 , 0.0075 , 58.00, 14\n> 0.008 <= 0.009 , 0.0085 , 64.00, 6\n> 0.009 <= 0.01 , 0.0095 , 73.00, 9\n> 0.01 <= 0.011 , 0.0105 , 75.00, 2\n> 0.011 <= 0.012 , 0.0115 , 80.00, 5\n> 0.012 <= 0.014 , 0.013 , 88.00, 8\n> 0.014 <= 0.016 , 0.015 , 94.00, 6\n> 0.016 <= 0.018 , 0.017 , 98.00, 4\n> 0.018 <= 0.0187165 , 0.0183583 , 100.00, 2\n# target 50% 0.00742857\n# target 75% 0.011\n# target 90% 0.0146667\n# target 99% 0.0183583\n# target 99.9% 0.0186807\nSockets used: 23 (for perfect keepalive, would be 5)\nJitter: false\nCode 200 : 82 (82.0 %)\nCode 503 : 18 (18.0 %)\nResponse Header Sizes : count 100 avg 141.04 +/- 66.08 min 0 max 172 sum 14104\nResponse Body/Total Sizes : count 100 avg 252.32 +/- 2.533 min 247 max 254 sum 25232\nAll done 100 calls (plus 0 warmup) 8.499 ms avg, 550.2 qps\n\n```\n","slug":"Istio流量管理简单实践","published":1,"updated":"2021-07-13T12:27:08.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj6u000w81fy85zfnci9","content":"<h3 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h3><p>Istio 是如何使用网关进行流量控制的呢？经过两天的实验和研究，有了一个简单的认识，记录一下子</p>\n<p>Istio 作为服务网格的控制面通过一些自定义的 CR，通过对这些 CR 的配置，并对这些 CR 和 k8s 中部分资源 listAndWatch 生成配置并下发（xds协议）<br>到数据面，数据面接收到这些配置实时调整对流量的处理逻辑，这是大致的流程。在原生的 k8s 中，Service 可以通过筛选 label 将应用的多个实例暴露出去提<br>供服务，Service 还可以服务发现和负载均衡，在此基础上 Istio 定义了一些 CR 来扩展 Service 的功能，本文就 Istio 针对 Http 协议的流量 控制进行<br>实践，对 Istio 有一个简单的认识。</p>\n<h3 id=\"Demo-结构\"><a href=\"#Demo-结构\" class=\"headerlink\" title=\"Demo 结构\"></a>Demo 结构</h3><p><img src=\"/images/istio-1.png\" alt=\"istio-1\"></p>\n<p>从右往左看</p>\n<ul>\n<li>通常使用 Deployment 来部署应用的多个实例即业务 Pod，对应图中 business Pod</li>\n<li>创建 Service 将业务 Pod 暴露提供服务，同时可以服务发现和负载均衡</li>\n</ul>\n<p>到这只是使用了 k8s 中的 CR，用户可以通过访问 Service 的 ClusterIp 和端口来访问服务，但是没有更细致的流量控制的功能，下面就开始使用 Istio</p>\n<ul>\n<li>需要创建 VirtualService 和 DestinationRule 来配置流量控制规则</li>\n<li>VirtualService 可以配置不同维度的路由规则将流量传递给指定的 Service</li>\n<li>DestinationRule 可以配置路由规则的不同子集(理解为 k8s Service 中 Endpoint 分组)，以及子集的复制均衡策略，还能配置异常检测</li>\n<li>还可以创建网关来进行流量控制，Istio 默认使用 Envoy 做网关，同样使用 Deployment 部署多个实例，（图中 gateway Pod）创建 Service（图中<br>gateway service）提供服务，Gateway 是 Istio 的 CR 通过筛选 label 关联到创建好的网关，Gateway 规定能够通过网关的流量，并绑定 VisualService<br>和 DestinationRule 的规则</li>\n</ul>\n<p>Istio 通过 ListAndWatch 这些 CR 感知到它们的变化通知给数据面（sidecar 或者 Gateway）</p>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><ul>\n<li>首先用 Deployment 部署一个 HttpServer 的 Demo，有两个实例 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NAME                        READY   STATUS    RESTARTS   AGE   IP            NODE                  NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">http-sample.default-24tqt   1/1     Running   2          8d    10.0.76.95    op-arsenaldevk8s-03   &lt;none&gt;           1/1</span><br><span class=\"line\">http-sample.default-crkvp   1/1     Running   4          8d    10.0.76.102   op-arsenaldevk8s-07   &lt;none&gt;           1/1</span><br></pre></td></tr></table></figure>\n<ul>\n<li>给 Demo 创建 Service 暴露服务，</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">NAME                   TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)             AGE</span><br><span class=\"line\">http-sample--default   ClusterIP   10.0.75.60    &lt;none&gt;        8386/TCP            7d19h</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建 Gateway CR 用来接收所有 host 的请求</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1alpha3</span><br><span class=\"line\">kind: Gateway</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: httpsample-gateway</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    istio: ingressgateway # use Istio default gateway implementation 使用 envoy </span><br><span class=\"line\">  servers:</span><br><span class=\"line\">  - port:</span><br><span class=\"line\">      number: 80</span><br><span class=\"line\">      name: http</span><br><span class=\"line\">      protocol: HTTP</span><br><span class=\"line\">    hosts:</span><br><span class=\"line\">    - &quot;*&quot; // 被网关管理 host，这里配置了所有；</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Istio 默认在 istio-system 下创建了网关的 Deployment 和 Service，同样 Service 通过筛选 label 关联 Deployment 的实例 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">kubectl get deployment -n istio-system</span><br><span class=\"line\">NAME                   READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">istio-ingressgateway   2/2     2            2           28d</span><br><span class=\"line\"></span><br><span class=\"line\">ubectl get svc -n istio-system</span><br><span class=\"line\">NAME                   TYPE           CLUSTER-IP    EXTERNAL-IP   PORT(S)                                                                      AGE</span><br><span class=\"line\">istio-ingressgateway   LoadBalancer   10.0.75.173   &lt;pending&gt;     15021:31214/TCP,80:30611/TCP,443:32529/TCP,15012:32583/TCP,15443:31725/TCP   28d</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建 VirtualService 绑定网关</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: VirtualService</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  gateways:</span><br><span class=\"line\">  - httpsample-gateway // 绑定网关，被绑定的网关使用该 VirtualService 配置的规则进行流量控制</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - &apos;*&apos; // 针对某个 host 的应用路由规则，必须包含在被绑定的网关 hosts 范围中，配置成一样的就可以</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建 DestinationRule 划分两个子集不同版本的子集，</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: DestinationRule</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  host: http-sample--default</span><br><span class=\"line\">  subsets: // 通过筛选 label 划分不同的子集，label 是在业务 Pod 的 Service 中 Label Selector 基础上增加版本的标签</span><br><span class=\"line\">  - labels:</span><br><span class=\"line\">      app: http-sample // Service 中筛选标签的条件</span><br><span class=\"line\">      version: v1 // 新增的筛选标签的条件</span><br><span class=\"line\">    name: v1</span><br><span class=\"line\">  - labels:</span><br><span class=\"line\">      app: http-sample</span><br><span class=\"line\">      version: v2</span><br><span class=\"line\">    name: v2</span><br></pre></td></tr></table></figure>\n<p>最后，给 Demo 的两个实例分别打上 version 标签，本文规定10.0.76.95的 IP 是v1，10.0.76.102的 IP 是v2，准备工作完成</p>\n<h4 id=\"路由配置\"><a href=\"#路由配置\" class=\"headerlink\" title=\"路由配置\"></a>路由配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: VirtualService</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  gateways:</span><br><span class=\"line\">  - httpsample-gateway</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  http:</span><br><span class=\"line\">  - route:</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default // 路由的目标 Service，流量会被路由到的 Service</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386 // 路由的目标 Service 端口</span><br><span class=\"line\">        subset: v2 // 路由的目标子集，DestinationRule 中定义的子集</span><br><span class=\"line\">        weight: 100 // 流量分配权重</span><br></pre></td></tr></table></figure>\n<p>验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 访问网关的 Service</span><br><span class=\"line\">curl http://10.0.75.173</span><br><span class=\"line\">// Demo 程序返回时间，host，IP 信息可以看到流量被路由到了 v2 子集上</span><br><span class=\"line\">hello!Sat, 08 May 2021 05:58:10 UTC,host:http-sample.default-crkvp,ip:10.0.76.102</span><br></pre></td></tr></table></figure>\n<h4 id=\"匹配规则\"><a href=\"#匹配规则\" class=\"headerlink\" title=\"匹配规则\"></a>匹配规则</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: VirtualService</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  gateways:</span><br><span class=\"line\">  - httpsample-gateway</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  http:</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">    - headers: // 匹配请求头 还支持前缀匹配(prefix)和正则匹配(regex)</span><br><span class=\"line\">        userpin:</span><br><span class=\"line\">          exact: jason</span><br><span class=\"line\">    - uri: // 匹配 uri 还支持精确匹配(exact)和正则匹配(regex)</span><br><span class=\"line\">        prefix: /tov1</span><br><span class=\"line\">    route: // match 的请求路由规则</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br><span class=\"line\">        subset: v1</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">    - headers: // 匹配请求头 还支持前缀匹配(prefix)和正则匹配(regex)</span><br><span class=\"line\">        userpin:</span><br><span class=\"line\">          exact: yywang // 这里如果是 jason 会优先匹配到上条规则</span><br><span class=\"line\">      uri:</span><br><span class=\"line\">        prefix: /tov2</span><br><span class=\"line\">    route:</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br><span class=\"line\">        subset: v2</span><br><span class=\"line\">  - route: // 默认路由规则，即上面没有 match 到会直接路由到 http-sample--default 的 Service (Demo 暴露的 Service)上</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br></pre></td></tr></table></figure>\n<p>match 中的匹配规则，在不同的数组下是或的关系如v1的配置，相同数组下是且的黄兴如v2的配置</p>\n<p>验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 路径匹配</span><br><span class=\"line\">curl http://10.0.75.173/tov1</span><br><span class=\"line\">hello!Sat, 08 May 2021 06:15:25 UTC,host:http-sample.default-24tqt,ip:10.0.76.95</span><br><span class=\"line\">// header 匹配</span><br><span class=\"line\">curl -H &quot;userpin:jason&quot; http://10.0.75.173/</span><br><span class=\"line\">hello!Sat, 08 May 2021 06:15:05 UTC,host:http-sample.default-24tqt,ip:10.0.76.95</span><br><span class=\"line\">// 优先匹配v1</span><br><span class=\"line\">curl -H &apos;userpin:jason&apos;  http://10.0.75.173/tov2</span><br><span class=\"line\">hello!Sat, 08 May 2021 06:19:48 UTC,host:http-sample.default-24tqt,ip:10.0.76.95</span><br><span class=\"line\">// v2是且的关系，最后走了默认路由两个实例随机访问</span><br><span class=\"line\">curl  http://10.0.75.173/tov2</span><br><span class=\"line\">hello!Sat, 08 May 2021 06:19:08 UTC,host:http-sample.default-24tqt,ip:10.0.76.95</span><br><span class=\"line\">curl  http://10.0.75.173/tov2</span><br><span class=\"line\">hello!Sat, 08 May 2021 06:19:09 UTC,host:http-sample.default-24tqt,ip:10.0.76.95</span><br><span class=\"line\">curl  http://10.0.75.173/tov2</span><br><span class=\"line\">hello!Sat, 08 May 2021 06:19:09 UTC,host:http-sample.default-crkvp,ip:10.0.76.102</span><br><span class=\"line\">// 匹配v2</span><br><span class=\"line\">curl -H &apos;userpin:yywang&apos;  http://10.0.75.173/tov2</span><br><span class=\"line\">hello!Sat, 08 May 2021 06:26:17 UTC,host:http-sample.default-crkvp,ip:10.0.76.102</span><br></pre></td></tr></table></figure>\n<h4 id=\"流量镜像\"><a href=\"#流量镜像\" class=\"headerlink\" title=\"流量镜像\"></a>流量镜像</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: VirtualService</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  gateways:</span><br><span class=\"line\">  - httpsample-gateway</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  http:</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">    - uri:</span><br><span class=\"line\">        prefix: /tov1</span><br><span class=\"line\">    mirror:</span><br><span class=\"line\">      host: http-sample--default // 流量镜像的目标 Service</span><br><span class=\"line\">      subset: v2 // 流量镜像的目标 子集</span><br><span class=\"line\">    mirror_percent: 100 // 流量镜像的比例</span><br><span class=\"line\">    route:</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br><span class=\"line\">        subset: v1</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">      uri:</span><br><span class=\"line\">        prefix: /tov2</span><br><span class=\"line\">    route:</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br><span class=\"line\">        subset: v2</span><br><span class=\"line\">  - route: </span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br></pre></td></tr></table></figure>\n<p>验证，curl <a href=\"http://10.0.75.173/tov1\" target=\"_blank\" rel=\"noopener\">http://10.0.75.173/tov1</a> 在v2的 Pod 上查看日志</p>\n<h4 id=\"CORS-策略\"><a href=\"#CORS-策略\" class=\"headerlink\" title=\"CORS 策略\"></a>CORS 策略</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: VirtualService</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  gateways:</span><br><span class=\"line\">  - httpsample-gateway</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  http:</span><br><span class=\"line\">  - route:</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br><span class=\"line\">        subset: v2</span><br><span class=\"line\">        weight: 100</span><br><span class=\"line\">    corsPolicy:</span><br><span class=\"line\">      allowOrigin:</span><br><span class=\"line\">      - new.com // 允许浏览器跨域访问的地址</span><br><span class=\"line\">      allowMethods:</span><br><span class=\"line\">      - GET // 允许浏览器跨域访问的请求方法</span><br><span class=\"line\">      maxAge: &quot;2m&quot; // 跨域请求缓存的时间</span><br></pre></td></tr></table></figure>\n<p>目前没有遇到这个策略的场景，就没有做验证，据了解 CORS 会给原请求添加头信息，可以查看请求头验证，<a href=\"https://zhuanlan.zhihu.com/p/264800677\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h4 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: VirtualService</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  gateways:</span><br><span class=\"line\">  - httpsample-gateway</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  http:</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">    - uri:</span><br><span class=\"line\">        prefix: /tov1</span><br><span class=\"line\">    redirect:</span><br><span class=\"line\">      uri: /tov2 // 重定向的路径</span><br><span class=\"line\">      authority: 172.16.26.126:8386 // 重定向的主机，不配置就是当前主机，这个是我本地的地址和端口</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">      uri:</span><br><span class=\"line\">        prefix: /tov2</span><br><span class=\"line\">    route:</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br><span class=\"line\">        subset: v2</span><br></pre></td></tr></table></figure>\n<p>验证：curl <a href=\"http://10.0.75.173/tov1\" target=\"_blank\" rel=\"noopener\">http://10.0.75.173/tov1</a> 查看本地日志发现被路由到了本地</p>\n<h4 id=\"重写\"><a href=\"#重写\" class=\"headerlink\" title=\"重写\"></a>重写</h4><p>类似于请求转发，浏览器 URL 不会变，由服务器转发新地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: VirtualService</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  gateways:</span><br><span class=\"line\">  - httpsample-gateway</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  http:</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">    - uri:</span><br><span class=\"line\">        prefix: /tov1</span><br><span class=\"line\">    rewrite:</span><br><span class=\"line\">      uri: /print // 重写的路径</span><br><span class=\"line\">      authority: 172.16.26.126:8386 // 重写的主机</span><br><span class=\"line\">    route:</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br><span class=\"line\">        subset: v1</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">      uri:</span><br><span class=\"line\">        prefix: /tov2</span><br><span class=\"line\">    route:</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br><span class=\"line\">        subset: v2</span><br></pre></td></tr></table></figure>\n<p>验证方式同重定向一样，有一点区别的是重写下面还可以配置路由，如果没有配置重写的主机名默认会路由到下面的子集，上面的例子如果没有配置重写的主机会路由<br>到v1的 /print 的 path 上</p>\n<h4 id=\"重试\"><a href=\"#重试\" class=\"headerlink\" title=\"重试\"></a>重试</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: VirtualService</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  gateways:</span><br><span class=\"line\">  - httpsample-gateway</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  http:</span><br><span class=\"line\">  - route: </span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br><span class=\"line\">    retries:</span><br><span class=\"line\">      attempts: 3 // 重试次数</span><br><span class=\"line\">      perTryTimeout: 2s // 重试超时等待时间</span><br><span class=\"line\">      retryOn: 5xx,connect-failure // 重试条件 5xx 状态码或者连接失败</span><br></pre></td></tr></table></figure>\n<p>验证，Demo 中有一个返回500错误的方法，curl <a href=\"http://10.0.75.173/error500\" target=\"_blank\" rel=\"noopener\">http://10.0.75.173/error500</a> 打开两个 Pod 的实例观察请求的日志，加上重试一共请求4次</p>\n<h4 id=\"故障注入\"><a href=\"#故障注入\" class=\"headerlink\" title=\"故障注入\"></a>故障注入</h4><h5 id=\"延迟故障\"><a href=\"#延迟故障\" class=\"headerlink\" title=\"延迟故障\"></a>延迟故障</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: VirtualService</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  gateways:</span><br><span class=\"line\">  - httpsample-gateway</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  http:</span><br><span class=\"line\">  - fault:</span><br><span class=\"line\">      delay: // 注入延迟故障</span><br><span class=\"line\">        percentage:</span><br><span class=\"line\">          value: 10 // 注入百分比</span><br><span class=\"line\">        fixedDelay: 5s // 延迟时间</span><br><span class=\"line\">  - route: </span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br></pre></td></tr></table></figure>\n<h5 id=\"错误故障\"><a href=\"#错误故障\" class=\"headerlink\" title=\"错误故障\"></a>错误故障</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: VirtualService</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  gateways:</span><br><span class=\"line\">  - httpsample-gateway</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  http:</span><br><span class=\"line\">  - fault:</span><br><span class=\"line\">      abort: // 错误故障</span><br><span class=\"line\">        percentage:</span><br><span class=\"line\">          value: 10 // 注入百分比 </span><br><span class=\"line\">        httpStatus: 500 // 响应状态码</span><br><span class=\"line\">  - route: </span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br></pre></td></tr></table></figure>\n<p>curl <a href=\"http://10.0.75.173\" target=\"_blank\" rel=\"noopener\">http://10.0.75.173</a> 即可验证</p>\n<h4 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h4><p>Istio 除了 Service 本身带有的负载均衡，在 DestinationRule 中可以配置子集的负载均衡，支持更多算法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: DestinationRule</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  host: http-sample--default</span><br><span class=\"line\">  subsets:</span><br><span class=\"line\">  - labels:</span><br><span class=\"line\">      version: v1</span><br><span class=\"line\">      app: http-sample</span><br><span class=\"line\">    name: v1</span><br><span class=\"line\">    trafficPolicy:</span><br><span class=\"line\">      lodaBalancer: // 负载均衡配置</span><br><span class=\"line\">        simple: ROUND_ROBIN // 轮询负载均衡算法，还支持随机算法(RANDOM)，最少连接(LEAST_CONN)，直接转发(PASSTHROUTE)</span><br></pre></td></tr></table></figure>\n<h4 id=\"异常检测-熔断限流\"><a href=\"#异常检测-熔断限流\" class=\"headerlink\" title=\"异常检测 - 熔断限流\"></a>异常检测 - 熔断限流</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: DestinationRule</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  host: http-sample--default</span><br><span class=\"line\">  subsets:</span><br><span class=\"line\">  - labels:</span><br><span class=\"line\">      version: v1</span><br><span class=\"line\">      app: http-sample</span><br><span class=\"line\">    name: v1</span><br><span class=\"line\">  - labels:</span><br><span class=\"line\">      version: v2</span><br><span class=\"line\">      app: http-sample</span><br><span class=\"line\">    name: v2</span><br><span class=\"line\">  trafficPolicy:</span><br><span class=\"line\">    connectionPool:</span><br><span class=\"line\">      http:</span><br><span class=\"line\">        http1MaxPendingRequests: 1 // 最大请求等待数</span><br><span class=\"line\">        maxRequestsPerConnection: 1 // 每个连接最大请求数</span><br><span class=\"line\">      tcp:</span><br><span class=\"line\">        macConnections: 1 // 最大连接数</span><br><span class=\"line\">    outlierDetection:</span><br><span class=\"line\">      baseEjectionTime: 100s // 基础熔断时间，实际时间是 = 基础熔断时间 x 熔断次数</span><br><span class=\"line\">      consecutiveErrors: 1 // 触发熔断的连续错误次数</span><br><span class=\"line\">      maxEjectionPercent: 100 // 熔断实例的比例，100%即为所有实例都可以同时熔断</span><br></pre></td></tr></table></figure>\n<p>验证，这里通过 fortio 验证了限流，再高于5个连接并发的情况下会有部分请求失败被限流，熔断还还不知道怎么验证，感觉应该没问题后面验证了再补充上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">fortio load -c 5 -qps 0 -n 100 -loglevel Warning http://10.0.75.173</span><br><span class=\"line\">17:45:28 I logger.go:127&gt; Log level is now 3 Warning (was 2 Info)</span><br><span class=\"line\">Fortio 1.14.1 running at 0 queries per second, 8-&gt;8 procs, for 100 calls: http://10.0.75.173</span><br><span class=\"line\">Starting at max qps with 5 thread(s) [gomax 8] for exactly 100 calls (20 per thread + 0)</span><br><span class=\"line\">17:45:28 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:28 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:28 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:28 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:28 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:28 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:28 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:28 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:28 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:28 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:28 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:29 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:29 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:29 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:29 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:29 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:29 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:29 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">Ended after 181.75592ms : 100 calls. qps=550.19</span><br><span class=\"line\">Aggregated Function Time : count 100 avg 0.0084987707 +/- 0.003829 min 0.003318402 max 0.01871654 sum 0.849877069</span><br><span class=\"line\"># range, mid point, percentile, count</span><br><span class=\"line\">&gt;= 0.0033184 &lt;= 0.004 , 0.0036592 , 8.00, 8</span><br><span class=\"line\">&gt; 0.004 &lt;= 0.005 , 0.0045 , 15.00, 7</span><br><span class=\"line\">&gt; 0.005 &lt;= 0.006 , 0.0055 , 26.00, 11</span><br><span class=\"line\">&gt; 0.006 &lt;= 0.007 , 0.0065 , 44.00, 18</span><br><span class=\"line\">&gt; 0.007 &lt;= 0.008 , 0.0075 , 58.00, 14</span><br><span class=\"line\">&gt; 0.008 &lt;= 0.009 , 0.0085 , 64.00, 6</span><br><span class=\"line\">&gt; 0.009 &lt;= 0.01 , 0.0095 , 73.00, 9</span><br><span class=\"line\">&gt; 0.01 &lt;= 0.011 , 0.0105 , 75.00, 2</span><br><span class=\"line\">&gt; 0.011 &lt;= 0.012 , 0.0115 , 80.00, 5</span><br><span class=\"line\">&gt; 0.012 &lt;= 0.014 , 0.013 , 88.00, 8</span><br><span class=\"line\">&gt; 0.014 &lt;= 0.016 , 0.015 , 94.00, 6</span><br><span class=\"line\">&gt; 0.016 &lt;= 0.018 , 0.017 , 98.00, 4</span><br><span class=\"line\">&gt; 0.018 &lt;= 0.0187165 , 0.0183583 , 100.00, 2</span><br><span class=\"line\"># target 50% 0.00742857</span><br><span class=\"line\"># target 75% 0.011</span><br><span class=\"line\"># target 90% 0.0146667</span><br><span class=\"line\"># target 99% 0.0183583</span><br><span class=\"line\"># target 99.9% 0.0186807</span><br><span class=\"line\">Sockets used: 23 (for perfect keepalive, would be 5)</span><br><span class=\"line\">Jitter: false</span><br><span class=\"line\">Code 200 : 82 (82.0 %)</span><br><span class=\"line\">Code 503 : 18 (18.0 %)</span><br><span class=\"line\">Response Header Sizes : count 100 avg 141.04 +/- 66.08 min 0 max 172 sum 14104</span><br><span class=\"line\">Response Body/Total Sizes : count 100 avg 252.32 +/- 2.533 min 247 max 254 sum 25232</span><br><span class=\"line\">All done 100 calls (plus 0 warmup) 8.499 ms avg, 550.2 qps</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h3><p>Istio 是如何使用网关进行流量控制的呢？经过两天的实验和研究，有了一个简单的认识，记录一下子</p>\n<p>Istio 作为服务网格的控制面通过一些自定义的 CR，通过对这些 CR 的配置，并对这些 CR 和 k8s 中部分资源 listAndWatch 生成配置并下发（xds协议）<br>到数据面，数据面接收到这些配置实时调整对流量的处理逻辑，这是大致的流程。在原生的 k8s 中，Service 可以通过筛选 label 将应用的多个实例暴露出去提<br>供服务，Service 还可以服务发现和负载均衡，在此基础上 Istio 定义了一些 CR 来扩展 Service 的功能，本文就 Istio 针对 Http 协议的流量 控制进行<br>实践，对 Istio 有一个简单的认识。</p>\n<h3 id=\"Demo-结构\"><a href=\"#Demo-结构\" class=\"headerlink\" title=\"Demo 结构\"></a>Demo 结构</h3><p><img src=\"/images/istio-1.png\" alt=\"istio-1\"></p>\n<p>从右往左看</p>\n<ul>\n<li>通常使用 Deployment 来部署应用的多个实例即业务 Pod，对应图中 business Pod</li>\n<li>创建 Service 将业务 Pod 暴露提供服务，同时可以服务发现和负载均衡</li>\n</ul>\n<p>到这只是使用了 k8s 中的 CR，用户可以通过访问 Service 的 ClusterIp 和端口来访问服务，但是没有更细致的流量控制的功能，下面就开始使用 Istio</p>\n<ul>\n<li>需要创建 VirtualService 和 DestinationRule 来配置流量控制规则</li>\n<li>VirtualService 可以配置不同维度的路由规则将流量传递给指定的 Service</li>\n<li>DestinationRule 可以配置路由规则的不同子集(理解为 k8s Service 中 Endpoint 分组)，以及子集的复制均衡策略，还能配置异常检测</li>\n<li>还可以创建网关来进行流量控制，Istio 默认使用 Envoy 做网关，同样使用 Deployment 部署多个实例，（图中 gateway Pod）创建 Service（图中<br>gateway service）提供服务，Gateway 是 Istio 的 CR 通过筛选 label 关联到创建好的网关，Gateway 规定能够通过网关的流量，并绑定 VisualService<br>和 DestinationRule 的规则</li>\n</ul>\n<p>Istio 通过 ListAndWatch 这些 CR 感知到它们的变化通知给数据面（sidecar 或者 Gateway）</p>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><ul>\n<li>首先用 Deployment 部署一个 HttpServer 的 Demo，有两个实例 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NAME                        READY   STATUS    RESTARTS   AGE   IP            NODE                  NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">http-sample.default-24tqt   1/1     Running   2          8d    10.0.76.95    op-arsenaldevk8s-03   &lt;none&gt;           1/1</span><br><span class=\"line\">http-sample.default-crkvp   1/1     Running   4          8d    10.0.76.102   op-arsenaldevk8s-07   &lt;none&gt;           1/1</span><br></pre></td></tr></table></figure>\n<ul>\n<li>给 Demo 创建 Service 暴露服务，</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">NAME                   TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)             AGE</span><br><span class=\"line\">http-sample--default   ClusterIP   10.0.75.60    &lt;none&gt;        8386/TCP            7d19h</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建 Gateway CR 用来接收所有 host 的请求</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1alpha3</span><br><span class=\"line\">kind: Gateway</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: httpsample-gateway</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    istio: ingressgateway # use Istio default gateway implementation 使用 envoy </span><br><span class=\"line\">  servers:</span><br><span class=\"line\">  - port:</span><br><span class=\"line\">      number: 80</span><br><span class=\"line\">      name: http</span><br><span class=\"line\">      protocol: HTTP</span><br><span class=\"line\">    hosts:</span><br><span class=\"line\">    - &quot;*&quot; // 被网关管理 host，这里配置了所有；</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Istio 默认在 istio-system 下创建了网关的 Deployment 和 Service，同样 Service 通过筛选 label 关联 Deployment 的实例 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">kubectl get deployment -n istio-system</span><br><span class=\"line\">NAME                   READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">istio-ingressgateway   2/2     2            2           28d</span><br><span class=\"line\"></span><br><span class=\"line\">ubectl get svc -n istio-system</span><br><span class=\"line\">NAME                   TYPE           CLUSTER-IP    EXTERNAL-IP   PORT(S)                                                                      AGE</span><br><span class=\"line\">istio-ingressgateway   LoadBalancer   10.0.75.173   &lt;pending&gt;     15021:31214/TCP,80:30611/TCP,443:32529/TCP,15012:32583/TCP,15443:31725/TCP   28d</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建 VirtualService 绑定网关</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: VirtualService</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  gateways:</span><br><span class=\"line\">  - httpsample-gateway // 绑定网关，被绑定的网关使用该 VirtualService 配置的规则进行流量控制</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - &apos;*&apos; // 针对某个 host 的应用路由规则，必须包含在被绑定的网关 hosts 范围中，配置成一样的就可以</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建 DestinationRule 划分两个子集不同版本的子集，</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: DestinationRule</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  host: http-sample--default</span><br><span class=\"line\">  subsets: // 通过筛选 label 划分不同的子集，label 是在业务 Pod 的 Service 中 Label Selector 基础上增加版本的标签</span><br><span class=\"line\">  - labels:</span><br><span class=\"line\">      app: http-sample // Service 中筛选标签的条件</span><br><span class=\"line\">      version: v1 // 新增的筛选标签的条件</span><br><span class=\"line\">    name: v1</span><br><span class=\"line\">  - labels:</span><br><span class=\"line\">      app: http-sample</span><br><span class=\"line\">      version: v2</span><br><span class=\"line\">    name: v2</span><br></pre></td></tr></table></figure>\n<p>最后，给 Demo 的两个实例分别打上 version 标签，本文规定10.0.76.95的 IP 是v1，10.0.76.102的 IP 是v2，准备工作完成</p>\n<h4 id=\"路由配置\"><a href=\"#路由配置\" class=\"headerlink\" title=\"路由配置\"></a>路由配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: VirtualService</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  gateways:</span><br><span class=\"line\">  - httpsample-gateway</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  http:</span><br><span class=\"line\">  - route:</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default // 路由的目标 Service，流量会被路由到的 Service</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386 // 路由的目标 Service 端口</span><br><span class=\"line\">        subset: v2 // 路由的目标子集，DestinationRule 中定义的子集</span><br><span class=\"line\">        weight: 100 // 流量分配权重</span><br></pre></td></tr></table></figure>\n<p>验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 访问网关的 Service</span><br><span class=\"line\">curl http://10.0.75.173</span><br><span class=\"line\">// Demo 程序返回时间，host，IP 信息可以看到流量被路由到了 v2 子集上</span><br><span class=\"line\">hello!Sat, 08 May 2021 05:58:10 UTC,host:http-sample.default-crkvp,ip:10.0.76.102</span><br></pre></td></tr></table></figure>\n<h4 id=\"匹配规则\"><a href=\"#匹配规则\" class=\"headerlink\" title=\"匹配规则\"></a>匹配规则</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: VirtualService</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  gateways:</span><br><span class=\"line\">  - httpsample-gateway</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  http:</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">    - headers: // 匹配请求头 还支持前缀匹配(prefix)和正则匹配(regex)</span><br><span class=\"line\">        userpin:</span><br><span class=\"line\">          exact: jason</span><br><span class=\"line\">    - uri: // 匹配 uri 还支持精确匹配(exact)和正则匹配(regex)</span><br><span class=\"line\">        prefix: /tov1</span><br><span class=\"line\">    route: // match 的请求路由规则</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br><span class=\"line\">        subset: v1</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">    - headers: // 匹配请求头 还支持前缀匹配(prefix)和正则匹配(regex)</span><br><span class=\"line\">        userpin:</span><br><span class=\"line\">          exact: yywang // 这里如果是 jason 会优先匹配到上条规则</span><br><span class=\"line\">      uri:</span><br><span class=\"line\">        prefix: /tov2</span><br><span class=\"line\">    route:</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br><span class=\"line\">        subset: v2</span><br><span class=\"line\">  - route: // 默认路由规则，即上面没有 match 到会直接路由到 http-sample--default 的 Service (Demo 暴露的 Service)上</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br></pre></td></tr></table></figure>\n<p>match 中的匹配规则，在不同的数组下是或的关系如v1的配置，相同数组下是且的黄兴如v2的配置</p>\n<p>验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 路径匹配</span><br><span class=\"line\">curl http://10.0.75.173/tov1</span><br><span class=\"line\">hello!Sat, 08 May 2021 06:15:25 UTC,host:http-sample.default-24tqt,ip:10.0.76.95</span><br><span class=\"line\">// header 匹配</span><br><span class=\"line\">curl -H &quot;userpin:jason&quot; http://10.0.75.173/</span><br><span class=\"line\">hello!Sat, 08 May 2021 06:15:05 UTC,host:http-sample.default-24tqt,ip:10.0.76.95</span><br><span class=\"line\">// 优先匹配v1</span><br><span class=\"line\">curl -H &apos;userpin:jason&apos;  http://10.0.75.173/tov2</span><br><span class=\"line\">hello!Sat, 08 May 2021 06:19:48 UTC,host:http-sample.default-24tqt,ip:10.0.76.95</span><br><span class=\"line\">// v2是且的关系，最后走了默认路由两个实例随机访问</span><br><span class=\"line\">curl  http://10.0.75.173/tov2</span><br><span class=\"line\">hello!Sat, 08 May 2021 06:19:08 UTC,host:http-sample.default-24tqt,ip:10.0.76.95</span><br><span class=\"line\">curl  http://10.0.75.173/tov2</span><br><span class=\"line\">hello!Sat, 08 May 2021 06:19:09 UTC,host:http-sample.default-24tqt,ip:10.0.76.95</span><br><span class=\"line\">curl  http://10.0.75.173/tov2</span><br><span class=\"line\">hello!Sat, 08 May 2021 06:19:09 UTC,host:http-sample.default-crkvp,ip:10.0.76.102</span><br><span class=\"line\">// 匹配v2</span><br><span class=\"line\">curl -H &apos;userpin:yywang&apos;  http://10.0.75.173/tov2</span><br><span class=\"line\">hello!Sat, 08 May 2021 06:26:17 UTC,host:http-sample.default-crkvp,ip:10.0.76.102</span><br></pre></td></tr></table></figure>\n<h4 id=\"流量镜像\"><a href=\"#流量镜像\" class=\"headerlink\" title=\"流量镜像\"></a>流量镜像</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: VirtualService</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  gateways:</span><br><span class=\"line\">  - httpsample-gateway</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  http:</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">    - uri:</span><br><span class=\"line\">        prefix: /tov1</span><br><span class=\"line\">    mirror:</span><br><span class=\"line\">      host: http-sample--default // 流量镜像的目标 Service</span><br><span class=\"line\">      subset: v2 // 流量镜像的目标 子集</span><br><span class=\"line\">    mirror_percent: 100 // 流量镜像的比例</span><br><span class=\"line\">    route:</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br><span class=\"line\">        subset: v1</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">      uri:</span><br><span class=\"line\">        prefix: /tov2</span><br><span class=\"line\">    route:</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br><span class=\"line\">        subset: v2</span><br><span class=\"line\">  - route: </span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br></pre></td></tr></table></figure>\n<p>验证，curl <a href=\"http://10.0.75.173/tov1\" target=\"_blank\" rel=\"noopener\">http://10.0.75.173/tov1</a> 在v2的 Pod 上查看日志</p>\n<h4 id=\"CORS-策略\"><a href=\"#CORS-策略\" class=\"headerlink\" title=\"CORS 策略\"></a>CORS 策略</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: VirtualService</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  gateways:</span><br><span class=\"line\">  - httpsample-gateway</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  http:</span><br><span class=\"line\">  - route:</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br><span class=\"line\">        subset: v2</span><br><span class=\"line\">        weight: 100</span><br><span class=\"line\">    corsPolicy:</span><br><span class=\"line\">      allowOrigin:</span><br><span class=\"line\">      - new.com // 允许浏览器跨域访问的地址</span><br><span class=\"line\">      allowMethods:</span><br><span class=\"line\">      - GET // 允许浏览器跨域访问的请求方法</span><br><span class=\"line\">      maxAge: &quot;2m&quot; // 跨域请求缓存的时间</span><br></pre></td></tr></table></figure>\n<p>目前没有遇到这个策略的场景，就没有做验证，据了解 CORS 会给原请求添加头信息，可以查看请求头验证，<a href=\"https://zhuanlan.zhihu.com/p/264800677\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h4 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: VirtualService</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  gateways:</span><br><span class=\"line\">  - httpsample-gateway</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  http:</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">    - uri:</span><br><span class=\"line\">        prefix: /tov1</span><br><span class=\"line\">    redirect:</span><br><span class=\"line\">      uri: /tov2 // 重定向的路径</span><br><span class=\"line\">      authority: 172.16.26.126:8386 // 重定向的主机，不配置就是当前主机，这个是我本地的地址和端口</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">      uri:</span><br><span class=\"line\">        prefix: /tov2</span><br><span class=\"line\">    route:</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br><span class=\"line\">        subset: v2</span><br></pre></td></tr></table></figure>\n<p>验证：curl <a href=\"http://10.0.75.173/tov1\" target=\"_blank\" rel=\"noopener\">http://10.0.75.173/tov1</a> 查看本地日志发现被路由到了本地</p>\n<h4 id=\"重写\"><a href=\"#重写\" class=\"headerlink\" title=\"重写\"></a>重写</h4><p>类似于请求转发，浏览器 URL 不会变，由服务器转发新地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: VirtualService</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  gateways:</span><br><span class=\"line\">  - httpsample-gateway</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  http:</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">    - uri:</span><br><span class=\"line\">        prefix: /tov1</span><br><span class=\"line\">    rewrite:</span><br><span class=\"line\">      uri: /print // 重写的路径</span><br><span class=\"line\">      authority: 172.16.26.126:8386 // 重写的主机</span><br><span class=\"line\">    route:</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br><span class=\"line\">        subset: v1</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">      uri:</span><br><span class=\"line\">        prefix: /tov2</span><br><span class=\"line\">    route:</span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br><span class=\"line\">        subset: v2</span><br></pre></td></tr></table></figure>\n<p>验证方式同重定向一样，有一点区别的是重写下面还可以配置路由，如果没有配置重写的主机名默认会路由到下面的子集，上面的例子如果没有配置重写的主机会路由<br>到v1的 /print 的 path 上</p>\n<h4 id=\"重试\"><a href=\"#重试\" class=\"headerlink\" title=\"重试\"></a>重试</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: VirtualService</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  gateways:</span><br><span class=\"line\">  - httpsample-gateway</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  http:</span><br><span class=\"line\">  - route: </span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br><span class=\"line\">    retries:</span><br><span class=\"line\">      attempts: 3 // 重试次数</span><br><span class=\"line\">      perTryTimeout: 2s // 重试超时等待时间</span><br><span class=\"line\">      retryOn: 5xx,connect-failure // 重试条件 5xx 状态码或者连接失败</span><br></pre></td></tr></table></figure>\n<p>验证，Demo 中有一个返回500错误的方法，curl <a href=\"http://10.0.75.173/error500\" target=\"_blank\" rel=\"noopener\">http://10.0.75.173/error500</a> 打开两个 Pod 的实例观察请求的日志，加上重试一共请求4次</p>\n<h4 id=\"故障注入\"><a href=\"#故障注入\" class=\"headerlink\" title=\"故障注入\"></a>故障注入</h4><h5 id=\"延迟故障\"><a href=\"#延迟故障\" class=\"headerlink\" title=\"延迟故障\"></a>延迟故障</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: VirtualService</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  gateways:</span><br><span class=\"line\">  - httpsample-gateway</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  http:</span><br><span class=\"line\">  - fault:</span><br><span class=\"line\">      delay: // 注入延迟故障</span><br><span class=\"line\">        percentage:</span><br><span class=\"line\">          value: 10 // 注入百分比</span><br><span class=\"line\">        fixedDelay: 5s // 延迟时间</span><br><span class=\"line\">  - route: </span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br></pre></td></tr></table></figure>\n<h5 id=\"错误故障\"><a href=\"#错误故障\" class=\"headerlink\" title=\"错误故障\"></a>错误故障</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: VirtualService</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  gateways:</span><br><span class=\"line\">  - httpsample-gateway</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - &apos;*&apos;</span><br><span class=\"line\">  http:</span><br><span class=\"line\">  - fault:</span><br><span class=\"line\">      abort: // 错误故障</span><br><span class=\"line\">        percentage:</span><br><span class=\"line\">          value: 10 // 注入百分比 </span><br><span class=\"line\">        httpStatus: 500 // 响应状态码</span><br><span class=\"line\">  - route: </span><br><span class=\"line\">    - destination:</span><br><span class=\"line\">        host: http-sample--default</span><br><span class=\"line\">        port:</span><br><span class=\"line\">          number: 8386</span><br></pre></td></tr></table></figure>\n<p>curl <a href=\"http://10.0.75.173\" target=\"_blank\" rel=\"noopener\">http://10.0.75.173</a> 即可验证</p>\n<h4 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h4><p>Istio 除了 Service 本身带有的负载均衡，在 DestinationRule 中可以配置子集的负载均衡，支持更多算法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: DestinationRule</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  host: http-sample--default</span><br><span class=\"line\">  subsets:</span><br><span class=\"line\">  - labels:</span><br><span class=\"line\">      version: v1</span><br><span class=\"line\">      app: http-sample</span><br><span class=\"line\">    name: v1</span><br><span class=\"line\">    trafficPolicy:</span><br><span class=\"line\">      lodaBalancer: // 负载均衡配置</span><br><span class=\"line\">        simple: ROUND_ROBIN // 轮询负载均衡算法，还支持随机算法(RANDOM)，最少连接(LEAST_CONN)，直接转发(PASSTHROUTE)</span><br></pre></td></tr></table></figure>\n<h4 id=\"异常检测-熔断限流\"><a href=\"#异常检测-熔断限流\" class=\"headerlink\" title=\"异常检测 - 熔断限流\"></a>异常检测 - 熔断限流</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">apiVersion: networking.istio.io/v1beta1</span><br><span class=\"line\">kind: DestinationRule</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  host: http-sample--default</span><br><span class=\"line\">  subsets:</span><br><span class=\"line\">  - labels:</span><br><span class=\"line\">      version: v1</span><br><span class=\"line\">      app: http-sample</span><br><span class=\"line\">    name: v1</span><br><span class=\"line\">  - labels:</span><br><span class=\"line\">      version: v2</span><br><span class=\"line\">      app: http-sample</span><br><span class=\"line\">    name: v2</span><br><span class=\"line\">  trafficPolicy:</span><br><span class=\"line\">    connectionPool:</span><br><span class=\"line\">      http:</span><br><span class=\"line\">        http1MaxPendingRequests: 1 // 最大请求等待数</span><br><span class=\"line\">        maxRequestsPerConnection: 1 // 每个连接最大请求数</span><br><span class=\"line\">      tcp:</span><br><span class=\"line\">        macConnections: 1 // 最大连接数</span><br><span class=\"line\">    outlierDetection:</span><br><span class=\"line\">      baseEjectionTime: 100s // 基础熔断时间，实际时间是 = 基础熔断时间 x 熔断次数</span><br><span class=\"line\">      consecutiveErrors: 1 // 触发熔断的连续错误次数</span><br><span class=\"line\">      maxEjectionPercent: 100 // 熔断实例的比例，100%即为所有实例都可以同时熔断</span><br></pre></td></tr></table></figure>\n<p>验证，这里通过 fortio 验证了限流，再高于5个连接并发的情况下会有部分请求失败被限流，熔断还还不知道怎么验证，感觉应该没问题后面验证了再补充上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">fortio load -c 5 -qps 0 -n 100 -loglevel Warning http://10.0.75.173</span><br><span class=\"line\">17:45:28 I logger.go:127&gt; Log level is now 3 Warning (was 2 Info)</span><br><span class=\"line\">Fortio 1.14.1 running at 0 queries per second, 8-&gt;8 procs, for 100 calls: http://10.0.75.173</span><br><span class=\"line\">Starting at max qps with 5 thread(s) [gomax 8] for exactly 100 calls (20 per thread + 0)</span><br><span class=\"line\">17:45:28 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:28 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:28 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:28 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:28 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:28 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:28 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:28 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:28 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:28 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:28 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:29 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:29 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:29 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:29 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:29 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:29 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">17:45:29 W http_client.go:781&gt; Parsed non ok code 503 (HTTP/1.1 503)</span><br><span class=\"line\">Ended after 181.75592ms : 100 calls. qps=550.19</span><br><span class=\"line\">Aggregated Function Time : count 100 avg 0.0084987707 +/- 0.003829 min 0.003318402 max 0.01871654 sum 0.849877069</span><br><span class=\"line\"># range, mid point, percentile, count</span><br><span class=\"line\">&gt;= 0.0033184 &lt;= 0.004 , 0.0036592 , 8.00, 8</span><br><span class=\"line\">&gt; 0.004 &lt;= 0.005 , 0.0045 , 15.00, 7</span><br><span class=\"line\">&gt; 0.005 &lt;= 0.006 , 0.0055 , 26.00, 11</span><br><span class=\"line\">&gt; 0.006 &lt;= 0.007 , 0.0065 , 44.00, 18</span><br><span class=\"line\">&gt; 0.007 &lt;= 0.008 , 0.0075 , 58.00, 14</span><br><span class=\"line\">&gt; 0.008 &lt;= 0.009 , 0.0085 , 64.00, 6</span><br><span class=\"line\">&gt; 0.009 &lt;= 0.01 , 0.0095 , 73.00, 9</span><br><span class=\"line\">&gt; 0.01 &lt;= 0.011 , 0.0105 , 75.00, 2</span><br><span class=\"line\">&gt; 0.011 &lt;= 0.012 , 0.0115 , 80.00, 5</span><br><span class=\"line\">&gt; 0.012 &lt;= 0.014 , 0.013 , 88.00, 8</span><br><span class=\"line\">&gt; 0.014 &lt;= 0.016 , 0.015 , 94.00, 6</span><br><span class=\"line\">&gt; 0.016 &lt;= 0.018 , 0.017 , 98.00, 4</span><br><span class=\"line\">&gt; 0.018 &lt;= 0.0187165 , 0.0183583 , 100.00, 2</span><br><span class=\"line\"># target 50% 0.00742857</span><br><span class=\"line\"># target 75% 0.011</span><br><span class=\"line\"># target 90% 0.0146667</span><br><span class=\"line\"># target 99% 0.0183583</span><br><span class=\"line\"># target 99.9% 0.0186807</span><br><span class=\"line\">Sockets used: 23 (for perfect keepalive, would be 5)</span><br><span class=\"line\">Jitter: false</span><br><span class=\"line\">Code 200 : 82 (82.0 %)</span><br><span class=\"line\">Code 503 : 18 (18.0 %)</span><br><span class=\"line\">Response Header Sizes : count 100 avg 141.04 +/- 66.08 min 0 max 172 sum 14104</span><br><span class=\"line\">Response Body/Total Sizes : count 100 avg 252.32 +/- 2.533 min 247 max 254 sum 25232</span><br><span class=\"line\">All done 100 calls (plus 0 warmup) 8.499 ms avg, 550.2 qps</span><br></pre></td></tr></table></figure>\n"},{"title":"Java NIO","author":"YyWang","date":"2020-10-23T09:19:32.000Z","_content":"\n开门见山，最近打算看一下netty，做这么长时间微服务netty还没看过是不是太飘了，这篇是netty的背景知识\n\n### NIO\n\nNon-blocking I/O 非阻塞I/O；与传统阻塞I/O相比最大的时阻塞和非阻塞的区别；除此之外NIO操作的是缓冲区，以块的形式处理数据，传统I/O以数据流的形式处理数据；而且NIO支持了Selector；我的简单理解，传统I/O相当于拿一根水管（单向的）插入到水桶里，让水从水桶中流出，从水管中得到水（数据）；NIO则是用水管（双向的水管？栗子可能比较糙但就是这么个意思）将桶中的水流入一个小水池中（缓冲区），从小水池中得到水（数据）；所以基于流的读写只能按顺序来，不能改变读写的位置，且只能是单向的，而对于缓冲区的数据来说就可以随意修改读写的指针了\n\n#### Channel\n\t\n* 用来进行IO操作（文件IO或网络IO），与BIO的Stream类似，不同的时Channel是双向的Stream只能是单向的；Channel读写的对象是Buffer\n\n#### Buffer\n\t\n* 用来存放Channel读写的数据，其实就是内存中的一块区域，保存不同类型的数据(ByteBuffer，CharBuffer等，可以理解为数组，字节数组，字符数组等)；首先通过Channel将数据写入到Buffer中，再对Buffer进行读写，flip()切换到读模式，clear()或compact()切换到写模式\n\t* 对Buffer每次读写之后Buffer都会记录当前的状态，通过capacity（Buffer的最大值），position（下次读或写的位置，每次读写后更新），limit（Buffer中数据的大小）三个属性；0 <= position <= limit <= capacity\n\t* 向缓冲区写入数据时，limit = capacity， position = 下一次写入的位置（初始为0）；如果想读出缓冲区的数据，调用filp()方法切换为读，limit = 下一次写入的位置（即读的边界），position = 0（从头开始读）；读完数据想要继续写，调用clear()方法，并不是缓冲区里的数据清空，而是将position重新指向0，limit = capacity 与写的状态一样，新写入的数据会覆盖到缓冲区中；compact()方法，将读模式下position-limit的数据复制到buffer的开头，相当与将已经读过的数据覆盖掉，limit = capacity，position = limit - position\n\n#### Selector\n  * NIO非阻塞的特性，可以通过Selector使用一个线程监听多个Channel的IO事件，方法是将所有Channel注册到Selector中(这里Channel必须是非阻塞的)，并注册感兴趣的事件，Selector#select方法找到事件发生的Channel进行下一步工作，select这一步是阻塞的如果事件没有发生将一直阻塞，select的操作系统的实现为IO多路复用技术（select，poll，epoll），Linux下使用epoll\n\n简单罗列一下IO模型，和相关实现\n\n##### 阻塞I/O\n线程发起I/O请求会一直阻塞等待I/O条件就绪\n##### 非阻塞I/O\n线程发起I/O请求后，如果I/O条件不是就绪状态立即返回一个状态不会一直等待，可以先做其他的任务，间隔一段时间查看I/O条件是否就绪，如果就绪进行下一步操作\n##### 多路复用I/O\n非阻塞I/O线程需要一直去询问I/O事件是否就绪，如果线程很多每个线程都不听的去轮询I/O事件必将造成资源的浪费；多路复用I/O将所有线程的I/O请求注册到一个新的线程中（select），由这一个线程进行轮询去查看I/O条件是否就绪，有就绪状态就通知对应的线程进行处理；相当于是把非阻塞I/O中多线程查看I/O条件的事情委托给了单独的一个线程，提高了系统的吞吐量；\n\n在Linux中该模型的实现有select，poll和epoll的系统调用，服务端接受连接，select和poll都会将连接感兴趣的I/O事件保存到一个集合中（fd集合，在Linux中I/O是文件），每次Selector#select传递给内核，内核去寻找集合中满足条件的I/O，返回满足条件的数量，用户线程得到满足I/O条件的数量，需要再次遍历集合找到满足I/O条件的连接进行下一步操作，时间复杂度为O(2n)；epoll使用事件驱动模式，首先将连接感兴趣的I/O注册到内核，并且注册了一个回调函数，当满足I/O条件会发生回调将该I/O对应的fd移动到内核中的就绪队列，每次select只需从就绪队列中读取具备I/O条件的数量即可，再进行下一步的操作，当有m（m<=n）个连接具备条件，时间复杂度为O(m)\n\n##### 信号驱动I/O\n这个感觉和多路复用I/O差不多，这里将多线程的I/O操作注册为一个信号，信号中有回调函数，当信号发生call回调函数通知用户线程，先简单这么理解\n##### 异步I/O\n线程发出I/O请求后不需要做任何操作，I/O操作完全由操作系统内核完成，之后会通知线程I/O已经完成\n\n具体例子可以参考[这里](https://segmentfault.com/a/1190000006824091)\n","source":"_posts/JavaNIO.md","raw":"title: Java NIO\nauthor: YyWang\ntags: Java\ncategories: Java\ndate: 2020-10-23 17:19:32\n---\n\n开门见山，最近打算看一下netty，做这么长时间微服务netty还没看过是不是太飘了，这篇是netty的背景知识\n\n### NIO\n\nNon-blocking I/O 非阻塞I/O；与传统阻塞I/O相比最大的时阻塞和非阻塞的区别；除此之外NIO操作的是缓冲区，以块的形式处理数据，传统I/O以数据流的形式处理数据；而且NIO支持了Selector；我的简单理解，传统I/O相当于拿一根水管（单向的）插入到水桶里，让水从水桶中流出，从水管中得到水（数据）；NIO则是用水管（双向的水管？栗子可能比较糙但就是这么个意思）将桶中的水流入一个小水池中（缓冲区），从小水池中得到水（数据）；所以基于流的读写只能按顺序来，不能改变读写的位置，且只能是单向的，而对于缓冲区的数据来说就可以随意修改读写的指针了\n\n#### Channel\n\t\n* 用来进行IO操作（文件IO或网络IO），与BIO的Stream类似，不同的时Channel是双向的Stream只能是单向的；Channel读写的对象是Buffer\n\n#### Buffer\n\t\n* 用来存放Channel读写的数据，其实就是内存中的一块区域，保存不同类型的数据(ByteBuffer，CharBuffer等，可以理解为数组，字节数组，字符数组等)；首先通过Channel将数据写入到Buffer中，再对Buffer进行读写，flip()切换到读模式，clear()或compact()切换到写模式\n\t* 对Buffer每次读写之后Buffer都会记录当前的状态，通过capacity（Buffer的最大值），position（下次读或写的位置，每次读写后更新），limit（Buffer中数据的大小）三个属性；0 <= position <= limit <= capacity\n\t* 向缓冲区写入数据时，limit = capacity， position = 下一次写入的位置（初始为0）；如果想读出缓冲区的数据，调用filp()方法切换为读，limit = 下一次写入的位置（即读的边界），position = 0（从头开始读）；读完数据想要继续写，调用clear()方法，并不是缓冲区里的数据清空，而是将position重新指向0，limit = capacity 与写的状态一样，新写入的数据会覆盖到缓冲区中；compact()方法，将读模式下position-limit的数据复制到buffer的开头，相当与将已经读过的数据覆盖掉，limit = capacity，position = limit - position\n\n#### Selector\n  * NIO非阻塞的特性，可以通过Selector使用一个线程监听多个Channel的IO事件，方法是将所有Channel注册到Selector中(这里Channel必须是非阻塞的)，并注册感兴趣的事件，Selector#select方法找到事件发生的Channel进行下一步工作，select这一步是阻塞的如果事件没有发生将一直阻塞，select的操作系统的实现为IO多路复用技术（select，poll，epoll），Linux下使用epoll\n\n简单罗列一下IO模型，和相关实现\n\n##### 阻塞I/O\n线程发起I/O请求会一直阻塞等待I/O条件就绪\n##### 非阻塞I/O\n线程发起I/O请求后，如果I/O条件不是就绪状态立即返回一个状态不会一直等待，可以先做其他的任务，间隔一段时间查看I/O条件是否就绪，如果就绪进行下一步操作\n##### 多路复用I/O\n非阻塞I/O线程需要一直去询问I/O事件是否就绪，如果线程很多每个线程都不听的去轮询I/O事件必将造成资源的浪费；多路复用I/O将所有线程的I/O请求注册到一个新的线程中（select），由这一个线程进行轮询去查看I/O条件是否就绪，有就绪状态就通知对应的线程进行处理；相当于是把非阻塞I/O中多线程查看I/O条件的事情委托给了单独的一个线程，提高了系统的吞吐量；\n\n在Linux中该模型的实现有select，poll和epoll的系统调用，服务端接受连接，select和poll都会将连接感兴趣的I/O事件保存到一个集合中（fd集合，在Linux中I/O是文件），每次Selector#select传递给内核，内核去寻找集合中满足条件的I/O，返回满足条件的数量，用户线程得到满足I/O条件的数量，需要再次遍历集合找到满足I/O条件的连接进行下一步操作，时间复杂度为O(2n)；epoll使用事件驱动模式，首先将连接感兴趣的I/O注册到内核，并且注册了一个回调函数，当满足I/O条件会发生回调将该I/O对应的fd移动到内核中的就绪队列，每次select只需从就绪队列中读取具备I/O条件的数量即可，再进行下一步的操作，当有m（m<=n）个连接具备条件，时间复杂度为O(m)\n\n##### 信号驱动I/O\n这个感觉和多路复用I/O差不多，这里将多线程的I/O操作注册为一个信号，信号中有回调函数，当信号发生call回调函数通知用户线程，先简单这么理解\n##### 异步I/O\n线程发出I/O请求后不需要做任何操作，I/O操作完全由操作系统内核完成，之后会通知线程I/O已经完成\n\n具体例子可以参考[这里](https://segmentfault.com/a/1190000006824091)\n","slug":"JavaNIO","published":1,"updated":"2021-07-13T12:27:08.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj6v001081fycum0wyho","content":"<p>开门见山，最近打算看一下netty，做这么长时间微服务netty还没看过是不是太飘了，这篇是netty的背景知识</p>\n<h3 id=\"NIO\"><a href=\"#NIO\" class=\"headerlink\" title=\"NIO\"></a>NIO</h3><p>Non-blocking I/O 非阻塞I/O；与传统阻塞I/O相比最大的时阻塞和非阻塞的区别；除此之外NIO操作的是缓冲区，以块的形式处理数据，传统I/O以数据流的形式处理数据；而且NIO支持了Selector；我的简单理解，传统I/O相当于拿一根水管（单向的）插入到水桶里，让水从水桶中流出，从水管中得到水（数据）；NIO则是用水管（双向的水管？栗子可能比较糙但就是这么个意思）将桶中的水流入一个小水池中（缓冲区），从小水池中得到水（数据）；所以基于流的读写只能按顺序来，不能改变读写的位置，且只能是单向的，而对于缓冲区的数据来说就可以随意修改读写的指针了</p>\n<h4 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h4><ul>\n<li>用来进行IO操作（文件IO或网络IO），与BIO的Stream类似，不同的时Channel是双向的Stream只能是单向的；Channel读写的对象是Buffer</li>\n</ul>\n<h4 id=\"Buffer\"><a href=\"#Buffer\" class=\"headerlink\" title=\"Buffer\"></a>Buffer</h4><ul>\n<li>用来存放Channel读写的数据，其实就是内存中的一块区域，保存不同类型的数据(ByteBuffer，CharBuffer等，可以理解为数组，字节数组，字符数组等)；首先通过Channel将数据写入到Buffer中，再对Buffer进行读写，flip()切换到读模式，clear()或compact()切换到写模式<ul>\n<li>对Buffer每次读写之后Buffer都会记录当前的状态，通过capacity（Buffer的最大值），position（下次读或写的位置，每次读写后更新），limit（Buffer中数据的大小）三个属性；0 &lt;= position &lt;= limit &lt;= capacity</li>\n<li>向缓冲区写入数据时，limit = capacity， position = 下一次写入的位置（初始为0）；如果想读出缓冲区的数据，调用filp()方法切换为读，limit = 下一次写入的位置（即读的边界），position = 0（从头开始读）；读完数据想要继续写，调用clear()方法，并不是缓冲区里的数据清空，而是将position重新指向0，limit = capacity 与写的状态一样，新写入的数据会覆盖到缓冲区中；compact()方法，将读模式下position-limit的数据复制到buffer的开头，相当与将已经读过的数据覆盖掉，limit = capacity，position = limit - position</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Selector\"><a href=\"#Selector\" class=\"headerlink\" title=\"Selector\"></a>Selector</h4><ul>\n<li>NIO非阻塞的特性，可以通过Selector使用一个线程监听多个Channel的IO事件，方法是将所有Channel注册到Selector中(这里Channel必须是非阻塞的)，并注册感兴趣的事件，Selector#select方法找到事件发生的Channel进行下一步工作，select这一步是阻塞的如果事件没有发生将一直阻塞，select的操作系统的实现为IO多路复用技术（select，poll，epoll），Linux下使用epoll</li>\n</ul>\n<p>简单罗列一下IO模型，和相关实现</p>\n<h5 id=\"阻塞I-O\"><a href=\"#阻塞I-O\" class=\"headerlink\" title=\"阻塞I/O\"></a>阻塞I/O</h5><p>线程发起I/O请求会一直阻塞等待I/O条件就绪</p>\n<h5 id=\"非阻塞I-O\"><a href=\"#非阻塞I-O\" class=\"headerlink\" title=\"非阻塞I/O\"></a>非阻塞I/O</h5><p>线程发起I/O请求后，如果I/O条件不是就绪状态立即返回一个状态不会一直等待，可以先做其他的任务，间隔一段时间查看I/O条件是否就绪，如果就绪进行下一步操作</p>\n<h5 id=\"多路复用I-O\"><a href=\"#多路复用I-O\" class=\"headerlink\" title=\"多路复用I/O\"></a>多路复用I/O</h5><p>非阻塞I/O线程需要一直去询问I/O事件是否就绪，如果线程很多每个线程都不听的去轮询I/O事件必将造成资源的浪费；多路复用I/O将所有线程的I/O请求注册到一个新的线程中（select），由这一个线程进行轮询去查看I/O条件是否就绪，有就绪状态就通知对应的线程进行处理；相当于是把非阻塞I/O中多线程查看I/O条件的事情委托给了单独的一个线程，提高了系统的吞吐量；</p>\n<p>在Linux中该模型的实现有select，poll和epoll的系统调用，服务端接受连接，select和poll都会将连接感兴趣的I/O事件保存到一个集合中（fd集合，在Linux中I/O是文件），每次Selector#select传递给内核，内核去寻找集合中满足条件的I/O，返回满足条件的数量，用户线程得到满足I/O条件的数量，需要再次遍历集合找到满足I/O条件的连接进行下一步操作，时间复杂度为O(2n)；epoll使用事件驱动模式，首先将连接感兴趣的I/O注册到内核，并且注册了一个回调函数，当满足I/O条件会发生回调将该I/O对应的fd移动到内核中的就绪队列，每次select只需从就绪队列中读取具备I/O条件的数量即可，再进行下一步的操作，当有m（m&lt;=n）个连接具备条件，时间复杂度为O(m)</p>\n<h5 id=\"信号驱动I-O\"><a href=\"#信号驱动I-O\" class=\"headerlink\" title=\"信号驱动I/O\"></a>信号驱动I/O</h5><p>这个感觉和多路复用I/O差不多，这里将多线程的I/O操作注册为一个信号，信号中有回调函数，当信号发生call回调函数通知用户线程，先简单这么理解</p>\n<h5 id=\"异步I-O\"><a href=\"#异步I-O\" class=\"headerlink\" title=\"异步I/O\"></a>异步I/O</h5><p>线程发出I/O请求后不需要做任何操作，I/O操作完全由操作系统内核完成，之后会通知线程I/O已经完成</p>\n<p>具体例子可以参考<a href=\"https://segmentfault.com/a/1190000006824091\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>开门见山，最近打算看一下netty，做这么长时间微服务netty还没看过是不是太飘了，这篇是netty的背景知识</p>\n<h3 id=\"NIO\"><a href=\"#NIO\" class=\"headerlink\" title=\"NIO\"></a>NIO</h3><p>Non-blocking I/O 非阻塞I/O；与传统阻塞I/O相比最大的时阻塞和非阻塞的区别；除此之外NIO操作的是缓冲区，以块的形式处理数据，传统I/O以数据流的形式处理数据；而且NIO支持了Selector；我的简单理解，传统I/O相当于拿一根水管（单向的）插入到水桶里，让水从水桶中流出，从水管中得到水（数据）；NIO则是用水管（双向的水管？栗子可能比较糙但就是这么个意思）将桶中的水流入一个小水池中（缓冲区），从小水池中得到水（数据）；所以基于流的读写只能按顺序来，不能改变读写的位置，且只能是单向的，而对于缓冲区的数据来说就可以随意修改读写的指针了</p>\n<h4 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h4><ul>\n<li>用来进行IO操作（文件IO或网络IO），与BIO的Stream类似，不同的时Channel是双向的Stream只能是单向的；Channel读写的对象是Buffer</li>\n</ul>\n<h4 id=\"Buffer\"><a href=\"#Buffer\" class=\"headerlink\" title=\"Buffer\"></a>Buffer</h4><ul>\n<li>用来存放Channel读写的数据，其实就是内存中的一块区域，保存不同类型的数据(ByteBuffer，CharBuffer等，可以理解为数组，字节数组，字符数组等)；首先通过Channel将数据写入到Buffer中，再对Buffer进行读写，flip()切换到读模式，clear()或compact()切换到写模式<ul>\n<li>对Buffer每次读写之后Buffer都会记录当前的状态，通过capacity（Buffer的最大值），position（下次读或写的位置，每次读写后更新），limit（Buffer中数据的大小）三个属性；0 &lt;= position &lt;= limit &lt;= capacity</li>\n<li>向缓冲区写入数据时，limit = capacity， position = 下一次写入的位置（初始为0）；如果想读出缓冲区的数据，调用filp()方法切换为读，limit = 下一次写入的位置（即读的边界），position = 0（从头开始读）；读完数据想要继续写，调用clear()方法，并不是缓冲区里的数据清空，而是将position重新指向0，limit = capacity 与写的状态一样，新写入的数据会覆盖到缓冲区中；compact()方法，将读模式下position-limit的数据复制到buffer的开头，相当与将已经读过的数据覆盖掉，limit = capacity，position = limit - position</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Selector\"><a href=\"#Selector\" class=\"headerlink\" title=\"Selector\"></a>Selector</h4><ul>\n<li>NIO非阻塞的特性，可以通过Selector使用一个线程监听多个Channel的IO事件，方法是将所有Channel注册到Selector中(这里Channel必须是非阻塞的)，并注册感兴趣的事件，Selector#select方法找到事件发生的Channel进行下一步工作，select这一步是阻塞的如果事件没有发生将一直阻塞，select的操作系统的实现为IO多路复用技术（select，poll，epoll），Linux下使用epoll</li>\n</ul>\n<p>简单罗列一下IO模型，和相关实现</p>\n<h5 id=\"阻塞I-O\"><a href=\"#阻塞I-O\" class=\"headerlink\" title=\"阻塞I/O\"></a>阻塞I/O</h5><p>线程发起I/O请求会一直阻塞等待I/O条件就绪</p>\n<h5 id=\"非阻塞I-O\"><a href=\"#非阻塞I-O\" class=\"headerlink\" title=\"非阻塞I/O\"></a>非阻塞I/O</h5><p>线程发起I/O请求后，如果I/O条件不是就绪状态立即返回一个状态不会一直等待，可以先做其他的任务，间隔一段时间查看I/O条件是否就绪，如果就绪进行下一步操作</p>\n<h5 id=\"多路复用I-O\"><a href=\"#多路复用I-O\" class=\"headerlink\" title=\"多路复用I/O\"></a>多路复用I/O</h5><p>非阻塞I/O线程需要一直去询问I/O事件是否就绪，如果线程很多每个线程都不听的去轮询I/O事件必将造成资源的浪费；多路复用I/O将所有线程的I/O请求注册到一个新的线程中（select），由这一个线程进行轮询去查看I/O条件是否就绪，有就绪状态就通知对应的线程进行处理；相当于是把非阻塞I/O中多线程查看I/O条件的事情委托给了单独的一个线程，提高了系统的吞吐量；</p>\n<p>在Linux中该模型的实现有select，poll和epoll的系统调用，服务端接受连接，select和poll都会将连接感兴趣的I/O事件保存到一个集合中（fd集合，在Linux中I/O是文件），每次Selector#select传递给内核，内核去寻找集合中满足条件的I/O，返回满足条件的数量，用户线程得到满足I/O条件的数量，需要再次遍历集合找到满足I/O条件的连接进行下一步操作，时间复杂度为O(2n)；epoll使用事件驱动模式，首先将连接感兴趣的I/O注册到内核，并且注册了一个回调函数，当满足I/O条件会发生回调将该I/O对应的fd移动到内核中的就绪队列，每次select只需从就绪队列中读取具备I/O条件的数量即可，再进行下一步的操作，当有m（m&lt;=n）个连接具备条件，时间复杂度为O(m)</p>\n<h5 id=\"信号驱动I-O\"><a href=\"#信号驱动I-O\" class=\"headerlink\" title=\"信号驱动I/O\"></a>信号驱动I/O</h5><p>这个感觉和多路复用I/O差不多，这里将多线程的I/O操作注册为一个信号，信号中有回调函数，当信号发生call回调函数通知用户线程，先简单这么理解</p>\n<h5 id=\"异步I-O\"><a href=\"#异步I-O\" class=\"headerlink\" title=\"异步I/O\"></a>异步I/O</h5><p>线程发出I/O请求后不需要做任何操作，I/O操作完全由操作系统内核完成，之后会通知线程I/O已经完成</p>\n<p>具体例子可以参考<a href=\"https://segmentfault.com/a/1190000006824091\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n"},{"title":"MyBatis入门","author":"YyWang","catagories":"MyBatis","date":"2019-07-12T05:16:20.000Z","_content":"#### MyBatis环境\n\n##### 首先准备数据库表\n+ 对应的实体类为\n- ```public class User {\n    private int id;\n    private String name;\n    private String sex;\n    private int age;\n    private String desc;\n   }```\n\n##### 数据库配置文件 *SqlMapConfig.xml*\n+ 配置数据库环境相关\n- ```\n<environments default=\"development\">\n        <environment id=\"development\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/>\n                <property name=\"url\" value=\"jdbc:mysql://localhost:3306/test?characterEncoding=utf-8\"/>\n                <property name=\"username\" value=\"root\"/>\n                <property name=\"password\" value=\"root\"/>\n            </dataSource>\n        </environment>\n </environments>```\n  \n##### sql映射文件 *user.xml*\n+ ```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"test\">\n    <select id=\"findUserById\" parameterType=\"int\" resultType=\"com.example.mybatisdemo.bean.User\">\n        SELECT * FROM user WHERE id =#{VALUE}\n    </select>\n</mapper>\n```\n\n##### 将sql映射添加到SqlMapConfig.xml中\n+ 最终的配置文件为\n- ```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <environments default=\"development\">\n        <environment id=\"development\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/>\n                <property name=\"url\" value=\"jdbc:mysql://localhost:3306/test?characterEncoding=utf-8\"/>\n                <property name=\"username\" value=\"root\"/>\n                <property name=\"password\" value=\"root\"/>\n            </dataSource>\n        </environment>\n    </environments>\n    <mappers>\n        <mapper resource=\"mapper/user.xml\"/>\n    </mappers>\n</configuration>```\n\n##### 测试\n+ ```\nString resource = \"SqlMapConfig.xml\";\n        InputStream inputStream = Resources.getResourceAsStream(resource);\n        SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(inputStream);\n        SqlSession sqlSession = factory.openSession();\n        // 参数1 sql映射中的 namespace + \".\" + sqlId\n        // 参数2为sql的参数\n        User user = sqlSession.selectOne(\"test.findUserById\", 1);\n        System.out.println(user.toString());\n        sqlSession.close();```\n\n#### 理解\n*基于sql语句的轻量级ORM框架，将sql语句写入配置文件映射中，进一步解耦，但是多了一步操作感觉比hibernate繁琐一些，但是比hibernate要快，有舍有得吧（为什么快还不知道，后续再看吧╮(╯▽╰)╭ ）*\n","source":"_posts/MyBatis入门.md","raw":"title: MyBatis入门\nauthor: YyWang\ntags: MyBatis\ncatagories: MyBatis\ndate: 2019-07-12 13:16:20\n---\n#### MyBatis环境\n\n##### 首先准备数据库表\n+ 对应的实体类为\n- ```public class User {\n    private int id;\n    private String name;\n    private String sex;\n    private int age;\n    private String desc;\n   }```\n\n##### 数据库配置文件 *SqlMapConfig.xml*\n+ 配置数据库环境相关\n- ```\n<environments default=\"development\">\n        <environment id=\"development\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/>\n                <property name=\"url\" value=\"jdbc:mysql://localhost:3306/test?characterEncoding=utf-8\"/>\n                <property name=\"username\" value=\"root\"/>\n                <property name=\"password\" value=\"root\"/>\n            </dataSource>\n        </environment>\n </environments>```\n  \n##### sql映射文件 *user.xml*\n+ ```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"test\">\n    <select id=\"findUserById\" parameterType=\"int\" resultType=\"com.example.mybatisdemo.bean.User\">\n        SELECT * FROM user WHERE id =#{VALUE}\n    </select>\n</mapper>\n```\n\n##### 将sql映射添加到SqlMapConfig.xml中\n+ 最终的配置文件为\n- ```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <environments default=\"development\">\n        <environment id=\"development\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/>\n                <property name=\"url\" value=\"jdbc:mysql://localhost:3306/test?characterEncoding=utf-8\"/>\n                <property name=\"username\" value=\"root\"/>\n                <property name=\"password\" value=\"root\"/>\n            </dataSource>\n        </environment>\n    </environments>\n    <mappers>\n        <mapper resource=\"mapper/user.xml\"/>\n    </mappers>\n</configuration>```\n\n##### 测试\n+ ```\nString resource = \"SqlMapConfig.xml\";\n        InputStream inputStream = Resources.getResourceAsStream(resource);\n        SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(inputStream);\n        SqlSession sqlSession = factory.openSession();\n        // 参数1 sql映射中的 namespace + \".\" + sqlId\n        // 参数2为sql的参数\n        User user = sqlSession.selectOne(\"test.findUserById\", 1);\n        System.out.println(user.toString());\n        sqlSession.close();```\n\n#### 理解\n*基于sql语句的轻量级ORM框架，将sql语句写入配置文件映射中，进一步解耦，但是多了一步操作感觉比hibernate繁琐一些，但是比hibernate要快，有舍有得吧（为什么快还不知道，后续再看吧╮(╯▽╰)╭ ）*\n","slug":"MyBatis入门","published":1,"updated":"2021-07-13T12:27:08.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj6w001281fy1s4qup7f","content":"<h4 id=\"MyBatis环境\"><a href=\"#MyBatis环境\" class=\"headerlink\" title=\"MyBatis环境\"></a>MyBatis环境</h4><h5 id=\"首先准备数据库表\"><a href=\"#首先准备数据库表\" class=\"headerlink\" title=\"首先准备数据库表\"></a>首先准备数据库表</h5><ul>\n<li>对应的实体类为</li>\n</ul>\n<ul>\n<li><figure class=\"highlight plain\"><figcaption><span>class User &#123;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> private int id;</span><br><span class=\"line\"> private String name;</span><br><span class=\"line\"> private String sex;</span><br><span class=\"line\"> private int age;</span><br><span class=\"line\"> private String desc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"数据库配置文件-SqlMapConfig-xml\"><a href=\"#数据库配置文件-SqlMapConfig-xml\" class=\"headerlink\" title=\"数据库配置文件 SqlMapConfig.xml\"></a>数据库配置文件 <em>SqlMapConfig.xml</em></h5><ul>\n<li>配置数据库环境相关</li>\n</ul>\n<ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;environments default=&quot;development&quot;&gt;</span><br><span class=\"line\">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class=\"line\">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class=\"line\">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class=\"line\">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class=\"line\">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&quot;/&gt;</span><br><span class=\"line\">                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class=\"line\">                &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;</span><br><span class=\"line\">            &lt;/dataSource&gt;</span><br><span class=\"line\">        &lt;/environment&gt;</span><br><span class=\"line\"> &lt;/environments&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"sql映射文件-user-xml\"><a href=\"#sql映射文件-user-xml\" class=\"headerlink\" title=\"sql映射文件 user.xml\"></a>sql映射文件 <em>user.xml</em></h5><ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper</span><br><span class=\"line\">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class=\"line\">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class=\"line\">&lt;mapper namespace=&quot;test&quot;&gt;</span><br><span class=\"line\">    &lt;select id=&quot;findUserById&quot; parameterType=&quot;int&quot; resultType=&quot;com.example.mybatisdemo.bean.User&quot;&gt;</span><br><span class=\"line\">        SELECT * FROM user WHERE id =#&#123;VALUE&#125;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"将sql映射添加到SqlMapConfig-xml中\"><a href=\"#将sql映射添加到SqlMapConfig-xml中\" class=\"headerlink\" title=\"将sql映射添加到SqlMapConfig.xml中\"></a>将sql映射添加到SqlMapConfig.xml中</h5><ul>\n<li>最终的配置文件为</li>\n</ul>\n<ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class=\"line\">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class=\"line\">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class=\"line\">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class=\"line\">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class=\"line\">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class=\"line\">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&quot;/&gt;</span><br><span class=\"line\">                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class=\"line\">                &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;</span><br><span class=\"line\">            &lt;/dataSource&gt;</span><br><span class=\"line\">        &lt;/environment&gt;</span><br><span class=\"line\">    &lt;/environments&gt;</span><br><span class=\"line\">    &lt;mappers&gt;</span><br><span class=\"line\">        &lt;mapper resource=&quot;mapper/user.xml&quot;/&gt;</span><br><span class=\"line\">    &lt;/mappers&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h5><ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String resource = &quot;SqlMapConfig.xml&quot;;</span><br><span class=\"line\">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class=\"line\">        SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class=\"line\">        SqlSession sqlSession = factory.openSession();</span><br><span class=\"line\">        // 参数1 sql映射中的 namespace + &quot;.&quot; + sqlId</span><br><span class=\"line\">        // 参数2为sql的参数</span><br><span class=\"line\">        User user = sqlSession.selectOne(&quot;test.findUserById&quot;, 1);</span><br><span class=\"line\">        System.out.println(user.toString());</span><br><span class=\"line\">        sqlSession.close();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h4><p><em>基于sql语句的轻量级ORM框架，将sql语句写入配置文件映射中，进一步解耦，但是多了一步操作感觉比hibernate繁琐一些，但是比hibernate要快，有舍有得吧（为什么快还不知道，后续再看吧╮(╯▽╰)╭ ）</em></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"MyBatis环境\"><a href=\"#MyBatis环境\" class=\"headerlink\" title=\"MyBatis环境\"></a>MyBatis环境</h4><h5 id=\"首先准备数据库表\"><a href=\"#首先准备数据库表\" class=\"headerlink\" title=\"首先准备数据库表\"></a>首先准备数据库表</h5><ul>\n<li>对应的实体类为</li>\n</ul>\n<ul>\n<li><figure class=\"highlight plain\"><figcaption><span>class User &#123;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> private int id;</span><br><span class=\"line\"> private String name;</span><br><span class=\"line\"> private String sex;</span><br><span class=\"line\"> private int age;</span><br><span class=\"line\"> private String desc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"数据库配置文件-SqlMapConfig-xml\"><a href=\"#数据库配置文件-SqlMapConfig-xml\" class=\"headerlink\" title=\"数据库配置文件 SqlMapConfig.xml\"></a>数据库配置文件 <em>SqlMapConfig.xml</em></h5><ul>\n<li>配置数据库环境相关</li>\n</ul>\n<ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;environments default=&quot;development&quot;&gt;</span><br><span class=\"line\">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class=\"line\">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class=\"line\">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class=\"line\">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class=\"line\">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&quot;/&gt;</span><br><span class=\"line\">                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class=\"line\">                &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;</span><br><span class=\"line\">            &lt;/dataSource&gt;</span><br><span class=\"line\">        &lt;/environment&gt;</span><br><span class=\"line\"> &lt;/environments&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"sql映射文件-user-xml\"><a href=\"#sql映射文件-user-xml\" class=\"headerlink\" title=\"sql映射文件 user.xml\"></a>sql映射文件 <em>user.xml</em></h5><ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper</span><br><span class=\"line\">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class=\"line\">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class=\"line\">&lt;mapper namespace=&quot;test&quot;&gt;</span><br><span class=\"line\">    &lt;select id=&quot;findUserById&quot; parameterType=&quot;int&quot; resultType=&quot;com.example.mybatisdemo.bean.User&quot;&gt;</span><br><span class=\"line\">        SELECT * FROM user WHERE id =#&#123;VALUE&#125;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"将sql映射添加到SqlMapConfig-xml中\"><a href=\"#将sql映射添加到SqlMapConfig-xml中\" class=\"headerlink\" title=\"将sql映射添加到SqlMapConfig.xml中\"></a>将sql映射添加到SqlMapConfig.xml中</h5><ul>\n<li>最终的配置文件为</li>\n</ul>\n<ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class=\"line\">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class=\"line\">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class=\"line\">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class=\"line\">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class=\"line\">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class=\"line\">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test?characterEncoding=utf-8&quot;/&gt;</span><br><span class=\"line\">                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class=\"line\">                &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;</span><br><span class=\"line\">            &lt;/dataSource&gt;</span><br><span class=\"line\">        &lt;/environment&gt;</span><br><span class=\"line\">    &lt;/environments&gt;</span><br><span class=\"line\">    &lt;mappers&gt;</span><br><span class=\"line\">        &lt;mapper resource=&quot;mapper/user.xml&quot;/&gt;</span><br><span class=\"line\">    &lt;/mappers&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h5><ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String resource = &quot;SqlMapConfig.xml&quot;;</span><br><span class=\"line\">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class=\"line\">        SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class=\"line\">        SqlSession sqlSession = factory.openSession();</span><br><span class=\"line\">        // 参数1 sql映射中的 namespace + &quot;.&quot; + sqlId</span><br><span class=\"line\">        // 参数2为sql的参数</span><br><span class=\"line\">        User user = sqlSession.selectOne(&quot;test.findUserById&quot;, 1);</span><br><span class=\"line\">        System.out.println(user.toString());</span><br><span class=\"line\">        sqlSession.close();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h4><p><em>基于sql语句的轻量级ORM框架，将sql语句写入配置文件映射中，进一步解耦，但是多了一步操作感觉比hibernate繁琐一些，但是比hibernate要快，有舍有得吧（为什么快还不知道，后续再看吧╮(╯▽╰)╭ ）</em></p>\n"},{"title":"MyBatis入门（续）-CRUD","author":"YyWang","date":"2019-07-12T08:04:18.000Z","_content":"#### 根据用户名查询\n+ ```\n<select id=\"findUserByName\" parameterType=\"java.lang.String\" resultType=\"com.example.mybatisdemo.bean.User\">\n        SELECT * FROM users WHERE name = #{VALUE}\n    </select>```\n+ ```\nsqlSession.selectOne(\"test.findUserByName\", \"yywang\")```\n\n#### 模糊查询，返回多个值\n+ ```\n<select id=\"findUserLikeName\" parameterType=\"java.lang.String\" resultType=\"com.example.mybatisdemo.bean.User\">\n        SELECT * FROM users WHERE name like #{VALUE}\n    </select>```\n+ ```\nsqlSession.selectList(\"test.findUserLikeName\", \"%yy%\");```\n\n查询的resutlType分三种情况\n* 基本类型：resultType=\"基本类型\"\n* List类型：resultType=\"List集合中的元素类型\"\n* Map类型：\n\t* 单条记录 resultType=\"java.util.Map\"\n    * 多条记录 resultType=\"Map中value的类型\"\n\n\n\n#### 添加数据\n+ ```\n<insert id=\"insertUser\" parameterType=\"com.example.mybatisdemo.bean.User\">\n        <selectKey keyProperty=\"id\" order=\"AFTER\" resultType=\"int\">\n            SELECT LAST_INSERT_ID()\n        </selectKey>\n        INSERT into users(uname,sex,age,udesc) values (#{uname},#{sex},#{age},#{udesc})\n    </insert>```\n+ ```\n User user = new User(\"bangni\",\"female\",22,\"tc\");\n sqlSession.commit(); // 必加```\n ##### tips\n - *selectKey* 用来配置返回主键 \n - *keyProperty*  表中主键的名称\n - *order* 表示SELECT LAST_INSERT_ID()在insert语句发生的顺序，after意为insert执行之后返回，用于自增主键，UUID的方式可以配置为before\n - *resultType* 返回值类型\n \n ***注1：sql语句中有多个参数，占位符#{}也需要指定不同的表示方式，如上#{uname},#{sex}等***\n \n ***注2：sql没问题运行报错，因为之前的数据表设计问题，name和desc是关键字，这里开始做了修改***\n \n ***注3：修改之后运行通过，数据库查不到记录，想到之前测试Junit回自动回滚，于是添加@Rollback注解导入依赖后还是无果，最终加上session.commit()解决，由于MyBatis接管了JDBC的事务管理器，JDBC回自动提交而MyBatis不会，这里需要自行手动提交，修改删除同样***\n \n#### 删除\n+ ```\n<delete id=\"delUserById\" parameterType=\"int\">\n        delete from users where id = #{id}\n    </delete>\n```\n+ ```\nsqlSession.delete(\"test.delUserById\",3);\n  sqlSession.commit();```\n  \n#### 更新\n+ ```\n<update id=\"updateUserById\" parameterType=\"int\">\n        update users set age = 0 where id = #{id}\n    </update>```\n+ ```\nsqlSession.update(\"test.updateUserById\",8);\n  sqlSession.commit();```\n  \n#### 查看最后执行的SQL\n只需在配置文件中添加配置即可打印查询语句\n```\n<configuration>\n    <settings>\n        <setting name=\"logImpl\" value=\"STDOUT_LOGGING\" />\n    </settings>\n</configuration>\n```","source":"_posts/MyBatis入门续-CRUD测试.md","raw":"title: MyBatis入门（续）-CRUD\nauthor: YyWang\ntags: MyBatis\ncategories: MyBatis\ndate: 2019-07-12 16:04:18\n---\n#### 根据用户名查询\n+ ```\n<select id=\"findUserByName\" parameterType=\"java.lang.String\" resultType=\"com.example.mybatisdemo.bean.User\">\n        SELECT * FROM users WHERE name = #{VALUE}\n    </select>```\n+ ```\nsqlSession.selectOne(\"test.findUserByName\", \"yywang\")```\n\n#### 模糊查询，返回多个值\n+ ```\n<select id=\"findUserLikeName\" parameterType=\"java.lang.String\" resultType=\"com.example.mybatisdemo.bean.User\">\n        SELECT * FROM users WHERE name like #{VALUE}\n    </select>```\n+ ```\nsqlSession.selectList(\"test.findUserLikeName\", \"%yy%\");```\n\n查询的resutlType分三种情况\n* 基本类型：resultType=\"基本类型\"\n* List类型：resultType=\"List集合中的元素类型\"\n* Map类型：\n\t* 单条记录 resultType=\"java.util.Map\"\n    * 多条记录 resultType=\"Map中value的类型\"\n\n\n\n#### 添加数据\n+ ```\n<insert id=\"insertUser\" parameterType=\"com.example.mybatisdemo.bean.User\">\n        <selectKey keyProperty=\"id\" order=\"AFTER\" resultType=\"int\">\n            SELECT LAST_INSERT_ID()\n        </selectKey>\n        INSERT into users(uname,sex,age,udesc) values (#{uname},#{sex},#{age},#{udesc})\n    </insert>```\n+ ```\n User user = new User(\"bangni\",\"female\",22,\"tc\");\n sqlSession.commit(); // 必加```\n ##### tips\n - *selectKey* 用来配置返回主键 \n - *keyProperty*  表中主键的名称\n - *order* 表示SELECT LAST_INSERT_ID()在insert语句发生的顺序，after意为insert执行之后返回，用于自增主键，UUID的方式可以配置为before\n - *resultType* 返回值类型\n \n ***注1：sql语句中有多个参数，占位符#{}也需要指定不同的表示方式，如上#{uname},#{sex}等***\n \n ***注2：sql没问题运行报错，因为之前的数据表设计问题，name和desc是关键字，这里开始做了修改***\n \n ***注3：修改之后运行通过，数据库查不到记录，想到之前测试Junit回自动回滚，于是添加@Rollback注解导入依赖后还是无果，最终加上session.commit()解决，由于MyBatis接管了JDBC的事务管理器，JDBC回自动提交而MyBatis不会，这里需要自行手动提交，修改删除同样***\n \n#### 删除\n+ ```\n<delete id=\"delUserById\" parameterType=\"int\">\n        delete from users where id = #{id}\n    </delete>\n```\n+ ```\nsqlSession.delete(\"test.delUserById\",3);\n  sqlSession.commit();```\n  \n#### 更新\n+ ```\n<update id=\"updateUserById\" parameterType=\"int\">\n        update users set age = 0 where id = #{id}\n    </update>```\n+ ```\nsqlSession.update(\"test.updateUserById\",8);\n  sqlSession.commit();```\n  \n#### 查看最后执行的SQL\n只需在配置文件中添加配置即可打印查询语句\n```\n<configuration>\n    <settings>\n        <setting name=\"logImpl\" value=\"STDOUT_LOGGING\" />\n    </settings>\n</configuration>\n```","slug":"MyBatis入门续-CRUD测试","published":1,"updated":"2021-07-13T12:27:08.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj6x001681fykvg7cye4","content":"<h4 id=\"根据用户名查询\"><a href=\"#根据用户名查询\" class=\"headerlink\" title=\"根据用户名查询\"></a>根据用户名查询</h4><ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;findUserByName&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;com.example.mybatisdemo.bean.User&quot;&gt;</span><br><span class=\"line\">        SELECT * FROM users WHERE name = #&#123;VALUE&#125;</span><br><span class=\"line\">    &lt;/select&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlSession.selectOne(&quot;test.findUserByName&quot;, &quot;yywang&quot;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"模糊查询，返回多个值\"><a href=\"#模糊查询，返回多个值\" class=\"headerlink\" title=\"模糊查询，返回多个值\"></a>模糊查询，返回多个值</h4><ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;findUserLikeName&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;com.example.mybatisdemo.bean.User&quot;&gt;</span><br><span class=\"line\">        SELECT * FROM users WHERE name like #&#123;VALUE&#125;</span><br><span class=\"line\">    &lt;/select&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlSession.selectList(&quot;test.findUserLikeName&quot;, &quot;%yy%&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>查询的resutlType分三种情况</p>\n<ul>\n<li>基本类型：resultType=”基本类型”</li>\n<li>List类型：resultType=”List集合中的元素类型”</li>\n<li>Map类型：<ul>\n<li>单条记录 resultType=”java.util.Map”</li>\n<li>多条记录 resultType=”Map中value的类型”</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h4><ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.example.mybatisdemo.bean.User&quot;&gt;</span><br><span class=\"line\">        &lt;selectKey keyProperty=&quot;id&quot; order=&quot;AFTER&quot; resultType=&quot;int&quot;&gt;</span><br><span class=\"line\">            SELECT LAST_INSERT_ID()</span><br><span class=\"line\">        &lt;/selectKey&gt;</span><br><span class=\"line\">        INSERT into users(uname,sex,age,udesc) values (#&#123;uname&#125;,#&#123;sex&#125;,#&#123;age&#125;,#&#123;udesc&#125;)</span><br><span class=\"line\">    &lt;/insert&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User user = new User(&quot;bangni&quot;,&quot;female&quot;,22,&quot;tc&quot;);</span><br><span class=\"line\">sqlSession.commit(); // 必加</span><br></pre></td></tr></table></figure>\n<h5 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips\"></a>tips</h5><ul>\n<li><em>selectKey</em> 用来配置返回主键 </li>\n<li><em>keyProperty</em>  表中主键的名称</li>\n<li><em>order</em> 表示SELECT LAST_INSERT_ID()在insert语句发生的顺序，after意为insert执行之后返回，用于自增主键，UUID的方式可以配置为before</li>\n<li><em>resultType</em> 返回值类型</li>\n</ul>\n<p><strong><em>注1：sql语句中有多个参数，占位符#{}也需要指定不同的表示方式，如上#{uname},#{sex}等</em></strong></p>\n<p><strong><em>注2：sql没问题运行报错，因为之前的数据表设计问题，name和desc是关键字，这里开始做了修改</em></strong></p>\n<p><strong><em>注3：修改之后运行通过，数据库查不到记录，想到之前测试Junit回自动回滚，于是添加@Rollback注解导入依赖后还是无果，最终加上session.commit()解决，由于MyBatis接管了JDBC的事务管理器，JDBC回自动提交而MyBatis不会，这里需要自行手动提交，修改删除同样</em></strong></p>\n</li>\n</ul>\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;delete id=&quot;delUserById&quot; parameterType=&quot;int&quot;&gt;</span><br><span class=\"line\">        delete from users where id = #&#123;id&#125;</span><br><span class=\"line\">    &lt;/delete&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlSession.delete(&quot;test.delUserById&quot;,3);</span><br><span class=\"line\">  sqlSession.commit();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h4><ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;update id=&quot;updateUserById&quot; parameterType=&quot;int&quot;&gt;</span><br><span class=\"line\">        update users set age = 0 where id = #&#123;id&#125;</span><br><span class=\"line\">    &lt;/update&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlSession.update(&quot;test.updateUserById&quot;,8);</span><br><span class=\"line\">  sqlSession.commit();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"查看最后执行的SQL\"><a href=\"#查看最后执行的SQL\" class=\"headerlink\" title=\"查看最后执行的SQL\"></a>查看最后执行的SQL</h4><p>只需在配置文件中添加配置即可打印查询语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;settings&gt;</span><br><span class=\"line\">        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot; /&gt;</span><br><span class=\"line\">    &lt;/settings&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"根据用户名查询\"><a href=\"#根据用户名查询\" class=\"headerlink\" title=\"根据用户名查询\"></a>根据用户名查询</h4><ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;findUserByName&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;com.example.mybatisdemo.bean.User&quot;&gt;</span><br><span class=\"line\">        SELECT * FROM users WHERE name = #&#123;VALUE&#125;</span><br><span class=\"line\">    &lt;/select&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlSession.selectOne(&quot;test.findUserByName&quot;, &quot;yywang&quot;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"模糊查询，返回多个值\"><a href=\"#模糊查询，返回多个值\" class=\"headerlink\" title=\"模糊查询，返回多个值\"></a>模糊查询，返回多个值</h4><ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;findUserLikeName&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;com.example.mybatisdemo.bean.User&quot;&gt;</span><br><span class=\"line\">        SELECT * FROM users WHERE name like #&#123;VALUE&#125;</span><br><span class=\"line\">    &lt;/select&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlSession.selectList(&quot;test.findUserLikeName&quot;, &quot;%yy%&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>查询的resutlType分三种情况</p>\n<ul>\n<li>基本类型：resultType=”基本类型”</li>\n<li>List类型：resultType=”List集合中的元素类型”</li>\n<li>Map类型：<ul>\n<li>单条记录 resultType=”java.util.Map”</li>\n<li>多条记录 resultType=”Map中value的类型”</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h4><ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.example.mybatisdemo.bean.User&quot;&gt;</span><br><span class=\"line\">        &lt;selectKey keyProperty=&quot;id&quot; order=&quot;AFTER&quot; resultType=&quot;int&quot;&gt;</span><br><span class=\"line\">            SELECT LAST_INSERT_ID()</span><br><span class=\"line\">        &lt;/selectKey&gt;</span><br><span class=\"line\">        INSERT into users(uname,sex,age,udesc) values (#&#123;uname&#125;,#&#123;sex&#125;,#&#123;age&#125;,#&#123;udesc&#125;)</span><br><span class=\"line\">    &lt;/insert&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User user = new User(&quot;bangni&quot;,&quot;female&quot;,22,&quot;tc&quot;);</span><br><span class=\"line\">sqlSession.commit(); // 必加</span><br></pre></td></tr></table></figure>\n<h5 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips\"></a>tips</h5><ul>\n<li><em>selectKey</em> 用来配置返回主键 </li>\n<li><em>keyProperty</em>  表中主键的名称</li>\n<li><em>order</em> 表示SELECT LAST_INSERT_ID()在insert语句发生的顺序，after意为insert执行之后返回，用于自增主键，UUID的方式可以配置为before</li>\n<li><em>resultType</em> 返回值类型</li>\n</ul>\n<p><strong><em>注1：sql语句中有多个参数，占位符#{}也需要指定不同的表示方式，如上#{uname},#{sex}等</em></strong></p>\n<p><strong><em>注2：sql没问题运行报错，因为之前的数据表设计问题，name和desc是关键字，这里开始做了修改</em></strong></p>\n<p><strong><em>注3：修改之后运行通过，数据库查不到记录，想到之前测试Junit回自动回滚，于是添加@Rollback注解导入依赖后还是无果，最终加上session.commit()解决，由于MyBatis接管了JDBC的事务管理器，JDBC回自动提交而MyBatis不会，这里需要自行手动提交，修改删除同样</em></strong></p>\n</li>\n</ul>\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;delete id=&quot;delUserById&quot; parameterType=&quot;int&quot;&gt;</span><br><span class=\"line\">        delete from users where id = #&#123;id&#125;</span><br><span class=\"line\">    &lt;/delete&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlSession.delete(&quot;test.delUserById&quot;,3);</span><br><span class=\"line\">  sqlSession.commit();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h4><ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;update id=&quot;updateUserById&quot; parameterType=&quot;int&quot;&gt;</span><br><span class=\"line\">        update users set age = 0 where id = #&#123;id&#125;</span><br><span class=\"line\">    &lt;/update&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlSession.update(&quot;test.updateUserById&quot;,8);</span><br><span class=\"line\">  sqlSession.commit();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"查看最后执行的SQL\"><a href=\"#查看最后执行的SQL\" class=\"headerlink\" title=\"查看最后执行的SQL\"></a>查看最后执行的SQL</h4><p>只需在配置文件中添加配置即可打印查询语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;settings&gt;</span><br><span class=\"line\">        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot; /&gt;</span><br><span class=\"line\">    &lt;/settings&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Lambda表达式","author":"YyWang","date":"2019-08-05T01:06:59.000Z","catagories":"Java","_content":"#### 语法\n包含3个部分：参数 -> 表达式/代码块\n+ (params) -> expression\n+ (params) -> statement\n+ (params) -> { statements }\n\n**与内部类相同，lambda表达式不可以修改外部变量，这点与匿名内部类相同，不同的是lambda表达式不用将变量显示的声名为final，如果是在自己的作用域中定义局部变量可以进行修改，最终保证线程安全**\n\n**（踩坑）lambda表达式中的this并不是代表当前使用lambda表达式的对象，而是外部类的对象**\n\n#### 作用 \n##### 可代替匿名内部类\n+ 可以代替只包含一个抽象方法的接口，也叫做函数式接口，例如；Comparator、Runnable\n+ Java8内置了四大函数式接口分别为：Consumer，Supplier，Function，Predicate\n+ jdk8中提供@FunctionalInterface 注解来检查接口是否符号函数式接口的标准\n\n##### 可代替迭代操作\n+ list.forEach(n -> {});\n \n##### 通过Stream操作集合\n+ list.stream().filter()...collect();\n\n##### 对数据处理\n+ 与Spark相似java8可以将集合转化为流（Stream），在对流进行map和reduce操作，与Spark相同这些方法也是惰性求值的\n\n#### Java8的函数式接口\n##### 消费型接口 Consumer<T>\n+ 抽象方法-void accept(T t);\n+ 参数类型-T\n+ 返回类型-void\n\n这个还没有用过，因为返回值为空并且传递一个参数，我感觉和集合的遍历差不多 list.forEach(n -> sout(n)); 通过定义多个Consumer对象相当于定义多个逻辑块，最终consumer1.addThen(consumer2) 连接，也就是说consumer1逻辑完成后执行consumer2（为什么不写在一个逻辑里呢？我猜可能需要解耦吧）\n \n##### 供给型接口 Supplier<T>\n+ 抽象方法-T get();\n+ 参数类型-无参数\n+ 返回类型-T\n+ \n这个感觉很简单，没有参数但要返回一个值，可能new一个对象的时候会用到吧，声名Supplier对象后直接调用get执行定义的逻辑（箭头后面的逻辑）返回一个值\n \n##### 函数型接口 Function<T,R>\n+ 抽象方法-R apply(T t)\n+ 参数类型-T\n+ 返回类型-R\n \n同样是创建Function对象定义一个方法逻辑，接口中有Consumer接口同样的实现方法andThen，用法也相同，不同的是Function定义中有返回值，fun1.addThen(fun2)是将fun1执行的返回值传入fun2中再执行fun2中的逻辑，除此之外该接口还有一个实现方法compose，用法和andThen相反，fun1.compose(fun2) 是先执行fun2中的逻辑将返回值作为参数传入fun1中再执行fun1中的逻辑\n\n##### 断言型接口 Predicate<T>\n+ 抽象方法-boolean test(T t)\n+ 参数类型-T\n+ 返回类型-boolean\n+ 定义的Predicate对象相当于筛选条件的对象，最终通过stream中的filter进行过滤，多个条件可以用and和or来进行组合相当于运算符 && 和 ||\n+ 多用做集合筛选 eg:\n+ \n```\n// 筛选大于18岁的女性用户\nPredicate<User> matchAge = u -> u.age > 18;\nPredicate<User> matchSex = u -> u.sex.equals(\"f\");\nresultList = userList.stream().filter(matchAge.and(matchSex)).collect(Collectors.toList());\n```\n我的理解是在定义Predicate的对象时，-> 前传入参数， -> 后定义test的方法体，最终补充抽象方法test，通过stream的filter筛选相当于将集合中的每个元素都调用一次test方法，将返回值为true的筛选出来。\n","source":"_posts/Lambda表达式.md","raw":"title: Lambda表达式\nauthor: YyWang\ndate: 2019-08-05 09:06:59\ntags: Java\ncatagories: Java\n---\n#### 语法\n包含3个部分：参数 -> 表达式/代码块\n+ (params) -> expression\n+ (params) -> statement\n+ (params) -> { statements }\n\n**与内部类相同，lambda表达式不可以修改外部变量，这点与匿名内部类相同，不同的是lambda表达式不用将变量显示的声名为final，如果是在自己的作用域中定义局部变量可以进行修改，最终保证线程安全**\n\n**（踩坑）lambda表达式中的this并不是代表当前使用lambda表达式的对象，而是外部类的对象**\n\n#### 作用 \n##### 可代替匿名内部类\n+ 可以代替只包含一个抽象方法的接口，也叫做函数式接口，例如；Comparator、Runnable\n+ Java8内置了四大函数式接口分别为：Consumer，Supplier，Function，Predicate\n+ jdk8中提供@FunctionalInterface 注解来检查接口是否符号函数式接口的标准\n\n##### 可代替迭代操作\n+ list.forEach(n -> {});\n \n##### 通过Stream操作集合\n+ list.stream().filter()...collect();\n\n##### 对数据处理\n+ 与Spark相似java8可以将集合转化为流（Stream），在对流进行map和reduce操作，与Spark相同这些方法也是惰性求值的\n\n#### Java8的函数式接口\n##### 消费型接口 Consumer<T>\n+ 抽象方法-void accept(T t);\n+ 参数类型-T\n+ 返回类型-void\n\n这个还没有用过，因为返回值为空并且传递一个参数，我感觉和集合的遍历差不多 list.forEach(n -> sout(n)); 通过定义多个Consumer对象相当于定义多个逻辑块，最终consumer1.addThen(consumer2) 连接，也就是说consumer1逻辑完成后执行consumer2（为什么不写在一个逻辑里呢？我猜可能需要解耦吧）\n \n##### 供给型接口 Supplier<T>\n+ 抽象方法-T get();\n+ 参数类型-无参数\n+ 返回类型-T\n+ \n这个感觉很简单，没有参数但要返回一个值，可能new一个对象的时候会用到吧，声名Supplier对象后直接调用get执行定义的逻辑（箭头后面的逻辑）返回一个值\n \n##### 函数型接口 Function<T,R>\n+ 抽象方法-R apply(T t)\n+ 参数类型-T\n+ 返回类型-R\n \n同样是创建Function对象定义一个方法逻辑，接口中有Consumer接口同样的实现方法andThen，用法也相同，不同的是Function定义中有返回值，fun1.addThen(fun2)是将fun1执行的返回值传入fun2中再执行fun2中的逻辑，除此之外该接口还有一个实现方法compose，用法和andThen相反，fun1.compose(fun2) 是先执行fun2中的逻辑将返回值作为参数传入fun1中再执行fun1中的逻辑\n\n##### 断言型接口 Predicate<T>\n+ 抽象方法-boolean test(T t)\n+ 参数类型-T\n+ 返回类型-boolean\n+ 定义的Predicate对象相当于筛选条件的对象，最终通过stream中的filter进行过滤，多个条件可以用and和or来进行组合相当于运算符 && 和 ||\n+ 多用做集合筛选 eg:\n+ \n```\n// 筛选大于18岁的女性用户\nPredicate<User> matchAge = u -> u.age > 18;\nPredicate<User> matchSex = u -> u.sex.equals(\"f\");\nresultList = userList.stream().filter(matchAge.and(matchSex)).collect(Collectors.toList());\n```\n我的理解是在定义Predicate的对象时，-> 前传入参数， -> 后定义test的方法体，最终补充抽象方法test，通过stream的filter筛选相当于将集合中的每个元素都调用一次test方法，将返回值为true的筛选出来。\n","slug":"Lambda表达式","published":1,"updated":"2021-07-13T12:27:08.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj6y001981fy1gan7ks9","content":"<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><p>包含3个部分：参数 -&gt; 表达式/代码块</p>\n<ul>\n<li>(params) -&gt; expression</li>\n<li>(params) -&gt; statement</li>\n<li>(params) -&gt; { statements }</li>\n</ul>\n<p><strong>与内部类相同，lambda表达式不可以修改外部变量，这点与匿名内部类相同，不同的是lambda表达式不用将变量显示的声名为final，如果是在自己的作用域中定义局部变量可以进行修改，最终保证线程安全</strong></p>\n<p><strong>（踩坑）lambda表达式中的this并不是代表当前使用lambda表达式的对象，而是外部类的对象</strong></p>\n<h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><h5 id=\"可代替匿名内部类\"><a href=\"#可代替匿名内部类\" class=\"headerlink\" title=\"可代替匿名内部类\"></a>可代替匿名内部类</h5><ul>\n<li>可以代替只包含一个抽象方法的接口，也叫做函数式接口，例如；Comparator、Runnable</li>\n<li>Java8内置了四大函数式接口分别为：Consumer，Supplier，Function，Predicate</li>\n<li>jdk8中提供@FunctionalInterface 注解来检查接口是否符号函数式接口的标准</li>\n</ul>\n<h5 id=\"可代替迭代操作\"><a href=\"#可代替迭代操作\" class=\"headerlink\" title=\"可代替迭代操作\"></a>可代替迭代操作</h5><ul>\n<li>list.forEach(n -&gt; {});</li>\n</ul>\n<h5 id=\"通过Stream操作集合\"><a href=\"#通过Stream操作集合\" class=\"headerlink\" title=\"通过Stream操作集合\"></a>通过Stream操作集合</h5><ul>\n<li>list.stream().filter()…collect();</li>\n</ul>\n<h5 id=\"对数据处理\"><a href=\"#对数据处理\" class=\"headerlink\" title=\"对数据处理\"></a>对数据处理</h5><ul>\n<li>与Spark相似java8可以将集合转化为流（Stream），在对流进行map和reduce操作，与Spark相同这些方法也是惰性求值的</li>\n</ul>\n<h4 id=\"Java8的函数式接口\"><a href=\"#Java8的函数式接口\" class=\"headerlink\" title=\"Java8的函数式接口\"></a>Java8的函数式接口</h4><h5 id=\"消费型接口-Consumer\"><a href=\"#消费型接口-Consumer\" class=\"headerlink\" title=\"消费型接口 Consumer\"></a>消费型接口 Consumer<t></t></h5><ul>\n<li>抽象方法-void accept(T t);</li>\n<li>参数类型-T</li>\n<li>返回类型-void</li>\n</ul>\n<p>这个还没有用过，因为返回值为空并且传递一个参数，我感觉和集合的遍历差不多 list.forEach(n -&gt; sout(n)); 通过定义多个Consumer对象相当于定义多个逻辑块，最终consumer1.addThen(consumer2) 连接，也就是说consumer1逻辑完成后执行consumer2（为什么不写在一个逻辑里呢？我猜可能需要解耦吧）</p>\n<h5 id=\"供给型接口-Supplier\"><a href=\"#供给型接口-Supplier\" class=\"headerlink\" title=\"供给型接口 Supplier\"></a>供给型接口 Supplier<t></t></h5><ul>\n<li>抽象方法-T get();</li>\n<li>参数类型-无参数</li>\n<li>返回类型-T</li>\n<li>这个感觉很简单，没有参数但要返回一个值，可能new一个对象的时候会用到吧，声名Supplier对象后直接调用get执行定义的逻辑（箭头后面的逻辑）返回一个值</li>\n</ul>\n<h5 id=\"函数型接口-Function-lt-T-R-gt\"><a href=\"#函数型接口-Function-lt-T-R-gt\" class=\"headerlink\" title=\"函数型接口 Function&lt;T,R&gt;\"></a>函数型接口 Function&lt;T,R&gt;</h5><ul>\n<li>抽象方法-R apply(T t)</li>\n<li>参数类型-T</li>\n<li>返回类型-R</li>\n</ul>\n<p>同样是创建Function对象定义一个方法逻辑，接口中有Consumer接口同样的实现方法andThen，用法也相同，不同的是Function定义中有返回值，fun1.addThen(fun2)是将fun1执行的返回值传入fun2中再执行fun2中的逻辑，除此之外该接口还有一个实现方法compose，用法和andThen相反，fun1.compose(fun2) 是先执行fun2中的逻辑将返回值作为参数传入fun1中再执行fun1中的逻辑</p>\n<h5 id=\"断言型接口-Predicate\"><a href=\"#断言型接口-Predicate\" class=\"headerlink\" title=\"断言型接口 Predicate\"></a>断言型接口 Predicate<t></t></h5><ul>\n<li>抽象方法-boolean test(T t)</li>\n<li>参数类型-T</li>\n<li>返回类型-boolean</li>\n<li>定义的Predicate对象相当于筛选条件的对象，最终通过stream中的filter进行过滤，多个条件可以用and和or来进行组合相当于运算符 &amp;&amp; 和 ||</li>\n<li>多用做集合筛选 eg:</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 筛选大于18岁的女性用户</span><br><span class=\"line\">Predicate&lt;User&gt; matchAge = u -&gt; u.age &gt; 18;</span><br><span class=\"line\">Predicate&lt;User&gt; matchSex = u -&gt; u.sex.equals(&quot;f&quot;);</span><br><span class=\"line\">resultList = userList.stream().filter(matchAge.and(matchSex)).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>我的理解是在定义Predicate的对象时，-&gt; 前传入参数， -&gt; 后定义test的方法体，最终补充抽象方法test，通过stream的filter筛选相当于将集合中的每个元素都调用一次test方法，将返回值为true的筛选出来。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><p>包含3个部分：参数 -&gt; 表达式/代码块</p>\n<ul>\n<li>(params) -&gt; expression</li>\n<li>(params) -&gt; statement</li>\n<li>(params) -&gt; { statements }</li>\n</ul>\n<p><strong>与内部类相同，lambda表达式不可以修改外部变量，这点与匿名内部类相同，不同的是lambda表达式不用将变量显示的声名为final，如果是在自己的作用域中定义局部变量可以进行修改，最终保证线程安全</strong></p>\n<p><strong>（踩坑）lambda表达式中的this并不是代表当前使用lambda表达式的对象，而是外部类的对象</strong></p>\n<h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><h5 id=\"可代替匿名内部类\"><a href=\"#可代替匿名内部类\" class=\"headerlink\" title=\"可代替匿名内部类\"></a>可代替匿名内部类</h5><ul>\n<li>可以代替只包含一个抽象方法的接口，也叫做函数式接口，例如；Comparator、Runnable</li>\n<li>Java8内置了四大函数式接口分别为：Consumer，Supplier，Function，Predicate</li>\n<li>jdk8中提供@FunctionalInterface 注解来检查接口是否符号函数式接口的标准</li>\n</ul>\n<h5 id=\"可代替迭代操作\"><a href=\"#可代替迭代操作\" class=\"headerlink\" title=\"可代替迭代操作\"></a>可代替迭代操作</h5><ul>\n<li>list.forEach(n -&gt; {});</li>\n</ul>\n<h5 id=\"通过Stream操作集合\"><a href=\"#通过Stream操作集合\" class=\"headerlink\" title=\"通过Stream操作集合\"></a>通过Stream操作集合</h5><ul>\n<li>list.stream().filter()…collect();</li>\n</ul>\n<h5 id=\"对数据处理\"><a href=\"#对数据处理\" class=\"headerlink\" title=\"对数据处理\"></a>对数据处理</h5><ul>\n<li>与Spark相似java8可以将集合转化为流（Stream），在对流进行map和reduce操作，与Spark相同这些方法也是惰性求值的</li>\n</ul>\n<h4 id=\"Java8的函数式接口\"><a href=\"#Java8的函数式接口\" class=\"headerlink\" title=\"Java8的函数式接口\"></a>Java8的函数式接口</h4><h5 id=\"消费型接口-Consumer\"><a href=\"#消费型接口-Consumer\" class=\"headerlink\" title=\"消费型接口 Consumer\"></a>消费型接口 Consumer<t></t></h5><ul>\n<li>抽象方法-void accept(T t);</li>\n<li>参数类型-T</li>\n<li>返回类型-void</li>\n</ul>\n<p>这个还没有用过，因为返回值为空并且传递一个参数，我感觉和集合的遍历差不多 list.forEach(n -&gt; sout(n)); 通过定义多个Consumer对象相当于定义多个逻辑块，最终consumer1.addThen(consumer2) 连接，也就是说consumer1逻辑完成后执行consumer2（为什么不写在一个逻辑里呢？我猜可能需要解耦吧）</p>\n<h5 id=\"供给型接口-Supplier\"><a href=\"#供给型接口-Supplier\" class=\"headerlink\" title=\"供给型接口 Supplier\"></a>供给型接口 Supplier<t></t></h5><ul>\n<li>抽象方法-T get();</li>\n<li>参数类型-无参数</li>\n<li>返回类型-T</li>\n<li>这个感觉很简单，没有参数但要返回一个值，可能new一个对象的时候会用到吧，声名Supplier对象后直接调用get执行定义的逻辑（箭头后面的逻辑）返回一个值</li>\n</ul>\n<h5 id=\"函数型接口-Function-lt-T-R-gt\"><a href=\"#函数型接口-Function-lt-T-R-gt\" class=\"headerlink\" title=\"函数型接口 Function&lt;T,R&gt;\"></a>函数型接口 Function&lt;T,R&gt;</h5><ul>\n<li>抽象方法-R apply(T t)</li>\n<li>参数类型-T</li>\n<li>返回类型-R</li>\n</ul>\n<p>同样是创建Function对象定义一个方法逻辑，接口中有Consumer接口同样的实现方法andThen，用法也相同，不同的是Function定义中有返回值，fun1.addThen(fun2)是将fun1执行的返回值传入fun2中再执行fun2中的逻辑，除此之外该接口还有一个实现方法compose，用法和andThen相反，fun1.compose(fun2) 是先执行fun2中的逻辑将返回值作为参数传入fun1中再执行fun1中的逻辑</p>\n<h5 id=\"断言型接口-Predicate\"><a href=\"#断言型接口-Predicate\" class=\"headerlink\" title=\"断言型接口 Predicate\"></a>断言型接口 Predicate<t></t></h5><ul>\n<li>抽象方法-boolean test(T t)</li>\n<li>参数类型-T</li>\n<li>返回类型-boolean</li>\n<li>定义的Predicate对象相当于筛选条件的对象，最终通过stream中的filter进行过滤，多个条件可以用and和or来进行组合相当于运算符 &amp;&amp; 和 ||</li>\n<li>多用做集合筛选 eg:</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 筛选大于18岁的女性用户</span><br><span class=\"line\">Predicate&lt;User&gt; matchAge = u -&gt; u.age &gt; 18;</span><br><span class=\"line\">Predicate&lt;User&gt; matchSex = u -&gt; u.sex.equals(&quot;f&quot;);</span><br><span class=\"line\">resultList = userList.stream().filter(matchAge.and(matchSex)).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>我的理解是在定义Predicate的对象时，-&gt; 前传入参数， -&gt; 后定义test的方法体，最终补充抽象方法test，通过stream的filter筛选相当于将集合中的每个元素都调用一次test方法，将返回值为true的筛选出来。</p>\n"},{"title":"Optional 使用及源码","author":"YyWang","date":"2019-08-15T12:58:37.000Z","_content":"### Optional 使用及源码分析\nA container object which may or may not contain a non-null value.\n\n可能包含空值的容器对象。\n\n怎么理解呢？就把它当成是和Collection一样的容器，Collection是通过不同的数据结构和API来操作容器中的元素；Optional则是提供API来判断容器中的元素是否为空，在此基础上还能根据是否为空的不同结果给出自定义的处理逻辑。这么说还是很抽象，直接上源码就会好理解一些。\n\n#### 成员变量\n\n```\n// 空的Optional对象\nprivate static final Optional<?> EMPTY = new Optional<>();\n// 容器中元素的值\nprivate final T value;\n```\n\n这个value是容器中元素的值，怎么理解呢，使用Optional是要通过它的API进行判空来达到避免NPE的现象，上面说到将Optional当成是一个容器，这个容器中的元素则是需要判空的对象，也就是说容器中的元素就是你传入的参数，这个value就是传参的值\n\n#### 构造方法\n无参构造，只是将value置为null\n\n```\nprivate Optional() {\n        this.value = null;\n}\n```\n\n有参构造\n\n```\nprivate Optional(T value) {\n    this.value = Objects.requireNonNull(value);\n}\n```\n\n其中返回Objects中的requireNonNull的方法，再看这个方法\n\n```\npublic static <T> T requireNonNull(T obj) {\n    if (obj == null)\n        throw new NullPointerException();\n    return obj;\n}\n```\n\n很简单如果obj为空抛出异常，不为空返回本身，所以有参构造的效果就是确认value不为空并给value赋值，如果是空就抛异常\n\n而且这两个构造函数是私有的，也就是说我们不能new出来\n\n#### 主要方法\n* empty()--返回空的Optional对象\n\n```\npublic static <T> Optional<T> empty() {\n    Optional var0 = EMPTY;\n    return var0;\n}\n```\n* of(T var1)--调用了有参构造，即有值返回带有该值得Optional对象，为空则会抛异常\n\n```\npublic static <T> Optional<T> of(T var0) {\n    return new Optional(var0);\n}\n```\n\n* ofNullable(T var0)--元素为null返回空的Option对象，不是null返回本身\n\n```\npublic static <T> Optional<T> ofNullable(T var0) {\n    return var0 == null ? empty() : of(var0);\n}\n```\n\n* get()--从名字就可以看出是获取元素的值，也就是返回value，如果是null的话会抛异常\n\n```\npublic T get() {\n    if (this.value == null) {\n        throw new NoSuchElementException(\"No value present\");\n    } else {\n        return this.value;\n    }\n}\n```\n\n* isPresent()--返回value是否为null\n\n```\npublic boolean isPresent() {\n    return this.value != null;\n}\n```\n\n* ifPresent(Consumer<? super T> var)--如果元素不是空的话执行var1中的逻辑，Consumer之前有文章写过，是接收一个参数执行一个没有返回值得逻辑\n\n```\npublic void ifPresent(Consumer<? super T> var1) {\n\tif (this.value != null) {\n\t    var1.accept(this.value);\n\t}\n}\n```\n\n* filter(Predicate<? super T> var1)--首先确保predicate对象和value不是null，然后用predicate对象对value进行筛选，满足条件返回本身，不满足条件返回空的对象（看源码是这个意思，具体怎什么情况用还想不到~）\n\n```\npublic Optional<T> filter(Predicate<? super T> var1) {\n    Objects.requireNonNull(var1);\n    if (!this.isPresent()) {\n        return this;\n    } else {\n        return var1.test(this.value) ? this : empty();\n    }\n}\n```\n\n* map(Function<? super T, ? extends U> var1)--同样确保var1不是null，之后value为空值返回空的Optional对象，value有值执行var1中的逻辑\n\n```\npublic <U> Optional<U> map(Function<? super T, ? extends U> var1) {\n    Objects.requireNonNull(var1);\n    return !this.isPresent() ? empty() : ofNullable(var1.apply(this.value));\n}\n```\n\n* flatMap(Function<? super T, Optional< U >> var1)--与map方法相同,不同的是入参，根据不同的参数结构使用不同的方法\n\n```\npublic <U> Optional<U> flatMap(Function<? super T, Optional<U>> var1) {\n    Objects.requireNonNull(var1);\n    return !this.isPresent() ? empty() : (Optional)Objects.requireNonNull(var1.apply(this.value));\n}\n```\n\n* T orElse(T var1)--获取value的值，不为空返回本身，为空返回入参var1\n\n```\npublic T orElse(T var1) {\n    return this.value != null ? this.value : var1;\n}\n```\n\n* T orElseGet(Supplier<? extends T> var1)--与orElse的逻辑一样，不同的是value为空返回的是supplier对象的逻辑\n\n```\npublic T orElseGet(Supplier<? extends T> var1) {\n    return this.value != null ? this.value : var1.get();\n}\n```\n\n* T orElseThrow(Supplier<? extends X> var1)--同样的逻辑，不同的是value为null会抛异常\n\n```\npublic <X extends Throwable> T orElseThrow(Supplier<? extends X> var1) throws X {\n    if (this.value != null) {\n        return this.value;\n    } else {\n        throw (Throwable)var1.get();\n    }\n}\n```\n\n#### 总结\n\n* of和ofNullable\n  * 都是取值，如果元素是null的话of会报空指针--不用，ofNullable将null转为空的对象没有空指针；\n  * get方法同样是取值，value是null也会抛异常--不用\n  * 最后，取值用ofNullable就完事了\n* isPresent和ifPresent\n  * isPresent返回元素是否为null，有返回值\n  * ifPresent元素不为空执行一段逻辑，无返回值\n  * 最后，只判断用isPresent有逻辑用ifPresent\n* filter、map和flatMap\n  * 都是将不是null的元素执行传入的逻辑，根据不同的需求选择方法\n* orElse、orElseGet和orElseThrow\n  *  都是将null的元素做转换，orElse返回传入的值，orElseGet返回传入的逻辑，这两个方法看需求没有逻辑有orElse有逻辑用orElseGet；orElseThrow元素为null抛异常--不用\n\n#### 栗子\n\n刚刚学习还不知道怎么使用，看到[一篇文章]（https://www.cnblogs.com/rjzheng/p/9163246.html） 给的栗子不错，很有借鉴意义，但是我对这篇文章中的orElse和orElseGet的栗子有不同意见。\n\n##### 栗子1\n\n* 使用前\n\n```\npublic String getCity(User user)  throws Exception{\n    if(user!=null){\n        if(user.getAddress()!=null){\n            Address address = user.getAddress();\n            if(address.getCity()!=null){\n                return address.getCity();\n            }\n        }\n    }\n    throw new Excpetion(\"取值错误\"); \n}\n```\n\n* 使用后\n\n```\npublic String getCity(User user) throws Exception{\n    return Optional.ofNullable(user)\n                   .map(u-> u.getAddress())\n                   .map(a->a.getCity())\n                   .orElseThrow(()->new Exception(\"取指错误\"));\n}\n```\n\n##### 栗子2\n\n* 使用前\n\n```\nif(user!=null){\n    dosomething(user);\n}\n```\n\n* 使用后\n\n```\n Optional.ofNullable(user)\n         .ifPresent(u->{\n            dosomething(u);\n         });\n```\n\n##### 栗子3\n\n* 使用前\n\n```\npublic User getUser(User user) throws Exception{\n\tif(user!=null){\n\t    String name = user.getName();\n\t    if(\"zhangsan\".equals(name)){\n\t        return user;\n\t    }\n\t}else{\n\t    user = new User();\n\t    user.setName(\"zhangsan\");\n\t    return user;\n\t}\n}\n```\n\n* 使用后\n\n```\npublic User getUser(User user) {\n    return Optional.ofNullable(user)\n                   .filter(u->\"zhangsan\".equals(u.getName()))\n                   .orElseGet(()-> {\n                        User user1 = new User();\n                        user1.setName(\"zhangsan\");\n                        return user1;\n                   });\n}\n```\n","source":"_posts/Optional.md","raw":"title: Optional 使用及源码\nauthor: YyWang\ntags: Java\ncategories: Java\ndate: 2019-08-15 20:58:37\n---\n### Optional 使用及源码分析\nA container object which may or may not contain a non-null value.\n\n可能包含空值的容器对象。\n\n怎么理解呢？就把它当成是和Collection一样的容器，Collection是通过不同的数据结构和API来操作容器中的元素；Optional则是提供API来判断容器中的元素是否为空，在此基础上还能根据是否为空的不同结果给出自定义的处理逻辑。这么说还是很抽象，直接上源码就会好理解一些。\n\n#### 成员变量\n\n```\n// 空的Optional对象\nprivate static final Optional<?> EMPTY = new Optional<>();\n// 容器中元素的值\nprivate final T value;\n```\n\n这个value是容器中元素的值，怎么理解呢，使用Optional是要通过它的API进行判空来达到避免NPE的现象，上面说到将Optional当成是一个容器，这个容器中的元素则是需要判空的对象，也就是说容器中的元素就是你传入的参数，这个value就是传参的值\n\n#### 构造方法\n无参构造，只是将value置为null\n\n```\nprivate Optional() {\n        this.value = null;\n}\n```\n\n有参构造\n\n```\nprivate Optional(T value) {\n    this.value = Objects.requireNonNull(value);\n}\n```\n\n其中返回Objects中的requireNonNull的方法，再看这个方法\n\n```\npublic static <T> T requireNonNull(T obj) {\n    if (obj == null)\n        throw new NullPointerException();\n    return obj;\n}\n```\n\n很简单如果obj为空抛出异常，不为空返回本身，所以有参构造的效果就是确认value不为空并给value赋值，如果是空就抛异常\n\n而且这两个构造函数是私有的，也就是说我们不能new出来\n\n#### 主要方法\n* empty()--返回空的Optional对象\n\n```\npublic static <T> Optional<T> empty() {\n    Optional var0 = EMPTY;\n    return var0;\n}\n```\n* of(T var1)--调用了有参构造，即有值返回带有该值得Optional对象，为空则会抛异常\n\n```\npublic static <T> Optional<T> of(T var0) {\n    return new Optional(var0);\n}\n```\n\n* ofNullable(T var0)--元素为null返回空的Option对象，不是null返回本身\n\n```\npublic static <T> Optional<T> ofNullable(T var0) {\n    return var0 == null ? empty() : of(var0);\n}\n```\n\n* get()--从名字就可以看出是获取元素的值，也就是返回value，如果是null的话会抛异常\n\n```\npublic T get() {\n    if (this.value == null) {\n        throw new NoSuchElementException(\"No value present\");\n    } else {\n        return this.value;\n    }\n}\n```\n\n* isPresent()--返回value是否为null\n\n```\npublic boolean isPresent() {\n    return this.value != null;\n}\n```\n\n* ifPresent(Consumer<? super T> var)--如果元素不是空的话执行var1中的逻辑，Consumer之前有文章写过，是接收一个参数执行一个没有返回值得逻辑\n\n```\npublic void ifPresent(Consumer<? super T> var1) {\n\tif (this.value != null) {\n\t    var1.accept(this.value);\n\t}\n}\n```\n\n* filter(Predicate<? super T> var1)--首先确保predicate对象和value不是null，然后用predicate对象对value进行筛选，满足条件返回本身，不满足条件返回空的对象（看源码是这个意思，具体怎什么情况用还想不到~）\n\n```\npublic Optional<T> filter(Predicate<? super T> var1) {\n    Objects.requireNonNull(var1);\n    if (!this.isPresent()) {\n        return this;\n    } else {\n        return var1.test(this.value) ? this : empty();\n    }\n}\n```\n\n* map(Function<? super T, ? extends U> var1)--同样确保var1不是null，之后value为空值返回空的Optional对象，value有值执行var1中的逻辑\n\n```\npublic <U> Optional<U> map(Function<? super T, ? extends U> var1) {\n    Objects.requireNonNull(var1);\n    return !this.isPresent() ? empty() : ofNullable(var1.apply(this.value));\n}\n```\n\n* flatMap(Function<? super T, Optional< U >> var1)--与map方法相同,不同的是入参，根据不同的参数结构使用不同的方法\n\n```\npublic <U> Optional<U> flatMap(Function<? super T, Optional<U>> var1) {\n    Objects.requireNonNull(var1);\n    return !this.isPresent() ? empty() : (Optional)Objects.requireNonNull(var1.apply(this.value));\n}\n```\n\n* T orElse(T var1)--获取value的值，不为空返回本身，为空返回入参var1\n\n```\npublic T orElse(T var1) {\n    return this.value != null ? this.value : var1;\n}\n```\n\n* T orElseGet(Supplier<? extends T> var1)--与orElse的逻辑一样，不同的是value为空返回的是supplier对象的逻辑\n\n```\npublic T orElseGet(Supplier<? extends T> var1) {\n    return this.value != null ? this.value : var1.get();\n}\n```\n\n* T orElseThrow(Supplier<? extends X> var1)--同样的逻辑，不同的是value为null会抛异常\n\n```\npublic <X extends Throwable> T orElseThrow(Supplier<? extends X> var1) throws X {\n    if (this.value != null) {\n        return this.value;\n    } else {\n        throw (Throwable)var1.get();\n    }\n}\n```\n\n#### 总结\n\n* of和ofNullable\n  * 都是取值，如果元素是null的话of会报空指针--不用，ofNullable将null转为空的对象没有空指针；\n  * get方法同样是取值，value是null也会抛异常--不用\n  * 最后，取值用ofNullable就完事了\n* isPresent和ifPresent\n  * isPresent返回元素是否为null，有返回值\n  * ifPresent元素不为空执行一段逻辑，无返回值\n  * 最后，只判断用isPresent有逻辑用ifPresent\n* filter、map和flatMap\n  * 都是将不是null的元素执行传入的逻辑，根据不同的需求选择方法\n* orElse、orElseGet和orElseThrow\n  *  都是将null的元素做转换，orElse返回传入的值，orElseGet返回传入的逻辑，这两个方法看需求没有逻辑有orElse有逻辑用orElseGet；orElseThrow元素为null抛异常--不用\n\n#### 栗子\n\n刚刚学习还不知道怎么使用，看到[一篇文章]（https://www.cnblogs.com/rjzheng/p/9163246.html） 给的栗子不错，很有借鉴意义，但是我对这篇文章中的orElse和orElseGet的栗子有不同意见。\n\n##### 栗子1\n\n* 使用前\n\n```\npublic String getCity(User user)  throws Exception{\n    if(user!=null){\n        if(user.getAddress()!=null){\n            Address address = user.getAddress();\n            if(address.getCity()!=null){\n                return address.getCity();\n            }\n        }\n    }\n    throw new Excpetion(\"取值错误\"); \n}\n```\n\n* 使用后\n\n```\npublic String getCity(User user) throws Exception{\n    return Optional.ofNullable(user)\n                   .map(u-> u.getAddress())\n                   .map(a->a.getCity())\n                   .orElseThrow(()->new Exception(\"取指错误\"));\n}\n```\n\n##### 栗子2\n\n* 使用前\n\n```\nif(user!=null){\n    dosomething(user);\n}\n```\n\n* 使用后\n\n```\n Optional.ofNullable(user)\n         .ifPresent(u->{\n            dosomething(u);\n         });\n```\n\n##### 栗子3\n\n* 使用前\n\n```\npublic User getUser(User user) throws Exception{\n\tif(user!=null){\n\t    String name = user.getName();\n\t    if(\"zhangsan\".equals(name)){\n\t        return user;\n\t    }\n\t}else{\n\t    user = new User();\n\t    user.setName(\"zhangsan\");\n\t    return user;\n\t}\n}\n```\n\n* 使用后\n\n```\npublic User getUser(User user) {\n    return Optional.ofNullable(user)\n                   .filter(u->\"zhangsan\".equals(u.getName()))\n                   .orElseGet(()-> {\n                        User user1 = new User();\n                        user1.setName(\"zhangsan\");\n                        return user1;\n                   });\n}\n```\n","slug":"Optional","published":1,"updated":"2021-07-13T12:27:08.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj6z001d81fyfgychovn","content":"<h3 id=\"Optional-使用及源码分析\"><a href=\"#Optional-使用及源码分析\" class=\"headerlink\" title=\"Optional 使用及源码分析\"></a>Optional 使用及源码分析</h3><p>A container object which may or may not contain a non-null value.</p>\n<p>可能包含空值的容器对象。</p>\n<p>怎么理解呢？就把它当成是和Collection一样的容器，Collection是通过不同的数据结构和API来操作容器中的元素；Optional则是提供API来判断容器中的元素是否为空，在此基础上还能根据是否为空的不同结果给出自定义的处理逻辑。这么说还是很抽象，直接上源码就会好理解一些。</p>\n<h4 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 空的Optional对象</span><br><span class=\"line\">private static final Optional&lt;?&gt; EMPTY = new Optional&lt;&gt;();</span><br><span class=\"line\">// 容器中元素的值</span><br><span class=\"line\">private final T value;</span><br></pre></td></tr></table></figure>\n<p>这个value是容器中元素的值，怎么理解呢，使用Optional是要通过它的API进行判空来达到避免NPE的现象，上面说到将Optional当成是一个容器，这个容器中的元素则是需要判空的对象，也就是说容器中的元素就是你传入的参数，这个value就是传参的值</p>\n<h4 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h4><p>无参构造，只是将value置为null</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private Optional() &#123;</span><br><span class=\"line\">        this.value = null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有参构造</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private Optional(T value) &#123;</span><br><span class=\"line\">    this.value = Objects.requireNonNull(value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中返回Objects中的requireNonNull的方法，再看这个方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static &lt;T&gt; T requireNonNull(T obj) &#123;</span><br><span class=\"line\">    if (obj == null)</span><br><span class=\"line\">        throw new NullPointerException();</span><br><span class=\"line\">    return obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很简单如果obj为空抛出异常，不为空返回本身，所以有参构造的效果就是确认value不为空并给value赋值，如果是空就抛异常</p>\n<p>而且这两个构造函数是私有的，也就是说我们不能new出来</p>\n<h4 id=\"主要方法\"><a href=\"#主要方法\" class=\"headerlink\" title=\"主要方法\"></a>主要方法</h4><ul>\n<li>empty()–返回空的Optional对象</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static &lt;T&gt; Optional&lt;T&gt; empty() &#123;</span><br><span class=\"line\">    Optional var0 = EMPTY;</span><br><span class=\"line\">    return var0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>of(T var1)–调用了有参构造，即有值返回带有该值得Optional对象，为空则会抛异常</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static &lt;T&gt; Optional&lt;T&gt; of(T var0) &#123;</span><br><span class=\"line\">    return new Optional(var0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>ofNullable(T var0)–元素为null返回空的Option对象，不是null返回本身</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static &lt;T&gt; Optional&lt;T&gt; ofNullable(T var0) &#123;</span><br><span class=\"line\">    return var0 == null ? empty() : of(var0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>get()–从名字就可以看出是获取元素的值，也就是返回value，如果是null的话会抛异常</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public T get() &#123;</span><br><span class=\"line\">    if (this.value == null) &#123;</span><br><span class=\"line\">        throw new NoSuchElementException(&quot;No value present&quot;);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return this.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>isPresent()–返回value是否为null</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean isPresent() &#123;</span><br><span class=\"line\">    return this.value != null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>ifPresent(Consumer&lt;? super T&gt; var)–如果元素不是空的话执行var1中的逻辑，Consumer之前有文章写过，是接收一个参数执行一个没有返回值得逻辑</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void ifPresent(Consumer&lt;? super T&gt; var1) &#123;</span><br><span class=\"line\">\tif (this.value != null) &#123;</span><br><span class=\"line\">\t    var1.accept(this.value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>filter(Predicate&lt;? super T&gt; var1)–首先确保predicate对象和value不是null，然后用predicate对象对value进行筛选，满足条件返回本身，不满足条件返回空的对象（看源码是这个意思，具体怎什么情况用还想不到~）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Optional&lt;T&gt; filter(Predicate&lt;? super T&gt; var1) &#123;</span><br><span class=\"line\">    Objects.requireNonNull(var1);</span><br><span class=\"line\">    if (!this.isPresent()) &#123;</span><br><span class=\"line\">        return this;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return var1.test(this.value) ? this : empty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>map(Function&lt;? super T, ? extends U&gt; var1)–同样确保var1不是null，之后value为空值返回空的Optional对象，value有值执行var1中的逻辑</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public &lt;U&gt; Optional&lt;U&gt; map(Function&lt;? super T, ? extends U&gt; var1) &#123;</span><br><span class=\"line\">    Objects.requireNonNull(var1);</span><br><span class=\"line\">    return !this.isPresent() ? empty() : ofNullable(var1.apply(this.value));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>flatMap(Function&lt;? super T, Optional&lt; U &gt;&gt; var1)–与map方法相同,不同的是入参，根据不同的参数结构使用不同的方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public &lt;U&gt; Optional&lt;U&gt; flatMap(Function&lt;? super T, Optional&lt;U&gt;&gt; var1) &#123;</span><br><span class=\"line\">    Objects.requireNonNull(var1);</span><br><span class=\"line\">    return !this.isPresent() ? empty() : (Optional)Objects.requireNonNull(var1.apply(this.value));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>T orElse(T var1)–获取value的值，不为空返回本身，为空返回入参var1</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public T orElse(T var1) &#123;</span><br><span class=\"line\">    return this.value != null ? this.value : var1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>T orElseGet(Supplier&lt;? extends T&gt; var1)–与orElse的逻辑一样，不同的是value为空返回的是supplier对象的逻辑</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public T orElseGet(Supplier&lt;? extends T&gt; var1) &#123;</span><br><span class=\"line\">    return this.value != null ? this.value : var1.get();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>T orElseThrow(Supplier&lt;? extends X&gt; var1)–同样的逻辑，不同的是value为null会抛异常</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public &lt;X extends Throwable&gt; T orElseThrow(Supplier&lt;? extends X&gt; var1) throws X &#123;</span><br><span class=\"line\">    if (this.value != null) &#123;</span><br><span class=\"line\">        return this.value;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw (Throwable)var1.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>of和ofNullable<ul>\n<li>都是取值，如果元素是null的话of会报空指针–不用，ofNullable将null转为空的对象没有空指针；</li>\n<li>get方法同样是取值，value是null也会抛异常–不用</li>\n<li>最后，取值用ofNullable就完事了</li>\n</ul>\n</li>\n<li>isPresent和ifPresent<ul>\n<li>isPresent返回元素是否为null，有返回值</li>\n<li>ifPresent元素不为空执行一段逻辑，无返回值</li>\n<li>最后，只判断用isPresent有逻辑用ifPresent</li>\n</ul>\n</li>\n<li>filter、map和flatMap<ul>\n<li>都是将不是null的元素执行传入的逻辑，根据不同的需求选择方法</li>\n</ul>\n</li>\n<li>orElse、orElseGet和orElseThrow<ul>\n<li>都是将null的元素做转换，orElse返回传入的值，orElseGet返回传入的逻辑，这两个方法看需求没有逻辑有orElse有逻辑用orElseGet；orElseThrow元素为null抛异常–不用</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"栗子\"><a href=\"#栗子\" class=\"headerlink\" title=\"栗子\"></a>栗子</h4><p>刚刚学习还不知道怎么使用，看到[一篇文章]（<a href=\"https://www.cnblogs.com/rjzheng/p/9163246.html）\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/rjzheng/p/9163246.html）</a> 给的栗子不错，很有借鉴意义，但是我对这篇文章中的orElse和orElseGet的栗子有不同意见。</p>\n<h5 id=\"栗子1\"><a href=\"#栗子1\" class=\"headerlink\" title=\"栗子1\"></a>栗子1</h5><ul>\n<li>使用前</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String getCity(User user)  throws Exception&#123;</span><br><span class=\"line\">    if(user!=null)&#123;</span><br><span class=\"line\">        if(user.getAddress()!=null)&#123;</span><br><span class=\"line\">            Address address = user.getAddress();</span><br><span class=\"line\">            if(address.getCity()!=null)&#123;</span><br><span class=\"line\">                return address.getCity();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    throw new Excpetion(&quot;取值错误&quot;); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用后</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String getCity(User user) throws Exception&#123;</span><br><span class=\"line\">    return Optional.ofNullable(user)</span><br><span class=\"line\">                   .map(u-&gt; u.getAddress())</span><br><span class=\"line\">                   .map(a-&gt;a.getCity())</span><br><span class=\"line\">                   .orElseThrow(()-&gt;new Exception(&quot;取指错误&quot;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"栗子2\"><a href=\"#栗子2\" class=\"headerlink\" title=\"栗子2\"></a>栗子2</h5><ul>\n<li>使用前</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(user!=null)&#123;</span><br><span class=\"line\">    dosomething(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用后</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional.ofNullable(user)</span><br><span class=\"line\">        .ifPresent(u-&gt;&#123;</span><br><span class=\"line\">           dosomething(u);</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"栗子3\"><a href=\"#栗子3\" class=\"headerlink\" title=\"栗子3\"></a>栗子3</h5><ul>\n<li>使用前</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public User getUser(User user) throws Exception&#123;</span><br><span class=\"line\">\tif(user!=null)&#123;</span><br><span class=\"line\">\t    String name = user.getName();</span><br><span class=\"line\">\t    if(&quot;zhangsan&quot;.equals(name))&#123;</span><br><span class=\"line\">\t        return user;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;else&#123;</span><br><span class=\"line\">\t    user = new User();</span><br><span class=\"line\">\t    user.setName(&quot;zhangsan&quot;);</span><br><span class=\"line\">\t    return user;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用后</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public User getUser(User user) &#123;</span><br><span class=\"line\">    return Optional.ofNullable(user)</span><br><span class=\"line\">                   .filter(u-&gt;&quot;zhangsan&quot;.equals(u.getName()))</span><br><span class=\"line\">                   .orElseGet(()-&gt; &#123;</span><br><span class=\"line\">                        User user1 = new User();</span><br><span class=\"line\">                        user1.setName(&quot;zhangsan&quot;);</span><br><span class=\"line\">                        return user1;</span><br><span class=\"line\">                   &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Optional-使用及源码分析\"><a href=\"#Optional-使用及源码分析\" class=\"headerlink\" title=\"Optional 使用及源码分析\"></a>Optional 使用及源码分析</h3><p>A container object which may or may not contain a non-null value.</p>\n<p>可能包含空值的容器对象。</p>\n<p>怎么理解呢？就把它当成是和Collection一样的容器，Collection是通过不同的数据结构和API来操作容器中的元素；Optional则是提供API来判断容器中的元素是否为空，在此基础上还能根据是否为空的不同结果给出自定义的处理逻辑。这么说还是很抽象，直接上源码就会好理解一些。</p>\n<h4 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 空的Optional对象</span><br><span class=\"line\">private static final Optional&lt;?&gt; EMPTY = new Optional&lt;&gt;();</span><br><span class=\"line\">// 容器中元素的值</span><br><span class=\"line\">private final T value;</span><br></pre></td></tr></table></figure>\n<p>这个value是容器中元素的值，怎么理解呢，使用Optional是要通过它的API进行判空来达到避免NPE的现象，上面说到将Optional当成是一个容器，这个容器中的元素则是需要判空的对象，也就是说容器中的元素就是你传入的参数，这个value就是传参的值</p>\n<h4 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h4><p>无参构造，只是将value置为null</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private Optional() &#123;</span><br><span class=\"line\">        this.value = null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有参构造</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private Optional(T value) &#123;</span><br><span class=\"line\">    this.value = Objects.requireNonNull(value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中返回Objects中的requireNonNull的方法，再看这个方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static &lt;T&gt; T requireNonNull(T obj) &#123;</span><br><span class=\"line\">    if (obj == null)</span><br><span class=\"line\">        throw new NullPointerException();</span><br><span class=\"line\">    return obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很简单如果obj为空抛出异常，不为空返回本身，所以有参构造的效果就是确认value不为空并给value赋值，如果是空就抛异常</p>\n<p>而且这两个构造函数是私有的，也就是说我们不能new出来</p>\n<h4 id=\"主要方法\"><a href=\"#主要方法\" class=\"headerlink\" title=\"主要方法\"></a>主要方法</h4><ul>\n<li>empty()–返回空的Optional对象</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static &lt;T&gt; Optional&lt;T&gt; empty() &#123;</span><br><span class=\"line\">    Optional var0 = EMPTY;</span><br><span class=\"line\">    return var0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>of(T var1)–调用了有参构造，即有值返回带有该值得Optional对象，为空则会抛异常</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static &lt;T&gt; Optional&lt;T&gt; of(T var0) &#123;</span><br><span class=\"line\">    return new Optional(var0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>ofNullable(T var0)–元素为null返回空的Option对象，不是null返回本身</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static &lt;T&gt; Optional&lt;T&gt; ofNullable(T var0) &#123;</span><br><span class=\"line\">    return var0 == null ? empty() : of(var0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>get()–从名字就可以看出是获取元素的值，也就是返回value，如果是null的话会抛异常</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public T get() &#123;</span><br><span class=\"line\">    if (this.value == null) &#123;</span><br><span class=\"line\">        throw new NoSuchElementException(&quot;No value present&quot;);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return this.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>isPresent()–返回value是否为null</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean isPresent() &#123;</span><br><span class=\"line\">    return this.value != null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>ifPresent(Consumer&lt;? super T&gt; var)–如果元素不是空的话执行var1中的逻辑，Consumer之前有文章写过，是接收一个参数执行一个没有返回值得逻辑</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void ifPresent(Consumer&lt;? super T&gt; var1) &#123;</span><br><span class=\"line\">\tif (this.value != null) &#123;</span><br><span class=\"line\">\t    var1.accept(this.value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>filter(Predicate&lt;? super T&gt; var1)–首先确保predicate对象和value不是null，然后用predicate对象对value进行筛选，满足条件返回本身，不满足条件返回空的对象（看源码是这个意思，具体怎什么情况用还想不到~）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Optional&lt;T&gt; filter(Predicate&lt;? super T&gt; var1) &#123;</span><br><span class=\"line\">    Objects.requireNonNull(var1);</span><br><span class=\"line\">    if (!this.isPresent()) &#123;</span><br><span class=\"line\">        return this;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return var1.test(this.value) ? this : empty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>map(Function&lt;? super T, ? extends U&gt; var1)–同样确保var1不是null，之后value为空值返回空的Optional对象，value有值执行var1中的逻辑</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public &lt;U&gt; Optional&lt;U&gt; map(Function&lt;? super T, ? extends U&gt; var1) &#123;</span><br><span class=\"line\">    Objects.requireNonNull(var1);</span><br><span class=\"line\">    return !this.isPresent() ? empty() : ofNullable(var1.apply(this.value));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>flatMap(Function&lt;? super T, Optional&lt; U &gt;&gt; var1)–与map方法相同,不同的是入参，根据不同的参数结构使用不同的方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public &lt;U&gt; Optional&lt;U&gt; flatMap(Function&lt;? super T, Optional&lt;U&gt;&gt; var1) &#123;</span><br><span class=\"line\">    Objects.requireNonNull(var1);</span><br><span class=\"line\">    return !this.isPresent() ? empty() : (Optional)Objects.requireNonNull(var1.apply(this.value));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>T orElse(T var1)–获取value的值，不为空返回本身，为空返回入参var1</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public T orElse(T var1) &#123;</span><br><span class=\"line\">    return this.value != null ? this.value : var1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>T orElseGet(Supplier&lt;? extends T&gt; var1)–与orElse的逻辑一样，不同的是value为空返回的是supplier对象的逻辑</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public T orElseGet(Supplier&lt;? extends T&gt; var1) &#123;</span><br><span class=\"line\">    return this.value != null ? this.value : var1.get();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>T orElseThrow(Supplier&lt;? extends X&gt; var1)–同样的逻辑，不同的是value为null会抛异常</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public &lt;X extends Throwable&gt; T orElseThrow(Supplier&lt;? extends X&gt; var1) throws X &#123;</span><br><span class=\"line\">    if (this.value != null) &#123;</span><br><span class=\"line\">        return this.value;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw (Throwable)var1.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>of和ofNullable<ul>\n<li>都是取值，如果元素是null的话of会报空指针–不用，ofNullable将null转为空的对象没有空指针；</li>\n<li>get方法同样是取值，value是null也会抛异常–不用</li>\n<li>最后，取值用ofNullable就完事了</li>\n</ul>\n</li>\n<li>isPresent和ifPresent<ul>\n<li>isPresent返回元素是否为null，有返回值</li>\n<li>ifPresent元素不为空执行一段逻辑，无返回值</li>\n<li>最后，只判断用isPresent有逻辑用ifPresent</li>\n</ul>\n</li>\n<li>filter、map和flatMap<ul>\n<li>都是将不是null的元素执行传入的逻辑，根据不同的需求选择方法</li>\n</ul>\n</li>\n<li>orElse、orElseGet和orElseThrow<ul>\n<li>都是将null的元素做转换，orElse返回传入的值，orElseGet返回传入的逻辑，这两个方法看需求没有逻辑有orElse有逻辑用orElseGet；orElseThrow元素为null抛异常–不用</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"栗子\"><a href=\"#栗子\" class=\"headerlink\" title=\"栗子\"></a>栗子</h4><p>刚刚学习还不知道怎么使用，看到[一篇文章]（<a href=\"https://www.cnblogs.com/rjzheng/p/9163246.html）\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/rjzheng/p/9163246.html）</a> 给的栗子不错，很有借鉴意义，但是我对这篇文章中的orElse和orElseGet的栗子有不同意见。</p>\n<h5 id=\"栗子1\"><a href=\"#栗子1\" class=\"headerlink\" title=\"栗子1\"></a>栗子1</h5><ul>\n<li>使用前</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String getCity(User user)  throws Exception&#123;</span><br><span class=\"line\">    if(user!=null)&#123;</span><br><span class=\"line\">        if(user.getAddress()!=null)&#123;</span><br><span class=\"line\">            Address address = user.getAddress();</span><br><span class=\"line\">            if(address.getCity()!=null)&#123;</span><br><span class=\"line\">                return address.getCity();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    throw new Excpetion(&quot;取值错误&quot;); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用后</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String getCity(User user) throws Exception&#123;</span><br><span class=\"line\">    return Optional.ofNullable(user)</span><br><span class=\"line\">                   .map(u-&gt; u.getAddress())</span><br><span class=\"line\">                   .map(a-&gt;a.getCity())</span><br><span class=\"line\">                   .orElseThrow(()-&gt;new Exception(&quot;取指错误&quot;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"栗子2\"><a href=\"#栗子2\" class=\"headerlink\" title=\"栗子2\"></a>栗子2</h5><ul>\n<li>使用前</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(user!=null)&#123;</span><br><span class=\"line\">    dosomething(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用后</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional.ofNullable(user)</span><br><span class=\"line\">        .ifPresent(u-&gt;&#123;</span><br><span class=\"line\">           dosomething(u);</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"栗子3\"><a href=\"#栗子3\" class=\"headerlink\" title=\"栗子3\"></a>栗子3</h5><ul>\n<li>使用前</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public User getUser(User user) throws Exception&#123;</span><br><span class=\"line\">\tif(user!=null)&#123;</span><br><span class=\"line\">\t    String name = user.getName();</span><br><span class=\"line\">\t    if(&quot;zhangsan&quot;.equals(name))&#123;</span><br><span class=\"line\">\t        return user;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;else&#123;</span><br><span class=\"line\">\t    user = new User();</span><br><span class=\"line\">\t    user.setName(&quot;zhangsan&quot;);</span><br><span class=\"line\">\t    return user;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用后</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public User getUser(User user) &#123;</span><br><span class=\"line\">    return Optional.ofNullable(user)</span><br><span class=\"line\">                   .filter(u-&gt;&quot;zhangsan&quot;.equals(u.getName()))</span><br><span class=\"line\">                   .orElseGet(()-&gt; &#123;</span><br><span class=\"line\">                        User user1 = new User();</span><br><span class=\"line\">                        user1.setName(&quot;zhangsan&quot;);</span><br><span class=\"line\">                        return user1;</span><br><span class=\"line\">                   &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"SpringMVC入门","author":"YyWang","catagories":"SpringMVC","date":"2019-07-11T07:22:35.000Z","_content":"## SpringMVC配置\n\n*注解&配置文件*\n\n### 注解\n\n#### web.xml\n\n- \n![upload successful](/images/pasted-5.png)\n\n- ①指定Spring配置文件的位置\n\n- ②配置Listener，初始化SpringIOC容器\n\n- ③配置前端控制器servlet，其中可以自定义配置文件位置，不配置默认寻找xxxx-servlet.xml的配置文件\n\n- url-pattern中/和/*区别\n\n  - /*    匹配所有url  有后缀或者无后缀都会匹配   .jsp  .css  .js\n  - /      只匹配无后缀的url\n\n  \n\n***注：截图为项目中的配置  自己测试时改为 /  项目中拦截所有页面应该会有拦截器或者过滤器做处理，demo中如果配置成截图这样会报错***\n\n#### springmvc-servlet.xml\n\n\n![upload successful](/images/pasted-6.png)\n\n- 指定基础包名scan，将指定的包名注入SpringIOC容器（先要添加context的xsd约束）\n\n  - ```\n    xmlns:context=\"http://www.springframework.org/schema/context\"\n    ```\n    xsi中添加 \n    \"http://www.springframework.org/schema/context       http://www.springframework.org/schema/context/spring-context.xsd\"\n\n\n- exclude-filter 指定类与Spring容器分开加载（先这么理解）\n\n- 配置视图解析器（前缀和后缀）\n\n  \n\n**方法中使用@RequestMapping(value=\"search\")  理解为匹配URL中search的字样**\n\n**方法return \"iface/manage\";  从匹配的前后缀中寻找应该返回的视图，例如通过上图的配置找到/iface/manage.vm**\n\n*在Controller类上添加@Controller，方法上添加@RequestMapping(\"xxxx\")，即可完成映射*\n#### 配置完成访问报错\n\n\n![upload successful](/images/pasted-7.png)\n\n- 没有jstl标签库，导入依赖即可\n\n- ```XML\n  <dependency>  \n      <groupId>javax.servlet</groupId>  \n      <artifactId>jstl</artifactId>  \n  </dependency>\n  ```\n\n### 配置文件\n#### web.xml\n+ 和注解方式一样\n![upload successful](/images/pasted-8.png)\n#### springmvc-servlet.xml\n+ \n![upload successful](/images/pasted-9.png)\n+ ①配置处理器映射器\n+ ②配置处理器适配器\n+ ③配置视图解析器（同注解方式）\n+ ④配置映射（相当于注解中的@RequestMapping）\n\n*相较于注解方式该配置文件中多了对 处理器映射器、处理器适配器 以及映射的配置*\n\n*实现方面在controller类中不添加任何注解，实现Controller接口，重写方法即可*\n \ndemo：https://github.com/panniyuyu/frameworkdemo.git\n\n## 理解\n通过使用不同方式对springMVC进行配置，感觉对SpringMVC框架大致的原理有一些认识\n\nSpringMVC使将MVC的模式进一步拆分解耦，整个过程主要包含4个主要的部分依次是 前端控制器（DispatcherServlet）、处理器映射器（HandlerMapping）、处理器适配器（HandlerAdapter）、视图解析器（ViewResolver）\n\n![upload successful](/images/pasted-10.png)\n+ 1.用户发起请求，被前端控制器（DispatcherServlet）拦截，并根据请求内容询问处理器映射器（HandlerMapping）改请求应该由哪个Controller处理，处理器映射器将匹配到的Controller信息返回给前端控制器\n+ 2.前端控制器知道该请求应该由哪个Controller处理，但不会自己处理，将Controller信息交给处理器适配器（HandlerAdapter）处理，返回ModelAndView对象\n+ 3.前端控制器得到ModelAndView对象将其转发给视图解析器，将对象解析成view页面返回\n+ 4.前端控制器将view页面相应给浏览器","source":"_posts/SpringMVC.md","raw":"title: SpringMVC入门\nauthor: YyWang\ntags: SpringMVC\ncatagories: SpringMVC\ndate: 2019-07-11 15:22:35\n---\n## SpringMVC配置\n\n*注解&配置文件*\n\n### 注解\n\n#### web.xml\n\n- \n![upload successful](/images/pasted-5.png)\n\n- ①指定Spring配置文件的位置\n\n- ②配置Listener，初始化SpringIOC容器\n\n- ③配置前端控制器servlet，其中可以自定义配置文件位置，不配置默认寻找xxxx-servlet.xml的配置文件\n\n- url-pattern中/和/*区别\n\n  - /*    匹配所有url  有后缀或者无后缀都会匹配   .jsp  .css  .js\n  - /      只匹配无后缀的url\n\n  \n\n***注：截图为项目中的配置  自己测试时改为 /  项目中拦截所有页面应该会有拦截器或者过滤器做处理，demo中如果配置成截图这样会报错***\n\n#### springmvc-servlet.xml\n\n\n![upload successful](/images/pasted-6.png)\n\n- 指定基础包名scan，将指定的包名注入SpringIOC容器（先要添加context的xsd约束）\n\n  - ```\n    xmlns:context=\"http://www.springframework.org/schema/context\"\n    ```\n    xsi中添加 \n    \"http://www.springframework.org/schema/context       http://www.springframework.org/schema/context/spring-context.xsd\"\n\n\n- exclude-filter 指定类与Spring容器分开加载（先这么理解）\n\n- 配置视图解析器（前缀和后缀）\n\n  \n\n**方法中使用@RequestMapping(value=\"search\")  理解为匹配URL中search的字样**\n\n**方法return \"iface/manage\";  从匹配的前后缀中寻找应该返回的视图，例如通过上图的配置找到/iface/manage.vm**\n\n*在Controller类上添加@Controller，方法上添加@RequestMapping(\"xxxx\")，即可完成映射*\n#### 配置完成访问报错\n\n\n![upload successful](/images/pasted-7.png)\n\n- 没有jstl标签库，导入依赖即可\n\n- ```XML\n  <dependency>  \n      <groupId>javax.servlet</groupId>  \n      <artifactId>jstl</artifactId>  \n  </dependency>\n  ```\n\n### 配置文件\n#### web.xml\n+ 和注解方式一样\n![upload successful](/images/pasted-8.png)\n#### springmvc-servlet.xml\n+ \n![upload successful](/images/pasted-9.png)\n+ ①配置处理器映射器\n+ ②配置处理器适配器\n+ ③配置视图解析器（同注解方式）\n+ ④配置映射（相当于注解中的@RequestMapping）\n\n*相较于注解方式该配置文件中多了对 处理器映射器、处理器适配器 以及映射的配置*\n\n*实现方面在controller类中不添加任何注解，实现Controller接口，重写方法即可*\n \ndemo：https://github.com/panniyuyu/frameworkdemo.git\n\n## 理解\n通过使用不同方式对springMVC进行配置，感觉对SpringMVC框架大致的原理有一些认识\n\nSpringMVC使将MVC的模式进一步拆分解耦，整个过程主要包含4个主要的部分依次是 前端控制器（DispatcherServlet）、处理器映射器（HandlerMapping）、处理器适配器（HandlerAdapter）、视图解析器（ViewResolver）\n\n![upload successful](/images/pasted-10.png)\n+ 1.用户发起请求，被前端控制器（DispatcherServlet）拦截，并根据请求内容询问处理器映射器（HandlerMapping）改请求应该由哪个Controller处理，处理器映射器将匹配到的Controller信息返回给前端控制器\n+ 2.前端控制器知道该请求应该由哪个Controller处理，但不会自己处理，将Controller信息交给处理器适配器（HandlerAdapter）处理，返回ModelAndView对象\n+ 3.前端控制器得到ModelAndView对象将其转发给视图解析器，将对象解析成view页面返回\n+ 4.前端控制器将view页面相应给浏览器","slug":"SpringMVC","published":1,"updated":"2021-07-13T12:27:08.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj71001h81fyhxhfyuc7","content":"<h2 id=\"SpringMVC配置\"><a href=\"#SpringMVC配置\" class=\"headerlink\" title=\"SpringMVC配置\"></a>SpringMVC配置</h2><p><em>注解&amp;配置文件</em></p>\n<h3 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h3><h4 id=\"web-xml\"><a href=\"#web-xml\" class=\"headerlink\" title=\"web.xml\"></a>web.xml</h4><ul>\n<li><p><img src=\"/images/pasted-5.png\" alt=\"upload successful\"></p>\n</li>\n<li><p>①指定Spring配置文件的位置</p>\n</li>\n<li><p>②配置Listener，初始化SpringIOC容器</p>\n</li>\n<li><p>③配置前端控制器servlet，其中可以自定义配置文件位置，不配置默认寻找xxxx-servlet.xml的配置文件</p>\n</li>\n<li><p>url-pattern中/和/*区别</p>\n<ul>\n<li>/*    匹配所有url  有后缀或者无后缀都会匹配   .jsp  .css  .js</li>\n<li>/      只匹配无后缀的url</li>\n</ul>\n</li>\n</ul>\n<p><strong><em>注：截图为项目中的配置  自己测试时改为 /  项目中拦截所有页面应该会有拦截器或者过滤器做处理，demo中如果配置成截图这样会报错</em></strong></p>\n<h4 id=\"springmvc-servlet-xml\"><a href=\"#springmvc-servlet-xml\" class=\"headerlink\" title=\"springmvc-servlet.xml\"></a>springmvc-servlet.xml</h4><p><img src=\"/images/pasted-6.png\" alt=\"upload successful\"></p>\n<ul>\n<li><p>指定基础包名scan，将指定的包名注入SpringIOC容器（先要添加context的xsd约束）</p>\n<ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br></pre></td></tr></table></figure>\n<p>xsi中添加<br>“<a href=\"http://www.springframework.org/schema/context\" target=\"_blank\" rel=\"noopener\">http://www.springframework.org/schema/context</a>       <a href=\"http://www.springframework.org/schema/context/spring-context.xsd&quot;\" target=\"_blank\" rel=\"noopener\">http://www.springframework.org/schema/context/spring-context.xsd&quot;</a></p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>exclude-filter 指定类与Spring容器分开加载（先这么理解）</p>\n</li>\n<li><p>配置视图解析器（前缀和后缀）</p>\n</li>\n</ul>\n<p><strong>方法中使用@RequestMapping(value=”search”)  理解为匹配URL中search的字样</strong></p>\n<p><strong>方法return “iface/manage”;  从匹配的前后缀中寻找应该返回的视图，例如通过上图的配置找到/iface/manage.vm</strong></p>\n<p><em>在Controller类上添加@Controller，方法上添加@RequestMapping(“xxxx”)，即可完成映射</em></p>\n<h4 id=\"配置完成访问报错\"><a href=\"#配置完成访问报错\" class=\"headerlink\" title=\"配置完成访问报错\"></a>配置完成访问报错</h4><p><img src=\"/images/pasted-7.png\" alt=\"upload successful\"></p>\n<ul>\n<li><p>没有jstl标签库，导入依赖即可</p>\n</li>\n<li><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><h4 id=\"web-xml-1\"><a href=\"#web-xml-1\" class=\"headerlink\" title=\"web.xml\"></a>web.xml</h4><ul>\n<li>和注解方式一样<br><img src=\"/images/pasted-8.png\" alt=\"upload successful\"><h4 id=\"springmvc-servlet-xml-1\"><a href=\"#springmvc-servlet-xml-1\" class=\"headerlink\" title=\"springmvc-servlet.xml\"></a>springmvc-servlet.xml</h4></li>\n<li><img src=\"/images/pasted-9.png\" alt=\"upload successful\"></li>\n<li>①配置处理器映射器</li>\n<li>②配置处理器适配器</li>\n<li>③配置视图解析器（同注解方式）</li>\n<li>④配置映射（相当于注解中的@RequestMapping）</li>\n</ul>\n<p><em>相较于注解方式该配置文件中多了对 处理器映射器、处理器适配器 以及映射的配置</em></p>\n<p><em>实现方面在controller类中不添加任何注解，实现Controller接口，重写方法即可</em></p>\n<p>demo：<a href=\"https://github.com/panniyuyu/frameworkdemo.git\" target=\"_blank\" rel=\"noopener\">https://github.com/panniyuyu/frameworkdemo.git</a></p>\n<h2 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h2><p>通过使用不同方式对springMVC进行配置，感觉对SpringMVC框架大致的原理有一些认识</p>\n<p>SpringMVC使将MVC的模式进一步拆分解耦，整个过程主要包含4个主要的部分依次是 前端控制器（DispatcherServlet）、处理器映射器（HandlerMapping）、处理器适配器（HandlerAdapter）、视图解析器（ViewResolver）</p>\n<p><img src=\"/images/pasted-10.png\" alt=\"upload successful\"></p>\n<ul>\n<li>1.用户发起请求，被前端控制器（DispatcherServlet）拦截，并根据请求内容询问处理器映射器（HandlerMapping）改请求应该由哪个Controller处理，处理器映射器将匹配到的Controller信息返回给前端控制器</li>\n<li>2.前端控制器知道该请求应该由哪个Controller处理，但不会自己处理，将Controller信息交给处理器适配器（HandlerAdapter）处理，返回ModelAndView对象</li>\n<li>3.前端控制器得到ModelAndView对象将其转发给视图解析器，将对象解析成view页面返回</li>\n<li>4.前端控制器将view页面相应给浏览器</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"SpringMVC配置\"><a href=\"#SpringMVC配置\" class=\"headerlink\" title=\"SpringMVC配置\"></a>SpringMVC配置</h2><p><em>注解&amp;配置文件</em></p>\n<h3 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h3><h4 id=\"web-xml\"><a href=\"#web-xml\" class=\"headerlink\" title=\"web.xml\"></a>web.xml</h4><ul>\n<li><p><img src=\"/images/pasted-5.png\" alt=\"upload successful\"></p>\n</li>\n<li><p>①指定Spring配置文件的位置</p>\n</li>\n<li><p>②配置Listener，初始化SpringIOC容器</p>\n</li>\n<li><p>③配置前端控制器servlet，其中可以自定义配置文件位置，不配置默认寻找xxxx-servlet.xml的配置文件</p>\n</li>\n<li><p>url-pattern中/和/*区别</p>\n<ul>\n<li>/*    匹配所有url  有后缀或者无后缀都会匹配   .jsp  .css  .js</li>\n<li>/      只匹配无后缀的url</li>\n</ul>\n</li>\n</ul>\n<p><strong><em>注：截图为项目中的配置  自己测试时改为 /  项目中拦截所有页面应该会有拦截器或者过滤器做处理，demo中如果配置成截图这样会报错</em></strong></p>\n<h4 id=\"springmvc-servlet-xml\"><a href=\"#springmvc-servlet-xml\" class=\"headerlink\" title=\"springmvc-servlet.xml\"></a>springmvc-servlet.xml</h4><p><img src=\"/images/pasted-6.png\" alt=\"upload successful\"></p>\n<ul>\n<li><p>指定基础包名scan，将指定的包名注入SpringIOC容器（先要添加context的xsd约束）</p>\n<ul>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br></pre></td></tr></table></figure>\n<p>xsi中添加<br>“<a href=\"http://www.springframework.org/schema/context\" target=\"_blank\" rel=\"noopener\">http://www.springframework.org/schema/context</a>       <a href=\"http://www.springframework.org/schema/context/spring-context.xsd&quot;\" target=\"_blank\" rel=\"noopener\">http://www.springframework.org/schema/context/spring-context.xsd&quot;</a></p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>exclude-filter 指定类与Spring容器分开加载（先这么理解）</p>\n</li>\n<li><p>配置视图解析器（前缀和后缀）</p>\n</li>\n</ul>\n<p><strong>方法中使用@RequestMapping(value=”search”)  理解为匹配URL中search的字样</strong></p>\n<p><strong>方法return “iface/manage”;  从匹配的前后缀中寻找应该返回的视图，例如通过上图的配置找到/iface/manage.vm</strong></p>\n<p><em>在Controller类上添加@Controller，方法上添加@RequestMapping(“xxxx”)，即可完成映射</em></p>\n<h4 id=\"配置完成访问报错\"><a href=\"#配置完成访问报错\" class=\"headerlink\" title=\"配置完成访问报错\"></a>配置完成访问报错</h4><p><img src=\"/images/pasted-7.png\" alt=\"upload successful\"></p>\n<ul>\n<li><p>没有jstl标签库，导入依赖即可</p>\n</li>\n<li><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><h4 id=\"web-xml-1\"><a href=\"#web-xml-1\" class=\"headerlink\" title=\"web.xml\"></a>web.xml</h4><ul>\n<li>和注解方式一样<br><img src=\"/images/pasted-8.png\" alt=\"upload successful\"><h4 id=\"springmvc-servlet-xml-1\"><a href=\"#springmvc-servlet-xml-1\" class=\"headerlink\" title=\"springmvc-servlet.xml\"></a>springmvc-servlet.xml</h4></li>\n<li><img src=\"/images/pasted-9.png\" alt=\"upload successful\"></li>\n<li>①配置处理器映射器</li>\n<li>②配置处理器适配器</li>\n<li>③配置视图解析器（同注解方式）</li>\n<li>④配置映射（相当于注解中的@RequestMapping）</li>\n</ul>\n<p><em>相较于注解方式该配置文件中多了对 处理器映射器、处理器适配器 以及映射的配置</em></p>\n<p><em>实现方面在controller类中不添加任何注解，实现Controller接口，重写方法即可</em></p>\n<p>demo：<a href=\"https://github.com/panniyuyu/frameworkdemo.git\" target=\"_blank\" rel=\"noopener\">https://github.com/panniyuyu/frameworkdemo.git</a></p>\n<h2 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h2><p>通过使用不同方式对springMVC进行配置，感觉对SpringMVC框架大致的原理有一些认识</p>\n<p>SpringMVC使将MVC的模式进一步拆分解耦，整个过程主要包含4个主要的部分依次是 前端控制器（DispatcherServlet）、处理器映射器（HandlerMapping）、处理器适配器（HandlerAdapter）、视图解析器（ViewResolver）</p>\n<p><img src=\"/images/pasted-10.png\" alt=\"upload successful\"></p>\n<ul>\n<li>1.用户发起请求，被前端控制器（DispatcherServlet）拦截，并根据请求内容询问处理器映射器（HandlerMapping）改请求应该由哪个Controller处理，处理器映射器将匹配到的Controller信息返回给前端控制器</li>\n<li>2.前端控制器知道该请求应该由哪个Controller处理，但不会自己处理，将Controller信息交给处理器适配器（HandlerAdapter）处理，返回ModelAndView对象</li>\n<li>3.前端控制器得到ModelAndView对象将其转发给视图解析器，将对象解析成view页面返回</li>\n<li>4.前端控制器将view页面相应给浏览器</li>\n</ul>\n"},{"title":"SQL Explain记录","author":"YyWang","catagories":"SQL","date":"2019-11-16T06:43:30.000Z","_content":"要优化SQL必须得使用Explain，这里记录一下Explain的使用，直接查看即可，摘自[MySQL Explain详解](https://www.cnblogs.com/tufujie/p/9413852.html)\n\nexplain 直接加载SQL语句之前，然后一起执行即可，只能分析查询语句，会出现以下结果\n![upload successful](/images/pasted-20.png)\n\n\n### ID \nselect的查询顺序标识，SQL顺序由大到小执行，id相同从上往下顺序执行\n\n### select_type\nselect的类型\n\n* SIMPLE(简单SELECT，不使用UNION或子查询等)\n\n* PRIMARY(子查询中最外层查询，查询中若包含任何复杂的子部分，最外层的select被标记为PRIMARY)\n\n* UNION(UNION中的第二个或后面的SELECT语句)\n\n* DEPENDENT UNION(UNION中的第二个或后面的SELECT语句，取决于外面的查询)\n\n* UNION RESULT(UNION的结果，union语句中第二个select开始后面所有select)\n\n* SUBQUERY(子查询中的第一个SELECT，结果不依赖于外部查询)\n\n* DEPENDENT SUBQUERY(子查询中的第一个SELECT，依赖于外部查询)\n\n* DERIVED(派生表的SELECT, FROM子句的子查询)\n\n* UNCACHEABLE SUBQUERY(一个子查询的结果不能被缓存，必须重新评估外链接的第一行)\n\n### table\n\n显示这一步所访问数据库中表名称（显示这一行的数据是关于哪张表的），有时不是真实的表名字，可能是简称，例如上面的e，d，也可能是第几步执行的结果的简称\n\n### type\n\n对表访问方式，表示MySQL在表中找到所需行的方式，又称“访问类型”。\n\n常用的类型有： ALL、index、range、 ref、eq_ref、const、system、NULL（从左到右，性能从差到好）\n\n* ALL：Full Table Scan， MySQL将遍历全表以找到匹配的行\n\n* index: Full Index Scan，index与ALL区别为index类型只遍历索引树\n\n* range:只检索给定范围的行，使用一个索引来选择行\n\n* ref: 表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值\n\n* eq_ref: 类似ref，区别就在使用的索引是唯一索引，对于每个索引键值，表中只有一条记录匹配，简单来说，就是多表连接中使用primary key或者 unique key作为关联条件\n\n* const、system: 当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问。如将主键置于where列表中，MySQL就能将该查询转换为一个常量，system是const类型的特例，当查询的表只有一行的情况下，使用system\n\n* NULL: MySQL在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成。\n\n### possible_keys\n\n指出MySQL能使用哪个索引在表中找到记录，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用（该查询可以利用的索引，如果没有任何索引显示 null）\n\n该列完全独立于EXPLAIN输出所示的表的次序。这意味着在possible_keys中的某些键实际上不能按生成的表次序使用。\n如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查WHERE子句看是否它引用某些列或适合索引的列来提高你的查询性能。如果是这样，创造一个适当的索引并且再次用EXPLAIN检查查询\n\n \n\n### Key\n\nkey列显示MySQL实际决定使用的键（索引），必然包含在possible_keys中\n\n如果没有选择索引，键是NULL。要想强制MySQL使用或忽视possible_keys列中的索引，在查询中使用FORCE INDEX、USE INDEX或者IGNORE INDEX。\n\n \n\n### key_len\n\n表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度（key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的）\n\n不损失精确性的情况下，长度越短越好 \n\n \n\n### ref\n\n列与索引的比较，表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值\n\n \n\n### rows\n\n估算出结果集行数，表示MySQL根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数\n\n### Extra\n\n该列包含MySQL解决查询的详细信息,有以下几种情况：\n\n* Using where:不用读取表中所有信息，仅通过索引就可以获取所需数据，这发生在对表的全部的请求列都是同一个索引的部分的时候，表示mysql服务器将在存储引擎检索行后再进行过滤\n\n* Using temporary：表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询，常见 group by ; order by\n\n* Using filesort：当Query中包含 order by 操作，而且无法利用索引完成的排序操作称为“文件排序”\n\n* Using join buffer：改值强调了在获取连接条件时没有使用索引，并且需要连接缓冲区来存储中间结果。如果出现了这个值，那应该注意，根据查询的具体情况可能需要添加索引来改进能。\n\n* Impossible where：这个值强调了where语句会导致没有符合条件的行（通过收集统计信息不可能存在结果）。\n\n* Select tables optimized away：这个值意味着仅通过使用索引，优化器可能仅从聚合函数结果中返回一行\n\n* No tables used：Query语句中使用from dual 或不含任何from子句\n\n### 总结：\n* EXPLAIN不会告诉你关于触发器、存储过程的信息或用户自定义函数对查询的影响情况\n* EXPLAIN不考虑各种Cache\n* EXPLAIN不能显示MySQL在执行查询时所作的优化工作\n* 部分统计信息是估算的，并非精确值\n* EXPALIN只能解释SELECT操作，其他操作要重写为SELECT后查看执行计划。\n\n\n### 重点关注：\n\n**type至少达到range级别**\n\n**key列有值，并且key_len越少越好，做到有索引的查询**\n\n**rows列越少越好**\n\n\n","source":"_posts/SQL-Explain记录.md","raw":"title: SQL Explain记录\nauthor: YyWang\ntags: SQL\ncatagories: SQL\ndate: 2019-11-16 14:43:30\n---\n要优化SQL必须得使用Explain，这里记录一下Explain的使用，直接查看即可，摘自[MySQL Explain详解](https://www.cnblogs.com/tufujie/p/9413852.html)\n\nexplain 直接加载SQL语句之前，然后一起执行即可，只能分析查询语句，会出现以下结果\n![upload successful](/images/pasted-20.png)\n\n\n### ID \nselect的查询顺序标识，SQL顺序由大到小执行，id相同从上往下顺序执行\n\n### select_type\nselect的类型\n\n* SIMPLE(简单SELECT，不使用UNION或子查询等)\n\n* PRIMARY(子查询中最外层查询，查询中若包含任何复杂的子部分，最外层的select被标记为PRIMARY)\n\n* UNION(UNION中的第二个或后面的SELECT语句)\n\n* DEPENDENT UNION(UNION中的第二个或后面的SELECT语句，取决于外面的查询)\n\n* UNION RESULT(UNION的结果，union语句中第二个select开始后面所有select)\n\n* SUBQUERY(子查询中的第一个SELECT，结果不依赖于外部查询)\n\n* DEPENDENT SUBQUERY(子查询中的第一个SELECT，依赖于外部查询)\n\n* DERIVED(派生表的SELECT, FROM子句的子查询)\n\n* UNCACHEABLE SUBQUERY(一个子查询的结果不能被缓存，必须重新评估外链接的第一行)\n\n### table\n\n显示这一步所访问数据库中表名称（显示这一行的数据是关于哪张表的），有时不是真实的表名字，可能是简称，例如上面的e，d，也可能是第几步执行的结果的简称\n\n### type\n\n对表访问方式，表示MySQL在表中找到所需行的方式，又称“访问类型”。\n\n常用的类型有： ALL、index、range、 ref、eq_ref、const、system、NULL（从左到右，性能从差到好）\n\n* ALL：Full Table Scan， MySQL将遍历全表以找到匹配的行\n\n* index: Full Index Scan，index与ALL区别为index类型只遍历索引树\n\n* range:只检索给定范围的行，使用一个索引来选择行\n\n* ref: 表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值\n\n* eq_ref: 类似ref，区别就在使用的索引是唯一索引，对于每个索引键值，表中只有一条记录匹配，简单来说，就是多表连接中使用primary key或者 unique key作为关联条件\n\n* const、system: 当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问。如将主键置于where列表中，MySQL就能将该查询转换为一个常量，system是const类型的特例，当查询的表只有一行的情况下，使用system\n\n* NULL: MySQL在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成。\n\n### possible_keys\n\n指出MySQL能使用哪个索引在表中找到记录，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用（该查询可以利用的索引，如果没有任何索引显示 null）\n\n该列完全独立于EXPLAIN输出所示的表的次序。这意味着在possible_keys中的某些键实际上不能按生成的表次序使用。\n如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查WHERE子句看是否它引用某些列或适合索引的列来提高你的查询性能。如果是这样，创造一个适当的索引并且再次用EXPLAIN检查查询\n\n \n\n### Key\n\nkey列显示MySQL实际决定使用的键（索引），必然包含在possible_keys中\n\n如果没有选择索引，键是NULL。要想强制MySQL使用或忽视possible_keys列中的索引，在查询中使用FORCE INDEX、USE INDEX或者IGNORE INDEX。\n\n \n\n### key_len\n\n表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度（key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的）\n\n不损失精确性的情况下，长度越短越好 \n\n \n\n### ref\n\n列与索引的比较，表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值\n\n \n\n### rows\n\n估算出结果集行数，表示MySQL根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数\n\n### Extra\n\n该列包含MySQL解决查询的详细信息,有以下几种情况：\n\n* Using where:不用读取表中所有信息，仅通过索引就可以获取所需数据，这发生在对表的全部的请求列都是同一个索引的部分的时候，表示mysql服务器将在存储引擎检索行后再进行过滤\n\n* Using temporary：表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询，常见 group by ; order by\n\n* Using filesort：当Query中包含 order by 操作，而且无法利用索引完成的排序操作称为“文件排序”\n\n* Using join buffer：改值强调了在获取连接条件时没有使用索引，并且需要连接缓冲区来存储中间结果。如果出现了这个值，那应该注意，根据查询的具体情况可能需要添加索引来改进能。\n\n* Impossible where：这个值强调了where语句会导致没有符合条件的行（通过收集统计信息不可能存在结果）。\n\n* Select tables optimized away：这个值意味着仅通过使用索引，优化器可能仅从聚合函数结果中返回一行\n\n* No tables used：Query语句中使用from dual 或不含任何from子句\n\n### 总结：\n* EXPLAIN不会告诉你关于触发器、存储过程的信息或用户自定义函数对查询的影响情况\n* EXPLAIN不考虑各种Cache\n* EXPLAIN不能显示MySQL在执行查询时所作的优化工作\n* 部分统计信息是估算的，并非精确值\n* EXPALIN只能解释SELECT操作，其他操作要重写为SELECT后查看执行计划。\n\n\n### 重点关注：\n\n**type至少达到range级别**\n\n**key列有值，并且key_len越少越好，做到有索引的查询**\n\n**rows列越少越好**\n\n\n","slug":"SQL-Explain记录","published":1,"updated":"2021-07-13T12:27:08.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj72001l81fyup6uk4uo","content":"<p>要优化SQL必须得使用Explain，这里记录一下Explain的使用，直接查看即可，摘自<a href=\"https://www.cnblogs.com/tufujie/p/9413852.html\" target=\"_blank\" rel=\"noopener\">MySQL Explain详解</a></p>\n<p>explain 直接加载SQL语句之前，然后一起执行即可，只能分析查询语句，会出现以下结果<br><img src=\"/images/pasted-20.png\" alt=\"upload successful\"></p>\n<h3 id=\"ID\"><a href=\"#ID\" class=\"headerlink\" title=\"ID\"></a>ID</h3><p>select的查询顺序标识，SQL顺序由大到小执行，id相同从上往下顺序执行</p>\n<h3 id=\"select-type\"><a href=\"#select-type\" class=\"headerlink\" title=\"select_type\"></a>select_type</h3><p>select的类型</p>\n<ul>\n<li><p>SIMPLE(简单SELECT，不使用UNION或子查询等)</p>\n</li>\n<li><p>PRIMARY(子查询中最外层查询，查询中若包含任何复杂的子部分，最外层的select被标记为PRIMARY)</p>\n</li>\n<li><p>UNION(UNION中的第二个或后面的SELECT语句)</p>\n</li>\n<li><p>DEPENDENT UNION(UNION中的第二个或后面的SELECT语句，取决于外面的查询)</p>\n</li>\n<li><p>UNION RESULT(UNION的结果，union语句中第二个select开始后面所有select)</p>\n</li>\n<li><p>SUBQUERY(子查询中的第一个SELECT，结果不依赖于外部查询)</p>\n</li>\n<li><p>DEPENDENT SUBQUERY(子查询中的第一个SELECT，依赖于外部查询)</p>\n</li>\n<li><p>DERIVED(派生表的SELECT, FROM子句的子查询)</p>\n</li>\n<li><p>UNCACHEABLE SUBQUERY(一个子查询的结果不能被缓存，必须重新评估外链接的第一行)</p>\n</li>\n</ul>\n<h3 id=\"table\"><a href=\"#table\" class=\"headerlink\" title=\"table\"></a>table</h3><p>显示这一步所访问数据库中表名称（显示这一行的数据是关于哪张表的），有时不是真实的表名字，可能是简称，例如上面的e，d，也可能是第几步执行的结果的简称</p>\n<h3 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h3><p>对表访问方式，表示MySQL在表中找到所需行的方式，又称“访问类型”。</p>\n<p>常用的类型有： ALL、index、range、 ref、eq_ref、const、system、NULL（从左到右，性能从差到好）</p>\n<ul>\n<li><p>ALL：Full Table Scan， MySQL将遍历全表以找到匹配的行</p>\n</li>\n<li><p>index: Full Index Scan，index与ALL区别为index类型只遍历索引树</p>\n</li>\n<li><p>range:只检索给定范围的行，使用一个索引来选择行</p>\n</li>\n<li><p>ref: 表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</p>\n</li>\n<li><p>eq_ref: 类似ref，区别就在使用的索引是唯一索引，对于每个索引键值，表中只有一条记录匹配，简单来说，就是多表连接中使用primary key或者 unique key作为关联条件</p>\n</li>\n<li><p>const、system: 当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问。如将主键置于where列表中，MySQL就能将该查询转换为一个常量，system是const类型的特例，当查询的表只有一行的情况下，使用system</p>\n</li>\n<li><p>NULL: MySQL在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成。</p>\n</li>\n</ul>\n<h3 id=\"possible-keys\"><a href=\"#possible-keys\" class=\"headerlink\" title=\"possible_keys\"></a>possible_keys</h3><p>指出MySQL能使用哪个索引在表中找到记录，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用（该查询可以利用的索引，如果没有任何索引显示 null）</p>\n<p>该列完全独立于EXPLAIN输出所示的表的次序。这意味着在possible_keys中的某些键实际上不能按生成的表次序使用。<br>如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查WHERE子句看是否它引用某些列或适合索引的列来提高你的查询性能。如果是这样，创造一个适当的索引并且再次用EXPLAIN检查查询</p>\n<h3 id=\"Key\"><a href=\"#Key\" class=\"headerlink\" title=\"Key\"></a>Key</h3><p>key列显示MySQL实际决定使用的键（索引），必然包含在possible_keys中</p>\n<p>如果没有选择索引，键是NULL。要想强制MySQL使用或忽视possible_keys列中的索引，在查询中使用FORCE INDEX、USE INDEX或者IGNORE INDEX。</p>\n<h3 id=\"key-len\"><a href=\"#key-len\" class=\"headerlink\" title=\"key_len\"></a>key_len</h3><p>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度（key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的）</p>\n<p>不损失精确性的情况下，长度越短越好 </p>\n<h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h3><p>列与索引的比较，表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</p>\n<h3 id=\"rows\"><a href=\"#rows\" class=\"headerlink\" title=\"rows\"></a>rows</h3><p>估算出结果集行数，表示MySQL根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数</p>\n<h3 id=\"Extra\"><a href=\"#Extra\" class=\"headerlink\" title=\"Extra\"></a>Extra</h3><p>该列包含MySQL解决查询的详细信息,有以下几种情况：</p>\n<ul>\n<li><p>Using where:不用读取表中所有信息，仅通过索引就可以获取所需数据，这发生在对表的全部的请求列都是同一个索引的部分的时候，表示mysql服务器将在存储引擎检索行后再进行过滤</p>\n</li>\n<li><p>Using temporary：表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询，常见 group by ; order by</p>\n</li>\n<li><p>Using filesort：当Query中包含 order by 操作，而且无法利用索引完成的排序操作称为“文件排序”</p>\n</li>\n<li><p>Using join buffer：改值强调了在获取连接条件时没有使用索引，并且需要连接缓冲区来存储中间结果。如果出现了这个值，那应该注意，根据查询的具体情况可能需要添加索引来改进能。</p>\n</li>\n<li><p>Impossible where：这个值强调了where语句会导致没有符合条件的行（通过收集统计信息不可能存在结果）。</p>\n</li>\n<li><p>Select tables optimized away：这个值意味着仅通过使用索引，优化器可能仅从聚合函数结果中返回一行</p>\n</li>\n<li><p>No tables used：Query语句中使用from dual 或不含任何from子句</p>\n</li>\n</ul>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><ul>\n<li>EXPLAIN不会告诉你关于触发器、存储过程的信息或用户自定义函数对查询的影响情况</li>\n<li>EXPLAIN不考虑各种Cache</li>\n<li>EXPLAIN不能显示MySQL在执行查询时所作的优化工作</li>\n<li>部分统计信息是估算的，并非精确值</li>\n<li>EXPALIN只能解释SELECT操作，其他操作要重写为SELECT后查看执行计划。</li>\n</ul>\n<h3 id=\"重点关注：\"><a href=\"#重点关注：\" class=\"headerlink\" title=\"重点关注：\"></a>重点关注：</h3><p><strong>type至少达到range级别</strong></p>\n<p><strong>key列有值，并且key_len越少越好，做到有索引的查询</strong></p>\n<p><strong>rows列越少越好</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>要优化SQL必须得使用Explain，这里记录一下Explain的使用，直接查看即可，摘自<a href=\"https://www.cnblogs.com/tufujie/p/9413852.html\" target=\"_blank\" rel=\"noopener\">MySQL Explain详解</a></p>\n<p>explain 直接加载SQL语句之前，然后一起执行即可，只能分析查询语句，会出现以下结果<br><img src=\"/images/pasted-20.png\" alt=\"upload successful\"></p>\n<h3 id=\"ID\"><a href=\"#ID\" class=\"headerlink\" title=\"ID\"></a>ID</h3><p>select的查询顺序标识，SQL顺序由大到小执行，id相同从上往下顺序执行</p>\n<h3 id=\"select-type\"><a href=\"#select-type\" class=\"headerlink\" title=\"select_type\"></a>select_type</h3><p>select的类型</p>\n<ul>\n<li><p>SIMPLE(简单SELECT，不使用UNION或子查询等)</p>\n</li>\n<li><p>PRIMARY(子查询中最外层查询，查询中若包含任何复杂的子部分，最外层的select被标记为PRIMARY)</p>\n</li>\n<li><p>UNION(UNION中的第二个或后面的SELECT语句)</p>\n</li>\n<li><p>DEPENDENT UNION(UNION中的第二个或后面的SELECT语句，取决于外面的查询)</p>\n</li>\n<li><p>UNION RESULT(UNION的结果，union语句中第二个select开始后面所有select)</p>\n</li>\n<li><p>SUBQUERY(子查询中的第一个SELECT，结果不依赖于外部查询)</p>\n</li>\n<li><p>DEPENDENT SUBQUERY(子查询中的第一个SELECT，依赖于外部查询)</p>\n</li>\n<li><p>DERIVED(派生表的SELECT, FROM子句的子查询)</p>\n</li>\n<li><p>UNCACHEABLE SUBQUERY(一个子查询的结果不能被缓存，必须重新评估外链接的第一行)</p>\n</li>\n</ul>\n<h3 id=\"table\"><a href=\"#table\" class=\"headerlink\" title=\"table\"></a>table</h3><p>显示这一步所访问数据库中表名称（显示这一行的数据是关于哪张表的），有时不是真实的表名字，可能是简称，例如上面的e，d，也可能是第几步执行的结果的简称</p>\n<h3 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h3><p>对表访问方式，表示MySQL在表中找到所需行的方式，又称“访问类型”。</p>\n<p>常用的类型有： ALL、index、range、 ref、eq_ref、const、system、NULL（从左到右，性能从差到好）</p>\n<ul>\n<li><p>ALL：Full Table Scan， MySQL将遍历全表以找到匹配的行</p>\n</li>\n<li><p>index: Full Index Scan，index与ALL区别为index类型只遍历索引树</p>\n</li>\n<li><p>range:只检索给定范围的行，使用一个索引来选择行</p>\n</li>\n<li><p>ref: 表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</p>\n</li>\n<li><p>eq_ref: 类似ref，区别就在使用的索引是唯一索引，对于每个索引键值，表中只有一条记录匹配，简单来说，就是多表连接中使用primary key或者 unique key作为关联条件</p>\n</li>\n<li><p>const、system: 当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问。如将主键置于where列表中，MySQL就能将该查询转换为一个常量，system是const类型的特例，当查询的表只有一行的情况下，使用system</p>\n</li>\n<li><p>NULL: MySQL在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成。</p>\n</li>\n</ul>\n<h3 id=\"possible-keys\"><a href=\"#possible-keys\" class=\"headerlink\" title=\"possible_keys\"></a>possible_keys</h3><p>指出MySQL能使用哪个索引在表中找到记录，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用（该查询可以利用的索引，如果没有任何索引显示 null）</p>\n<p>该列完全独立于EXPLAIN输出所示的表的次序。这意味着在possible_keys中的某些键实际上不能按生成的表次序使用。<br>如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查WHERE子句看是否它引用某些列或适合索引的列来提高你的查询性能。如果是这样，创造一个适当的索引并且再次用EXPLAIN检查查询</p>\n<h3 id=\"Key\"><a href=\"#Key\" class=\"headerlink\" title=\"Key\"></a>Key</h3><p>key列显示MySQL实际决定使用的键（索引），必然包含在possible_keys中</p>\n<p>如果没有选择索引，键是NULL。要想强制MySQL使用或忽视possible_keys列中的索引，在查询中使用FORCE INDEX、USE INDEX或者IGNORE INDEX。</p>\n<h3 id=\"key-len\"><a href=\"#key-len\" class=\"headerlink\" title=\"key_len\"></a>key_len</h3><p>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度（key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的）</p>\n<p>不损失精确性的情况下，长度越短越好 </p>\n<h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h3><p>列与索引的比较，表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</p>\n<h3 id=\"rows\"><a href=\"#rows\" class=\"headerlink\" title=\"rows\"></a>rows</h3><p>估算出结果集行数，表示MySQL根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数</p>\n<h3 id=\"Extra\"><a href=\"#Extra\" class=\"headerlink\" title=\"Extra\"></a>Extra</h3><p>该列包含MySQL解决查询的详细信息,有以下几种情况：</p>\n<ul>\n<li><p>Using where:不用读取表中所有信息，仅通过索引就可以获取所需数据，这发生在对表的全部的请求列都是同一个索引的部分的时候，表示mysql服务器将在存储引擎检索行后再进行过滤</p>\n</li>\n<li><p>Using temporary：表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询，常见 group by ; order by</p>\n</li>\n<li><p>Using filesort：当Query中包含 order by 操作，而且无法利用索引完成的排序操作称为“文件排序”</p>\n</li>\n<li><p>Using join buffer：改值强调了在获取连接条件时没有使用索引，并且需要连接缓冲区来存储中间结果。如果出现了这个值，那应该注意，根据查询的具体情况可能需要添加索引来改进能。</p>\n</li>\n<li><p>Impossible where：这个值强调了where语句会导致没有符合条件的行（通过收集统计信息不可能存在结果）。</p>\n</li>\n<li><p>Select tables optimized away：这个值意味着仅通过使用索引，优化器可能仅从聚合函数结果中返回一行</p>\n</li>\n<li><p>No tables used：Query语句中使用from dual 或不含任何from子句</p>\n</li>\n</ul>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><ul>\n<li>EXPLAIN不会告诉你关于触发器、存储过程的信息或用户自定义函数对查询的影响情况</li>\n<li>EXPLAIN不考虑各种Cache</li>\n<li>EXPLAIN不能显示MySQL在执行查询时所作的优化工作</li>\n<li>部分统计信息是估算的，并非精确值</li>\n<li>EXPALIN只能解释SELECT操作，其他操作要重写为SELECT后查看执行计划。</li>\n</ul>\n<h3 id=\"重点关注：\"><a href=\"#重点关注：\" class=\"headerlink\" title=\"重点关注：\"></a>重点关注：</h3><p><strong>type至少达到range级别</strong></p>\n<p><strong>key列有值，并且key_len越少越好，做到有索引的查询</strong></p>\n<p><strong>rows列越少越好</strong></p>\n"},{"title":"Spring中bean的生命周期总结","author":"YyWang","date":"2020-10-09T12:00:44.000Z","_content":"\n最近非常的忙碌，博客也一直没有更新，可惜自己一直没有时间去看新的东西还想更新博客，心有余而力不足，那就把旧的知识温习一下，来“敷衍”一下；废话不多说，要看spring中bean完整的生命周期要从BeanFactory接口中看，如图，主要分为以下几个部分\n\n* xxxxAware接口的方法\n* BeanPostProcessor接口的postProcessBeforeInitialization方法\n* InitializingBean接口的afterPropertiesSet方法\n* 自定义的init方法\n* BeanPostProcessor接口的postProcessAfterInitialization方法\n\n销毁\n\n* DestructionAwareBeanPostProcessor的postProcessBeforeDestruction方法\n* DisposableBean接口的destroy方法\n* 自定义的销毁方法\n\n![spring-bean生命周期1](/images/spring-bean生命周期1.png)\n\n下面结合源码画一个生命周期图\n\n![spring-bean生命周期2](/images/spring-bean生命周期2.png)","source":"_posts/Spring生命周期总结.md","raw":"title: Spring中bean的生命周期总结\nauthor: YyWang\ntags: Java\ncategories: Java\ndate: 2020-10-09 20:00:44\n---\n\n最近非常的忙碌，博客也一直没有更新，可惜自己一直没有时间去看新的东西还想更新博客，心有余而力不足，那就把旧的知识温习一下，来“敷衍”一下；废话不多说，要看spring中bean完整的生命周期要从BeanFactory接口中看，如图，主要分为以下几个部分\n\n* xxxxAware接口的方法\n* BeanPostProcessor接口的postProcessBeforeInitialization方法\n* InitializingBean接口的afterPropertiesSet方法\n* 自定义的init方法\n* BeanPostProcessor接口的postProcessAfterInitialization方法\n\n销毁\n\n* DestructionAwareBeanPostProcessor的postProcessBeforeDestruction方法\n* DisposableBean接口的destroy方法\n* 自定义的销毁方法\n\n![spring-bean生命周期1](/images/spring-bean生命周期1.png)\n\n下面结合源码画一个生命周期图\n\n![spring-bean生命周期2](/images/spring-bean生命周期2.png)","slug":"Spring生命周期总结","published":1,"updated":"2021-07-13T12:27:08.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj73001n81fy2lskocza","content":"<p>最近非常的忙碌，博客也一直没有更新，可惜自己一直没有时间去看新的东西还想更新博客，心有余而力不足，那就把旧的知识温习一下，来“敷衍”一下；废话不多说，要看spring中bean完整的生命周期要从BeanFactory接口中看，如图，主要分为以下几个部分</p>\n<ul>\n<li>xxxxAware接口的方法</li>\n<li>BeanPostProcessor接口的postProcessBeforeInitialization方法</li>\n<li>InitializingBean接口的afterPropertiesSet方法</li>\n<li>自定义的init方法</li>\n<li>BeanPostProcessor接口的postProcessAfterInitialization方法</li>\n</ul>\n<p>销毁</p>\n<ul>\n<li>DestructionAwareBeanPostProcessor的postProcessBeforeDestruction方法</li>\n<li>DisposableBean接口的destroy方法</li>\n<li>自定义的销毁方法</li>\n</ul>\n<p><img src=\"/images/spring-bean生命周期1.png\" alt=\"spring-bean生命周期1\"></p>\n<p>下面结合源码画一个生命周期图</p>\n<p><img src=\"/images/spring-bean生命周期2.png\" alt=\"spring-bean生命周期2\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近非常的忙碌，博客也一直没有更新，可惜自己一直没有时间去看新的东西还想更新博客，心有余而力不足，那就把旧的知识温习一下，来“敷衍”一下；废话不多说，要看spring中bean完整的生命周期要从BeanFactory接口中看，如图，主要分为以下几个部分</p>\n<ul>\n<li>xxxxAware接口的方法</li>\n<li>BeanPostProcessor接口的postProcessBeforeInitialization方法</li>\n<li>InitializingBean接口的afterPropertiesSet方法</li>\n<li>自定义的init方法</li>\n<li>BeanPostProcessor接口的postProcessAfterInitialization方法</li>\n</ul>\n<p>销毁</p>\n<ul>\n<li>DestructionAwareBeanPostProcessor的postProcessBeforeDestruction方法</li>\n<li>DisposableBean接口的destroy方法</li>\n<li>自定义的销毁方法</li>\n</ul>\n<p><img src=\"/images/spring-bean生命周期1.png\" alt=\"spring-bean生命周期1\"></p>\n<p>下面结合源码画一个生命周期图</p>\n<p><img src=\"/images/spring-bean生命周期2.png\" alt=\"spring-bean生命周期2\"></p>\n"},{"title":"SQL级联查询一些总结","author":"YyWang","date":"2019-11-16T06:34:28.000Z","catagories":"SQL","_content":"子查询导致索引失效\n\n连接查询（连接条件为索引）的效率更高\n\n##### 背景：\n微服务相关管理端的系统，用户会在自己对应服务的地方查询所需的server，新增需求为要查看自己的服务所在的app\n\n##### 数据结构：\nserver在单独的一张表，可以根据服务名称（interface_name）来查询；AppName在另外的一张表中；两张表没有联系需要通过一个中间表来连接；interface_name有索引，三个表之间的链接字段都有索引\n\n##### 分析：\n需要联合3张表来查询所需要的数据，每张表的数据量都比较大，而且这个SQL是系统使用最频繁的部分查询的频率还特别高，所以要尽可能快的出结果\n\n##### 我的心路历程：\n先通过interface_name条件筛选出一部分数据再链接另外两张表查询，都有索引一定是最优的，SQL如下\n\n```\nSELECT\n\tapp_name \nFROM\n\tsaf_app \nWHERE\n\tapp_id IN \n\t( \n\t\tSELECT DISTINCT app_id FROM saf_ins_hb WHERE ins_key IN \n\t\t(SELECT ins_key FROM saf_server WHERE interface_name = 'xxx') \n\t)\n ORDER BY app._name\n```\n\n查询时间竟然需要6s多，这绝对是不能忍的，接着我又试了一下级联查询，SQL如下\n\n```\nSELECT DISTINCT app.app_name \n\tFROM saf_server s \nLEFT JOIN saf_ins_hb hb ON s.ins_key = hb.ins_key\nLEFT JOIN saf_app app ON hb.app_id = app.app_id\n\tWHERE s.interface_name = 'xxx' \n\tORDER BY app.app_name\n```\n\n这次的结果只需0.05s,相差100倍还多\n\nexplain看下呢\n\nIN子查询如下\n\n![upload successful](/images/pasted-19.png)\n\n可以看到id为2和3的查询都用到了索引并且只需扫描的很少的行数，到了最外层的查询就变成了全表扫描了，索引就失效了\n\n级联查询如下\n\n![upload successful](/images/pasted-18.png)\n\n级联查询全部使用到了索引，而且扫描的行数比子查询的要少很多，扫描的最终行数是乘积的关系，级联查询有两个子查询的rows为1所以要比IN子查询要小很多\n\n所以说IN子查询会导致部分索引失效，我有了新的想法，既然连接查询会很快那么我先通过条件筛选出数据再做级联查询不是更快了，开整~ SQL如下\n\n```\nSELECT DISTINCT app.app_name \n    FROM (SELECT ins_key FROM saf_server WHERE interface_name = 'xxx') s \nLEFT JOIN saf_ins_hb hb ON s.ins_key = hb.ins_key\nLEFT JOIN saf_app app ON hb.app_id = app.app_id\n    ORDER BY app.app_name\n```\n查询0.02s左右，我非常满意，explain一下呢\n\n![upload successful](/images/pasted-17.png)\n\n相较于级联查询还多了7000多次的遍历？？？子查询害人啊，查询结果0.02s左右应该是有缓存\n\n看了一篇文章说在on后面加限制条件会比where中加限制条件用时要少，on后面加条件在两张表做连接的同时过滤掉一些数据后再和第三张表做连接，where是将连接了所有表之后的结果进行筛选，听着很有道理，那我试一下呢，SQL如下\n\n```\nSELECT DISTINCT app.app_name \n    FROM saf_server s \nLEFT JOIN saf_ins_hb hb ON s.ins_key = hb.ins_key and s.interface_name = 'xxx'\nLEFT JOIN saf_app app ON hb.app_id = app.app_id\n    ORDER BY app.app_name\n```\n\nexplain看下\n\n![upload successful](/images/pasted-16.png)\n\n结果非常意外，不仅时间没有省下来，索引也没有使用，进行全表扫描，还好我验证了一下，原因的话还不知道，对mysql底层不是很熟悉，先暂时把遇到的问题记录下来吧 ^_^\n\n**结论：子查询会导致索引失效，尽量不使用子查询，用级联查询代替，并将级联查询的条件设置建立索引**\n\n##### 级联查询的原理\nmysql会首先找到一张表作为驱动表，就是首先要进行查询的表，以驱动表为基础匹配剩下的表，inner join的情况mysql会选择数据量小的表作为驱动表，left/right join分别以左/右表作为驱动表；接着会根据on的条件过滤结果，最终将连接的表都筛选完成后如果有where语句指定条件将进行最后的筛选得到结果\n\n连接的算法也很简单，连接条件没有索引则进行全表扫描然后进行匹配，如果还有表连接则将匹配的结果继续与剩余的表进行扫描匹配，这种方法简单粗暴，叫做嵌套循环连接（Nested-Loop Join）；Mysql对这种方式有了优化，增加了join buffer，是将驱动表关联条件的相关列缓存起来，并将多次匹配合并，减少的匹配的次数，以此方式来加速查询结果，叫做BLJ算法（Block Nested-Loop Join）；有索引则会先匹配索引，匹配后的结果再插到对应的数据返回\n\n综上，级联查询的查询条件最好是加索引，虽然mysql对没有索引的链接做了优化，那也是没有索引的方式快的，而且最好链接的条件是主键索引，这是由于非主键索引指向的时主键索引，要得到数据还要跑一次主键索引；还有我想到了阿里巴巴java开发规范中写道多余三张表不能使用join，用多次简单查询代替这个也要注意一下\n\n参考： [MySQL查询优化——连接以及连接原理](https://www.jianshu.com/p/048d93d3ee54)\n","source":"_posts/SQL.md","raw":"title: SQL级联查询一些总结\nauthor: YyWang\ndate: 2019-11-16 14:34:28\ntags: SQL\ncatagories: SQL\n---\n子查询导致索引失效\n\n连接查询（连接条件为索引）的效率更高\n\n##### 背景：\n微服务相关管理端的系统，用户会在自己对应服务的地方查询所需的server，新增需求为要查看自己的服务所在的app\n\n##### 数据结构：\nserver在单独的一张表，可以根据服务名称（interface_name）来查询；AppName在另外的一张表中；两张表没有联系需要通过一个中间表来连接；interface_name有索引，三个表之间的链接字段都有索引\n\n##### 分析：\n需要联合3张表来查询所需要的数据，每张表的数据量都比较大，而且这个SQL是系统使用最频繁的部分查询的频率还特别高，所以要尽可能快的出结果\n\n##### 我的心路历程：\n先通过interface_name条件筛选出一部分数据再链接另外两张表查询，都有索引一定是最优的，SQL如下\n\n```\nSELECT\n\tapp_name \nFROM\n\tsaf_app \nWHERE\n\tapp_id IN \n\t( \n\t\tSELECT DISTINCT app_id FROM saf_ins_hb WHERE ins_key IN \n\t\t(SELECT ins_key FROM saf_server WHERE interface_name = 'xxx') \n\t)\n ORDER BY app._name\n```\n\n查询时间竟然需要6s多，这绝对是不能忍的，接着我又试了一下级联查询，SQL如下\n\n```\nSELECT DISTINCT app.app_name \n\tFROM saf_server s \nLEFT JOIN saf_ins_hb hb ON s.ins_key = hb.ins_key\nLEFT JOIN saf_app app ON hb.app_id = app.app_id\n\tWHERE s.interface_name = 'xxx' \n\tORDER BY app.app_name\n```\n\n这次的结果只需0.05s,相差100倍还多\n\nexplain看下呢\n\nIN子查询如下\n\n![upload successful](/images/pasted-19.png)\n\n可以看到id为2和3的查询都用到了索引并且只需扫描的很少的行数，到了最外层的查询就变成了全表扫描了，索引就失效了\n\n级联查询如下\n\n![upload successful](/images/pasted-18.png)\n\n级联查询全部使用到了索引，而且扫描的行数比子查询的要少很多，扫描的最终行数是乘积的关系，级联查询有两个子查询的rows为1所以要比IN子查询要小很多\n\n所以说IN子查询会导致部分索引失效，我有了新的想法，既然连接查询会很快那么我先通过条件筛选出数据再做级联查询不是更快了，开整~ SQL如下\n\n```\nSELECT DISTINCT app.app_name \n    FROM (SELECT ins_key FROM saf_server WHERE interface_name = 'xxx') s \nLEFT JOIN saf_ins_hb hb ON s.ins_key = hb.ins_key\nLEFT JOIN saf_app app ON hb.app_id = app.app_id\n    ORDER BY app.app_name\n```\n查询0.02s左右，我非常满意，explain一下呢\n\n![upload successful](/images/pasted-17.png)\n\n相较于级联查询还多了7000多次的遍历？？？子查询害人啊，查询结果0.02s左右应该是有缓存\n\n看了一篇文章说在on后面加限制条件会比where中加限制条件用时要少，on后面加条件在两张表做连接的同时过滤掉一些数据后再和第三张表做连接，where是将连接了所有表之后的结果进行筛选，听着很有道理，那我试一下呢，SQL如下\n\n```\nSELECT DISTINCT app.app_name \n    FROM saf_server s \nLEFT JOIN saf_ins_hb hb ON s.ins_key = hb.ins_key and s.interface_name = 'xxx'\nLEFT JOIN saf_app app ON hb.app_id = app.app_id\n    ORDER BY app.app_name\n```\n\nexplain看下\n\n![upload successful](/images/pasted-16.png)\n\n结果非常意外，不仅时间没有省下来，索引也没有使用，进行全表扫描，还好我验证了一下，原因的话还不知道，对mysql底层不是很熟悉，先暂时把遇到的问题记录下来吧 ^_^\n\n**结论：子查询会导致索引失效，尽量不使用子查询，用级联查询代替，并将级联查询的条件设置建立索引**\n\n##### 级联查询的原理\nmysql会首先找到一张表作为驱动表，就是首先要进行查询的表，以驱动表为基础匹配剩下的表，inner join的情况mysql会选择数据量小的表作为驱动表，left/right join分别以左/右表作为驱动表；接着会根据on的条件过滤结果，最终将连接的表都筛选完成后如果有where语句指定条件将进行最后的筛选得到结果\n\n连接的算法也很简单，连接条件没有索引则进行全表扫描然后进行匹配，如果还有表连接则将匹配的结果继续与剩余的表进行扫描匹配，这种方法简单粗暴，叫做嵌套循环连接（Nested-Loop Join）；Mysql对这种方式有了优化，增加了join buffer，是将驱动表关联条件的相关列缓存起来，并将多次匹配合并，减少的匹配的次数，以此方式来加速查询结果，叫做BLJ算法（Block Nested-Loop Join）；有索引则会先匹配索引，匹配后的结果再插到对应的数据返回\n\n综上，级联查询的查询条件最好是加索引，虽然mysql对没有索引的链接做了优化，那也是没有索引的方式快的，而且最好链接的条件是主键索引，这是由于非主键索引指向的时主键索引，要得到数据还要跑一次主键索引；还有我想到了阿里巴巴java开发规范中写道多余三张表不能使用join，用多次简单查询代替这个也要注意一下\n\n参考： [MySQL查询优化——连接以及连接原理](https://www.jianshu.com/p/048d93d3ee54)\n","slug":"SQL","published":1,"updated":"2021-07-13T12:27:08.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj75001r81fy03zva1tm","content":"<p>子查询导致索引失效</p>\n<p>连接查询（连接条件为索引）的效率更高</p>\n<h5 id=\"背景：\"><a href=\"#背景：\" class=\"headerlink\" title=\"背景：\"></a>背景：</h5><p>微服务相关管理端的系统，用户会在自己对应服务的地方查询所需的server，新增需求为要查看自己的服务所在的app</p>\n<h5 id=\"数据结构：\"><a href=\"#数据结构：\" class=\"headerlink\" title=\"数据结构：\"></a>数据结构：</h5><p>server在单独的一张表，可以根据服务名称（interface_name）来查询；AppName在另外的一张表中；两张表没有联系需要通过一个中间表来连接；interface_name有索引，三个表之间的链接字段都有索引</p>\n<h5 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h5><p>需要联合3张表来查询所需要的数据，每张表的数据量都比较大，而且这个SQL是系统使用最频繁的部分查询的频率还特别高，所以要尽可能快的出结果</p>\n<h5 id=\"我的心路历程：\"><a href=\"#我的心路历程：\" class=\"headerlink\" title=\"我的心路历程：\"></a>我的心路历程：</h5><p>先通过interface_name条件筛选出一部分数据再链接另外两张表查询，都有索引一定是最优的，SQL如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">\tapp_name </span><br><span class=\"line\">FROM</span><br><span class=\"line\">\tsaf_app </span><br><span class=\"line\">WHERE</span><br><span class=\"line\">\tapp_id IN </span><br><span class=\"line\">\t( </span><br><span class=\"line\">\t\tSELECT DISTINCT app_id FROM saf_ins_hb WHERE ins_key IN </span><br><span class=\"line\">\t\t(SELECT ins_key FROM saf_server WHERE interface_name = &apos;xxx&apos;) </span><br><span class=\"line\">\t)</span><br><span class=\"line\"> ORDER BY app._name</span><br></pre></td></tr></table></figure>\n<p>查询时间竟然需要6s多，这绝对是不能忍的，接着我又试了一下级联查询，SQL如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT DISTINCT app.app_name </span><br><span class=\"line\">\tFROM saf_server s </span><br><span class=\"line\">LEFT JOIN saf_ins_hb hb ON s.ins_key = hb.ins_key</span><br><span class=\"line\">LEFT JOIN saf_app app ON hb.app_id = app.app_id</span><br><span class=\"line\">\tWHERE s.interface_name = &apos;xxx&apos; </span><br><span class=\"line\">\tORDER BY app.app_name</span><br></pre></td></tr></table></figure>\n<p>这次的结果只需0.05s,相差100倍还多</p>\n<p>explain看下呢</p>\n<p>IN子查询如下</p>\n<p><img src=\"/images/pasted-19.png\" alt=\"upload successful\"></p>\n<p>可以看到id为2和3的查询都用到了索引并且只需扫描的很少的行数，到了最外层的查询就变成了全表扫描了，索引就失效了</p>\n<p>级联查询如下</p>\n<p><img src=\"/images/pasted-18.png\" alt=\"upload successful\"></p>\n<p>级联查询全部使用到了索引，而且扫描的行数比子查询的要少很多，扫描的最终行数是乘积的关系，级联查询有两个子查询的rows为1所以要比IN子查询要小很多</p>\n<p>所以说IN子查询会导致部分索引失效，我有了新的想法，既然连接查询会很快那么我先通过条件筛选出数据再做级联查询不是更快了，开整~ SQL如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT DISTINCT app.app_name </span><br><span class=\"line\">    FROM (SELECT ins_key FROM saf_server WHERE interface_name = &apos;xxx&apos;) s </span><br><span class=\"line\">LEFT JOIN saf_ins_hb hb ON s.ins_key = hb.ins_key</span><br><span class=\"line\">LEFT JOIN saf_app app ON hb.app_id = app.app_id</span><br><span class=\"line\">    ORDER BY app.app_name</span><br></pre></td></tr></table></figure>\n<p>查询0.02s左右，我非常满意，explain一下呢</p>\n<p><img src=\"/images/pasted-17.png\" alt=\"upload successful\"></p>\n<p>相较于级联查询还多了7000多次的遍历？？？子查询害人啊，查询结果0.02s左右应该是有缓存</p>\n<p>看了一篇文章说在on后面加限制条件会比where中加限制条件用时要少，on后面加条件在两张表做连接的同时过滤掉一些数据后再和第三张表做连接，where是将连接了所有表之后的结果进行筛选，听着很有道理，那我试一下呢，SQL如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT DISTINCT app.app_name </span><br><span class=\"line\">    FROM saf_server s </span><br><span class=\"line\">LEFT JOIN saf_ins_hb hb ON s.ins_key = hb.ins_key and s.interface_name = &apos;xxx&apos;</span><br><span class=\"line\">LEFT JOIN saf_app app ON hb.app_id = app.app_id</span><br><span class=\"line\">    ORDER BY app.app_name</span><br></pre></td></tr></table></figure>\n<p>explain看下</p>\n<p><img src=\"/images/pasted-16.png\" alt=\"upload successful\"></p>\n<p>结果非常意外，不仅时间没有省下来，索引也没有使用，进行全表扫描，还好我验证了一下，原因的话还不知道，对mysql底层不是很熟悉，先暂时把遇到的问题记录下来吧 ^_^</p>\n<p><strong>结论：子查询会导致索引失效，尽量不使用子查询，用级联查询代替，并将级联查询的条件设置建立索引</strong></p>\n<h5 id=\"级联查询的原理\"><a href=\"#级联查询的原理\" class=\"headerlink\" title=\"级联查询的原理\"></a>级联查询的原理</h5><p>mysql会首先找到一张表作为驱动表，就是首先要进行查询的表，以驱动表为基础匹配剩下的表，inner join的情况mysql会选择数据量小的表作为驱动表，left/right join分别以左/右表作为驱动表；接着会根据on的条件过滤结果，最终将连接的表都筛选完成后如果有where语句指定条件将进行最后的筛选得到结果</p>\n<p>连接的算法也很简单，连接条件没有索引则进行全表扫描然后进行匹配，如果还有表连接则将匹配的结果继续与剩余的表进行扫描匹配，这种方法简单粗暴，叫做嵌套循环连接（Nested-Loop Join）；Mysql对这种方式有了优化，增加了join buffer，是将驱动表关联条件的相关列缓存起来，并将多次匹配合并，减少的匹配的次数，以此方式来加速查询结果，叫做BLJ算法（Block Nested-Loop Join）；有索引则会先匹配索引，匹配后的结果再插到对应的数据返回</p>\n<p>综上，级联查询的查询条件最好是加索引，虽然mysql对没有索引的链接做了优化，那也是没有索引的方式快的，而且最好链接的条件是主键索引，这是由于非主键索引指向的时主键索引，要得到数据还要跑一次主键索引；还有我想到了阿里巴巴java开发规范中写道多余三张表不能使用join，用多次简单查询代替这个也要注意一下</p>\n<p>参考： <a href=\"https://www.jianshu.com/p/048d93d3ee54\" target=\"_blank\" rel=\"noopener\">MySQL查询优化——连接以及连接原理</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>子查询导致索引失效</p>\n<p>连接查询（连接条件为索引）的效率更高</p>\n<h5 id=\"背景：\"><a href=\"#背景：\" class=\"headerlink\" title=\"背景：\"></a>背景：</h5><p>微服务相关管理端的系统，用户会在自己对应服务的地方查询所需的server，新增需求为要查看自己的服务所在的app</p>\n<h5 id=\"数据结构：\"><a href=\"#数据结构：\" class=\"headerlink\" title=\"数据结构：\"></a>数据结构：</h5><p>server在单独的一张表，可以根据服务名称（interface_name）来查询；AppName在另外的一张表中；两张表没有联系需要通过一个中间表来连接；interface_name有索引，三个表之间的链接字段都有索引</p>\n<h5 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h5><p>需要联合3张表来查询所需要的数据，每张表的数据量都比较大，而且这个SQL是系统使用最频繁的部分查询的频率还特别高，所以要尽可能快的出结果</p>\n<h5 id=\"我的心路历程：\"><a href=\"#我的心路历程：\" class=\"headerlink\" title=\"我的心路历程：\"></a>我的心路历程：</h5><p>先通过interface_name条件筛选出一部分数据再链接另外两张表查询，都有索引一定是最优的，SQL如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">\tapp_name </span><br><span class=\"line\">FROM</span><br><span class=\"line\">\tsaf_app </span><br><span class=\"line\">WHERE</span><br><span class=\"line\">\tapp_id IN </span><br><span class=\"line\">\t( </span><br><span class=\"line\">\t\tSELECT DISTINCT app_id FROM saf_ins_hb WHERE ins_key IN </span><br><span class=\"line\">\t\t(SELECT ins_key FROM saf_server WHERE interface_name = &apos;xxx&apos;) </span><br><span class=\"line\">\t)</span><br><span class=\"line\"> ORDER BY app._name</span><br></pre></td></tr></table></figure>\n<p>查询时间竟然需要6s多，这绝对是不能忍的，接着我又试了一下级联查询，SQL如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT DISTINCT app.app_name </span><br><span class=\"line\">\tFROM saf_server s </span><br><span class=\"line\">LEFT JOIN saf_ins_hb hb ON s.ins_key = hb.ins_key</span><br><span class=\"line\">LEFT JOIN saf_app app ON hb.app_id = app.app_id</span><br><span class=\"line\">\tWHERE s.interface_name = &apos;xxx&apos; </span><br><span class=\"line\">\tORDER BY app.app_name</span><br></pre></td></tr></table></figure>\n<p>这次的结果只需0.05s,相差100倍还多</p>\n<p>explain看下呢</p>\n<p>IN子查询如下</p>\n<p><img src=\"/images/pasted-19.png\" alt=\"upload successful\"></p>\n<p>可以看到id为2和3的查询都用到了索引并且只需扫描的很少的行数，到了最外层的查询就变成了全表扫描了，索引就失效了</p>\n<p>级联查询如下</p>\n<p><img src=\"/images/pasted-18.png\" alt=\"upload successful\"></p>\n<p>级联查询全部使用到了索引，而且扫描的行数比子查询的要少很多，扫描的最终行数是乘积的关系，级联查询有两个子查询的rows为1所以要比IN子查询要小很多</p>\n<p>所以说IN子查询会导致部分索引失效，我有了新的想法，既然连接查询会很快那么我先通过条件筛选出数据再做级联查询不是更快了，开整~ SQL如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT DISTINCT app.app_name </span><br><span class=\"line\">    FROM (SELECT ins_key FROM saf_server WHERE interface_name = &apos;xxx&apos;) s </span><br><span class=\"line\">LEFT JOIN saf_ins_hb hb ON s.ins_key = hb.ins_key</span><br><span class=\"line\">LEFT JOIN saf_app app ON hb.app_id = app.app_id</span><br><span class=\"line\">    ORDER BY app.app_name</span><br></pre></td></tr></table></figure>\n<p>查询0.02s左右，我非常满意，explain一下呢</p>\n<p><img src=\"/images/pasted-17.png\" alt=\"upload successful\"></p>\n<p>相较于级联查询还多了7000多次的遍历？？？子查询害人啊，查询结果0.02s左右应该是有缓存</p>\n<p>看了一篇文章说在on后面加限制条件会比where中加限制条件用时要少，on后面加条件在两张表做连接的同时过滤掉一些数据后再和第三张表做连接，where是将连接了所有表之后的结果进行筛选，听着很有道理，那我试一下呢，SQL如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT DISTINCT app.app_name </span><br><span class=\"line\">    FROM saf_server s </span><br><span class=\"line\">LEFT JOIN saf_ins_hb hb ON s.ins_key = hb.ins_key and s.interface_name = &apos;xxx&apos;</span><br><span class=\"line\">LEFT JOIN saf_app app ON hb.app_id = app.app_id</span><br><span class=\"line\">    ORDER BY app.app_name</span><br></pre></td></tr></table></figure>\n<p>explain看下</p>\n<p><img src=\"/images/pasted-16.png\" alt=\"upload successful\"></p>\n<p>结果非常意外，不仅时间没有省下来，索引也没有使用，进行全表扫描，还好我验证了一下，原因的话还不知道，对mysql底层不是很熟悉，先暂时把遇到的问题记录下来吧 ^_^</p>\n<p><strong>结论：子查询会导致索引失效，尽量不使用子查询，用级联查询代替，并将级联查询的条件设置建立索引</strong></p>\n<h5 id=\"级联查询的原理\"><a href=\"#级联查询的原理\" class=\"headerlink\" title=\"级联查询的原理\"></a>级联查询的原理</h5><p>mysql会首先找到一张表作为驱动表，就是首先要进行查询的表，以驱动表为基础匹配剩下的表，inner join的情况mysql会选择数据量小的表作为驱动表，left/right join分别以左/右表作为驱动表；接着会根据on的条件过滤结果，最终将连接的表都筛选完成后如果有where语句指定条件将进行最后的筛选得到结果</p>\n<p>连接的算法也很简单，连接条件没有索引则进行全表扫描然后进行匹配，如果还有表连接则将匹配的结果继续与剩余的表进行扫描匹配，这种方法简单粗暴，叫做嵌套循环连接（Nested-Loop Join）；Mysql对这种方式有了优化，增加了join buffer，是将驱动表关联条件的相关列缓存起来，并将多次匹配合并，减少的匹配的次数，以此方式来加速查询结果，叫做BLJ算法（Block Nested-Loop Join）；有索引则会先匹配索引，匹配后的结果再插到对应的数据返回</p>\n<p>综上，级联查询的查询条件最好是加索引，虽然mysql对没有索引的链接做了优化，那也是没有索引的方式快的，而且最好链接的条件是主键索引，这是由于非主键索引指向的时主键索引，要得到数据还要跑一次主键索引；还有我想到了阿里巴巴java开发规范中写道多余三张表不能使用join，用多次简单查询代替这个也要注意一下</p>\n<p>参考： <a href=\"https://www.jianshu.com/p/048d93d3ee54\" target=\"_blank\" rel=\"noopener\">MySQL查询优化——连接以及连接原理</a></p>\n"},{"title":"StringUtils","author":"YyWang","date":"2019-07-26T11:32:04.000Z","catagories":"Java","_content":"## StringUtils\n+ 工作中很多操作字符串的操作，使用到了工具类这里总结下，org.apache.commons.lang3包下的\n \n### split(String str, String separatorChars)-->切分字符串 \n\n~~~\npublic static String[] split(String str, String separatorChars) {\n    return splitWorker(str, separatorChars, -1, false);\n}\n~~~\n参数：\n\n- int max ->the maximum number of elements to include in the array. A zero or negative value implies no limit.\n这个参数代表返回的字符串的最大长度，0或者-1代表不限制长度\n- boolean preserveAllTokens -> if {@code true}, adjacent separators are treated as empty token separators; if {@code false}, adjacent separators are treated as one separator. 这个参数是连续分隔符规则的标志，如果为true连续的分隔符都会匹配，最终得到的字符串数组会有空的值，jdk中的split就是这个规则；如果为false，连续的分隔符只会匹配一次，最终得到的数组不会有空值。eg(\"1,2,3,,4,5\"切分后，true得到[1,2,3,,4,5]而false得到[1,2,3,4,5])，\n- 这也是与jdk中的split方法的区别，如果需要使用与jdk相同的规则，工具类中的splitPreserveAllTokens方法可以实现，该方法会调用splitWorker方法且最后的参数为true\n\n所以split方法默认参数为-1和false表示数组长度不收限制，及使用第二个规则进行切割，确保得到的字符串数组没有空值\n原理：\n+ 先将字符串与分隔符做匹配\n+ 匹配到之后将分隔符之前的子串分割add到一个list集合中\n+ 最后使用list.toArray返回最终的数组\n\n#### join  待续\n","source":"_posts/StringUtils.md","raw":"title: StringUtils\nauthor: YyWang\ndate: 2019-07-26 19:32:04\ntags: Java\ncatagories: Java\n---\n## StringUtils\n+ 工作中很多操作字符串的操作，使用到了工具类这里总结下，org.apache.commons.lang3包下的\n \n### split(String str, String separatorChars)-->切分字符串 \n\n~~~\npublic static String[] split(String str, String separatorChars) {\n    return splitWorker(str, separatorChars, -1, false);\n}\n~~~\n参数：\n\n- int max ->the maximum number of elements to include in the array. A zero or negative value implies no limit.\n这个参数代表返回的字符串的最大长度，0或者-1代表不限制长度\n- boolean preserveAllTokens -> if {@code true}, adjacent separators are treated as empty token separators; if {@code false}, adjacent separators are treated as one separator. 这个参数是连续分隔符规则的标志，如果为true连续的分隔符都会匹配，最终得到的字符串数组会有空的值，jdk中的split就是这个规则；如果为false，连续的分隔符只会匹配一次，最终得到的数组不会有空值。eg(\"1,2,3,,4,5\"切分后，true得到[1,2,3,,4,5]而false得到[1,2,3,4,5])，\n- 这也是与jdk中的split方法的区别，如果需要使用与jdk相同的规则，工具类中的splitPreserveAllTokens方法可以实现，该方法会调用splitWorker方法且最后的参数为true\n\n所以split方法默认参数为-1和false表示数组长度不收限制，及使用第二个规则进行切割，确保得到的字符串数组没有空值\n原理：\n+ 先将字符串与分隔符做匹配\n+ 匹配到之后将分隔符之前的子串分割add到一个list集合中\n+ 最后使用list.toArray返回最终的数组\n\n#### join  待续\n","slug":"StringUtils","published":1,"updated":"2021-07-13T12:27:08.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj76001u81fy45kay037","content":"<h2 id=\"StringUtils\"><a href=\"#StringUtils\" class=\"headerlink\" title=\"StringUtils\"></a>StringUtils</h2><ul>\n<li>工作中很多操作字符串的操作，使用到了工具类这里总结下，org.apache.commons.lang3包下的</li>\n</ul>\n<h3 id=\"split-String-str-String-separatorChars-–-gt-切分字符串\"><a href=\"#split-String-str-String-separatorChars-–-gt-切分字符串\" class=\"headerlink\" title=\"split(String str, String separatorChars)–&gt;切分字符串\"></a>split(String str, String separatorChars)–&gt;切分字符串</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static String[] split(String str, String separatorChars) &#123;</span><br><span class=\"line\">    return splitWorker(str, separatorChars, -1, false);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参数：</p>\n<ul>\n<li>int max -&gt;the maximum number of elements to include in the array. A zero or negative value implies no limit.<br>这个参数代表返回的字符串的最大长度，0或者-1代表不限制长度</li>\n<li>boolean preserveAllTokens -&gt; if {@code true}, adjacent separators are treated as empty token separators; if {@code false}, adjacent separators are treated as one separator. 这个参数是连续分隔符规则的标志，如果为true连续的分隔符都会匹配，最终得到的字符串数组会有空的值，jdk中的split就是这个规则；如果为false，连续的分隔符只会匹配一次，最终得到的数组不会有空值。eg(“1,2,3,,4,5”切分后，true得到[1,2,3,,4,5]而false得到[1,2,3,4,5])，</li>\n<li>这也是与jdk中的split方法的区别，如果需要使用与jdk相同的规则，工具类中的splitPreserveAllTokens方法可以实现，该方法会调用splitWorker方法且最后的参数为true</li>\n</ul>\n<p>所以split方法默认参数为-1和false表示数组长度不收限制，及使用第二个规则进行切割，确保得到的字符串数组没有空值<br>原理：</p>\n<ul>\n<li>先将字符串与分隔符做匹配</li>\n<li>匹配到之后将分隔符之前的子串分割add到一个list集合中</li>\n<li>最后使用list.toArray返回最终的数组</li>\n</ul>\n<h4 id=\"join-待续\"><a href=\"#join-待续\" class=\"headerlink\" title=\"join  待续\"></a>join  待续</h4>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"StringUtils\"><a href=\"#StringUtils\" class=\"headerlink\" title=\"StringUtils\"></a>StringUtils</h2><ul>\n<li>工作中很多操作字符串的操作，使用到了工具类这里总结下，org.apache.commons.lang3包下的</li>\n</ul>\n<h3 id=\"split-String-str-String-separatorChars-–-gt-切分字符串\"><a href=\"#split-String-str-String-separatorChars-–-gt-切分字符串\" class=\"headerlink\" title=\"split(String str, String separatorChars)–&gt;切分字符串\"></a>split(String str, String separatorChars)–&gt;切分字符串</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static String[] split(String str, String separatorChars) &#123;</span><br><span class=\"line\">    return splitWorker(str, separatorChars, -1, false);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参数：</p>\n<ul>\n<li>int max -&gt;the maximum number of elements to include in the array. A zero or negative value implies no limit.<br>这个参数代表返回的字符串的最大长度，0或者-1代表不限制长度</li>\n<li>boolean preserveAllTokens -&gt; if {@code true}, adjacent separators are treated as empty token separators; if {@code false}, adjacent separators are treated as one separator. 这个参数是连续分隔符规则的标志，如果为true连续的分隔符都会匹配，最终得到的字符串数组会有空的值，jdk中的split就是这个规则；如果为false，连续的分隔符只会匹配一次，最终得到的数组不会有空值。eg(“1,2,3,,4,5”切分后，true得到[1,2,3,,4,5]而false得到[1,2,3,4,5])，</li>\n<li>这也是与jdk中的split方法的区别，如果需要使用与jdk相同的规则，工具类中的splitPreserveAllTokens方法可以实现，该方法会调用splitWorker方法且最后的参数为true</li>\n</ul>\n<p>所以split方法默认参数为-1和false表示数组长度不收限制，及使用第二个规则进行切割，确保得到的字符串数组没有空值<br>原理：</p>\n<ul>\n<li>先将字符串与分隔符做匹配</li>\n<li>匹配到之后将分隔符之前的子串分割add到一个list集合中</li>\n<li>最后使用list.toArray返回最终的数组</li>\n</ul>\n<h4 id=\"join-待续\"><a href=\"#join-待续\" class=\"headerlink\" title=\"join  待续\"></a>join  待续</h4>"},{"title":"TCP","author":"YyWang","date":"2019-12-26T13:05:23.000Z","_content":"#### TCP报文\n\n![upload successful](/images/pasted-24.png)\n\n* 源端口 16bit\n* 目的端口 16bit\n* 序号 32bit seq 发送SYN时（SYN控制位是1）会初始化序列码（Initial Sequence Number, ISN），会用一个算法生产随机数\n* 确认序号 32bit ack 伴随ACK（ACK控制位是1）报文一起，表示下一个要接收包的序列开始\n* 4位首部长度 4bit \n* 保留 6bit\n* 标志 6bit\n\t* URG 紧急标志\n\t* ACK 应答标志\n\t* PSH 推\n\t* RST 重置连接标志 用于重置连接\n\t* SYN 同步标志 用于建立连接\n\t* FIN 完成数据发送标志 用于释放连接\n* 窗口大小 16bit\n* 校验和 16bit\n* 紧急指针 16bit\n\n#### 三次握手\n\n![upload successful](/images/pasted-25.png)\n\n* 客户端向服务器发送请求，等待服务器响应，客户端进入SYN_SENT状态；SYN=1, seq=x\n* 服务器收到客户端建立连接的请求（SYN=1表示建立连接），向客户端发送响应，随后服务器进入SYN_RCVD状态；SYN=1，ACK=1，ack=x+1，seq=y\n* 客户端收到响应确认后（确认ack=x+1，表示服务器接收到x+1前的所有的数据，没有丢包），进入到ESTAPLISHED状态（表示客户端向服务器发送的数据x可以被接收到，单方向连通），再向服务器发送响应，服务器接收到响应确认后（确认ack=y+1，表示接收到y+1前的所有的数据，没有丢包）进入ESTABLISHED状态（表示服务器想客户端发送的数据y可以被接收到，单方向连通）；ACK=1 ack=y+1\n\n* SYN=1 表示建立连接的请求\n* ACK=1 表示确认收到请求\n* seq 表示初始序列，相当于发送数据的开始索引\n* ack 表示收到数据后的序列，相当于下一次发送数据的开始索引（比如 ack=x+1 表示x+1前的数据接收到了，下次发送从x+1开始）\n\n* 三次握手其实就是为了建立连接，客户端<——>服务器两个方向，一次连接建立的过程必须是发送seq序列并收到ack=seq+1的确认\n* 为什么不是2次握手或者是4次握手\n\t* 2次握手；当客户端发送了SYN=1 seq=x的连接请求，服务器返回ack=x+1的响应，如果是两次握手此时已经建立连接；这时候只能保证客户端向服务器发送的数据能被成功接收，而不能确定服务器给客户端发送的数据是否能被接收，相当于只是建立了 客户端——>服务器单方向的连接\n\t* 4次握手，参照2次握手发现建立单方向的连接往往需要2次握手，两个方向建立必然会4次握手，其实是第二次握手做了两件事，一是收到服务器的响应并确认，二是发送想服务器建立连接的请求；这两件事一起做相当于是3次握手\n\n* TCP不会重传ACK=1的报文，只能通过重发SYN=1的请求来尝试重新建立连接，比如（A是客户端，B是服务端）\n\t>第一个包，即A发给B的SYN没有到达B，A会超时重传，直到收到B的确认\n\t\n\t>第二个包，即B发送给A的SYN+ACK没有到达A，B会超时重传，直到收到A的确认\n\t\n\t>>这里的报文虽然是ACK但是也包含SYN，所以可以重传\n\t\n\t>第三个包，即A发送给B的ACK没有到达B\n\t\n\t>> a.如双方果没有数据发送，B会超时重传，知道收到A的确认\n\t\n\t>> b.如果A有数据发送，因为第二个包已经成功接收，A为ESTABLISHED状态，A->B的连接已经建立，A会发送Data+ACK的确认，当B接收到的时候会改变状态为ESTABLISHED\n\t\n\t>> c.如果B有数据发送，由于B没有收到确认还不是ESTABLISHED状态，还不能发送数据，会一直周期性超时重传SYN + ACK，直到收到A的确认才可以发送数据\n\t\n* TCP会不会重复建立连接呢？\n\t* 场景：客户端A和服务器B建立连接，第一个连接请求a没有收到，重新发送第二个请求b，请求b被接收后建立连接，过一会B又收到请求a\n\t* 答案：不会，服务器B接收到请求a，认为a是无效请求，返回rst报文拒绝连接\n\t* 假设如果已经建立了连接，服务器B发现请求a是失效的（因为是重发的请求源IP、端口和目标IP、端口是一样的，此时端口已经打开，连接建立）并向客户端A返回rst包，拒绝连接；\n\t* 假设还连接还没建立，服务器B向客户端A返回ACK+SYN，A收到后验证发现该请求是无效的，回复rst关闭连接，B收不到回复会重发ACK+SYN到一定次数（可设置）不再重发并关闭这个未建立起来的连接\n\n#### 四次挥手\n\n![upload successful](/images/pasted-26.png)\n\n* 客户端发送向服务器发送关闭请求（FIN=1，seq=x），请求关闭客户端——>服务器的连接，客户端进入FIN_WAIT_1的状态；客户端停止向服务器发送数据\n* 服务器接收到关闭请求后，回复（ACK=1 ack=x+1 seq=y）给客户端，表示接收到关闭请求，服务器进入到CLOSE_WAIT状态，客户端收到回复后进入FIN_WAIT_2的状态\n* 服务器发送向客户端发送关闭请求（FIN=1，ACK=1，seq=z，ack=x+1），服务器进入LAST_ACK状态；服务端停止向客户端发送数据，等待客户端响应\n* 客户收到服务端的关闭请求，回复（ACK=1，seq=x+1，ack=z+1），客户端进入TIME_WAIT状态，等待2MSL（报文的最大生存时间）时间后，客户端进入CLOSED状态，服务器收到客户端的响应后进入CLOSED状态\n\n\n* 等待2MSL的作用\n  * 1.为了保证客户端发送的ACK能够到达服务器，服务器的连接能够正常关闭；\n  * 假设ACK丢失，等待1个MSL的时间服务器重新发送FIN关闭连接，客户端在1个MSL的时间内收到重发的FIN请求就知道刚刚的ACK没有送到，重新发送ACK确认并重新计算MSL的时间；假设第四次挥手后直接关闭，服务端没有收到ACK重发FIN，此时客户端发送rst报文关闭连接，这时是异常的关闭，太暴力了不优雅\n  * 2.可以防止已经失效的数据包在下次的连接中传输\n  * 失效的数据包由于网络延迟，还未发送到目的地，这时数据包虽然已经生效但是生命周期还没有结束（在MSL的时间内），假如第四次挥手后马上关闭连接，此时又有新的连接建立，刚好是相同的IP和端口，旧的数据包传输可以在MSL时间内传输，等待2MSL后所有失效的数据包都已不存在\n\n#### 滑动窗口\n\n用来加速数据传输，假设A发送序列seq=x的包，必须等待收到ack=x+1的回复才继续发送后面的包，滑动窗口相当于规定了一个范围，只要发送seq的范围没有超过滑动窗口就能继续发送；这样发送端不需要长时间等待前一个ack就能继续发送后面的数据包，接收端可以收到多个数据包后只发送一个ack来表示确认，加速了传输速度\n\n#### SYN攻击\n\n发生在三次握手的第三次过程中，服务器还没接收到客户端ack，状态是SYN_RCVD的时间段中，客户端伪造大量不存在的IP的SYN包，请求建立连接，服务器回复并等待，源ip是伪造的并不存在，服务器一直超时重发，造成网络堵塞，检测SYN攻击的方式很简单，服务器上有大量SYN_RCVD状态的链接，并且IP地址是随机的，可以用命令（#netstat -nap | grep SYN_RECV）判断 \n\n#### RST攻击\n\n客户端A与服务器B已经建立连接，C伪装成A发送RST包，B接收到后强制断开连接；亦或者C伪装A发送SYN包，B接收后发现该请求无效返回RST包要A断开连接；所以客户端的端口设置是随机的，不然很容易被猜到从而受到攻击 \n\n#### 长连接短连接\n\n* 短连接，客户端和服务器完成一次请求和响应，相当于完成一次读写，一般由客户端发起关闭连接操作，（服务器收到消息后关闭连接不优雅）；优点是便于管理，存活的连接都是有用的连接\n* 长连接，客户端和服务器的连接不会主动关闭，后续的请求响应继续使用这个连接，通过保活机制维护连(2小时内没有请求和响应，服务器会想客户端发送一个探测报文)\n\n>> 客户端响应正常，时间刷新，2小时没有操作后继续探活\n\n>> 客户端不能响应探测报文（客户端异常无法发送响应或发送的响应无法到达服务器），75s后会超时，服务器共发送10个这样的探测，间隔75秒，10次结束后仍然没有收到回应，关闭连接\n\n#### 半连接队列和全连接队列\n\n* 指的是服务器的状态，SYN_RCVD状态的连接会加入到半连接队列，服务器收到客户端的确认报文状态改为ESTABLISHED状态会从半连接队列中删除，加入到全连接队列\n* 半连接队列满\n\t* 不开启net.ipv4.tcp_syncookies，直接丢弃新来的SYN请求\n\t* 开启net.ipv4.tcp_cookies，假设全连接队列满，并且qlen_young的值（半连接队列中还没有进行SYN+ACK的连接数量）大于1，丢弃这个SYN请求；假设全连接队列没满，生产syncookie并返回SYN+ACK包\t\n\t* syncookies用来防止syn floods攻击（攻击方不停发送SYN请求，不去回应ACK，使得半连接队列满，其他连接无法建立），通过将接收到的源ip源端口序列号进行hash，称为hash值，将hash值作为seq发送SYN+ACK，收到ACK响应验证cookie是否正确（ack-1），正确才能建立连接；但是对于没有受到攻击的服务器来说syncookies会造成负担\n* 假设全连接队列满，会根据tcp_abort_on_overflow的值，执行相应的策略（值为0，服务器丢弃该连接，连接信息仍然保留在半连接队列中，服务器会重发SYN+ACK，直到队列不满，建立连接；值为1，服务器发送rst报文关闭连接）\n\n#### 拥塞控制\n\n控制网络流量，寻找一个合适的数据传输速度，防止造成网络堵塞或者传输速度过慢效率低的问题；拥塞窗口（cwnd）也就是发送数据的最大值，防止拥塞窗口过大，需要设置一个阈值（ssthresh）来控制窗口的大小，在阈值上下使用不同的算法\n\n* 慢开始（cwnd < ssthresh）；开始不会就发送大量的数据，由小到大慢慢增加拥塞窗口的大小，探测网络的拥塞程度，每收到一个ACK拥塞窗口（cwnd）增加一倍，从1开始（2的指数增加）\n\n![upload successful](/images/pasted-27.png)\n\n* 拥塞避免（cwnd > ssthresh）；让窗口慢慢增大，经过一个往返时间RTT（收到一个ACK），窗口大小加1\n* 在慢启动和拥塞避免的阶段中当出现网络拥塞（有报文超时），窗口会重置为1，ssthresh的阈值会重置为发生拥塞时窗口的一半，再重新开始传输数据\n* 快重传；发送方按顺序传递报文，当出现丢失数据，接收方会发送重复的确认告知发送方报文丢失，发送方收到三个重复的确认立即重发报文，不必等待报文超时再重传\n\n![upload successful](/images/pasted-28.png)\n\n* 快恢复；发送方收到3个重发确认，将ssthresh减半，不执行慢开始（因为收到重复确认所以此时网络并没有拥塞，执行拥塞避免窗口加1，缓慢增大即可）\n\n![upload successful](/images/pasted-29.png)\n\n\n#### 参考资料\n\n[TCP为什么是三次握手，而不是两次或四次](https://www.zhihu.com/question/24853633)\n\n[TCP建立连接时三次握手的一个疑问点](https://www.zhihu.com/question/276693714/answer/415714916)\n\n[TCP中的RST标志(Reset)详解](https://blog.csdn.net/a_tu_/article/details/80389878)\n\n[TCP协议详解](https://www.cnblogs.com/buxiangxin/p/8336022.html)\n\n[TCP流量控制、拥塞控制](https://zhuanlan.zhihu.com/p/37379780)","source":"_posts/TCP.md","raw":"title: TCP\nauthor: YyWang\ndate: 2019-12-26 21:05:23\ntags:\n---\n#### TCP报文\n\n![upload successful](/images/pasted-24.png)\n\n* 源端口 16bit\n* 目的端口 16bit\n* 序号 32bit seq 发送SYN时（SYN控制位是1）会初始化序列码（Initial Sequence Number, ISN），会用一个算法生产随机数\n* 确认序号 32bit ack 伴随ACK（ACK控制位是1）报文一起，表示下一个要接收包的序列开始\n* 4位首部长度 4bit \n* 保留 6bit\n* 标志 6bit\n\t* URG 紧急标志\n\t* ACK 应答标志\n\t* PSH 推\n\t* RST 重置连接标志 用于重置连接\n\t* SYN 同步标志 用于建立连接\n\t* FIN 完成数据发送标志 用于释放连接\n* 窗口大小 16bit\n* 校验和 16bit\n* 紧急指针 16bit\n\n#### 三次握手\n\n![upload successful](/images/pasted-25.png)\n\n* 客户端向服务器发送请求，等待服务器响应，客户端进入SYN_SENT状态；SYN=1, seq=x\n* 服务器收到客户端建立连接的请求（SYN=1表示建立连接），向客户端发送响应，随后服务器进入SYN_RCVD状态；SYN=1，ACK=1，ack=x+1，seq=y\n* 客户端收到响应确认后（确认ack=x+1，表示服务器接收到x+1前的所有的数据，没有丢包），进入到ESTAPLISHED状态（表示客户端向服务器发送的数据x可以被接收到，单方向连通），再向服务器发送响应，服务器接收到响应确认后（确认ack=y+1，表示接收到y+1前的所有的数据，没有丢包）进入ESTABLISHED状态（表示服务器想客户端发送的数据y可以被接收到，单方向连通）；ACK=1 ack=y+1\n\n* SYN=1 表示建立连接的请求\n* ACK=1 表示确认收到请求\n* seq 表示初始序列，相当于发送数据的开始索引\n* ack 表示收到数据后的序列，相当于下一次发送数据的开始索引（比如 ack=x+1 表示x+1前的数据接收到了，下次发送从x+1开始）\n\n* 三次握手其实就是为了建立连接，客户端<——>服务器两个方向，一次连接建立的过程必须是发送seq序列并收到ack=seq+1的确认\n* 为什么不是2次握手或者是4次握手\n\t* 2次握手；当客户端发送了SYN=1 seq=x的连接请求，服务器返回ack=x+1的响应，如果是两次握手此时已经建立连接；这时候只能保证客户端向服务器发送的数据能被成功接收，而不能确定服务器给客户端发送的数据是否能被接收，相当于只是建立了 客户端——>服务器单方向的连接\n\t* 4次握手，参照2次握手发现建立单方向的连接往往需要2次握手，两个方向建立必然会4次握手，其实是第二次握手做了两件事，一是收到服务器的响应并确认，二是发送想服务器建立连接的请求；这两件事一起做相当于是3次握手\n\n* TCP不会重传ACK=1的报文，只能通过重发SYN=1的请求来尝试重新建立连接，比如（A是客户端，B是服务端）\n\t>第一个包，即A发给B的SYN没有到达B，A会超时重传，直到收到B的确认\n\t\n\t>第二个包，即B发送给A的SYN+ACK没有到达A，B会超时重传，直到收到A的确认\n\t\n\t>>这里的报文虽然是ACK但是也包含SYN，所以可以重传\n\t\n\t>第三个包，即A发送给B的ACK没有到达B\n\t\n\t>> a.如双方果没有数据发送，B会超时重传，知道收到A的确认\n\t\n\t>> b.如果A有数据发送，因为第二个包已经成功接收，A为ESTABLISHED状态，A->B的连接已经建立，A会发送Data+ACK的确认，当B接收到的时候会改变状态为ESTABLISHED\n\t\n\t>> c.如果B有数据发送，由于B没有收到确认还不是ESTABLISHED状态，还不能发送数据，会一直周期性超时重传SYN + ACK，直到收到A的确认才可以发送数据\n\t\n* TCP会不会重复建立连接呢？\n\t* 场景：客户端A和服务器B建立连接，第一个连接请求a没有收到，重新发送第二个请求b，请求b被接收后建立连接，过一会B又收到请求a\n\t* 答案：不会，服务器B接收到请求a，认为a是无效请求，返回rst报文拒绝连接\n\t* 假设如果已经建立了连接，服务器B发现请求a是失效的（因为是重发的请求源IP、端口和目标IP、端口是一样的，此时端口已经打开，连接建立）并向客户端A返回rst包，拒绝连接；\n\t* 假设还连接还没建立，服务器B向客户端A返回ACK+SYN，A收到后验证发现该请求是无效的，回复rst关闭连接，B收不到回复会重发ACK+SYN到一定次数（可设置）不再重发并关闭这个未建立起来的连接\n\n#### 四次挥手\n\n![upload successful](/images/pasted-26.png)\n\n* 客户端发送向服务器发送关闭请求（FIN=1，seq=x），请求关闭客户端——>服务器的连接，客户端进入FIN_WAIT_1的状态；客户端停止向服务器发送数据\n* 服务器接收到关闭请求后，回复（ACK=1 ack=x+1 seq=y）给客户端，表示接收到关闭请求，服务器进入到CLOSE_WAIT状态，客户端收到回复后进入FIN_WAIT_2的状态\n* 服务器发送向客户端发送关闭请求（FIN=1，ACK=1，seq=z，ack=x+1），服务器进入LAST_ACK状态；服务端停止向客户端发送数据，等待客户端响应\n* 客户收到服务端的关闭请求，回复（ACK=1，seq=x+1，ack=z+1），客户端进入TIME_WAIT状态，等待2MSL（报文的最大生存时间）时间后，客户端进入CLOSED状态，服务器收到客户端的响应后进入CLOSED状态\n\n\n* 等待2MSL的作用\n  * 1.为了保证客户端发送的ACK能够到达服务器，服务器的连接能够正常关闭；\n  * 假设ACK丢失，等待1个MSL的时间服务器重新发送FIN关闭连接，客户端在1个MSL的时间内收到重发的FIN请求就知道刚刚的ACK没有送到，重新发送ACK确认并重新计算MSL的时间；假设第四次挥手后直接关闭，服务端没有收到ACK重发FIN，此时客户端发送rst报文关闭连接，这时是异常的关闭，太暴力了不优雅\n  * 2.可以防止已经失效的数据包在下次的连接中传输\n  * 失效的数据包由于网络延迟，还未发送到目的地，这时数据包虽然已经生效但是生命周期还没有结束（在MSL的时间内），假如第四次挥手后马上关闭连接，此时又有新的连接建立，刚好是相同的IP和端口，旧的数据包传输可以在MSL时间内传输，等待2MSL后所有失效的数据包都已不存在\n\n#### 滑动窗口\n\n用来加速数据传输，假设A发送序列seq=x的包，必须等待收到ack=x+1的回复才继续发送后面的包，滑动窗口相当于规定了一个范围，只要发送seq的范围没有超过滑动窗口就能继续发送；这样发送端不需要长时间等待前一个ack就能继续发送后面的数据包，接收端可以收到多个数据包后只发送一个ack来表示确认，加速了传输速度\n\n#### SYN攻击\n\n发生在三次握手的第三次过程中，服务器还没接收到客户端ack，状态是SYN_RCVD的时间段中，客户端伪造大量不存在的IP的SYN包，请求建立连接，服务器回复并等待，源ip是伪造的并不存在，服务器一直超时重发，造成网络堵塞，检测SYN攻击的方式很简单，服务器上有大量SYN_RCVD状态的链接，并且IP地址是随机的，可以用命令（#netstat -nap | grep SYN_RECV）判断 \n\n#### RST攻击\n\n客户端A与服务器B已经建立连接，C伪装成A发送RST包，B接收到后强制断开连接；亦或者C伪装A发送SYN包，B接收后发现该请求无效返回RST包要A断开连接；所以客户端的端口设置是随机的，不然很容易被猜到从而受到攻击 \n\n#### 长连接短连接\n\n* 短连接，客户端和服务器完成一次请求和响应，相当于完成一次读写，一般由客户端发起关闭连接操作，（服务器收到消息后关闭连接不优雅）；优点是便于管理，存活的连接都是有用的连接\n* 长连接，客户端和服务器的连接不会主动关闭，后续的请求响应继续使用这个连接，通过保活机制维护连(2小时内没有请求和响应，服务器会想客户端发送一个探测报文)\n\n>> 客户端响应正常，时间刷新，2小时没有操作后继续探活\n\n>> 客户端不能响应探测报文（客户端异常无法发送响应或发送的响应无法到达服务器），75s后会超时，服务器共发送10个这样的探测，间隔75秒，10次结束后仍然没有收到回应，关闭连接\n\n#### 半连接队列和全连接队列\n\n* 指的是服务器的状态，SYN_RCVD状态的连接会加入到半连接队列，服务器收到客户端的确认报文状态改为ESTABLISHED状态会从半连接队列中删除，加入到全连接队列\n* 半连接队列满\n\t* 不开启net.ipv4.tcp_syncookies，直接丢弃新来的SYN请求\n\t* 开启net.ipv4.tcp_cookies，假设全连接队列满，并且qlen_young的值（半连接队列中还没有进行SYN+ACK的连接数量）大于1，丢弃这个SYN请求；假设全连接队列没满，生产syncookie并返回SYN+ACK包\t\n\t* syncookies用来防止syn floods攻击（攻击方不停发送SYN请求，不去回应ACK，使得半连接队列满，其他连接无法建立），通过将接收到的源ip源端口序列号进行hash，称为hash值，将hash值作为seq发送SYN+ACK，收到ACK响应验证cookie是否正确（ack-1），正确才能建立连接；但是对于没有受到攻击的服务器来说syncookies会造成负担\n* 假设全连接队列满，会根据tcp_abort_on_overflow的值，执行相应的策略（值为0，服务器丢弃该连接，连接信息仍然保留在半连接队列中，服务器会重发SYN+ACK，直到队列不满，建立连接；值为1，服务器发送rst报文关闭连接）\n\n#### 拥塞控制\n\n控制网络流量，寻找一个合适的数据传输速度，防止造成网络堵塞或者传输速度过慢效率低的问题；拥塞窗口（cwnd）也就是发送数据的最大值，防止拥塞窗口过大，需要设置一个阈值（ssthresh）来控制窗口的大小，在阈值上下使用不同的算法\n\n* 慢开始（cwnd < ssthresh）；开始不会就发送大量的数据，由小到大慢慢增加拥塞窗口的大小，探测网络的拥塞程度，每收到一个ACK拥塞窗口（cwnd）增加一倍，从1开始（2的指数增加）\n\n![upload successful](/images/pasted-27.png)\n\n* 拥塞避免（cwnd > ssthresh）；让窗口慢慢增大，经过一个往返时间RTT（收到一个ACK），窗口大小加1\n* 在慢启动和拥塞避免的阶段中当出现网络拥塞（有报文超时），窗口会重置为1，ssthresh的阈值会重置为发生拥塞时窗口的一半，再重新开始传输数据\n* 快重传；发送方按顺序传递报文，当出现丢失数据，接收方会发送重复的确认告知发送方报文丢失，发送方收到三个重复的确认立即重发报文，不必等待报文超时再重传\n\n![upload successful](/images/pasted-28.png)\n\n* 快恢复；发送方收到3个重发确认，将ssthresh减半，不执行慢开始（因为收到重复确认所以此时网络并没有拥塞，执行拥塞避免窗口加1，缓慢增大即可）\n\n![upload successful](/images/pasted-29.png)\n\n\n#### 参考资料\n\n[TCP为什么是三次握手，而不是两次或四次](https://www.zhihu.com/question/24853633)\n\n[TCP建立连接时三次握手的一个疑问点](https://www.zhihu.com/question/276693714/answer/415714916)\n\n[TCP中的RST标志(Reset)详解](https://blog.csdn.net/a_tu_/article/details/80389878)\n\n[TCP协议详解](https://www.cnblogs.com/buxiangxin/p/8336022.html)\n\n[TCP流量控制、拥塞控制](https://zhuanlan.zhihu.com/p/37379780)","slug":"TCP","published":1,"updated":"2021-07-13T12:27:08.588Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj77001w81fyvxst63kh","content":"<h4 id=\"TCP报文\"><a href=\"#TCP报文\" class=\"headerlink\" title=\"TCP报文\"></a>TCP报文</h4><p><img src=\"/images/pasted-24.png\" alt=\"upload successful\"></p>\n<ul>\n<li>源端口 16bit</li>\n<li>目的端口 16bit</li>\n<li>序号 32bit seq 发送SYN时（SYN控制位是1）会初始化序列码（Initial Sequence Number, ISN），会用一个算法生产随机数</li>\n<li>确认序号 32bit ack 伴随ACK（ACK控制位是1）报文一起，表示下一个要接收包的序列开始</li>\n<li>4位首部长度 4bit </li>\n<li>保留 6bit</li>\n<li>标志 6bit<ul>\n<li>URG 紧急标志</li>\n<li>ACK 应答标志</li>\n<li>PSH 推</li>\n<li>RST 重置连接标志 用于重置连接</li>\n<li>SYN 同步标志 用于建立连接</li>\n<li>FIN 完成数据发送标志 用于释放连接</li>\n</ul>\n</li>\n<li>窗口大小 16bit</li>\n<li>校验和 16bit</li>\n<li>紧急指针 16bit</li>\n</ul>\n<h4 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h4><p><img src=\"/images/pasted-25.png\" alt=\"upload successful\"></p>\n<ul>\n<li>客户端向服务器发送请求，等待服务器响应，客户端进入SYN_SENT状态；SYN=1, seq=x</li>\n<li>服务器收到客户端建立连接的请求（SYN=1表示建立连接），向客户端发送响应，随后服务器进入SYN_RCVD状态；SYN=1，ACK=1，ack=x+1，seq=y</li>\n<li><p>客户端收到响应确认后（确认ack=x+1，表示服务器接收到x+1前的所有的数据，没有丢包），进入到ESTAPLISHED状态（表示客户端向服务器发送的数据x可以被接收到，单方向连通），再向服务器发送响应，服务器接收到响应确认后（确认ack=y+1，表示接收到y+1前的所有的数据，没有丢包）进入ESTABLISHED状态（表示服务器想客户端发送的数据y可以被接收到，单方向连通）；ACK=1 ack=y+1</p>\n</li>\n<li><p>SYN=1 表示建立连接的请求</p>\n</li>\n<li>ACK=1 表示确认收到请求</li>\n<li>seq 表示初始序列，相当于发送数据的开始索引</li>\n<li><p>ack 表示收到数据后的序列，相当于下一次发送数据的开始索引（比如 ack=x+1 表示x+1前的数据接收到了，下次发送从x+1开始）</p>\n</li>\n<li><p>三次握手其实就是为了建立连接，客户端&lt;——&gt;服务器两个方向，一次连接建立的过程必须是发送seq序列并收到ack=seq+1的确认</p>\n</li>\n<li><p>为什么不是2次握手或者是4次握手</p>\n<ul>\n<li>2次握手；当客户端发送了SYN=1 seq=x的连接请求，服务器返回ack=x+1的响应，如果是两次握手此时已经建立连接；这时候只能保证客户端向服务器发送的数据能被成功接收，而不能确定服务器给客户端发送的数据是否能被接收，相当于只是建立了 客户端——&gt;服务器单方向的连接</li>\n<li>4次握手，参照2次握手发现建立单方向的连接往往需要2次握手，两个方向建立必然会4次握手，其实是第二次握手做了两件事，一是收到服务器的响应并确认，二是发送想服务器建立连接的请求；这两件事一起做相当于是3次握手</li>\n</ul>\n</li>\n<li><p>TCP不会重传ACK=1的报文，只能通过重发SYN=1的请求来尝试重新建立连接，比如（A是客户端，B是服务端）</p>\n<blockquote>\n<p>第一个包，即A发给B的SYN没有到达B，A会超时重传，直到收到B的确认</p>\n</blockquote>\n<blockquote>\n<p>第二个包，即B发送给A的SYN+ACK没有到达A，B会超时重传，直到收到A的确认</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>这里的报文虽然是ACK但是也包含SYN，所以可以重传</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>第三个包，即A发送给B的ACK没有到达B</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>a.如双方果没有数据发送，B会超时重传，知道收到A的确认</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>b.如果A有数据发送，因为第二个包已经成功接收，A为ESTABLISHED状态，A-&gt;B的连接已经建立，A会发送Data+ACK的确认，当B接收到的时候会改变状态为ESTABLISHED</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>c.如果B有数据发送，由于B没有收到确认还不是ESTABLISHED状态，还不能发送数据，会一直周期性超时重传SYN + ACK，直到收到A的确认才可以发送数据</p>\n</blockquote>\n</blockquote>\n</li>\n<li><p>TCP会不会重复建立连接呢？</p>\n<ul>\n<li>场景：客户端A和服务器B建立连接，第一个连接请求a没有收到，重新发送第二个请求b，请求b被接收后建立连接，过一会B又收到请求a</li>\n<li>答案：不会，服务器B接收到请求a，认为a是无效请求，返回rst报文拒绝连接</li>\n<li>假设如果已经建立了连接，服务器B发现请求a是失效的（因为是重发的请求源IP、端口和目标IP、端口是一样的，此时端口已经打开，连接建立）并向客户端A返回rst包，拒绝连接；</li>\n<li>假设还连接还没建立，服务器B向客户端A返回ACK+SYN，A收到后验证发现该请求是无效的，回复rst关闭连接，B收不到回复会重发ACK+SYN到一定次数（可设置）不再重发并关闭这个未建立起来的连接</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h4><p><img src=\"/images/pasted-26.png\" alt=\"upload successful\"></p>\n<ul>\n<li>客户端发送向服务器发送关闭请求（FIN=1，seq=x），请求关闭客户端——&gt;服务器的连接，客户端进入FIN_WAIT_1的状态；客户端停止向服务器发送数据</li>\n<li>服务器接收到关闭请求后，回复（ACK=1 ack=x+1 seq=y）给客户端，表示接收到关闭请求，服务器进入到CLOSE_WAIT状态，客户端收到回复后进入FIN_WAIT_2的状态</li>\n<li>服务器发送向客户端发送关闭请求（FIN=1，ACK=1，seq=z，ack=x+1），服务器进入LAST_ACK状态；服务端停止向客户端发送数据，等待客户端响应</li>\n<li>客户收到服务端的关闭请求，回复（ACK=1，seq=x+1，ack=z+1），客户端进入TIME_WAIT状态，等待2MSL（报文的最大生存时间）时间后，客户端进入CLOSED状态，服务器收到客户端的响应后进入CLOSED状态</li>\n</ul>\n<ul>\n<li>等待2MSL的作用<ul>\n<li>1.为了保证客户端发送的ACK能够到达服务器，服务器的连接能够正常关闭；</li>\n<li>假设ACK丢失，等待1个MSL的时间服务器重新发送FIN关闭连接，客户端在1个MSL的时间内收到重发的FIN请求就知道刚刚的ACK没有送到，重新发送ACK确认并重新计算MSL的时间；假设第四次挥手后直接关闭，服务端没有收到ACK重发FIN，此时客户端发送rst报文关闭连接，这时是异常的关闭，太暴力了不优雅</li>\n<li>2.可以防止已经失效的数据包在下次的连接中传输</li>\n<li>失效的数据包由于网络延迟，还未发送到目的地，这时数据包虽然已经生效但是生命周期还没有结束（在MSL的时间内），假如第四次挥手后马上关闭连接，此时又有新的连接建立，刚好是相同的IP和端口，旧的数据包传输可以在MSL时间内传输，等待2MSL后所有失效的数据包都已不存在</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h4><p>用来加速数据传输，假设A发送序列seq=x的包，必须等待收到ack=x+1的回复才继续发送后面的包，滑动窗口相当于规定了一个范围，只要发送seq的范围没有超过滑动窗口就能继续发送；这样发送端不需要长时间等待前一个ack就能继续发送后面的数据包，接收端可以收到多个数据包后只发送一个ack来表示确认，加速了传输速度</p>\n<h4 id=\"SYN攻击\"><a href=\"#SYN攻击\" class=\"headerlink\" title=\"SYN攻击\"></a>SYN攻击</h4><p>发生在三次握手的第三次过程中，服务器还没接收到客户端ack，状态是SYN_RCVD的时间段中，客户端伪造大量不存在的IP的SYN包，请求建立连接，服务器回复并等待，源ip是伪造的并不存在，服务器一直超时重发，造成网络堵塞，检测SYN攻击的方式很简单，服务器上有大量SYN_RCVD状态的链接，并且IP地址是随机的，可以用命令（#netstat -nap | grep SYN_RECV）判断 </p>\n<h4 id=\"RST攻击\"><a href=\"#RST攻击\" class=\"headerlink\" title=\"RST攻击\"></a>RST攻击</h4><p>客户端A与服务器B已经建立连接，C伪装成A发送RST包，B接收到后强制断开连接；亦或者C伪装A发送SYN包，B接收后发现该请求无效返回RST包要A断开连接；所以客户端的端口设置是随机的，不然很容易被猜到从而受到攻击 </p>\n<h4 id=\"长连接短连接\"><a href=\"#长连接短连接\" class=\"headerlink\" title=\"长连接短连接\"></a>长连接短连接</h4><ul>\n<li>短连接，客户端和服务器完成一次请求和响应，相当于完成一次读写，一般由客户端发起关闭连接操作，（服务器收到消息后关闭连接不优雅）；优点是便于管理，存活的连接都是有用的连接</li>\n<li>长连接，客户端和服务器的连接不会主动关闭，后续的请求响应继续使用这个连接，通过保活机制维护连(2小时内没有请求和响应，服务器会想客户端发送一个探测报文)</li>\n</ul>\n<blockquote>\n<blockquote>\n<p>客户端响应正常，时间刷新，2小时没有操作后继续探活</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>客户端不能响应探测报文（客户端异常无法发送响应或发送的响应无法到达服务器），75s后会超时，服务器共发送10个这样的探测，间隔75秒，10次结束后仍然没有收到回应，关闭连接</p>\n</blockquote>\n</blockquote>\n<h4 id=\"半连接队列和全连接队列\"><a href=\"#半连接队列和全连接队列\" class=\"headerlink\" title=\"半连接队列和全连接队列\"></a>半连接队列和全连接队列</h4><ul>\n<li>指的是服务器的状态，SYN_RCVD状态的连接会加入到半连接队列，服务器收到客户端的确认报文状态改为ESTABLISHED状态会从半连接队列中删除，加入到全连接队列</li>\n<li>半连接队列满<ul>\n<li>不开启net.ipv4.tcp_syncookies，直接丢弃新来的SYN请求</li>\n<li>开启net.ipv4.tcp_cookies，假设全连接队列满，并且qlen_young的值（半连接队列中还没有进行SYN+ACK的连接数量）大于1，丢弃这个SYN请求；假设全连接队列没满，生产syncookie并返回SYN+ACK包    </li>\n<li>syncookies用来防止syn floods攻击（攻击方不停发送SYN请求，不去回应ACK，使得半连接队列满，其他连接无法建立），通过将接收到的源ip源端口序列号进行hash，称为hash值，将hash值作为seq发送SYN+ACK，收到ACK响应验证cookie是否正确（ack-1），正确才能建立连接；但是对于没有受到攻击的服务器来说syncookies会造成负担</li>\n</ul>\n</li>\n<li>假设全连接队列满，会根据tcp_abort_on_overflow的值，执行相应的策略（值为0，服务器丢弃该连接，连接信息仍然保留在半连接队列中，服务器会重发SYN+ACK，直到队列不满，建立连接；值为1，服务器发送rst报文关闭连接）</li>\n</ul>\n<h4 id=\"拥塞控制\"><a href=\"#拥塞控制\" class=\"headerlink\" title=\"拥塞控制\"></a>拥塞控制</h4><p>控制网络流量，寻找一个合适的数据传输速度，防止造成网络堵塞或者传输速度过慢效率低的问题；拥塞窗口（cwnd）也就是发送数据的最大值，防止拥塞窗口过大，需要设置一个阈值（ssthresh）来控制窗口的大小，在阈值上下使用不同的算法</p>\n<ul>\n<li>慢开始（cwnd &lt; ssthresh）；开始不会就发送大量的数据，由小到大慢慢增加拥塞窗口的大小，探测网络的拥塞程度，每收到一个ACK拥塞窗口（cwnd）增加一倍，从1开始（2的指数增加）</li>\n</ul>\n<p><img src=\"/images/pasted-27.png\" alt=\"upload successful\"></p>\n<ul>\n<li>拥塞避免（cwnd &gt; ssthresh）；让窗口慢慢增大，经过一个往返时间RTT（收到一个ACK），窗口大小加1</li>\n<li>在慢启动和拥塞避免的阶段中当出现网络拥塞（有报文超时），窗口会重置为1，ssthresh的阈值会重置为发生拥塞时窗口的一半，再重新开始传输数据</li>\n<li>快重传；发送方按顺序传递报文，当出现丢失数据，接收方会发送重复的确认告知发送方报文丢失，发送方收到三个重复的确认立即重发报文，不必等待报文超时再重传</li>\n</ul>\n<p><img src=\"/images/pasted-28.png\" alt=\"upload successful\"></p>\n<ul>\n<li>快恢复；发送方收到3个重发确认，将ssthresh减半，不执行慢开始（因为收到重复确认所以此时网络并没有拥塞，执行拥塞避免窗口加1，缓慢增大即可）</li>\n</ul>\n<p><img src=\"/images/pasted-29.png\" alt=\"upload successful\"></p>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://www.zhihu.com/question/24853633\" target=\"_blank\" rel=\"noopener\">TCP为什么是三次握手，而不是两次或四次</a></p>\n<p><a href=\"https://www.zhihu.com/question/276693714/answer/415714916\" target=\"_blank\" rel=\"noopener\">TCP建立连接时三次握手的一个疑问点</a></p>\n<p><a href=\"https://blog.csdn.net/a_tu_/article/details/80389878\" target=\"_blank\" rel=\"noopener\">TCP中的RST标志(Reset)详解</a></p>\n<p><a href=\"https://www.cnblogs.com/buxiangxin/p/8336022.html\" target=\"_blank\" rel=\"noopener\">TCP协议详解</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/37379780\" target=\"_blank\" rel=\"noopener\">TCP流量控制、拥塞控制</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"TCP报文\"><a href=\"#TCP报文\" class=\"headerlink\" title=\"TCP报文\"></a>TCP报文</h4><p><img src=\"/images/pasted-24.png\" alt=\"upload successful\"></p>\n<ul>\n<li>源端口 16bit</li>\n<li>目的端口 16bit</li>\n<li>序号 32bit seq 发送SYN时（SYN控制位是1）会初始化序列码（Initial Sequence Number, ISN），会用一个算法生产随机数</li>\n<li>确认序号 32bit ack 伴随ACK（ACK控制位是1）报文一起，表示下一个要接收包的序列开始</li>\n<li>4位首部长度 4bit </li>\n<li>保留 6bit</li>\n<li>标志 6bit<ul>\n<li>URG 紧急标志</li>\n<li>ACK 应答标志</li>\n<li>PSH 推</li>\n<li>RST 重置连接标志 用于重置连接</li>\n<li>SYN 同步标志 用于建立连接</li>\n<li>FIN 完成数据发送标志 用于释放连接</li>\n</ul>\n</li>\n<li>窗口大小 16bit</li>\n<li>校验和 16bit</li>\n<li>紧急指针 16bit</li>\n</ul>\n<h4 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h4><p><img src=\"/images/pasted-25.png\" alt=\"upload successful\"></p>\n<ul>\n<li>客户端向服务器发送请求，等待服务器响应，客户端进入SYN_SENT状态；SYN=1, seq=x</li>\n<li>服务器收到客户端建立连接的请求（SYN=1表示建立连接），向客户端发送响应，随后服务器进入SYN_RCVD状态；SYN=1，ACK=1，ack=x+1，seq=y</li>\n<li><p>客户端收到响应确认后（确认ack=x+1，表示服务器接收到x+1前的所有的数据，没有丢包），进入到ESTAPLISHED状态（表示客户端向服务器发送的数据x可以被接收到，单方向连通），再向服务器发送响应，服务器接收到响应确认后（确认ack=y+1，表示接收到y+1前的所有的数据，没有丢包）进入ESTABLISHED状态（表示服务器想客户端发送的数据y可以被接收到，单方向连通）；ACK=1 ack=y+1</p>\n</li>\n<li><p>SYN=1 表示建立连接的请求</p>\n</li>\n<li>ACK=1 表示确认收到请求</li>\n<li>seq 表示初始序列，相当于发送数据的开始索引</li>\n<li><p>ack 表示收到数据后的序列，相当于下一次发送数据的开始索引（比如 ack=x+1 表示x+1前的数据接收到了，下次发送从x+1开始）</p>\n</li>\n<li><p>三次握手其实就是为了建立连接，客户端&lt;——&gt;服务器两个方向，一次连接建立的过程必须是发送seq序列并收到ack=seq+1的确认</p>\n</li>\n<li><p>为什么不是2次握手或者是4次握手</p>\n<ul>\n<li>2次握手；当客户端发送了SYN=1 seq=x的连接请求，服务器返回ack=x+1的响应，如果是两次握手此时已经建立连接；这时候只能保证客户端向服务器发送的数据能被成功接收，而不能确定服务器给客户端发送的数据是否能被接收，相当于只是建立了 客户端——&gt;服务器单方向的连接</li>\n<li>4次握手，参照2次握手发现建立单方向的连接往往需要2次握手，两个方向建立必然会4次握手，其实是第二次握手做了两件事，一是收到服务器的响应并确认，二是发送想服务器建立连接的请求；这两件事一起做相当于是3次握手</li>\n</ul>\n</li>\n<li><p>TCP不会重传ACK=1的报文，只能通过重发SYN=1的请求来尝试重新建立连接，比如（A是客户端，B是服务端）</p>\n<blockquote>\n<p>第一个包，即A发给B的SYN没有到达B，A会超时重传，直到收到B的确认</p>\n</blockquote>\n<blockquote>\n<p>第二个包，即B发送给A的SYN+ACK没有到达A，B会超时重传，直到收到A的确认</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>这里的报文虽然是ACK但是也包含SYN，所以可以重传</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>第三个包，即A发送给B的ACK没有到达B</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>a.如双方果没有数据发送，B会超时重传，知道收到A的确认</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>b.如果A有数据发送，因为第二个包已经成功接收，A为ESTABLISHED状态，A-&gt;B的连接已经建立，A会发送Data+ACK的确认，当B接收到的时候会改变状态为ESTABLISHED</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>c.如果B有数据发送，由于B没有收到确认还不是ESTABLISHED状态，还不能发送数据，会一直周期性超时重传SYN + ACK，直到收到A的确认才可以发送数据</p>\n</blockquote>\n</blockquote>\n</li>\n<li><p>TCP会不会重复建立连接呢？</p>\n<ul>\n<li>场景：客户端A和服务器B建立连接，第一个连接请求a没有收到，重新发送第二个请求b，请求b被接收后建立连接，过一会B又收到请求a</li>\n<li>答案：不会，服务器B接收到请求a，认为a是无效请求，返回rst报文拒绝连接</li>\n<li>假设如果已经建立了连接，服务器B发现请求a是失效的（因为是重发的请求源IP、端口和目标IP、端口是一样的，此时端口已经打开，连接建立）并向客户端A返回rst包，拒绝连接；</li>\n<li>假设还连接还没建立，服务器B向客户端A返回ACK+SYN，A收到后验证发现该请求是无效的，回复rst关闭连接，B收不到回复会重发ACK+SYN到一定次数（可设置）不再重发并关闭这个未建立起来的连接</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h4><p><img src=\"/images/pasted-26.png\" alt=\"upload successful\"></p>\n<ul>\n<li>客户端发送向服务器发送关闭请求（FIN=1，seq=x），请求关闭客户端——&gt;服务器的连接，客户端进入FIN_WAIT_1的状态；客户端停止向服务器发送数据</li>\n<li>服务器接收到关闭请求后，回复（ACK=1 ack=x+1 seq=y）给客户端，表示接收到关闭请求，服务器进入到CLOSE_WAIT状态，客户端收到回复后进入FIN_WAIT_2的状态</li>\n<li>服务器发送向客户端发送关闭请求（FIN=1，ACK=1，seq=z，ack=x+1），服务器进入LAST_ACK状态；服务端停止向客户端发送数据，等待客户端响应</li>\n<li>客户收到服务端的关闭请求，回复（ACK=1，seq=x+1，ack=z+1），客户端进入TIME_WAIT状态，等待2MSL（报文的最大生存时间）时间后，客户端进入CLOSED状态，服务器收到客户端的响应后进入CLOSED状态</li>\n</ul>\n<ul>\n<li>等待2MSL的作用<ul>\n<li>1.为了保证客户端发送的ACK能够到达服务器，服务器的连接能够正常关闭；</li>\n<li>假设ACK丢失，等待1个MSL的时间服务器重新发送FIN关闭连接，客户端在1个MSL的时间内收到重发的FIN请求就知道刚刚的ACK没有送到，重新发送ACK确认并重新计算MSL的时间；假设第四次挥手后直接关闭，服务端没有收到ACK重发FIN，此时客户端发送rst报文关闭连接，这时是异常的关闭，太暴力了不优雅</li>\n<li>2.可以防止已经失效的数据包在下次的连接中传输</li>\n<li>失效的数据包由于网络延迟，还未发送到目的地，这时数据包虽然已经生效但是生命周期还没有结束（在MSL的时间内），假如第四次挥手后马上关闭连接，此时又有新的连接建立，刚好是相同的IP和端口，旧的数据包传输可以在MSL时间内传输，等待2MSL后所有失效的数据包都已不存在</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h4><p>用来加速数据传输，假设A发送序列seq=x的包，必须等待收到ack=x+1的回复才继续发送后面的包，滑动窗口相当于规定了一个范围，只要发送seq的范围没有超过滑动窗口就能继续发送；这样发送端不需要长时间等待前一个ack就能继续发送后面的数据包，接收端可以收到多个数据包后只发送一个ack来表示确认，加速了传输速度</p>\n<h4 id=\"SYN攻击\"><a href=\"#SYN攻击\" class=\"headerlink\" title=\"SYN攻击\"></a>SYN攻击</h4><p>发生在三次握手的第三次过程中，服务器还没接收到客户端ack，状态是SYN_RCVD的时间段中，客户端伪造大量不存在的IP的SYN包，请求建立连接，服务器回复并等待，源ip是伪造的并不存在，服务器一直超时重发，造成网络堵塞，检测SYN攻击的方式很简单，服务器上有大量SYN_RCVD状态的链接，并且IP地址是随机的，可以用命令（#netstat -nap | grep SYN_RECV）判断 </p>\n<h4 id=\"RST攻击\"><a href=\"#RST攻击\" class=\"headerlink\" title=\"RST攻击\"></a>RST攻击</h4><p>客户端A与服务器B已经建立连接，C伪装成A发送RST包，B接收到后强制断开连接；亦或者C伪装A发送SYN包，B接收后发现该请求无效返回RST包要A断开连接；所以客户端的端口设置是随机的，不然很容易被猜到从而受到攻击 </p>\n<h4 id=\"长连接短连接\"><a href=\"#长连接短连接\" class=\"headerlink\" title=\"长连接短连接\"></a>长连接短连接</h4><ul>\n<li>短连接，客户端和服务器完成一次请求和响应，相当于完成一次读写，一般由客户端发起关闭连接操作，（服务器收到消息后关闭连接不优雅）；优点是便于管理，存活的连接都是有用的连接</li>\n<li>长连接，客户端和服务器的连接不会主动关闭，后续的请求响应继续使用这个连接，通过保活机制维护连(2小时内没有请求和响应，服务器会想客户端发送一个探测报文)</li>\n</ul>\n<blockquote>\n<blockquote>\n<p>客户端响应正常，时间刷新，2小时没有操作后继续探活</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>客户端不能响应探测报文（客户端异常无法发送响应或发送的响应无法到达服务器），75s后会超时，服务器共发送10个这样的探测，间隔75秒，10次结束后仍然没有收到回应，关闭连接</p>\n</blockquote>\n</blockquote>\n<h4 id=\"半连接队列和全连接队列\"><a href=\"#半连接队列和全连接队列\" class=\"headerlink\" title=\"半连接队列和全连接队列\"></a>半连接队列和全连接队列</h4><ul>\n<li>指的是服务器的状态，SYN_RCVD状态的连接会加入到半连接队列，服务器收到客户端的确认报文状态改为ESTABLISHED状态会从半连接队列中删除，加入到全连接队列</li>\n<li>半连接队列满<ul>\n<li>不开启net.ipv4.tcp_syncookies，直接丢弃新来的SYN请求</li>\n<li>开启net.ipv4.tcp_cookies，假设全连接队列满，并且qlen_young的值（半连接队列中还没有进行SYN+ACK的连接数量）大于1，丢弃这个SYN请求；假设全连接队列没满，生产syncookie并返回SYN+ACK包    </li>\n<li>syncookies用来防止syn floods攻击（攻击方不停发送SYN请求，不去回应ACK，使得半连接队列满，其他连接无法建立），通过将接收到的源ip源端口序列号进行hash，称为hash值，将hash值作为seq发送SYN+ACK，收到ACK响应验证cookie是否正确（ack-1），正确才能建立连接；但是对于没有受到攻击的服务器来说syncookies会造成负担</li>\n</ul>\n</li>\n<li>假设全连接队列满，会根据tcp_abort_on_overflow的值，执行相应的策略（值为0，服务器丢弃该连接，连接信息仍然保留在半连接队列中，服务器会重发SYN+ACK，直到队列不满，建立连接；值为1，服务器发送rst报文关闭连接）</li>\n</ul>\n<h4 id=\"拥塞控制\"><a href=\"#拥塞控制\" class=\"headerlink\" title=\"拥塞控制\"></a>拥塞控制</h4><p>控制网络流量，寻找一个合适的数据传输速度，防止造成网络堵塞或者传输速度过慢效率低的问题；拥塞窗口（cwnd）也就是发送数据的最大值，防止拥塞窗口过大，需要设置一个阈值（ssthresh）来控制窗口的大小，在阈值上下使用不同的算法</p>\n<ul>\n<li>慢开始（cwnd &lt; ssthresh）；开始不会就发送大量的数据，由小到大慢慢增加拥塞窗口的大小，探测网络的拥塞程度，每收到一个ACK拥塞窗口（cwnd）增加一倍，从1开始（2的指数增加）</li>\n</ul>\n<p><img src=\"/images/pasted-27.png\" alt=\"upload successful\"></p>\n<ul>\n<li>拥塞避免（cwnd &gt; ssthresh）；让窗口慢慢增大，经过一个往返时间RTT（收到一个ACK），窗口大小加1</li>\n<li>在慢启动和拥塞避免的阶段中当出现网络拥塞（有报文超时），窗口会重置为1，ssthresh的阈值会重置为发生拥塞时窗口的一半，再重新开始传输数据</li>\n<li>快重传；发送方按顺序传递报文，当出现丢失数据，接收方会发送重复的确认告知发送方报文丢失，发送方收到三个重复的确认立即重发报文，不必等待报文超时再重传</li>\n</ul>\n<p><img src=\"/images/pasted-28.png\" alt=\"upload successful\"></p>\n<ul>\n<li>快恢复；发送方收到3个重发确认，将ssthresh减半，不执行慢开始（因为收到重复确认所以此时网络并没有拥塞，执行拥塞避免窗口加1，缓慢增大即可）</li>\n</ul>\n<p><img src=\"/images/pasted-29.png\" alt=\"upload successful\"></p>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://www.zhihu.com/question/24853633\" target=\"_blank\" rel=\"noopener\">TCP为什么是三次握手，而不是两次或四次</a></p>\n<p><a href=\"https://www.zhihu.com/question/276693714/answer/415714916\" target=\"_blank\" rel=\"noopener\">TCP建立连接时三次握手的一个疑问点</a></p>\n<p><a href=\"https://blog.csdn.net/a_tu_/article/details/80389878\" target=\"_blank\" rel=\"noopener\">TCP中的RST标志(Reset)详解</a></p>\n<p><a href=\"https://www.cnblogs.com/buxiangxin/p/8336022.html\" target=\"_blank\" rel=\"noopener\">TCP协议详解</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/37379780\" target=\"_blank\" rel=\"noopener\">TCP流量控制、拥塞控制</a></p>\n"},{"title":"ThreadLocal分析","author":"YyWang","date":"2020-05-19T13:08:37.000Z","_content":"\n废话不说，直接开整，上源码\n\nJava中每个Thread类中都有属于自己的私有map（ThreadLocalMap key是ThreadLocal的弱引用），不同线程之间的map是私有的相互隔离\n\n```\npublic class Thread implements Runnable {\n    ...\n    ThreadLocal.ThreadLocalMap threadLocals = null;\n    ...\n}\n```\n\n### set方法\n\n1. 计算hash值，找到table中对应的位置，key是null直接放入，key相同替换，key冲突后向后查找直到找到可以插入的地方\n  * 从这个插入的方式可以看出，table中的桶对应一个entry，与HashMap中的链表或者红黑树不同，而且到达3/4的容量就会扩容，所以不会存在，桶中有链表或者红黑树的数据结构\n2. 插entry后 cleanSomeSlot  从当前插入entry的位置，往后扫描找key为null的entry，找logn次（who tell me 这是 why？）找到key为null的entry（可能1个可能多个） expungeStaleEntry(i) 方法清理\n  * expungeStaleEntry(i) 清理从i开始往后到下一个entry是null之间的位置\n3. 如果找到key为null的entry，并且经过清理之后tab的数量还大于扩容的阈值，调用 rehash 方法扩容\n  * expungeStaleEntries() 清理整个table中key是null的entry，清理之后tab的size大于扩容的阈值 进行 resize （扩容的逻辑）\n\n```\npublic void set(T value) {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    if (map != null)\n        map.set(this, value); // 进入这里\n    else\n        createMap(t, value);\n}\nprivate void set(ThreadLocal<?> key, Object value) {\n    Entry[] tab = table;\n    int len = tab.length;\n    int i = key.threadLocalHashCode & (len-1);\n\n    for (Entry e = tab[i];\n         e != null;\n         e = tab[i = nextIndex(i, len)]) {\n        ThreadLocal<?> k = e.get();\n\t\t\t  // key相同替换 返回\n        if (k == key) {\n            e.value = value;\n            return;\n        }\n        // key为null替换 返回\n        if (k == null) {\n            replaceStaleEntry(key, value, i);\n            return;\n        }\n    }\n    // 找到entry为null的位置插入\n    tab[i] = new Entry(key, value);\n    int sz = ++size;\n    // cleanSomeSlots清理一部分entry后size还大于阈值进行扩容\n    if (!cleanSomeSlots(i, sz) && sz >= threshold)\n        rehash();\n}\n    \n// 如函数名所说，清理一部分Solts（key为null的entry），具体的说清理从i到下一个entry是null之间的部分\nprivate boolean cleanSomeSlots(int i, int n) {\n    boolean removed = false;\n    Entry[] tab = table;\n    int len = tab.length;\n    do {\n        i = nextIndex(i, len);// 从i开始往下遍历，遍历logn次\n        Entry e = tab[i];\n        if (e != null && e.get() == null) {// 找到key是null的entry\n            n = len;\n            removed = true;\n            i = expungeStaleEntry(i);// 清理从i开始到entry为null的位置 并且对key不为null的entry做rehash 代码就不贴了\n        }\n    } while ( (n >>>= 1) != 0);// 每次n/2 遍历logn次\n    return removed;\n}\n```\n\n### get方法\n1. 调用threadLocalMap中的getEntry方法，通过hash值找到tab中的位置，当前位置没找到调用 getEntryAfterMiss 方法\n2. getEntryAfterMiss 从当前位置往后找到key的entry返回\n\n```\npublic T get() {\nThread t = Thread.currentThread();\nThreadLocalMap map = getMap(t);\nif (map != null) {\n    ThreadLocalMap.Entry e = map.getEntry(this);// 进入这里看看\n    if (e != null) {\n        @SuppressWarnings(\"unchecked\")\n        T result = (T)e.value;\n        return result;\n    }\n}\nreturn setInitialValue();// map为空set初始值\n}\n\t\nprivate Entry getEntry(ThreadLocal<?> key) {\n    int i = key.threadLocalHashCode & (table.length - 1);\n    Entry e = table[i];\n    if (e != null && e.get() == key)\n        return e;\n    else\n        return getEntryAfterMiss(key, i, e); // hash后的位置没找到key\n}\n  \n// 从当前位置向后找 过程中遇到key为null的 entry 调用expungeStaleEntry(i)进行清理\nprivate Entry getEntryAfterMiss(ThreadLocal<?> key, int i, Entry e) {\n    Entry[] tab = table;\n    int len = tab.length;\n\n    while (e != null) {\n        ThreadLocal<?> k = e.get();\n        if (k == key)\n            return e;\n        if (k == null) // 遇到key是null的entry进行清理\n            expungeStaleEntry(i);// 与set过程中调用同一方法，清理从i到下一个key为null节点之间的位置\n        else\n            i = nextIndex(i, len);\n        e = tab[i];\n    }\n    return null;\n}\n```\n\n### 内存溢出问题\n* ThreadLocal的结构如图所示，因为new ThreadLocal对象，所有栈中有ThreadLocal的强引用，而ThreadLocalMap中key是ThreadLocal的弱引用，如果将ThreadLocal对象置为null，则ThreadLocal只有弱引用指向它，当下次gc的时候key会被回收掉\n\n![upload successful](/images/ThreadLocal.png)\n\n* 如果当前线程没有退出，value依然有强引用指向它，所以value并不会被回收，虽然经过分析源码使用get和set方法会清理map中的key为null的一部分节点清理掉，但是在调用get和set之前仍然存在oom的风险\n* 最稳妥的就是使用remove方法，将不需要的ThreadLocal清理掉\n* 不要和线程池一起使用，线程池中的线程是复用的，永远不会被销毁，所以线程中的ThreadLocalMap也不会被清理，如果这个线程一直不被使用或者不在调用get和set方法，这块内存永远不会被回收\n\n### 挖坑\n* 根据nextIndex方法里的实现来看，这个结构是一个环形结构\n\n```\nprivate static int nextIndex(int i, int len) {\n    return ((i + 1 < len) ? i + 1 : 0);\n}\n```\t\t\n* [参考文献](https://mp.weixin.qq.com/s/vURwBPgVuv4yGT1PeEHxZQ)中所说，hash算法使用黄金分割数，大大降低了hash冲突的几率，具体怎么降低的先挖个坑后面再填\n\n### 参考文献\n[一篇文章彻底了解ThreadLocal的原理 ](https://mp.weixin.qq.com/s/vURwBPgVuv4yGT1PeEHxZQ)\n","source":"_posts/ThreadLocal分析.md","raw":"title: ThreadLocal分析\nauthor: YyWang\ntags: Java\ncategories: Java\ndate: 2020-05-19 21:08:37\n---\n\n废话不说，直接开整，上源码\n\nJava中每个Thread类中都有属于自己的私有map（ThreadLocalMap key是ThreadLocal的弱引用），不同线程之间的map是私有的相互隔离\n\n```\npublic class Thread implements Runnable {\n    ...\n    ThreadLocal.ThreadLocalMap threadLocals = null;\n    ...\n}\n```\n\n### set方法\n\n1. 计算hash值，找到table中对应的位置，key是null直接放入，key相同替换，key冲突后向后查找直到找到可以插入的地方\n  * 从这个插入的方式可以看出，table中的桶对应一个entry，与HashMap中的链表或者红黑树不同，而且到达3/4的容量就会扩容，所以不会存在，桶中有链表或者红黑树的数据结构\n2. 插entry后 cleanSomeSlot  从当前插入entry的位置，往后扫描找key为null的entry，找logn次（who tell me 这是 why？）找到key为null的entry（可能1个可能多个） expungeStaleEntry(i) 方法清理\n  * expungeStaleEntry(i) 清理从i开始往后到下一个entry是null之间的位置\n3. 如果找到key为null的entry，并且经过清理之后tab的数量还大于扩容的阈值，调用 rehash 方法扩容\n  * expungeStaleEntries() 清理整个table中key是null的entry，清理之后tab的size大于扩容的阈值 进行 resize （扩容的逻辑）\n\n```\npublic void set(T value) {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    if (map != null)\n        map.set(this, value); // 进入这里\n    else\n        createMap(t, value);\n}\nprivate void set(ThreadLocal<?> key, Object value) {\n    Entry[] tab = table;\n    int len = tab.length;\n    int i = key.threadLocalHashCode & (len-1);\n\n    for (Entry e = tab[i];\n         e != null;\n         e = tab[i = nextIndex(i, len)]) {\n        ThreadLocal<?> k = e.get();\n\t\t\t  // key相同替换 返回\n        if (k == key) {\n            e.value = value;\n            return;\n        }\n        // key为null替换 返回\n        if (k == null) {\n            replaceStaleEntry(key, value, i);\n            return;\n        }\n    }\n    // 找到entry为null的位置插入\n    tab[i] = new Entry(key, value);\n    int sz = ++size;\n    // cleanSomeSlots清理一部分entry后size还大于阈值进行扩容\n    if (!cleanSomeSlots(i, sz) && sz >= threshold)\n        rehash();\n}\n    \n// 如函数名所说，清理一部分Solts（key为null的entry），具体的说清理从i到下一个entry是null之间的部分\nprivate boolean cleanSomeSlots(int i, int n) {\n    boolean removed = false;\n    Entry[] tab = table;\n    int len = tab.length;\n    do {\n        i = nextIndex(i, len);// 从i开始往下遍历，遍历logn次\n        Entry e = tab[i];\n        if (e != null && e.get() == null) {// 找到key是null的entry\n            n = len;\n            removed = true;\n            i = expungeStaleEntry(i);// 清理从i开始到entry为null的位置 并且对key不为null的entry做rehash 代码就不贴了\n        }\n    } while ( (n >>>= 1) != 0);// 每次n/2 遍历logn次\n    return removed;\n}\n```\n\n### get方法\n1. 调用threadLocalMap中的getEntry方法，通过hash值找到tab中的位置，当前位置没找到调用 getEntryAfterMiss 方法\n2. getEntryAfterMiss 从当前位置往后找到key的entry返回\n\n```\npublic T get() {\nThread t = Thread.currentThread();\nThreadLocalMap map = getMap(t);\nif (map != null) {\n    ThreadLocalMap.Entry e = map.getEntry(this);// 进入这里看看\n    if (e != null) {\n        @SuppressWarnings(\"unchecked\")\n        T result = (T)e.value;\n        return result;\n    }\n}\nreturn setInitialValue();// map为空set初始值\n}\n\t\nprivate Entry getEntry(ThreadLocal<?> key) {\n    int i = key.threadLocalHashCode & (table.length - 1);\n    Entry e = table[i];\n    if (e != null && e.get() == key)\n        return e;\n    else\n        return getEntryAfterMiss(key, i, e); // hash后的位置没找到key\n}\n  \n// 从当前位置向后找 过程中遇到key为null的 entry 调用expungeStaleEntry(i)进行清理\nprivate Entry getEntryAfterMiss(ThreadLocal<?> key, int i, Entry e) {\n    Entry[] tab = table;\n    int len = tab.length;\n\n    while (e != null) {\n        ThreadLocal<?> k = e.get();\n        if (k == key)\n            return e;\n        if (k == null) // 遇到key是null的entry进行清理\n            expungeStaleEntry(i);// 与set过程中调用同一方法，清理从i到下一个key为null节点之间的位置\n        else\n            i = nextIndex(i, len);\n        e = tab[i];\n    }\n    return null;\n}\n```\n\n### 内存溢出问题\n* ThreadLocal的结构如图所示，因为new ThreadLocal对象，所有栈中有ThreadLocal的强引用，而ThreadLocalMap中key是ThreadLocal的弱引用，如果将ThreadLocal对象置为null，则ThreadLocal只有弱引用指向它，当下次gc的时候key会被回收掉\n\n![upload successful](/images/ThreadLocal.png)\n\n* 如果当前线程没有退出，value依然有强引用指向它，所以value并不会被回收，虽然经过分析源码使用get和set方法会清理map中的key为null的一部分节点清理掉，但是在调用get和set之前仍然存在oom的风险\n* 最稳妥的就是使用remove方法，将不需要的ThreadLocal清理掉\n* 不要和线程池一起使用，线程池中的线程是复用的，永远不会被销毁，所以线程中的ThreadLocalMap也不会被清理，如果这个线程一直不被使用或者不在调用get和set方法，这块内存永远不会被回收\n\n### 挖坑\n* 根据nextIndex方法里的实现来看，这个结构是一个环形结构\n\n```\nprivate static int nextIndex(int i, int len) {\n    return ((i + 1 < len) ? i + 1 : 0);\n}\n```\t\t\n* [参考文献](https://mp.weixin.qq.com/s/vURwBPgVuv4yGT1PeEHxZQ)中所说，hash算法使用黄金分割数，大大降低了hash冲突的几率，具体怎么降低的先挖个坑后面再填\n\n### 参考文献\n[一篇文章彻底了解ThreadLocal的原理 ](https://mp.weixin.qq.com/s/vURwBPgVuv4yGT1PeEHxZQ)\n","slug":"ThreadLocal分析","published":1,"updated":"2021-07-13T12:27:08.588Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj78001z81fy4z97y9sz","content":"<p>废话不说，直接开整，上源码</p>\n<p>Java中每个Thread类中都有属于自己的私有map（ThreadLocalMap key是ThreadLocal的弱引用），不同线程之间的map是私有的相互隔离</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Thread implements Runnable &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    ThreadLocal.ThreadLocalMap threadLocals = null;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"set方法\"><a href=\"#set方法\" class=\"headerlink\" title=\"set方法\"></a>set方法</h3><ol>\n<li>计算hash值，找到table中对应的位置，key是null直接放入，key相同替换，key冲突后向后查找直到找到可以插入的地方<ul>\n<li>从这个插入的方式可以看出，table中的桶对应一个entry，与HashMap中的链表或者红黑树不同，而且到达3/4的容量就会扩容，所以不会存在，桶中有链表或者红黑树的数据结构</li>\n</ul>\n</li>\n<li>插entry后 cleanSomeSlot  从当前插入entry的位置，往后扫描找key为null的entry，找logn次（who tell me 这是 why？）找到key为null的entry（可能1个可能多个） expungeStaleEntry(i) 方法清理<ul>\n<li>expungeStaleEntry(i) 清理从i开始往后到下一个entry是null之间的位置</li>\n</ul>\n</li>\n<li>如果找到key为null的entry，并且经过清理之后tab的数量还大于扩容的阈值，调用 rehash 方法扩容<ul>\n<li>expungeStaleEntries() 清理整个table中key是null的entry，清理之后tab的size大于扩容的阈值 进行 resize （扩容的逻辑）</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void set(T value) &#123;</span><br><span class=\"line\">    Thread t = Thread.currentThread();</span><br><span class=\"line\">    ThreadLocalMap map = getMap(t);</span><br><span class=\"line\">    if (map != null)</span><br><span class=\"line\">        map.set(this, value); // 进入这里</span><br><span class=\"line\">    else</span><br><span class=\"line\">        createMap(t, value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">private void set(ThreadLocal&lt;?&gt; key, Object value) &#123;</span><br><span class=\"line\">    Entry[] tab = table;</span><br><span class=\"line\">    int len = tab.length;</span><br><span class=\"line\">    int i = key.threadLocalHashCode &amp; (len-1);</span><br><span class=\"line\"></span><br><span class=\"line\">    for (Entry e = tab[i];</span><br><span class=\"line\">         e != null;</span><br><span class=\"line\">         e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class=\"line\">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class=\"line\">\t\t\t  // key相同替换 返回</span><br><span class=\"line\">        if (k == key) &#123;</span><br><span class=\"line\">            e.value = value;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // key为null替换 返回</span><br><span class=\"line\">        if (k == null) &#123;</span><br><span class=\"line\">            replaceStaleEntry(key, value, i);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 找到entry为null的位置插入</span><br><span class=\"line\">    tab[i] = new Entry(key, value);</span><br><span class=\"line\">    int sz = ++size;</span><br><span class=\"line\">    // cleanSomeSlots清理一部分entry后size还大于阈值进行扩容</span><br><span class=\"line\">    if (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class=\"line\">        rehash();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">// 如函数名所说，清理一部分Solts（key为null的entry），具体的说清理从i到下一个entry是null之间的部分</span><br><span class=\"line\">private boolean cleanSomeSlots(int i, int n) &#123;</span><br><span class=\"line\">    boolean removed = false;</span><br><span class=\"line\">    Entry[] tab = table;</span><br><span class=\"line\">    int len = tab.length;</span><br><span class=\"line\">    do &#123;</span><br><span class=\"line\">        i = nextIndex(i, len);// 从i开始往下遍历，遍历logn次</span><br><span class=\"line\">        Entry e = tab[i];</span><br><span class=\"line\">        if (e != null &amp;&amp; e.get() == null) &#123;// 找到key是null的entry</span><br><span class=\"line\">            n = len;</span><br><span class=\"line\">            removed = true;</span><br><span class=\"line\">            i = expungeStaleEntry(i);// 清理从i开始到entry为null的位置 并且对key不为null的entry做rehash 代码就不贴了</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; while ( (n &gt;&gt;&gt;= 1) != 0);// 每次n/2 遍历logn次</span><br><span class=\"line\">    return removed;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"get方法\"><a href=\"#get方法\" class=\"headerlink\" title=\"get方法\"></a>get方法</h3><ol>\n<li>调用threadLocalMap中的getEntry方法，通过hash值找到tab中的位置，当前位置没找到调用 getEntryAfterMiss 方法</li>\n<li>getEntryAfterMiss 从当前位置往后找到key的entry返回</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public T get() &#123;</span><br><span class=\"line\">Thread t = Thread.currentThread();</span><br><span class=\"line\">ThreadLocalMap map = getMap(t);</span><br><span class=\"line\">if (map != null) &#123;</span><br><span class=\"line\">    ThreadLocalMap.Entry e = map.getEntry(this);// 进入这里看看</span><br><span class=\"line\">    if (e != null) &#123;</span><br><span class=\"line\">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">        T result = (T)e.value;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return setInitialValue();// map为空set初始值</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">private Entry getEntry(ThreadLocal&lt;?&gt; key) &#123;</span><br><span class=\"line\">    int i = key.threadLocalHashCode &amp; (table.length - 1);</span><br><span class=\"line\">    Entry e = table[i];</span><br><span class=\"line\">    if (e != null &amp;&amp; e.get() == key)</span><br><span class=\"line\">        return e;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        return getEntryAfterMiss(key, i, e); // hash后的位置没找到key</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">// 从当前位置向后找 过程中遇到key为null的 entry 调用expungeStaleEntry(i)进行清理</span><br><span class=\"line\">private Entry getEntryAfterMiss(ThreadLocal&lt;?&gt; key, int i, Entry e) &#123;</span><br><span class=\"line\">    Entry[] tab = table;</span><br><span class=\"line\">    int len = tab.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    while (e != null) &#123;</span><br><span class=\"line\">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class=\"line\">        if (k == key)</span><br><span class=\"line\">            return e;</span><br><span class=\"line\">        if (k == null) // 遇到key是null的entry进行清理</span><br><span class=\"line\">            expungeStaleEntry(i);// 与set过程中调用同一方法，清理从i到下一个key为null节点之间的位置</span><br><span class=\"line\">        else</span><br><span class=\"line\">            i = nextIndex(i, len);</span><br><span class=\"line\">        e = tab[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"内存溢出问题\"><a href=\"#内存溢出问题\" class=\"headerlink\" title=\"内存溢出问题\"></a>内存溢出问题</h3><ul>\n<li>ThreadLocal的结构如图所示，因为new ThreadLocal对象，所有栈中有ThreadLocal的强引用，而ThreadLocalMap中key是ThreadLocal的弱引用，如果将ThreadLocal对象置为null，则ThreadLocal只有弱引用指向它，当下次gc的时候key会被回收掉</li>\n</ul>\n<p><img src=\"/images/ThreadLocal.png\" alt=\"upload successful\"></p>\n<ul>\n<li>如果当前线程没有退出，value依然有强引用指向它，所以value并不会被回收，虽然经过分析源码使用get和set方法会清理map中的key为null的一部分节点清理掉，但是在调用get和set之前仍然存在oom的风险</li>\n<li>最稳妥的就是使用remove方法，将不需要的ThreadLocal清理掉</li>\n<li>不要和线程池一起使用，线程池中的线程是复用的，永远不会被销毁，所以线程中的ThreadLocalMap也不会被清理，如果这个线程一直不被使用或者不在调用get和set方法，这块内存永远不会被回收</li>\n</ul>\n<h3 id=\"挖坑\"><a href=\"#挖坑\" class=\"headerlink\" title=\"挖坑\"></a>挖坑</h3><ul>\n<li>根据nextIndex方法里的实现来看，这个结构是一个环形结构</li>\n</ul>\n<pre><code>private static int nextIndex(int i, int len) {\n    return ((i + 1 &lt; len) ? i + 1 : 0);\n}\n</code></pre><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/vURwBPgVuv4yGT1PeEHxZQ\" target=\"_blank\" rel=\"noopener\">参考文献</a>中所说，hash算法使用黄金分割数，大大降低了hash冲突的几率，具体怎么降低的先挖个坑后面再填</li>\n</ul>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><p><a href=\"https://mp.weixin.qq.com/s/vURwBPgVuv4yGT1PeEHxZQ\" target=\"_blank\" rel=\"noopener\">一篇文章彻底了解ThreadLocal的原理 </a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>废话不说，直接开整，上源码</p>\n<p>Java中每个Thread类中都有属于自己的私有map（ThreadLocalMap key是ThreadLocal的弱引用），不同线程之间的map是私有的相互隔离</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Thread implements Runnable &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    ThreadLocal.ThreadLocalMap threadLocals = null;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"set方法\"><a href=\"#set方法\" class=\"headerlink\" title=\"set方法\"></a>set方法</h3><ol>\n<li>计算hash值，找到table中对应的位置，key是null直接放入，key相同替换，key冲突后向后查找直到找到可以插入的地方<ul>\n<li>从这个插入的方式可以看出，table中的桶对应一个entry，与HashMap中的链表或者红黑树不同，而且到达3/4的容量就会扩容，所以不会存在，桶中有链表或者红黑树的数据结构</li>\n</ul>\n</li>\n<li>插entry后 cleanSomeSlot  从当前插入entry的位置，往后扫描找key为null的entry，找logn次（who tell me 这是 why？）找到key为null的entry（可能1个可能多个） expungeStaleEntry(i) 方法清理<ul>\n<li>expungeStaleEntry(i) 清理从i开始往后到下一个entry是null之间的位置</li>\n</ul>\n</li>\n<li>如果找到key为null的entry，并且经过清理之后tab的数量还大于扩容的阈值，调用 rehash 方法扩容<ul>\n<li>expungeStaleEntries() 清理整个table中key是null的entry，清理之后tab的size大于扩容的阈值 进行 resize （扩容的逻辑）</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void set(T value) &#123;</span><br><span class=\"line\">    Thread t = Thread.currentThread();</span><br><span class=\"line\">    ThreadLocalMap map = getMap(t);</span><br><span class=\"line\">    if (map != null)</span><br><span class=\"line\">        map.set(this, value); // 进入这里</span><br><span class=\"line\">    else</span><br><span class=\"line\">        createMap(t, value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">private void set(ThreadLocal&lt;?&gt; key, Object value) &#123;</span><br><span class=\"line\">    Entry[] tab = table;</span><br><span class=\"line\">    int len = tab.length;</span><br><span class=\"line\">    int i = key.threadLocalHashCode &amp; (len-1);</span><br><span class=\"line\"></span><br><span class=\"line\">    for (Entry e = tab[i];</span><br><span class=\"line\">         e != null;</span><br><span class=\"line\">         e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class=\"line\">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class=\"line\">\t\t\t  // key相同替换 返回</span><br><span class=\"line\">        if (k == key) &#123;</span><br><span class=\"line\">            e.value = value;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // key为null替换 返回</span><br><span class=\"line\">        if (k == null) &#123;</span><br><span class=\"line\">            replaceStaleEntry(key, value, i);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 找到entry为null的位置插入</span><br><span class=\"line\">    tab[i] = new Entry(key, value);</span><br><span class=\"line\">    int sz = ++size;</span><br><span class=\"line\">    // cleanSomeSlots清理一部分entry后size还大于阈值进行扩容</span><br><span class=\"line\">    if (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class=\"line\">        rehash();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">// 如函数名所说，清理一部分Solts（key为null的entry），具体的说清理从i到下一个entry是null之间的部分</span><br><span class=\"line\">private boolean cleanSomeSlots(int i, int n) &#123;</span><br><span class=\"line\">    boolean removed = false;</span><br><span class=\"line\">    Entry[] tab = table;</span><br><span class=\"line\">    int len = tab.length;</span><br><span class=\"line\">    do &#123;</span><br><span class=\"line\">        i = nextIndex(i, len);// 从i开始往下遍历，遍历logn次</span><br><span class=\"line\">        Entry e = tab[i];</span><br><span class=\"line\">        if (e != null &amp;&amp; e.get() == null) &#123;// 找到key是null的entry</span><br><span class=\"line\">            n = len;</span><br><span class=\"line\">            removed = true;</span><br><span class=\"line\">            i = expungeStaleEntry(i);// 清理从i开始到entry为null的位置 并且对key不为null的entry做rehash 代码就不贴了</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; while ( (n &gt;&gt;&gt;= 1) != 0);// 每次n/2 遍历logn次</span><br><span class=\"line\">    return removed;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"get方法\"><a href=\"#get方法\" class=\"headerlink\" title=\"get方法\"></a>get方法</h3><ol>\n<li>调用threadLocalMap中的getEntry方法，通过hash值找到tab中的位置，当前位置没找到调用 getEntryAfterMiss 方法</li>\n<li>getEntryAfterMiss 从当前位置往后找到key的entry返回</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public T get() &#123;</span><br><span class=\"line\">Thread t = Thread.currentThread();</span><br><span class=\"line\">ThreadLocalMap map = getMap(t);</span><br><span class=\"line\">if (map != null) &#123;</span><br><span class=\"line\">    ThreadLocalMap.Entry e = map.getEntry(this);// 进入这里看看</span><br><span class=\"line\">    if (e != null) &#123;</span><br><span class=\"line\">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">        T result = (T)e.value;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return setInitialValue();// map为空set初始值</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">private Entry getEntry(ThreadLocal&lt;?&gt; key) &#123;</span><br><span class=\"line\">    int i = key.threadLocalHashCode &amp; (table.length - 1);</span><br><span class=\"line\">    Entry e = table[i];</span><br><span class=\"line\">    if (e != null &amp;&amp; e.get() == key)</span><br><span class=\"line\">        return e;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        return getEntryAfterMiss(key, i, e); // hash后的位置没找到key</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">// 从当前位置向后找 过程中遇到key为null的 entry 调用expungeStaleEntry(i)进行清理</span><br><span class=\"line\">private Entry getEntryAfterMiss(ThreadLocal&lt;?&gt; key, int i, Entry e) &#123;</span><br><span class=\"line\">    Entry[] tab = table;</span><br><span class=\"line\">    int len = tab.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    while (e != null) &#123;</span><br><span class=\"line\">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class=\"line\">        if (k == key)</span><br><span class=\"line\">            return e;</span><br><span class=\"line\">        if (k == null) // 遇到key是null的entry进行清理</span><br><span class=\"line\">            expungeStaleEntry(i);// 与set过程中调用同一方法，清理从i到下一个key为null节点之间的位置</span><br><span class=\"line\">        else</span><br><span class=\"line\">            i = nextIndex(i, len);</span><br><span class=\"line\">        e = tab[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"内存溢出问题\"><a href=\"#内存溢出问题\" class=\"headerlink\" title=\"内存溢出问题\"></a>内存溢出问题</h3><ul>\n<li>ThreadLocal的结构如图所示，因为new ThreadLocal对象，所有栈中有ThreadLocal的强引用，而ThreadLocalMap中key是ThreadLocal的弱引用，如果将ThreadLocal对象置为null，则ThreadLocal只有弱引用指向它，当下次gc的时候key会被回收掉</li>\n</ul>\n<p><img src=\"/images/ThreadLocal.png\" alt=\"upload successful\"></p>\n<ul>\n<li>如果当前线程没有退出，value依然有强引用指向它，所以value并不会被回收，虽然经过分析源码使用get和set方法会清理map中的key为null的一部分节点清理掉，但是在调用get和set之前仍然存在oom的风险</li>\n<li>最稳妥的就是使用remove方法，将不需要的ThreadLocal清理掉</li>\n<li>不要和线程池一起使用，线程池中的线程是复用的，永远不会被销毁，所以线程中的ThreadLocalMap也不会被清理，如果这个线程一直不被使用或者不在调用get和set方法，这块内存永远不会被回收</li>\n</ul>\n<h3 id=\"挖坑\"><a href=\"#挖坑\" class=\"headerlink\" title=\"挖坑\"></a>挖坑</h3><ul>\n<li>根据nextIndex方法里的实现来看，这个结构是一个环形结构</li>\n</ul>\n<pre><code>private static int nextIndex(int i, int len) {\n    return ((i + 1 &lt; len) ? i + 1 : 0);\n}\n</code></pre><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/vURwBPgVuv4yGT1PeEHxZQ\" target=\"_blank\" rel=\"noopener\">参考文献</a>中所说，hash算法使用黄金分割数，大大降低了hash冲突的几率，具体怎么降低的先挖个坑后面再填</li>\n</ul>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><p><a href=\"https://mp.weixin.qq.com/s/vURwBPgVuv4yGT1PeEHxZQ\" target=\"_blank\" rel=\"noopener\">一篇文章彻底了解ThreadLocal的原理 </a></p>\n"},{"title":"Zookeeper扫盲","author":"YyWang","date":"2019-08-29T07:23:15.000Z","_content":"### Zookeeper\n\n是一个分布式协调服务框架，这句话对于刚接触ZK（Zookeeper下文简称ZK）的我来说太抽象了，很难理解，只知道它能提供一些服务能够实现配置管理、命名服务、分布式锁等等，也就是在这些场景下会使用到ZK，这样说好像还是很难理解；之后，我找到了一个比较好理解的点，就是从CAP理论的角度，这需要对CAP有些了解，提前做了功课([CAP和BASE](http://yywang.top/2019/08/26/CAP%E5%92%8CBASE/#more))，简单来说在分布式系统中出现网络故障时，最多满足其中的两项，而P是必须要满足的，那么就需要从CP和AP中做选择了；ZK就是可保证CP的框架，最后我的理解就是ZK通过特定的数据结构，封装一系列算法通过API的方式提供分布式环境数据一致性的服务，所有需要数据一致性的场景都可以使用ZK，也就是上面提到的配置管理、命名服务、分布式锁等等场景\n\n### 入门\n#### 数据结构\nZK提供了一套类似于文件目录的数据结构，叫做多层级的节点命名空间，每个节点（ZK中称为znode）都可以存放数据且每个节点下都有若干个子节点，听起来和树的结构差不多，其实也一样，目录也是一种树结构的实现，znode可以理解为文件夹，文件夹中可以存放文件（znode可以存放数据），也可以存放文件夹（znode也可以存放znode）\n\n##### znode的类型\n* PERSISTENT--持久化目录节点\n\t* 客户端和ZK断开连接后节点依然存在\n* PERSISTENT_SEQUENTIAL--持久化顺序编号目录节点\n\t* 与持久化目录节点相同，只是多了ZK对节点的顺序编号\n* EPHEMERAL--临时目录节点\n\t* 客户端和ZK断开连接后节点被删除\n* EPHEMERAL_SEQUENTIAL--临时顺序编号目录节点\n\t* 与临时目录节点相同，只是多了ZK对节点的顺序编号 \n\n#### 通知机制\nZK还提供了类似于观察这模式的通知机制，称为watcher事件，可以观察到znode的变化，来通知客户端，之后客户端再做相应的业务逻辑\n\n### 使用场景\n#### 命名服务\n这里命名服务指的是通过指定名字获取对应的资源，将资源存储在特定路径的znode中，根据路径就可以找到资源，类比目录结构来说，拿到文件的地址就能通过地址来找到文件，有点像是URL的意思，但是由于ZK数据结构设计的因素ZK不能存放较大的数据；微服务框架中的注册中心需要存放provider和consumer的信息，并且consumer要能够感知provider的实时状态，ZK可以根据provider和consumer的地址映射成临时znode结构，这样既保存了provider和consumer的信息还能感知彼此的状态\n#### 配置管理\n一句话解释----动态下发配置文件变化；通过ZK客户端watch配置文件，一旦配置文件发生变化马上通知客户端做对应的处理\n#### 分布式锁\n多个客户端再ZK的同一个目录下尝试创建临时znode，成功创建znode意味着获得锁成功，下个客户端发现目录下已经存在znode则对该znode添加watch机制，当znode消失即为释放锁后，通知客户端尝试创建znode来获取锁，这是公平锁；非公平锁的则创建临时有序的znode，相当于一个队列，后面的节点watch前一个节点的znode的状态，队头的znode为获得锁成功的几点\n\n### 选举算法\n#### ZK节点的状态\n* LOOKING--当前节点不知道leader是谁，正在搜索\n* LEADING--当前节点为集群的leader\n* FOLLOWING--目前已有leader，当前节点负责与leader节点同步\n\n#### 选举过程\n在两种情况下会进行选举，1.服务器初始化启动 2.集群中leader节点故障\n\n起初集群中的节点没有leader或者不知道leader是谁，此时节点的状态为LOOKING，如果当前集群存在leader（该节点新加入集群），此节点发送投票信息想要选举leader会被告知当前leader的信息，此节点只需和leader节点建立连接，并进行状态同步即可；\n\n如果当前集群不存在leader节点，则需要投票进行选举\n\n* 此时所有节点皆为LOOKING状态，并编辑投票信息发送给集群的其他节点，投票信息的格式为（SID,ZXID）（服务器的唯一标识，事务ID），SID是自己配置的，ZXID理解为当前节点数据的版本；\n* 集群中的节点会受到其他节点的投票信息，加上自己的那一票会根据一个规则会投出第二轮的选票\n  * 节点会在自己收到的选票中，选择ZXID最大的作为第二轮的选票发送给集群中其他节点\n  * 如果ZXID相同则选择SID最大的作为第二轮的选票发送给集群中其他节点\n* 集群中的节点在接收到第二轮选票后进行统计（包含自己的一票），获得集群中一半以上（>n/2）数量投票的节点当选leader进入LEADING状态，其余节点进入FOLLOWING状态\n\n总结一下，集群中要获得一半以上的投票才能当选leader，所以集群最少为3台，并且数量是奇数；集群中ZXID越大的节点（当前节点数据版本越新）优先当选leader\n\n### 安装与启动\n整个过程没有难度也很好理解，跟着[这篇文章](https://www.jianshu.com/p/5491d16e6abd)做就完事了\n\n### 最后\n本文是对于Zookeeper的扫盲，大致了解ZK的基本原理，为了更好的理解工作中的项目，具有目的性，一些细节没有去研究，下回再补，😋\n\n### 参考资料\n[ZooKeeper典型应用场景一览](http://jm.taobao.org/2011/10/08/1232/)\n\n[笔记：Mac上zookeeper的安装与启动](https://www.jianshu.com/p/5491d16e6abd)\n\n[zookeeper面试题](https://segmentfault.com/a/1190000014479433?utm_source=tag-newest)\n","source":"_posts/Zookeeper扫盲.md","raw":"title: Zookeeper扫盲\nauthor: YyWang\ndate: 2019-08-29 15:23:15\ntags: 分布式\ncategories: 分布式\n---\n### Zookeeper\n\n是一个分布式协调服务框架，这句话对于刚接触ZK（Zookeeper下文简称ZK）的我来说太抽象了，很难理解，只知道它能提供一些服务能够实现配置管理、命名服务、分布式锁等等，也就是在这些场景下会使用到ZK，这样说好像还是很难理解；之后，我找到了一个比较好理解的点，就是从CAP理论的角度，这需要对CAP有些了解，提前做了功课([CAP和BASE](http://yywang.top/2019/08/26/CAP%E5%92%8CBASE/#more))，简单来说在分布式系统中出现网络故障时，最多满足其中的两项，而P是必须要满足的，那么就需要从CP和AP中做选择了；ZK就是可保证CP的框架，最后我的理解就是ZK通过特定的数据结构，封装一系列算法通过API的方式提供分布式环境数据一致性的服务，所有需要数据一致性的场景都可以使用ZK，也就是上面提到的配置管理、命名服务、分布式锁等等场景\n\n### 入门\n#### 数据结构\nZK提供了一套类似于文件目录的数据结构，叫做多层级的节点命名空间，每个节点（ZK中称为znode）都可以存放数据且每个节点下都有若干个子节点，听起来和树的结构差不多，其实也一样，目录也是一种树结构的实现，znode可以理解为文件夹，文件夹中可以存放文件（znode可以存放数据），也可以存放文件夹（znode也可以存放znode）\n\n##### znode的类型\n* PERSISTENT--持久化目录节点\n\t* 客户端和ZK断开连接后节点依然存在\n* PERSISTENT_SEQUENTIAL--持久化顺序编号目录节点\n\t* 与持久化目录节点相同，只是多了ZK对节点的顺序编号\n* EPHEMERAL--临时目录节点\n\t* 客户端和ZK断开连接后节点被删除\n* EPHEMERAL_SEQUENTIAL--临时顺序编号目录节点\n\t* 与临时目录节点相同，只是多了ZK对节点的顺序编号 \n\n#### 通知机制\nZK还提供了类似于观察这模式的通知机制，称为watcher事件，可以观察到znode的变化，来通知客户端，之后客户端再做相应的业务逻辑\n\n### 使用场景\n#### 命名服务\n这里命名服务指的是通过指定名字获取对应的资源，将资源存储在特定路径的znode中，根据路径就可以找到资源，类比目录结构来说，拿到文件的地址就能通过地址来找到文件，有点像是URL的意思，但是由于ZK数据结构设计的因素ZK不能存放较大的数据；微服务框架中的注册中心需要存放provider和consumer的信息，并且consumer要能够感知provider的实时状态，ZK可以根据provider和consumer的地址映射成临时znode结构，这样既保存了provider和consumer的信息还能感知彼此的状态\n#### 配置管理\n一句话解释----动态下发配置文件变化；通过ZK客户端watch配置文件，一旦配置文件发生变化马上通知客户端做对应的处理\n#### 分布式锁\n多个客户端再ZK的同一个目录下尝试创建临时znode，成功创建znode意味着获得锁成功，下个客户端发现目录下已经存在znode则对该znode添加watch机制，当znode消失即为释放锁后，通知客户端尝试创建znode来获取锁，这是公平锁；非公平锁的则创建临时有序的znode，相当于一个队列，后面的节点watch前一个节点的znode的状态，队头的znode为获得锁成功的几点\n\n### 选举算法\n#### ZK节点的状态\n* LOOKING--当前节点不知道leader是谁，正在搜索\n* LEADING--当前节点为集群的leader\n* FOLLOWING--目前已有leader，当前节点负责与leader节点同步\n\n#### 选举过程\n在两种情况下会进行选举，1.服务器初始化启动 2.集群中leader节点故障\n\n起初集群中的节点没有leader或者不知道leader是谁，此时节点的状态为LOOKING，如果当前集群存在leader（该节点新加入集群），此节点发送投票信息想要选举leader会被告知当前leader的信息，此节点只需和leader节点建立连接，并进行状态同步即可；\n\n如果当前集群不存在leader节点，则需要投票进行选举\n\n* 此时所有节点皆为LOOKING状态，并编辑投票信息发送给集群的其他节点，投票信息的格式为（SID,ZXID）（服务器的唯一标识，事务ID），SID是自己配置的，ZXID理解为当前节点数据的版本；\n* 集群中的节点会受到其他节点的投票信息，加上自己的那一票会根据一个规则会投出第二轮的选票\n  * 节点会在自己收到的选票中，选择ZXID最大的作为第二轮的选票发送给集群中其他节点\n  * 如果ZXID相同则选择SID最大的作为第二轮的选票发送给集群中其他节点\n* 集群中的节点在接收到第二轮选票后进行统计（包含自己的一票），获得集群中一半以上（>n/2）数量投票的节点当选leader进入LEADING状态，其余节点进入FOLLOWING状态\n\n总结一下，集群中要获得一半以上的投票才能当选leader，所以集群最少为3台，并且数量是奇数；集群中ZXID越大的节点（当前节点数据版本越新）优先当选leader\n\n### 安装与启动\n整个过程没有难度也很好理解，跟着[这篇文章](https://www.jianshu.com/p/5491d16e6abd)做就完事了\n\n### 最后\n本文是对于Zookeeper的扫盲，大致了解ZK的基本原理，为了更好的理解工作中的项目，具有目的性，一些细节没有去研究，下回再补，😋\n\n### 参考资料\n[ZooKeeper典型应用场景一览](http://jm.taobao.org/2011/10/08/1232/)\n\n[笔记：Mac上zookeeper的安装与启动](https://www.jianshu.com/p/5491d16e6abd)\n\n[zookeeper面试题](https://segmentfault.com/a/1190000014479433?utm_source=tag-newest)\n","slug":"Zookeeper扫盲","published":1,"updated":"2021-07-13T12:27:08.588Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj79002381fyb5imj27b","content":"<h3 id=\"Zookeeper\"><a href=\"#Zookeeper\" class=\"headerlink\" title=\"Zookeeper\"></a>Zookeeper</h3><p>是一个分布式协调服务框架，这句话对于刚接触ZK（Zookeeper下文简称ZK）的我来说太抽象了，很难理解，只知道它能提供一些服务能够实现配置管理、命名服务、分布式锁等等，也就是在这些场景下会使用到ZK，这样说好像还是很难理解；之后，我找到了一个比较好理解的点，就是从CAP理论的角度，这需要对CAP有些了解，提前做了功课(<a href=\"http://yywang.top/2019/08/26/CAP%E5%92%8CBASE/#more\" target=\"_blank\" rel=\"noopener\">CAP和BASE</a>)，简单来说在分布式系统中出现网络故障时，最多满足其中的两项，而P是必须要满足的，那么就需要从CP和AP中做选择了；ZK就是可保证CP的框架，最后我的理解就是ZK通过特定的数据结构，封装一系列算法通过API的方式提供分布式环境数据一致性的服务，所有需要数据一致性的场景都可以使用ZK，也就是上面提到的配置管理、命名服务、分布式锁等等场景</p>\n<h3 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h3><h4 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h4><p>ZK提供了一套类似于文件目录的数据结构，叫做多层级的节点命名空间，每个节点（ZK中称为znode）都可以存放数据且每个节点下都有若干个子节点，听起来和树的结构差不多，其实也一样，目录也是一种树结构的实现，znode可以理解为文件夹，文件夹中可以存放文件（znode可以存放数据），也可以存放文件夹（znode也可以存放znode）</p>\n<h5 id=\"znode的类型\"><a href=\"#znode的类型\" class=\"headerlink\" title=\"znode的类型\"></a>znode的类型</h5><ul>\n<li>PERSISTENT–持久化目录节点<ul>\n<li>客户端和ZK断开连接后节点依然存在</li>\n</ul>\n</li>\n<li>PERSISTENT_SEQUENTIAL–持久化顺序编号目录节点<ul>\n<li>与持久化目录节点相同，只是多了ZK对节点的顺序编号</li>\n</ul>\n</li>\n<li>EPHEMERAL–临时目录节点<ul>\n<li>客户端和ZK断开连接后节点被删除</li>\n</ul>\n</li>\n<li>EPHEMERAL_SEQUENTIAL–临时顺序编号目录节点<ul>\n<li>与临时目录节点相同，只是多了ZK对节点的顺序编号 </li>\n</ul>\n</li>\n</ul>\n<h4 id=\"通知机制\"><a href=\"#通知机制\" class=\"headerlink\" title=\"通知机制\"></a>通知机制</h4><p>ZK还提供了类似于观察这模式的通知机制，称为watcher事件，可以观察到znode的变化，来通知客户端，之后客户端再做相应的业务逻辑</p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><h4 id=\"命名服务\"><a href=\"#命名服务\" class=\"headerlink\" title=\"命名服务\"></a>命名服务</h4><p>这里命名服务指的是通过指定名字获取对应的资源，将资源存储在特定路径的znode中，根据路径就可以找到资源，类比目录结构来说，拿到文件的地址就能通过地址来找到文件，有点像是URL的意思，但是由于ZK数据结构设计的因素ZK不能存放较大的数据；微服务框架中的注册中心需要存放provider和consumer的信息，并且consumer要能够感知provider的实时状态，ZK可以根据provider和consumer的地址映射成临时znode结构，这样既保存了provider和consumer的信息还能感知彼此的状态</p>\n<h4 id=\"配置管理\"><a href=\"#配置管理\" class=\"headerlink\" title=\"配置管理\"></a>配置管理</h4><p>一句话解释—-动态下发配置文件变化；通过ZK客户端watch配置文件，一旦配置文件发生变化马上通知客户端做对应的处理</p>\n<h4 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h4><p>多个客户端再ZK的同一个目录下尝试创建临时znode，成功创建znode意味着获得锁成功，下个客户端发现目录下已经存在znode则对该znode添加watch机制，当znode消失即为释放锁后，通知客户端尝试创建znode来获取锁，这是公平锁；非公平锁的则创建临时有序的znode，相当于一个队列，后面的节点watch前一个节点的znode的状态，队头的znode为获得锁成功的几点</p>\n<h3 id=\"选举算法\"><a href=\"#选举算法\" class=\"headerlink\" title=\"选举算法\"></a>选举算法</h3><h4 id=\"ZK节点的状态\"><a href=\"#ZK节点的状态\" class=\"headerlink\" title=\"ZK节点的状态\"></a>ZK节点的状态</h4><ul>\n<li>LOOKING–当前节点不知道leader是谁，正在搜索</li>\n<li>LEADING–当前节点为集群的leader</li>\n<li>FOLLOWING–目前已有leader，当前节点负责与leader节点同步</li>\n</ul>\n<h4 id=\"选举过程\"><a href=\"#选举过程\" class=\"headerlink\" title=\"选举过程\"></a>选举过程</h4><p>在两种情况下会进行选举，1.服务器初始化启动 2.集群中leader节点故障</p>\n<p>起初集群中的节点没有leader或者不知道leader是谁，此时节点的状态为LOOKING，如果当前集群存在leader（该节点新加入集群），此节点发送投票信息想要选举leader会被告知当前leader的信息，此节点只需和leader节点建立连接，并进行状态同步即可；</p>\n<p>如果当前集群不存在leader节点，则需要投票进行选举</p>\n<ul>\n<li>此时所有节点皆为LOOKING状态，并编辑投票信息发送给集群的其他节点，投票信息的格式为（SID,ZXID）（服务器的唯一标识，事务ID），SID是自己配置的，ZXID理解为当前节点数据的版本；</li>\n<li>集群中的节点会受到其他节点的投票信息，加上自己的那一票会根据一个规则会投出第二轮的选票<ul>\n<li>节点会在自己收到的选票中，选择ZXID最大的作为第二轮的选票发送给集群中其他节点</li>\n<li>如果ZXID相同则选择SID最大的作为第二轮的选票发送给集群中其他节点</li>\n</ul>\n</li>\n<li>集群中的节点在接收到第二轮选票后进行统计（包含自己的一票），获得集群中一半以上（&gt;n/2）数量投票的节点当选leader进入LEADING状态，其余节点进入FOLLOWING状态</li>\n</ul>\n<p>总结一下，集群中要获得一半以上的投票才能当选leader，所以集群最少为3台，并且数量是奇数；集群中ZXID越大的节点（当前节点数据版本越新）优先当选leader</p>\n<h3 id=\"安装与启动\"><a href=\"#安装与启动\" class=\"headerlink\" title=\"安装与启动\"></a>安装与启动</h3><p>整个过程没有难度也很好理解，跟着<a href=\"https://www.jianshu.com/p/5491d16e6abd\" target=\"_blank\" rel=\"noopener\">这篇文章</a>做就完事了</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>本文是对于Zookeeper的扫盲，大致了解ZK的基本原理，为了更好的理解工作中的项目，具有目的性，一些细节没有去研究，下回再补，😋</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"http://jm.taobao.org/2011/10/08/1232/\" target=\"_blank\" rel=\"noopener\">ZooKeeper典型应用场景一览</a></p>\n<p><a href=\"https://www.jianshu.com/p/5491d16e6abd\" target=\"_blank\" rel=\"noopener\">笔记：Mac上zookeeper的安装与启动</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000014479433?utm_source=tag-newest\" target=\"_blank\" rel=\"noopener\">zookeeper面试题</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Zookeeper\"><a href=\"#Zookeeper\" class=\"headerlink\" title=\"Zookeeper\"></a>Zookeeper</h3><p>是一个分布式协调服务框架，这句话对于刚接触ZK（Zookeeper下文简称ZK）的我来说太抽象了，很难理解，只知道它能提供一些服务能够实现配置管理、命名服务、分布式锁等等，也就是在这些场景下会使用到ZK，这样说好像还是很难理解；之后，我找到了一个比较好理解的点，就是从CAP理论的角度，这需要对CAP有些了解，提前做了功课(<a href=\"http://yywang.top/2019/08/26/CAP%E5%92%8CBASE/#more\" target=\"_blank\" rel=\"noopener\">CAP和BASE</a>)，简单来说在分布式系统中出现网络故障时，最多满足其中的两项，而P是必须要满足的，那么就需要从CP和AP中做选择了；ZK就是可保证CP的框架，最后我的理解就是ZK通过特定的数据结构，封装一系列算法通过API的方式提供分布式环境数据一致性的服务，所有需要数据一致性的场景都可以使用ZK，也就是上面提到的配置管理、命名服务、分布式锁等等场景</p>\n<h3 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h3><h4 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h4><p>ZK提供了一套类似于文件目录的数据结构，叫做多层级的节点命名空间，每个节点（ZK中称为znode）都可以存放数据且每个节点下都有若干个子节点，听起来和树的结构差不多，其实也一样，目录也是一种树结构的实现，znode可以理解为文件夹，文件夹中可以存放文件（znode可以存放数据），也可以存放文件夹（znode也可以存放znode）</p>\n<h5 id=\"znode的类型\"><a href=\"#znode的类型\" class=\"headerlink\" title=\"znode的类型\"></a>znode的类型</h5><ul>\n<li>PERSISTENT–持久化目录节点<ul>\n<li>客户端和ZK断开连接后节点依然存在</li>\n</ul>\n</li>\n<li>PERSISTENT_SEQUENTIAL–持久化顺序编号目录节点<ul>\n<li>与持久化目录节点相同，只是多了ZK对节点的顺序编号</li>\n</ul>\n</li>\n<li>EPHEMERAL–临时目录节点<ul>\n<li>客户端和ZK断开连接后节点被删除</li>\n</ul>\n</li>\n<li>EPHEMERAL_SEQUENTIAL–临时顺序编号目录节点<ul>\n<li>与临时目录节点相同，只是多了ZK对节点的顺序编号 </li>\n</ul>\n</li>\n</ul>\n<h4 id=\"通知机制\"><a href=\"#通知机制\" class=\"headerlink\" title=\"通知机制\"></a>通知机制</h4><p>ZK还提供了类似于观察这模式的通知机制，称为watcher事件，可以观察到znode的变化，来通知客户端，之后客户端再做相应的业务逻辑</p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><h4 id=\"命名服务\"><a href=\"#命名服务\" class=\"headerlink\" title=\"命名服务\"></a>命名服务</h4><p>这里命名服务指的是通过指定名字获取对应的资源，将资源存储在特定路径的znode中，根据路径就可以找到资源，类比目录结构来说，拿到文件的地址就能通过地址来找到文件，有点像是URL的意思，但是由于ZK数据结构设计的因素ZK不能存放较大的数据；微服务框架中的注册中心需要存放provider和consumer的信息，并且consumer要能够感知provider的实时状态，ZK可以根据provider和consumer的地址映射成临时znode结构，这样既保存了provider和consumer的信息还能感知彼此的状态</p>\n<h4 id=\"配置管理\"><a href=\"#配置管理\" class=\"headerlink\" title=\"配置管理\"></a>配置管理</h4><p>一句话解释—-动态下发配置文件变化；通过ZK客户端watch配置文件，一旦配置文件发生变化马上通知客户端做对应的处理</p>\n<h4 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h4><p>多个客户端再ZK的同一个目录下尝试创建临时znode，成功创建znode意味着获得锁成功，下个客户端发现目录下已经存在znode则对该znode添加watch机制，当znode消失即为释放锁后，通知客户端尝试创建znode来获取锁，这是公平锁；非公平锁的则创建临时有序的znode，相当于一个队列，后面的节点watch前一个节点的znode的状态，队头的znode为获得锁成功的几点</p>\n<h3 id=\"选举算法\"><a href=\"#选举算法\" class=\"headerlink\" title=\"选举算法\"></a>选举算法</h3><h4 id=\"ZK节点的状态\"><a href=\"#ZK节点的状态\" class=\"headerlink\" title=\"ZK节点的状态\"></a>ZK节点的状态</h4><ul>\n<li>LOOKING–当前节点不知道leader是谁，正在搜索</li>\n<li>LEADING–当前节点为集群的leader</li>\n<li>FOLLOWING–目前已有leader，当前节点负责与leader节点同步</li>\n</ul>\n<h4 id=\"选举过程\"><a href=\"#选举过程\" class=\"headerlink\" title=\"选举过程\"></a>选举过程</h4><p>在两种情况下会进行选举，1.服务器初始化启动 2.集群中leader节点故障</p>\n<p>起初集群中的节点没有leader或者不知道leader是谁，此时节点的状态为LOOKING，如果当前集群存在leader（该节点新加入集群），此节点发送投票信息想要选举leader会被告知当前leader的信息，此节点只需和leader节点建立连接，并进行状态同步即可；</p>\n<p>如果当前集群不存在leader节点，则需要投票进行选举</p>\n<ul>\n<li>此时所有节点皆为LOOKING状态，并编辑投票信息发送给集群的其他节点，投票信息的格式为（SID,ZXID）（服务器的唯一标识，事务ID），SID是自己配置的，ZXID理解为当前节点数据的版本；</li>\n<li>集群中的节点会受到其他节点的投票信息，加上自己的那一票会根据一个规则会投出第二轮的选票<ul>\n<li>节点会在自己收到的选票中，选择ZXID最大的作为第二轮的选票发送给集群中其他节点</li>\n<li>如果ZXID相同则选择SID最大的作为第二轮的选票发送给集群中其他节点</li>\n</ul>\n</li>\n<li>集群中的节点在接收到第二轮选票后进行统计（包含自己的一票），获得集群中一半以上（&gt;n/2）数量投票的节点当选leader进入LEADING状态，其余节点进入FOLLOWING状态</li>\n</ul>\n<p>总结一下，集群中要获得一半以上的投票才能当选leader，所以集群最少为3台，并且数量是奇数；集群中ZXID越大的节点（当前节点数据版本越新）优先当选leader</p>\n<h3 id=\"安装与启动\"><a href=\"#安装与启动\" class=\"headerlink\" title=\"安装与启动\"></a>安装与启动</h3><p>整个过程没有难度也很好理解，跟着<a href=\"https://www.jianshu.com/p/5491d16e6abd\" target=\"_blank\" rel=\"noopener\">这篇文章</a>做就完事了</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>本文是对于Zookeeper的扫盲，大致了解ZK的基本原理，为了更好的理解工作中的项目，具有目的性，一些细节没有去研究，下回再补，😋</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"http://jm.taobao.org/2011/10/08/1232/\" target=\"_blank\" rel=\"noopener\">ZooKeeper典型应用场景一览</a></p>\n<p><a href=\"https://www.jianshu.com/p/5491d16e6abd\" target=\"_blank\" rel=\"noopener\">笔记：Mac上zookeeper的安装与启动</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000014479433?utm_source=tag-newest\" target=\"_blank\" rel=\"noopener\">zookeeper面试题</a></p>\n"},{"title":"get限流姿势","author":"YyWang","date":"2020-05-14T13:06:35.000Z","_content":"限流通常用作服务的降级策略，以牺牲一部分请求的方式换来系统的部分可用；在高并发的场景下保护系统不会挂掉，比如大促、秒杀这类的场景保护像交易这样的核心服务可用，通过学习限流的代码之后，掌握了通常的限流姿势，分享一下\n\n\n### 计数器\n\n类似于滑动窗口，给定一个时间段的最大请求数（窗口，比如1秒最多100个请求），再将窗口设置多个小段（一个时间的偏移量，比如100ms，一个窗口就被分成了10小段）每一小段记录当前正在处理的请求数量，每次移动一小段，滑出的一段中的请求数量被释放，新进入窗口的一段最多可以处理被释放的请求数量\n\n#### 总结\n* 简单粗暴好实现，偏移量取值越小限流越精细，每次滑动需要获取当前一段中的请求数，计算窗口中的总的请求数是否超过限定值\n* 如果在中间一小段涌入大量请求到达限定值，那就需要等待这段滑出窗口后才能处理新的请求，从宏观的角度来说，可以保证窗口期内的平均处理请求的量，但是从微观来看处理请求的方式不均衡，存在风险\n\n### 漏桶算法\n\n一个破桶一边以一个速度漏水（处理请求）一边以一个速度往里加水（新的请求到来）；假设向桶里加水的速度很快（大量新的请求到来）一会就把桶占满了，此后再向桶里加水就会漏出去（新的请求会被丢弃）\n\n\n#### 实现\n\n```\n// 生产者和消费者\n// 用阻塞队列来实现桶\nBlockingQueue bucket = new BlockingQueue(MAX_SIZE);\n// 请求来 -> 入队\nif (!bucket.offer();{\n    // 大于桶的最大值入队失败，做进一步操作（拒绝、保存到mq或者db中）\n}\n\nwhile (true) {\n    bucker.take();\n    // 出队成功 异步处理请求 等待下一个周期后再次从队列中获取请求，队列为空阻塞在原地\n    sleep(10);\n}\n\n```\n#### 总结\n\t\n* 通过计算每次请求的最小时间间隔，当大量的请求到来时让系统以一个恒定的速度去处理请求，保护系统不会被超过本身处理能力的请求打挂\n* 不足之处是不够优雅；当某个时间点有大量的请求到来很快将桶塞满，多于的请求直接丢弃，而突然有大量请求的场景有很多（例如秒杀，大促等）这些都是正常的请求，不应该被丢弃；\n\n### 令牌桶\n\n以一个速度向桶里生产令牌，当桶内令牌满了时将暂停生产，处理请求需要从桶里拿到令牌才可以，如果桶里没有令牌拒绝该请求（通常的做法是返回一个限流信息，类似于非阻塞的方式）\n\n#### 实现\n\n```\n// 一个请求周期的类\nclass Cycle{\n    lastTime;// 上一次请求的时间戳\n    curTokenCount;// 当前桶内有效token数量\n}\n\npublic boolean getLicense() {\n\t// 是否可以执行请求\n\tboolean license = false;\n\tdo {\n\t    // 请求到来，计算从限流开始到现在的时间间隔，通过当前时间戳-开始时间戳\n\t\tcurTime = currentTime - startTime;\n\t\t// 计算从上一次请求开始到现在的时间间隔，lastTime是从限流开始到上一次请求的时间间隔\n\t\tcurDuration = curTime - lastTime;\n\t\t// 计算这段时间产生的令牌数量\n\t\tincrementTokenCount = curDuration * createTokenSpeed;\n\t\t// 计算当前时间内有效的token数量 curTokenCount是当前桶里的token数量\n\t\tcurTokenCount = Min(maxTokenCount, currentTokenCount + incrementTokenCount);\n\t\t// 如果有效的token数量大于0，数量减一处理请求，\n\t\tif (curToken > 0) {\n\t\t    incrementTokenCount--;\n\t\t    license = true;\n\t\t} \n\t\tlastTime = curTime;\n\t} while (!CAS(curCycle, new Cycle(lastTime, curTokenCount)));// CAS操作设置当前请求周期为下一个周期，操作成功进入下一周期，返回是否可以执行请求\n\t// 要进入下一周期需要CAS操作lastTime和curTokenCount两个变量，分别CAS不能保证一致性，所以封装成一个对象做CAS操作\n\treturn license;\n}\n\n```\n#### 总结\n\n* 相较与漏桶算法，令牌桶可以应对一些突发流量的变大，最大同时处理令牌桶中最大令牌数量的请求，所有设置令牌桶中最大令牌数量要非常小心，否则会把服务器压垮\n* Guava中实现了漏桶算法的限流器，还具有一定的超额消费的能力，更灵活了一下，具体实现原理也差不多，可以直接用\n\n以上是单机模式下的限流实现，只需要拦截每次请求，执行上面的逻辑根据是否满足条件决定处不处理请求，分布式环境下的限流可以使用lua+redis来实现\n\n\n\n\n","source":"_posts/get限流姿势.md","raw":"title: get限流姿势\nauthor: YyWang\ndate: 2020-05-14 21:06:35\ntags: Java\ncategories: Java\n---\n限流通常用作服务的降级策略，以牺牲一部分请求的方式换来系统的部分可用；在高并发的场景下保护系统不会挂掉，比如大促、秒杀这类的场景保护像交易这样的核心服务可用，通过学习限流的代码之后，掌握了通常的限流姿势，分享一下\n\n\n### 计数器\n\n类似于滑动窗口，给定一个时间段的最大请求数（窗口，比如1秒最多100个请求），再将窗口设置多个小段（一个时间的偏移量，比如100ms，一个窗口就被分成了10小段）每一小段记录当前正在处理的请求数量，每次移动一小段，滑出的一段中的请求数量被释放，新进入窗口的一段最多可以处理被释放的请求数量\n\n#### 总结\n* 简单粗暴好实现，偏移量取值越小限流越精细，每次滑动需要获取当前一段中的请求数，计算窗口中的总的请求数是否超过限定值\n* 如果在中间一小段涌入大量请求到达限定值，那就需要等待这段滑出窗口后才能处理新的请求，从宏观的角度来说，可以保证窗口期内的平均处理请求的量，但是从微观来看处理请求的方式不均衡，存在风险\n\n### 漏桶算法\n\n一个破桶一边以一个速度漏水（处理请求）一边以一个速度往里加水（新的请求到来）；假设向桶里加水的速度很快（大量新的请求到来）一会就把桶占满了，此后再向桶里加水就会漏出去（新的请求会被丢弃）\n\n\n#### 实现\n\n```\n// 生产者和消费者\n// 用阻塞队列来实现桶\nBlockingQueue bucket = new BlockingQueue(MAX_SIZE);\n// 请求来 -> 入队\nif (!bucket.offer();{\n    // 大于桶的最大值入队失败，做进一步操作（拒绝、保存到mq或者db中）\n}\n\nwhile (true) {\n    bucker.take();\n    // 出队成功 异步处理请求 等待下一个周期后再次从队列中获取请求，队列为空阻塞在原地\n    sleep(10);\n}\n\n```\n#### 总结\n\t\n* 通过计算每次请求的最小时间间隔，当大量的请求到来时让系统以一个恒定的速度去处理请求，保护系统不会被超过本身处理能力的请求打挂\n* 不足之处是不够优雅；当某个时间点有大量的请求到来很快将桶塞满，多于的请求直接丢弃，而突然有大量请求的场景有很多（例如秒杀，大促等）这些都是正常的请求，不应该被丢弃；\n\n### 令牌桶\n\n以一个速度向桶里生产令牌，当桶内令牌满了时将暂停生产，处理请求需要从桶里拿到令牌才可以，如果桶里没有令牌拒绝该请求（通常的做法是返回一个限流信息，类似于非阻塞的方式）\n\n#### 实现\n\n```\n// 一个请求周期的类\nclass Cycle{\n    lastTime;// 上一次请求的时间戳\n    curTokenCount;// 当前桶内有效token数量\n}\n\npublic boolean getLicense() {\n\t// 是否可以执行请求\n\tboolean license = false;\n\tdo {\n\t    // 请求到来，计算从限流开始到现在的时间间隔，通过当前时间戳-开始时间戳\n\t\tcurTime = currentTime - startTime;\n\t\t// 计算从上一次请求开始到现在的时间间隔，lastTime是从限流开始到上一次请求的时间间隔\n\t\tcurDuration = curTime - lastTime;\n\t\t// 计算这段时间产生的令牌数量\n\t\tincrementTokenCount = curDuration * createTokenSpeed;\n\t\t// 计算当前时间内有效的token数量 curTokenCount是当前桶里的token数量\n\t\tcurTokenCount = Min(maxTokenCount, currentTokenCount + incrementTokenCount);\n\t\t// 如果有效的token数量大于0，数量减一处理请求，\n\t\tif (curToken > 0) {\n\t\t    incrementTokenCount--;\n\t\t    license = true;\n\t\t} \n\t\tlastTime = curTime;\n\t} while (!CAS(curCycle, new Cycle(lastTime, curTokenCount)));// CAS操作设置当前请求周期为下一个周期，操作成功进入下一周期，返回是否可以执行请求\n\t// 要进入下一周期需要CAS操作lastTime和curTokenCount两个变量，分别CAS不能保证一致性，所以封装成一个对象做CAS操作\n\treturn license;\n}\n\n```\n#### 总结\n\n* 相较与漏桶算法，令牌桶可以应对一些突发流量的变大，最大同时处理令牌桶中最大令牌数量的请求，所有设置令牌桶中最大令牌数量要非常小心，否则会把服务器压垮\n* Guava中实现了漏桶算法的限流器，还具有一定的超额消费的能力，更灵活了一下，具体实现原理也差不多，可以直接用\n\n以上是单机模式下的限流实现，只需要拦截每次请求，执行上面的逻辑根据是否满足条件决定处不处理请求，分布式环境下的限流可以使用lua+redis来实现\n\n\n\n\n","slug":"get限流姿势","published":1,"updated":"2021-07-13T12:27:08.589Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj7a002581fy7ngponlw","content":"<p>限流通常用作服务的降级策略，以牺牲一部分请求的方式换来系统的部分可用；在高并发的场景下保护系统不会挂掉，比如大促、秒杀这类的场景保护像交易这样的核心服务可用，通过学习限流的代码之后，掌握了通常的限流姿势，分享一下</p>\n<h3 id=\"计数器\"><a href=\"#计数器\" class=\"headerlink\" title=\"计数器\"></a>计数器</h3><p>类似于滑动窗口，给定一个时间段的最大请求数（窗口，比如1秒最多100个请求），再将窗口设置多个小段（一个时间的偏移量，比如100ms，一个窗口就被分成了10小段）每一小段记录当前正在处理的请求数量，每次移动一小段，滑出的一段中的请求数量被释放，新进入窗口的一段最多可以处理被释放的请求数量</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>简单粗暴好实现，偏移量取值越小限流越精细，每次滑动需要获取当前一段中的请求数，计算窗口中的总的请求数是否超过限定值</li>\n<li>如果在中间一小段涌入大量请求到达限定值，那就需要等待这段滑出窗口后才能处理新的请求，从宏观的角度来说，可以保证窗口期内的平均处理请求的量，但是从微观来看处理请求的方式不均衡，存在风险</li>\n</ul>\n<h3 id=\"漏桶算法\"><a href=\"#漏桶算法\" class=\"headerlink\" title=\"漏桶算法\"></a>漏桶算法</h3><p>一个破桶一边以一个速度漏水（处理请求）一边以一个速度往里加水（新的请求到来）；假设向桶里加水的速度很快（大量新的请求到来）一会就把桶占满了，此后再向桶里加水就会漏出去（新的请求会被丢弃）</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 生产者和消费者</span><br><span class=\"line\">// 用阻塞队列来实现桶</span><br><span class=\"line\">BlockingQueue bucket = new BlockingQueue(MAX_SIZE);</span><br><span class=\"line\">// 请求来 -&gt; 入队</span><br><span class=\"line\">if (!bucket.offer();&#123;</span><br><span class=\"line\">    // 大于桶的最大值入队失败，做进一步操作（拒绝、保存到mq或者db中）</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">while (true) &#123;</span><br><span class=\"line\">    bucker.take();</span><br><span class=\"line\">    // 出队成功 异步处理请求 等待下一个周期后再次从队列中获取请求，队列为空阻塞在原地</span><br><span class=\"line\">    sleep(10);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>通过计算每次请求的最小时间间隔，当大量的请求到来时让系统以一个恒定的速度去处理请求，保护系统不会被超过本身处理能力的请求打挂</li>\n<li>不足之处是不够优雅；当某个时间点有大量的请求到来很快将桶塞满，多于的请求直接丢弃，而突然有大量请求的场景有很多（例如秒杀，大促等）这些都是正常的请求，不应该被丢弃；</li>\n</ul>\n<h3 id=\"令牌桶\"><a href=\"#令牌桶\" class=\"headerlink\" title=\"令牌桶\"></a>令牌桶</h3><p>以一个速度向桶里生产令牌，当桶内令牌满了时将暂停生产，处理请求需要从桶里拿到令牌才可以，如果桶里没有令牌拒绝该请求（通常的做法是返回一个限流信息，类似于非阻塞的方式）</p>\n<h4 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 一个请求周期的类</span><br><span class=\"line\">class Cycle&#123;</span><br><span class=\"line\">    lastTime;// 上一次请求的时间戳</span><br><span class=\"line\">    curTokenCount;// 当前桶内有效token数量</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public boolean getLicense() &#123;</span><br><span class=\"line\">\t// 是否可以执行请求</span><br><span class=\"line\">\tboolean license = false;</span><br><span class=\"line\">\tdo &#123;</span><br><span class=\"line\">\t    // 请求到来，计算从限流开始到现在的时间间隔，通过当前时间戳-开始时间戳</span><br><span class=\"line\">\t\tcurTime = currentTime - startTime;</span><br><span class=\"line\">\t\t// 计算从上一次请求开始到现在的时间间隔，lastTime是从限流开始到上一次请求的时间间隔</span><br><span class=\"line\">\t\tcurDuration = curTime - lastTime;</span><br><span class=\"line\">\t\t// 计算这段时间产生的令牌数量</span><br><span class=\"line\">\t\tincrementTokenCount = curDuration * createTokenSpeed;</span><br><span class=\"line\">\t\t// 计算当前时间内有效的token数量 curTokenCount是当前桶里的token数量</span><br><span class=\"line\">\t\tcurTokenCount = Min(maxTokenCount, currentTokenCount + incrementTokenCount);</span><br><span class=\"line\">\t\t// 如果有效的token数量大于0，数量减一处理请求，</span><br><span class=\"line\">\t\tif (curToken &gt; 0) &#123;</span><br><span class=\"line\">\t\t    incrementTokenCount--;</span><br><span class=\"line\">\t\t    license = true;</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\tlastTime = curTime;</span><br><span class=\"line\">\t&#125; while (!CAS(curCycle, new Cycle(lastTime, curTokenCount)));// CAS操作设置当前请求周期为下一个周期，操作成功进入下一周期，返回是否可以执行请求</span><br><span class=\"line\">\t// 要进入下一周期需要CAS操作lastTime和curTokenCount两个变量，分别CAS不能保证一致性，所以封装成一个对象做CAS操作</span><br><span class=\"line\">\treturn license;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>相较与漏桶算法，令牌桶可以应对一些突发流量的变大，最大同时处理令牌桶中最大令牌数量的请求，所有设置令牌桶中最大令牌数量要非常小心，否则会把服务器压垮</li>\n<li>Guava中实现了漏桶算法的限流器，还具有一定的超额消费的能力，更灵活了一下，具体实现原理也差不多，可以直接用</li>\n</ul>\n<p>以上是单机模式下的限流实现，只需要拦截每次请求，执行上面的逻辑根据是否满足条件决定处不处理请求，分布式环境下的限流可以使用lua+redis来实现</p>\n","site":{"data":{}},"excerpt":"","more":"<p>限流通常用作服务的降级策略，以牺牲一部分请求的方式换来系统的部分可用；在高并发的场景下保护系统不会挂掉，比如大促、秒杀这类的场景保护像交易这样的核心服务可用，通过学习限流的代码之后，掌握了通常的限流姿势，分享一下</p>\n<h3 id=\"计数器\"><a href=\"#计数器\" class=\"headerlink\" title=\"计数器\"></a>计数器</h3><p>类似于滑动窗口，给定一个时间段的最大请求数（窗口，比如1秒最多100个请求），再将窗口设置多个小段（一个时间的偏移量，比如100ms，一个窗口就被分成了10小段）每一小段记录当前正在处理的请求数量，每次移动一小段，滑出的一段中的请求数量被释放，新进入窗口的一段最多可以处理被释放的请求数量</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>简单粗暴好实现，偏移量取值越小限流越精细，每次滑动需要获取当前一段中的请求数，计算窗口中的总的请求数是否超过限定值</li>\n<li>如果在中间一小段涌入大量请求到达限定值，那就需要等待这段滑出窗口后才能处理新的请求，从宏观的角度来说，可以保证窗口期内的平均处理请求的量，但是从微观来看处理请求的方式不均衡，存在风险</li>\n</ul>\n<h3 id=\"漏桶算法\"><a href=\"#漏桶算法\" class=\"headerlink\" title=\"漏桶算法\"></a>漏桶算法</h3><p>一个破桶一边以一个速度漏水（处理请求）一边以一个速度往里加水（新的请求到来）；假设向桶里加水的速度很快（大量新的请求到来）一会就把桶占满了，此后再向桶里加水就会漏出去（新的请求会被丢弃）</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 生产者和消费者</span><br><span class=\"line\">// 用阻塞队列来实现桶</span><br><span class=\"line\">BlockingQueue bucket = new BlockingQueue(MAX_SIZE);</span><br><span class=\"line\">// 请求来 -&gt; 入队</span><br><span class=\"line\">if (!bucket.offer();&#123;</span><br><span class=\"line\">    // 大于桶的最大值入队失败，做进一步操作（拒绝、保存到mq或者db中）</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">while (true) &#123;</span><br><span class=\"line\">    bucker.take();</span><br><span class=\"line\">    // 出队成功 异步处理请求 等待下一个周期后再次从队列中获取请求，队列为空阻塞在原地</span><br><span class=\"line\">    sleep(10);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>通过计算每次请求的最小时间间隔，当大量的请求到来时让系统以一个恒定的速度去处理请求，保护系统不会被超过本身处理能力的请求打挂</li>\n<li>不足之处是不够优雅；当某个时间点有大量的请求到来很快将桶塞满，多于的请求直接丢弃，而突然有大量请求的场景有很多（例如秒杀，大促等）这些都是正常的请求，不应该被丢弃；</li>\n</ul>\n<h3 id=\"令牌桶\"><a href=\"#令牌桶\" class=\"headerlink\" title=\"令牌桶\"></a>令牌桶</h3><p>以一个速度向桶里生产令牌，当桶内令牌满了时将暂停生产，处理请求需要从桶里拿到令牌才可以，如果桶里没有令牌拒绝该请求（通常的做法是返回一个限流信息，类似于非阻塞的方式）</p>\n<h4 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 一个请求周期的类</span><br><span class=\"line\">class Cycle&#123;</span><br><span class=\"line\">    lastTime;// 上一次请求的时间戳</span><br><span class=\"line\">    curTokenCount;// 当前桶内有效token数量</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public boolean getLicense() &#123;</span><br><span class=\"line\">\t// 是否可以执行请求</span><br><span class=\"line\">\tboolean license = false;</span><br><span class=\"line\">\tdo &#123;</span><br><span class=\"line\">\t    // 请求到来，计算从限流开始到现在的时间间隔，通过当前时间戳-开始时间戳</span><br><span class=\"line\">\t\tcurTime = currentTime - startTime;</span><br><span class=\"line\">\t\t// 计算从上一次请求开始到现在的时间间隔，lastTime是从限流开始到上一次请求的时间间隔</span><br><span class=\"line\">\t\tcurDuration = curTime - lastTime;</span><br><span class=\"line\">\t\t// 计算这段时间产生的令牌数量</span><br><span class=\"line\">\t\tincrementTokenCount = curDuration * createTokenSpeed;</span><br><span class=\"line\">\t\t// 计算当前时间内有效的token数量 curTokenCount是当前桶里的token数量</span><br><span class=\"line\">\t\tcurTokenCount = Min(maxTokenCount, currentTokenCount + incrementTokenCount);</span><br><span class=\"line\">\t\t// 如果有效的token数量大于0，数量减一处理请求，</span><br><span class=\"line\">\t\tif (curToken &gt; 0) &#123;</span><br><span class=\"line\">\t\t    incrementTokenCount--;</span><br><span class=\"line\">\t\t    license = true;</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\tlastTime = curTime;</span><br><span class=\"line\">\t&#125; while (!CAS(curCycle, new Cycle(lastTime, curTokenCount)));// CAS操作设置当前请求周期为下一个周期，操作成功进入下一周期，返回是否可以执行请求</span><br><span class=\"line\">\t// 要进入下一周期需要CAS操作lastTime和curTokenCount两个变量，分别CAS不能保证一致性，所以封装成一个对象做CAS操作</span><br><span class=\"line\">\treturn license;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>相较与漏桶算法，令牌桶可以应对一些突发流量的变大，最大同时处理令牌桶中最大令牌数量的请求，所有设置令牌桶中最大令牌数量要非常小心，否则会把服务器压垮</li>\n<li>Guava中实现了漏桶算法的限流器，还具有一定的超额消费的能力，更灵活了一下，具体实现原理也差不多，可以直接用</li>\n</ul>\n<p>以上是单机模式下的限流实现，只需要拦截每次请求，执行上面的逻辑根据是否满足条件决定处不处理请求，分布式环境下的限流可以使用lua+redis来实现</p>\n"},{"title":"mac 设置","author":"YyWang","date":"2019-08-13T08:44:33.000Z","_content":"###### 外接键盘的调整\n键盘设置中将control和command互换就可以达到和Windows下的复制粘贴时一样的，切换程序则由alt+tab变成了ctrl+tab需要适应一下，不过复制，粘贴，撤销，保存这些不用再去适应新的快捷键了\n![upload successful](/images/pasted-14.png)\n###### idea中的调整\npreferences中找到keymap选择Eclipse(macOS)，这样加上第一步的配置复制粘贴这些快捷键与Windows相同，不用再去适应新的快捷键\n\n###### 自动补全变量\nkeymap中搜索variable   默认为：option+command+L 通过以上设置后为：Ctrl+alt+L\n\n\n\n##### 另一种使用方法\n不做任何配置，idea中使用eclipse风格的快捷键，idea中的使用不影响，但是在idea以外就得适应mac中的快捷键，感觉还是这个方法更容易接受一些","source":"_posts/mac-设置.md","raw":"title: mac 设置\nauthor: YyWang\ndate: 2019-08-13 16:44:33\ntags:\n---\n###### 外接键盘的调整\n键盘设置中将control和command互换就可以达到和Windows下的复制粘贴时一样的，切换程序则由alt+tab变成了ctrl+tab需要适应一下，不过复制，粘贴，撤销，保存这些不用再去适应新的快捷键了\n![upload successful](/images/pasted-14.png)\n###### idea中的调整\npreferences中找到keymap选择Eclipse(macOS)，这样加上第一步的配置复制粘贴这些快捷键与Windows相同，不用再去适应新的快捷键\n\n###### 自动补全变量\nkeymap中搜索variable   默认为：option+command+L 通过以上设置后为：Ctrl+alt+L\n\n\n\n##### 另一种使用方法\n不做任何配置，idea中使用eclipse风格的快捷键，idea中的使用不影响，但是在idea以外就得适应mac中的快捷键，感觉还是这个方法更容易接受一些","slug":"mac-设置","published":1,"updated":"2021-07-13T12:27:08.590Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj7b002881fypt2w98ha","content":"<h6 id=\"外接键盘的调整\"><a href=\"#外接键盘的调整\" class=\"headerlink\" title=\"外接键盘的调整\"></a>外接键盘的调整</h6><p>键盘设置中将control和command互换就可以达到和Windows下的复制粘贴时一样的，切换程序则由alt+tab变成了ctrl+tab需要适应一下，不过复制，粘贴，撤销，保存这些不用再去适应新的快捷键了<br><img src=\"/images/pasted-14.png\" alt=\"upload successful\"></p>\n<h6 id=\"idea中的调整\"><a href=\"#idea中的调整\" class=\"headerlink\" title=\"idea中的调整\"></a>idea中的调整</h6><p>preferences中找到keymap选择Eclipse(macOS)，这样加上第一步的配置复制粘贴这些快捷键与Windows相同，不用再去适应新的快捷键</p>\n<h6 id=\"自动补全变量\"><a href=\"#自动补全变量\" class=\"headerlink\" title=\"自动补全变量\"></a>自动补全变量</h6><p>keymap中搜索variable   默认为：option+command+L 通过以上设置后为：Ctrl+alt+L</p>\n<h5 id=\"另一种使用方法\"><a href=\"#另一种使用方法\" class=\"headerlink\" title=\"另一种使用方法\"></a>另一种使用方法</h5><p>不做任何配置，idea中使用eclipse风格的快捷键，idea中的使用不影响，但是在idea以外就得适应mac中的快捷键，感觉还是这个方法更容易接受一些</p>\n","site":{"data":{}},"excerpt":"","more":"<h6 id=\"外接键盘的调整\"><a href=\"#外接键盘的调整\" class=\"headerlink\" title=\"外接键盘的调整\"></a>外接键盘的调整</h6><p>键盘设置中将control和command互换就可以达到和Windows下的复制粘贴时一样的，切换程序则由alt+tab变成了ctrl+tab需要适应一下，不过复制，粘贴，撤销，保存这些不用再去适应新的快捷键了<br><img src=\"/images/pasted-14.png\" alt=\"upload successful\"></p>\n<h6 id=\"idea中的调整\"><a href=\"#idea中的调整\" class=\"headerlink\" title=\"idea中的调整\"></a>idea中的调整</h6><p>preferences中找到keymap选择Eclipse(macOS)，这样加上第一步的配置复制粘贴这些快捷键与Windows相同，不用再去适应新的快捷键</p>\n<h6 id=\"自动补全变量\"><a href=\"#自动补全变量\" class=\"headerlink\" title=\"自动补全变量\"></a>自动补全变量</h6><p>keymap中搜索variable   默认为：option+command+L 通过以上设置后为：Ctrl+alt+L</p>\n<h5 id=\"另一种使用方法\"><a href=\"#另一种使用方法\" class=\"headerlink\" title=\"另一种使用方法\"></a>另一种使用方法</h5><p>不做任何配置，idea中使用eclipse风格的快捷键，idea中的使用不影响，但是在idea以外就得适应mac中的快捷键，感觉还是这个方法更容易接受一些</p>\n"},{"title":"hexo 迁移到 hugo 方案-续","author":"YyWang","date":"2021-05-13T13:16:15.000Z","_content":"\n前面一篇将博客从 hexo 迁移到 hugo 在本地已经跑通了，这篇将跑通的环境打包到云上。\n\n#### 1.将文件上传到 git 仓库\n\n这一步可以说是先做个备份，有几个坑点需要注意，我的地址是 https://github.com/panniyuyu/blog-hugo.git。还有一个原因就是如果没有 git \n执行 hugo server 命令会报错 ERROR 2021/03/05 06:10:33 Failed to read Git log: fatal: not a git repository (or any of the parent directories): .git\n\n* 我使用了 LoveIt 的主题，在 /themes 目录下，需要在 git 仓库中关联子模块，不然的话 git push 不会将主题相关的文件 push 上去的\n* 由于要关联子项目，为了不受后续主题仓库的影响，最好先 fork 到自己仓库中一份，子模块引用自己仓库的就可以了\n\n#### 2.创建 Dockerfile\n\nDockerfile 也很简单了，把大象装冰箱只需要3步，1.找一个 golang 的镜像 2.安装 hugo 3.git clone 第一步上传的文件运行起来\n\n```\nFROM golang:1.16\n\nWORKDIR /go/src/\n\n# install hugo\nRUN git clone https://github.com/gohugoio/hugo.git --progress --verbose && \\\n    cd hugo && \\\n    go install\n\n# init blog\nWORKDIR /usr/local/blog\n\n# --recursive 包含子模块一起clone\nRUN git clone --recursive https://github.com/panniyuyu/blog-hugo.git --progress --verbose\n\nWORKDIR /usr/local/blog/blog-hugo\n\nCMD sh run.sh \n```\n\n附上 run.sh\n\n```\n#!/bin/sh\nhugo server -p 1313\n```\n\n#### 3.上云\n\n这里我使用的阿里云镜像服务，打好的镜像上传上去再到云服务器上拉下来，然后再把第一步中上传到 git 的仓库拉下来做文件映射，最后运行容器\n\n```\ndocker run -di -p 1313:1313 -v /usr/local/blog/blog-hugo:/usr/local/blog/blog-hugo --name='blog-hugo' blog-hugo:2021-05-10\n```\n\n#### 踩坑\n\n##### 坑1 mac 上宿主机和容器见网络不通\n\n上述步骤完成后，首先再上云之前所有步骤都在本地搞，启动容器之后 curl ${dockerIp}:${port} 是没有反应的，随后进入容器 curl localhost:${port}\n这是没问题的有HTML页面，所以问题就出在宿主机和容器网络不通，退出容器在 mac 上 ping 容器的 ip 果然是不通的。mac 端的 docker desktop 默认是\n不使用网桥的，所以默认与容器间网络是不通的 [这里](https://docs.docker.com/docker-for-mac/networking/) 有详细的说明，解决方法自行搜索，\n我比较懒没有解决，手动狗头\n\n##### 坑2 hugo server 参数\n\n踩到第一个坑以后，跳过本地部署的阶段，直接上云，在运行容器后 ping 容器 ip 网络是通的，即验证了坑1的问题所在，接着进行 curl ${dockerIp}:${port}\n 后还是没有响应，进入容器 curl 是正常的，这个坑浪费了很多的时间，其实很简单，就是 hugo server 命令的一个参数指定 hugo 绑定的主机，即默认只有\n本地才可以访问，命令如下\n\n```\n--bind string            interface to which the server will bind (default \"127.0.0.1\")\n```\n\n##### 坑3 nginx\n\n上面两个坑填完后，之前 hexo 的博客有 Nginx 容器做转发，就计划原有的域名加一个 /hugo 的 path 就可以两个容器都可以用了，还能省下买域名的钱，理\n想很丰满，也确实达到了 想要的效果，但是，但是，但是，当我看某一篇文章时，url 是会变的呀，且不说两个容器中文章的 url 格式不一样，就算文章的 url \n配置成一样的，可 Nginx 不知道当前请求是来自 hugo 还是 hexo 怎么转发？或者可以配置公网 ip host 和域名区分，又或者按照有没有 www 前缀来进行转\n发，这也太挫了，还是老实买个域名通过主机名路由吧。\n\n\n#### 最后\n    \n这三个坑都填上后 hugo 博客就可以用了，再发新的文章就可以直接上传到 git 上（文章在 content/posts/ 目录，图片在 static/images/ 目录），再在\n服务器上 git pull 然后 hugo 就热更新了，比 hexo 还需要 docker restart 一下简直太爽了。再展望一下，后续打算 hugo 和 hexo 一起维护，再写文\n章就先不写头信息，因为两者头的格式不一样，可以新建一个仓库只写 md 文件，push 到仓库后触发一个 pipeline 将 md 文件添加不同格式的头信息，分别更\n新到各个仓库中（这就是 ci），再触发一个 webhook 访问服务器上一个 http 服务，将更新的 hugo 和 hexo 的 文章下载下来，hexo容器需要重启（这步是\ncd），这样 cicd 都有了，就做到了全自动，哈哈，后面有时间\n\n  \n","source":"_posts/hexo迁移到hugo方案-续.md","raw":"---\ntitle: hexo 迁移到 hugo 方案-续\nauthor: YyWang\ndate: 2021-05-13 21:16:15\ntags: hugo\ncategories: hugo\n---\n\n前面一篇将博客从 hexo 迁移到 hugo 在本地已经跑通了，这篇将跑通的环境打包到云上。\n\n#### 1.将文件上传到 git 仓库\n\n这一步可以说是先做个备份，有几个坑点需要注意，我的地址是 https://github.com/panniyuyu/blog-hugo.git。还有一个原因就是如果没有 git \n执行 hugo server 命令会报错 ERROR 2021/03/05 06:10:33 Failed to read Git log: fatal: not a git repository (or any of the parent directories): .git\n\n* 我使用了 LoveIt 的主题，在 /themes 目录下，需要在 git 仓库中关联子模块，不然的话 git push 不会将主题相关的文件 push 上去的\n* 由于要关联子项目，为了不受后续主题仓库的影响，最好先 fork 到自己仓库中一份，子模块引用自己仓库的就可以了\n\n#### 2.创建 Dockerfile\n\nDockerfile 也很简单了，把大象装冰箱只需要3步，1.找一个 golang 的镜像 2.安装 hugo 3.git clone 第一步上传的文件运行起来\n\n```\nFROM golang:1.16\n\nWORKDIR /go/src/\n\n# install hugo\nRUN git clone https://github.com/gohugoio/hugo.git --progress --verbose && \\\n    cd hugo && \\\n    go install\n\n# init blog\nWORKDIR /usr/local/blog\n\n# --recursive 包含子模块一起clone\nRUN git clone --recursive https://github.com/panniyuyu/blog-hugo.git --progress --verbose\n\nWORKDIR /usr/local/blog/blog-hugo\n\nCMD sh run.sh \n```\n\n附上 run.sh\n\n```\n#!/bin/sh\nhugo server -p 1313\n```\n\n#### 3.上云\n\n这里我使用的阿里云镜像服务，打好的镜像上传上去再到云服务器上拉下来，然后再把第一步中上传到 git 的仓库拉下来做文件映射，最后运行容器\n\n```\ndocker run -di -p 1313:1313 -v /usr/local/blog/blog-hugo:/usr/local/blog/blog-hugo --name='blog-hugo' blog-hugo:2021-05-10\n```\n\n#### 踩坑\n\n##### 坑1 mac 上宿主机和容器见网络不通\n\n上述步骤完成后，首先再上云之前所有步骤都在本地搞，启动容器之后 curl ${dockerIp}:${port} 是没有反应的，随后进入容器 curl localhost:${port}\n这是没问题的有HTML页面，所以问题就出在宿主机和容器网络不通，退出容器在 mac 上 ping 容器的 ip 果然是不通的。mac 端的 docker desktop 默认是\n不使用网桥的，所以默认与容器间网络是不通的 [这里](https://docs.docker.com/docker-for-mac/networking/) 有详细的说明，解决方法自行搜索，\n我比较懒没有解决，手动狗头\n\n##### 坑2 hugo server 参数\n\n踩到第一个坑以后，跳过本地部署的阶段，直接上云，在运行容器后 ping 容器 ip 网络是通的，即验证了坑1的问题所在，接着进行 curl ${dockerIp}:${port}\n 后还是没有响应，进入容器 curl 是正常的，这个坑浪费了很多的时间，其实很简单，就是 hugo server 命令的一个参数指定 hugo 绑定的主机，即默认只有\n本地才可以访问，命令如下\n\n```\n--bind string            interface to which the server will bind (default \"127.0.0.1\")\n```\n\n##### 坑3 nginx\n\n上面两个坑填完后，之前 hexo 的博客有 Nginx 容器做转发，就计划原有的域名加一个 /hugo 的 path 就可以两个容器都可以用了，还能省下买域名的钱，理\n想很丰满，也确实达到了 想要的效果，但是，但是，但是，当我看某一篇文章时，url 是会变的呀，且不说两个容器中文章的 url 格式不一样，就算文章的 url \n配置成一样的，可 Nginx 不知道当前请求是来自 hugo 还是 hexo 怎么转发？或者可以配置公网 ip host 和域名区分，又或者按照有没有 www 前缀来进行转\n发，这也太挫了，还是老实买个域名通过主机名路由吧。\n\n\n#### 最后\n    \n这三个坑都填上后 hugo 博客就可以用了，再发新的文章就可以直接上传到 git 上（文章在 content/posts/ 目录，图片在 static/images/ 目录），再在\n服务器上 git pull 然后 hugo 就热更新了，比 hexo 还需要 docker restart 一下简直太爽了。再展望一下，后续打算 hugo 和 hexo 一起维护，再写文\n章就先不写头信息，因为两者头的格式不一样，可以新建一个仓库只写 md 文件，push 到仓库后触发一个 pipeline 将 md 文件添加不同格式的头信息，分别更\n新到各个仓库中（这就是 ci），再触发一个 webhook 访问服务器上一个 http 服务，将更新的 hugo 和 hexo 的 文章下载下来，hexo容器需要重启（这步是\ncd），这样 cicd 都有了，就做到了全自动，哈哈，后面有时间\n\n  \n","slug":"hexo迁移到hugo方案-续","published":1,"updated":"2021-07-13T12:27:08.589Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj7f002b81fy0vrqr50e","content":"<p>前面一篇将博客从 hexo 迁移到 hugo 在本地已经跑通了，这篇将跑通的环境打包到云上。</p>\n<h4 id=\"1-将文件上传到-git-仓库\"><a href=\"#1-将文件上传到-git-仓库\" class=\"headerlink\" title=\"1.将文件上传到 git 仓库\"></a>1.将文件上传到 git 仓库</h4><p>这一步可以说是先做个备份，有几个坑点需要注意，我的地址是 <a href=\"https://github.com/panniyuyu/blog-hugo.git。还有一个原因就是如果没有\" target=\"_blank\" rel=\"noopener\">https://github.com/panniyuyu/blog-hugo.git。还有一个原因就是如果没有</a> git<br>执行 hugo server 命令会报错 ERROR 2021/03/05 06:10:33 Failed to read Git log: fatal: not a git repository (or any of the parent directories): .git</p>\n<ul>\n<li>我使用了 LoveIt 的主题，在 /themes 目录下，需要在 git 仓库中关联子模块，不然的话 git push 不会将主题相关的文件 push 上去的</li>\n<li>由于要关联子项目，为了不受后续主题仓库的影响，最好先 fork 到自己仓库中一份，子模块引用自己仓库的就可以了</li>\n</ul>\n<h4 id=\"2-创建-Dockerfile\"><a href=\"#2-创建-Dockerfile\" class=\"headerlink\" title=\"2.创建 Dockerfile\"></a>2.创建 Dockerfile</h4><p>Dockerfile 也很简单了，把大象装冰箱只需要3步，1.找一个 golang 的镜像 2.安装 hugo 3.git clone 第一步上传的文件运行起来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM golang:1.16</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /go/src/</span><br><span class=\"line\"></span><br><span class=\"line\"># install hugo</span><br><span class=\"line\">RUN git clone https://github.com/gohugoio/hugo.git --progress --verbose &amp;&amp; \\</span><br><span class=\"line\">    cd hugo &amp;&amp; \\</span><br><span class=\"line\">    go install</span><br><span class=\"line\"></span><br><span class=\"line\"># init blog</span><br><span class=\"line\">WORKDIR /usr/local/blog</span><br><span class=\"line\"></span><br><span class=\"line\"># --recursive 包含子模块一起clone</span><br><span class=\"line\">RUN git clone --recursive https://github.com/panniyuyu/blog-hugo.git --progress --verbose</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /usr/local/blog/blog-hugo</span><br><span class=\"line\"></span><br><span class=\"line\">CMD sh run.sh</span><br></pre></td></tr></table></figure>\n<p>附上 run.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">hugo server -p 1313</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-上云\"><a href=\"#3-上云\" class=\"headerlink\" title=\"3.上云\"></a>3.上云</h4><p>这里我使用的阿里云镜像服务，打好的镜像上传上去再到云服务器上拉下来，然后再把第一步中上传到 git 的仓库拉下来做文件映射，最后运行容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -di -p 1313:1313 -v /usr/local/blog/blog-hugo:/usr/local/blog/blog-hugo --name=&apos;blog-hugo&apos; blog-hugo:2021-05-10</span><br></pre></td></tr></table></figure>\n<h4 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h4><h5 id=\"坑1-mac-上宿主机和容器见网络不通\"><a href=\"#坑1-mac-上宿主机和容器见网络不通\" class=\"headerlink\" title=\"坑1 mac 上宿主机和容器见网络不通\"></a>坑1 mac 上宿主机和容器见网络不通</h5><p>上述步骤完成后，首先再上云之前所有步骤都在本地搞，启动容器之后 curl ${dockerIp}:${port} 是没有反应的，随后进入容器 curl localhost:${port}<br>这是没问题的有HTML页面，所以问题就出在宿主机和容器网络不通，退出容器在 mac 上 ping 容器的 ip 果然是不通的。mac 端的 docker desktop 默认是<br>不使用网桥的，所以默认与容器间网络是不通的 <a href=\"https://docs.docker.com/docker-for-mac/networking/\" target=\"_blank\" rel=\"noopener\">这里</a> 有详细的说明，解决方法自行搜索，<br>我比较懒没有解决，手动狗头</p>\n<h5 id=\"坑2-hugo-server-参数\"><a href=\"#坑2-hugo-server-参数\" class=\"headerlink\" title=\"坑2 hugo server 参数\"></a>坑2 hugo server 参数</h5><p>踩到第一个坑以后，跳过本地部署的阶段，直接上云，在运行容器后 ping 容器 ip 网络是通的，即验证了坑1的问题所在，接着进行 curl ${dockerIp}:${port}<br> 后还是没有响应，进入容器 curl 是正常的，这个坑浪费了很多的时间，其实很简单，就是 hugo server 命令的一个参数指定 hugo 绑定的主机，即默认只有<br>本地才可以访问，命令如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--bind string            interface to which the server will bind (default &quot;127.0.0.1&quot;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"坑3-nginx\"><a href=\"#坑3-nginx\" class=\"headerlink\" title=\"坑3 nginx\"></a>坑3 nginx</h5><p>上面两个坑填完后，之前 hexo 的博客有 Nginx 容器做转发，就计划原有的域名加一个 /hugo 的 path 就可以两个容器都可以用了，还能省下买域名的钱，理<br>想很丰满，也确实达到了 想要的效果，但是，但是，但是，当我看某一篇文章时，url 是会变的呀，且不说两个容器中文章的 url 格式不一样，就算文章的 url<br>配置成一样的，可 Nginx 不知道当前请求是来自 hugo 还是 hexo 怎么转发？或者可以配置公网 ip host 和域名区分，又或者按照有没有 www 前缀来进行转<br>发，这也太挫了，还是老实买个域名通过主机名路由吧。</p>\n<h4 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h4><p>这三个坑都填上后 hugo 博客就可以用了，再发新的文章就可以直接上传到 git 上（文章在 content/posts/ 目录，图片在 static/images/ 目录），再在<br>服务器上 git pull 然后 hugo 就热更新了，比 hexo 还需要 docker restart 一下简直太爽了。再展望一下，后续打算 hugo 和 hexo 一起维护，再写文<br>章就先不写头信息，因为两者头的格式不一样，可以新建一个仓库只写 md 文件，push 到仓库后触发一个 pipeline 将 md 文件添加不同格式的头信息，分别更<br>新到各个仓库中（这就是 ci），再触发一个 webhook 访问服务器上一个 http 服务，将更新的 hugo 和 hexo 的 文章下载下来，hexo容器需要重启（这步是<br>cd），这样 cicd 都有了，就做到了全自动，哈哈，后面有时间</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前面一篇将博客从 hexo 迁移到 hugo 在本地已经跑通了，这篇将跑通的环境打包到云上。</p>\n<h4 id=\"1-将文件上传到-git-仓库\"><a href=\"#1-将文件上传到-git-仓库\" class=\"headerlink\" title=\"1.将文件上传到 git 仓库\"></a>1.将文件上传到 git 仓库</h4><p>这一步可以说是先做个备份，有几个坑点需要注意，我的地址是 <a href=\"https://github.com/panniyuyu/blog-hugo.git。还有一个原因就是如果没有\" target=\"_blank\" rel=\"noopener\">https://github.com/panniyuyu/blog-hugo.git。还有一个原因就是如果没有</a> git<br>执行 hugo server 命令会报错 ERROR 2021/03/05 06:10:33 Failed to read Git log: fatal: not a git repository (or any of the parent directories): .git</p>\n<ul>\n<li>我使用了 LoveIt 的主题，在 /themes 目录下，需要在 git 仓库中关联子模块，不然的话 git push 不会将主题相关的文件 push 上去的</li>\n<li>由于要关联子项目，为了不受后续主题仓库的影响，最好先 fork 到自己仓库中一份，子模块引用自己仓库的就可以了</li>\n</ul>\n<h4 id=\"2-创建-Dockerfile\"><a href=\"#2-创建-Dockerfile\" class=\"headerlink\" title=\"2.创建 Dockerfile\"></a>2.创建 Dockerfile</h4><p>Dockerfile 也很简单了，把大象装冰箱只需要3步，1.找一个 golang 的镜像 2.安装 hugo 3.git clone 第一步上传的文件运行起来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM golang:1.16</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /go/src/</span><br><span class=\"line\"></span><br><span class=\"line\"># install hugo</span><br><span class=\"line\">RUN git clone https://github.com/gohugoio/hugo.git --progress --verbose &amp;&amp; \\</span><br><span class=\"line\">    cd hugo &amp;&amp; \\</span><br><span class=\"line\">    go install</span><br><span class=\"line\"></span><br><span class=\"line\"># init blog</span><br><span class=\"line\">WORKDIR /usr/local/blog</span><br><span class=\"line\"></span><br><span class=\"line\"># --recursive 包含子模块一起clone</span><br><span class=\"line\">RUN git clone --recursive https://github.com/panniyuyu/blog-hugo.git --progress --verbose</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /usr/local/blog/blog-hugo</span><br><span class=\"line\"></span><br><span class=\"line\">CMD sh run.sh</span><br></pre></td></tr></table></figure>\n<p>附上 run.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">hugo server -p 1313</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-上云\"><a href=\"#3-上云\" class=\"headerlink\" title=\"3.上云\"></a>3.上云</h4><p>这里我使用的阿里云镜像服务，打好的镜像上传上去再到云服务器上拉下来，然后再把第一步中上传到 git 的仓库拉下来做文件映射，最后运行容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -di -p 1313:1313 -v /usr/local/blog/blog-hugo:/usr/local/blog/blog-hugo --name=&apos;blog-hugo&apos; blog-hugo:2021-05-10</span><br></pre></td></tr></table></figure>\n<h4 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h4><h5 id=\"坑1-mac-上宿主机和容器见网络不通\"><a href=\"#坑1-mac-上宿主机和容器见网络不通\" class=\"headerlink\" title=\"坑1 mac 上宿主机和容器见网络不通\"></a>坑1 mac 上宿主机和容器见网络不通</h5><p>上述步骤完成后，首先再上云之前所有步骤都在本地搞，启动容器之后 curl ${dockerIp}:${port} 是没有反应的，随后进入容器 curl localhost:${port}<br>这是没问题的有HTML页面，所以问题就出在宿主机和容器网络不通，退出容器在 mac 上 ping 容器的 ip 果然是不通的。mac 端的 docker desktop 默认是<br>不使用网桥的，所以默认与容器间网络是不通的 <a href=\"https://docs.docker.com/docker-for-mac/networking/\" target=\"_blank\" rel=\"noopener\">这里</a> 有详细的说明，解决方法自行搜索，<br>我比较懒没有解决，手动狗头</p>\n<h5 id=\"坑2-hugo-server-参数\"><a href=\"#坑2-hugo-server-参数\" class=\"headerlink\" title=\"坑2 hugo server 参数\"></a>坑2 hugo server 参数</h5><p>踩到第一个坑以后，跳过本地部署的阶段，直接上云，在运行容器后 ping 容器 ip 网络是通的，即验证了坑1的问题所在，接着进行 curl ${dockerIp}:${port}<br> 后还是没有响应，进入容器 curl 是正常的，这个坑浪费了很多的时间，其实很简单，就是 hugo server 命令的一个参数指定 hugo 绑定的主机，即默认只有<br>本地才可以访问，命令如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--bind string            interface to which the server will bind (default &quot;127.0.0.1&quot;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"坑3-nginx\"><a href=\"#坑3-nginx\" class=\"headerlink\" title=\"坑3 nginx\"></a>坑3 nginx</h5><p>上面两个坑填完后，之前 hexo 的博客有 Nginx 容器做转发，就计划原有的域名加一个 /hugo 的 path 就可以两个容器都可以用了，还能省下买域名的钱，理<br>想很丰满，也确实达到了 想要的效果，但是，但是，但是，当我看某一篇文章时，url 是会变的呀，且不说两个容器中文章的 url 格式不一样，就算文章的 url<br>配置成一样的，可 Nginx 不知道当前请求是来自 hugo 还是 hexo 怎么转发？或者可以配置公网 ip host 和域名区分，又或者按照有没有 www 前缀来进行转<br>发，这也太挫了，还是老实买个域名通过主机名路由吧。</p>\n<h4 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h4><p>这三个坑都填上后 hugo 博客就可以用了，再发新的文章就可以直接上传到 git 上（文章在 content/posts/ 目录，图片在 static/images/ 目录），再在<br>服务器上 git pull 然后 hugo 就热更新了，比 hexo 还需要 docker restart 一下简直太爽了。再展望一下，后续打算 hugo 和 hexo 一起维护，再写文<br>章就先不写头信息，因为两者头的格式不一样，可以新建一个仓库只写 md 文件，push 到仓库后触发一个 pipeline 将 md 文件添加不同格式的头信息，分别更<br>新到各个仓库中（这就是 ci），再触发一个 webhook 访问服务器上一个 http 服务，将更新的 hugo 和 hexo 的 文章下载下来，hexo容器需要重启（这步是<br>cd），这样 cicd 都有了，就做到了全自动，哈哈，后面有时间</p>\n"},{"title":"hexo 迁移到 hugo 方案","author":"YyWang","date":"2021-03-04T07:02:29.000Z","_content":"\n云原生第一步首先要拥抱 go 语言，go 语言第一步首先从迁移博客开始，hugo 是用 golang 实现的静态博客生成工具，给我最大的吸引力是生成静态资源的速度很快，并且是热更新，就是说我修改了文章后不需要重启 hugo 就可以更新博客的状态，这简直太爽了\n\n#### 安装\n```\n# 安装\nbrew install hugo\n#\nError: hugo: no bottle available!\nYou can try to install from source with:\n  brew install --build-from-source hugo\nPlease note building from source is unsupported. You will encounter build\nfailures with some formulae. If you experience any issues please create pull\nrequests instead of asking for help on Homebrew's GitHub, Twitter or any other\nofficial channels.\n# 按照提示重新安装\nbrew install --build-from-source hugo\n# 验证\nhugo version \n# 成功\nHugo Static Site Generator v0.80.0/extended darwin/amd64 BuildDate: unknown\n\n```\n\n#### 创建一个网站\n\n```\nhugo new site blog-hugo\n```\n\n会在hugo目录下创建一个 blog-hugo 的文件夹，目录结构为\n\n```\n.\n├── archetypes\n│   └── default.md\n├── config.toml\n├── content\n├── data\n├── layouts\n├── static\n└── themes\n```\n\n#### 添加主题\n\n我选用LoveIt的主题\n\n```\ncd blog-hugo/themes/\ngit clone https://github.com/dillonzq/LoveIt.git\n# 复制 exampleSite 中的文件到 blog-hugo 目录下\ncp -rf LoveIt/exampleSite/ ../../\n# 修改主题位置\nvim config.toml\n# 修改 themesDir = \"themes/\"\n# 启动 必须要在创建的 Site 目录下，否有要 -s=xxx 指定目录\nhugo server\n```\n**踩坑! 如果提示保持 too many request from balabala ... 需要在config.toml中添加配置 ignoreErrors = [\"error-remote-getjson\"]**\n\n#### 迁移博客\n\n1. 头信息修改，hexo中的头信息我是这样写的\n\n```\ntitle: 2020 又是起起落落落落的一年 \nauthor: YyWang \ntags: 生活杂谈 \ncategories: 生活杂谈\ndate: 2021-02-08 17:57:12\n---\n```\nhugo 中头信息为这样\n\n```\n---\ntitle: 2020 又是起起落落落落的一年\nauthor: YyWang\nauthorLink: http://www.yywang.top #新增\ndate: 2021-02-08T17:57:12+08:00 #修改格式\nlastmod: 2021-02-08T17:57:12+08:00 #新增\ndraft: false #新增\ntags: [\"生活杂谈\"] #修改格式\ncategories: [\"生活杂谈\"] #修改格式\nfeaturedImagePreview: #新增\n---\n```\n当然是写代码修改啦，因为hexo中的文章都没以 --- 开头，所以我就统一这个格式处理了，(刚学golang写的很糙😬)，处理代码如下\n\n```\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"time\"\n)\n\nfunc main(){\n\t// 获取文件夹中所有文件\n\tpathPrefix := \"${pathPrefix}\"\n\tfiles := getAllFiles(pathPrefix)\n\tfor _,f := range files {\n\t\t// 先读文件，在写文件\n\t\terr := writeFile(f, readFile(f))\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"write error %v\", err)\n\t\t}\n\t}\n}\n\nfunc readFile(filepath string) []byte{\n\tfile, _ := os.OpenFile(filepath, os.O_RDONLY, 0644)\n\tdefer file.Close()\n\n\treader := bufio.NewReader(file)\n\tbuffer := make([]byte, 0)\n\n\tvar title, author, tags, categories, date string\n\n\tappendFlag := false\n\tfor {\n\t\tline, _, err := reader.ReadLine()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tappendPre := make([]byte, 0)\n\t\t\t\tappendPre = append(appendPre, \"---\\n\"...)\n\t\t\t\tappendPre = append(appendPre, \"title: \" + title +\"\\n\"...)\n\t\t\t\tappendPre = append(appendPre, \"author: \" + author +\"\\n\"...)\n\t\t\t\tappendPre = append(appendPre, \"authorLink: http://www.yywang.top\\n\"...)\n\t\t\t\tappendPre = append(appendPre, \"date: \" + date +\"\\n\"...)\n\t\t\t\tappendPre = append(appendPre, \"lastmod: \" + date +\"\\n\"...)\n\t\t\t\tappendPre = append(appendPre, \"draft: false\\n\"...)\n\t\t\t\tappendPre = append(appendPre, \"tags: [\\\"\"+tags+\"\\\"]\\n\"...)\n\t\t\t\tappendPre = append(appendPre, \"categories: [\\\"\"+categories+\"\\\"]\\n\"...)\n\t\t\t\tappendPre = append(appendPre, \"featuredImagePreview: \\n\"...)\n\t\t\t\tappendPre = append(appendPre, \"---\\n\"...)\n\t\t\t\treturn  append(appendPre, buffer...)\n\t\t\t}\n\t\t}\n\t\tlineStr := string(line[:])\n\t\tif strings.EqualFold(lineStr, \"---\") {\n\t\t\tappendFlag = true\n\t\t\tcontinue\n\t\t}\n\n\t\tif appendFlag {\n\t\t\t// copy\n\t\t\tbuffer = append(buffer, line...)\n\t\t\tbuffer = append(buffer, \"\\n\"...)\n\t\t} else {\n\t\t\ti := strings.Index(lineStr, \":\")\n\t\t\tif i > 0 {\n\t\t\t\tk := lineStr[0:i]\n\t\t\t\tv := strings.TrimSpace(lineStr[i+1:])\n\t\t\t\tswitch k {\n\t\t\t\tcase \"title\":\n\t\t\t\t\ttitle = v\n\t\t\t\tcase \"author\":\n\t\t\t\t\tauthor = v\n\t\t\t\tcase \"tags\":\n\t\t\t\t\ttags = v\n\t\t\t\tcase \"categories\":\n\t\t\t\t\tcategories = v\n\t\t\t\tcase \"date\":\n\t\t\t\t\tdate = transDataFormat(v, \"2006-01-02 15:04:05\", \"2006-01-02T15:04:05+08:00\")\n\t\t\t\tdefault:\n\t\t\t\t\tfmt.Println(\"error switch \" + k)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfmt.Println(\"split error \" + lineStr)\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nfunc getAllFiles(path string) []string {\n\tfiles := make([]string, 0)\n\terr := filepath.Walk(path, func(path string, f os.FileInfo, err error) error{\n\t\tif f.IsDir() {\n\t\t\treturn nil\n\t\t}\n\t\tfiles = append(files, path)\n\t\treturn  nil\n\t})\n\tif err != nil {\n\t\tfmt.Printf(\"walk file path err info is %v\", err)\n\t}\n\treturn files\n}\n\nfunc transDataFormat(timeStr string, oldFormat string, newFormat string) string {\n\tdate, _ := time.Parse(oldFormat, timeStr)\n\treturn date.Format(newFormat)\n}\n\nfunc writeFile(filePath string, content []byte) error {\n\tf, err := os.OpenFile(filePath, os.O_WRONLY|os.O_TRUNC, 0600)\n\tdefer f.Close()\n\tif err != nil {\n\t\treturn err\n\t}\n\twriter := bufio.NewWriter(f)\n\t_, err = writer.Write(content)\n\tif err != nil {\n\t\treturn err\n\t}\n\terr = writer.Flush()\n\tif err != nil {\n\t\tfmt.Printf(\"flush error %v\", err)\n\t}\n\treturn nil\n}\n\n```\n\n然后将新修改的文件移动到 blog-hugo/content/posts/ 目录下\n\n2. 将文章中引用的图片移动到 blog-hugo/assets/images/ 目录下\n3. 如果在文章中还引用过其他文章，url会失效，手动修改下或者参考[这里，查看文件链接](https://liujiacai.net/blog/2020/12/05/hexo-to-hugo/)处理\n\n**到这里博客基本上迁移完毕了，附一个初步的效果图，后面还需进一步美化和优化，等上线了再切负载替换hexo**\n\n![hugodemodemo](/images/hugodemo.png)\n\n#### TODO\n\n* 打包docker镜像，以docker的方式部署，nginx切换负载\n* 备份hugo博客的方案\n* 参考[这里](https://lewky.cn/tags/hugo/)做增强\n* 换一套头像，大图小图啥的，参考主题中exampleSite里的post介绍，[这个网站生成套图](https://realfavicongenerator.net/)\n* 更换评论系统插件[waline](https://waline.js.org/)\n","source":"_posts/hexo迁移到hugo方案.md","raw":"---\ntitle: hexo 迁移到 hugo 方案\nauthor: YyWang\ndate: 2021-03-04 15:02:29\ntags: hugo\ncategories: hugo\n---\n\n云原生第一步首先要拥抱 go 语言，go 语言第一步首先从迁移博客开始，hugo 是用 golang 实现的静态博客生成工具，给我最大的吸引力是生成静态资源的速度很快，并且是热更新，就是说我修改了文章后不需要重启 hugo 就可以更新博客的状态，这简直太爽了\n\n#### 安装\n```\n# 安装\nbrew install hugo\n#\nError: hugo: no bottle available!\nYou can try to install from source with:\n  brew install --build-from-source hugo\nPlease note building from source is unsupported. You will encounter build\nfailures with some formulae. If you experience any issues please create pull\nrequests instead of asking for help on Homebrew's GitHub, Twitter or any other\nofficial channels.\n# 按照提示重新安装\nbrew install --build-from-source hugo\n# 验证\nhugo version \n# 成功\nHugo Static Site Generator v0.80.0/extended darwin/amd64 BuildDate: unknown\n\n```\n\n#### 创建一个网站\n\n```\nhugo new site blog-hugo\n```\n\n会在hugo目录下创建一个 blog-hugo 的文件夹，目录结构为\n\n```\n.\n├── archetypes\n│   └── default.md\n├── config.toml\n├── content\n├── data\n├── layouts\n├── static\n└── themes\n```\n\n#### 添加主题\n\n我选用LoveIt的主题\n\n```\ncd blog-hugo/themes/\ngit clone https://github.com/dillonzq/LoveIt.git\n# 复制 exampleSite 中的文件到 blog-hugo 目录下\ncp -rf LoveIt/exampleSite/ ../../\n# 修改主题位置\nvim config.toml\n# 修改 themesDir = \"themes/\"\n# 启动 必须要在创建的 Site 目录下，否有要 -s=xxx 指定目录\nhugo server\n```\n**踩坑! 如果提示保持 too many request from balabala ... 需要在config.toml中添加配置 ignoreErrors = [\"error-remote-getjson\"]**\n\n#### 迁移博客\n\n1. 头信息修改，hexo中的头信息我是这样写的\n\n```\ntitle: 2020 又是起起落落落落的一年 \nauthor: YyWang \ntags: 生活杂谈 \ncategories: 生活杂谈\ndate: 2021-02-08 17:57:12\n---\n```\nhugo 中头信息为这样\n\n```\n---\ntitle: 2020 又是起起落落落落的一年\nauthor: YyWang\nauthorLink: http://www.yywang.top #新增\ndate: 2021-02-08T17:57:12+08:00 #修改格式\nlastmod: 2021-02-08T17:57:12+08:00 #新增\ndraft: false #新增\ntags: [\"生活杂谈\"] #修改格式\ncategories: [\"生活杂谈\"] #修改格式\nfeaturedImagePreview: #新增\n---\n```\n当然是写代码修改啦，因为hexo中的文章都没以 --- 开头，所以我就统一这个格式处理了，(刚学golang写的很糙😬)，处理代码如下\n\n```\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"time\"\n)\n\nfunc main(){\n\t// 获取文件夹中所有文件\n\tpathPrefix := \"${pathPrefix}\"\n\tfiles := getAllFiles(pathPrefix)\n\tfor _,f := range files {\n\t\t// 先读文件，在写文件\n\t\terr := writeFile(f, readFile(f))\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"write error %v\", err)\n\t\t}\n\t}\n}\n\nfunc readFile(filepath string) []byte{\n\tfile, _ := os.OpenFile(filepath, os.O_RDONLY, 0644)\n\tdefer file.Close()\n\n\treader := bufio.NewReader(file)\n\tbuffer := make([]byte, 0)\n\n\tvar title, author, tags, categories, date string\n\n\tappendFlag := false\n\tfor {\n\t\tline, _, err := reader.ReadLine()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tappendPre := make([]byte, 0)\n\t\t\t\tappendPre = append(appendPre, \"---\\n\"...)\n\t\t\t\tappendPre = append(appendPre, \"title: \" + title +\"\\n\"...)\n\t\t\t\tappendPre = append(appendPre, \"author: \" + author +\"\\n\"...)\n\t\t\t\tappendPre = append(appendPre, \"authorLink: http://www.yywang.top\\n\"...)\n\t\t\t\tappendPre = append(appendPre, \"date: \" + date +\"\\n\"...)\n\t\t\t\tappendPre = append(appendPre, \"lastmod: \" + date +\"\\n\"...)\n\t\t\t\tappendPre = append(appendPre, \"draft: false\\n\"...)\n\t\t\t\tappendPre = append(appendPre, \"tags: [\\\"\"+tags+\"\\\"]\\n\"...)\n\t\t\t\tappendPre = append(appendPre, \"categories: [\\\"\"+categories+\"\\\"]\\n\"...)\n\t\t\t\tappendPre = append(appendPre, \"featuredImagePreview: \\n\"...)\n\t\t\t\tappendPre = append(appendPre, \"---\\n\"...)\n\t\t\t\treturn  append(appendPre, buffer...)\n\t\t\t}\n\t\t}\n\t\tlineStr := string(line[:])\n\t\tif strings.EqualFold(lineStr, \"---\") {\n\t\t\tappendFlag = true\n\t\t\tcontinue\n\t\t}\n\n\t\tif appendFlag {\n\t\t\t// copy\n\t\t\tbuffer = append(buffer, line...)\n\t\t\tbuffer = append(buffer, \"\\n\"...)\n\t\t} else {\n\t\t\ti := strings.Index(lineStr, \":\")\n\t\t\tif i > 0 {\n\t\t\t\tk := lineStr[0:i]\n\t\t\t\tv := strings.TrimSpace(lineStr[i+1:])\n\t\t\t\tswitch k {\n\t\t\t\tcase \"title\":\n\t\t\t\t\ttitle = v\n\t\t\t\tcase \"author\":\n\t\t\t\t\tauthor = v\n\t\t\t\tcase \"tags\":\n\t\t\t\t\ttags = v\n\t\t\t\tcase \"categories\":\n\t\t\t\t\tcategories = v\n\t\t\t\tcase \"date\":\n\t\t\t\t\tdate = transDataFormat(v, \"2006-01-02 15:04:05\", \"2006-01-02T15:04:05+08:00\")\n\t\t\t\tdefault:\n\t\t\t\t\tfmt.Println(\"error switch \" + k)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfmt.Println(\"split error \" + lineStr)\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nfunc getAllFiles(path string) []string {\n\tfiles := make([]string, 0)\n\terr := filepath.Walk(path, func(path string, f os.FileInfo, err error) error{\n\t\tif f.IsDir() {\n\t\t\treturn nil\n\t\t}\n\t\tfiles = append(files, path)\n\t\treturn  nil\n\t})\n\tif err != nil {\n\t\tfmt.Printf(\"walk file path err info is %v\", err)\n\t}\n\treturn files\n}\n\nfunc transDataFormat(timeStr string, oldFormat string, newFormat string) string {\n\tdate, _ := time.Parse(oldFormat, timeStr)\n\treturn date.Format(newFormat)\n}\n\nfunc writeFile(filePath string, content []byte) error {\n\tf, err := os.OpenFile(filePath, os.O_WRONLY|os.O_TRUNC, 0600)\n\tdefer f.Close()\n\tif err != nil {\n\t\treturn err\n\t}\n\twriter := bufio.NewWriter(f)\n\t_, err = writer.Write(content)\n\tif err != nil {\n\t\treturn err\n\t}\n\terr = writer.Flush()\n\tif err != nil {\n\t\tfmt.Printf(\"flush error %v\", err)\n\t}\n\treturn nil\n}\n\n```\n\n然后将新修改的文件移动到 blog-hugo/content/posts/ 目录下\n\n2. 将文章中引用的图片移动到 blog-hugo/assets/images/ 目录下\n3. 如果在文章中还引用过其他文章，url会失效，手动修改下或者参考[这里，查看文件链接](https://liujiacai.net/blog/2020/12/05/hexo-to-hugo/)处理\n\n**到这里博客基本上迁移完毕了，附一个初步的效果图，后面还需进一步美化和优化，等上线了再切负载替换hexo**\n\n![hugodemodemo](/images/hugodemo.png)\n\n#### TODO\n\n* 打包docker镜像，以docker的方式部署，nginx切换负载\n* 备份hugo博客的方案\n* 参考[这里](https://lewky.cn/tags/hugo/)做增强\n* 换一套头像，大图小图啥的，参考主题中exampleSite里的post介绍，[这个网站生成套图](https://realfavicongenerator.net/)\n* 更换评论系统插件[waline](https://waline.js.org/)\n","slug":"hexo迁移到hugo方案","published":1,"updated":"2021-07-13T12:27:08.589Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj7g002f81fyaly9zzsm","content":"<p>云原生第一步首先要拥抱 go 语言，go 语言第一步首先从迁移博客开始，hugo 是用 golang 实现的静态博客生成工具，给我最大的吸引力是生成静态资源的速度很快，并且是热更新，就是说我修改了文章后不需要重启 hugo 就可以更新博客的状态，这简直太爽了</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装</span><br><span class=\"line\">brew install hugo</span><br><span class=\"line\">#</span><br><span class=\"line\">Error: hugo: no bottle available!</span><br><span class=\"line\">You can try to install from source with:</span><br><span class=\"line\">  brew install --build-from-source hugo</span><br><span class=\"line\">Please note building from source is unsupported. You will encounter build</span><br><span class=\"line\">failures with some formulae. If you experience any issues please create pull</span><br><span class=\"line\">requests instead of asking for help on Homebrew&apos;s GitHub, Twitter or any other</span><br><span class=\"line\">official channels.</span><br><span class=\"line\"># 按照提示重新安装</span><br><span class=\"line\">brew install --build-from-source hugo</span><br><span class=\"line\"># 验证</span><br><span class=\"line\">hugo version </span><br><span class=\"line\"># 成功</span><br><span class=\"line\">Hugo Static Site Generator v0.80.0/extended darwin/amd64 BuildDate: unknown</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建一个网站\"><a href=\"#创建一个网站\" class=\"headerlink\" title=\"创建一个网站\"></a>创建一个网站</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo new site blog-hugo</span><br></pre></td></tr></table></figure>\n<p>会在hugo目录下创建一个 blog-hugo 的文件夹，目录结构为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── archetypes</span><br><span class=\"line\">│   └── default.md</span><br><span class=\"line\">├── config.toml</span><br><span class=\"line\">├── content</span><br><span class=\"line\">├── data</span><br><span class=\"line\">├── layouts</span><br><span class=\"line\">├── static</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加主题\"><a href=\"#添加主题\" class=\"headerlink\" title=\"添加主题\"></a>添加主题</h4><p>我选用LoveIt的主题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd blog-hugo/themes/</span><br><span class=\"line\">git clone https://github.com/dillonzq/LoveIt.git</span><br><span class=\"line\"># 复制 exampleSite 中的文件到 blog-hugo 目录下</span><br><span class=\"line\">cp -rf LoveIt/exampleSite/ ../../</span><br><span class=\"line\"># 修改主题位置</span><br><span class=\"line\">vim config.toml</span><br><span class=\"line\"># 修改 themesDir = &quot;themes/&quot;</span><br><span class=\"line\"># 启动 必须要在创建的 Site 目录下，否有要 -s=xxx 指定目录</span><br><span class=\"line\">hugo server</span><br></pre></td></tr></table></figure>\n<p><strong>踩坑! 如果提示保持 too many request from balabala … 需要在config.toml中添加配置 ignoreErrors = [“error-remote-getjson”]</strong></p>\n<h4 id=\"迁移博客\"><a href=\"#迁移博客\" class=\"headerlink\" title=\"迁移博客\"></a>迁移博客</h4><ol>\n<li>头信息修改，hexo中的头信息我是这样写的</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 2020 又是起起落落落落的一年 </span><br><span class=\"line\">author: YyWang </span><br><span class=\"line\">tags: 生活杂谈 </span><br><span class=\"line\">categories: 生活杂谈</span><br><span class=\"line\">date: 2021-02-08 17:57:12</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>hugo 中头信息为这样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 2020 又是起起落落落落的一年</span><br><span class=\"line\">author: YyWang</span><br><span class=\"line\">authorLink: http://www.yywang.top #新增</span><br><span class=\"line\">date: 2021-02-08T17:57:12+08:00 #修改格式</span><br><span class=\"line\">lastmod: 2021-02-08T17:57:12+08:00 #新增</span><br><span class=\"line\">draft: false #新增</span><br><span class=\"line\">tags: [&quot;生活杂谈&quot;] #修改格式</span><br><span class=\"line\">categories: [&quot;生活杂谈&quot;] #修改格式</span><br><span class=\"line\">featuredImagePreview: #新增</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>当然是写代码修改啦，因为hexo中的文章都没以 — 开头，所以我就统一这个格式处理了，(刚学golang写的很糙😬)，处理代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;bufio&quot;</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;io&quot;</span><br><span class=\"line\">\t&quot;os&quot;</span><br><span class=\"line\">\t&quot;path/filepath&quot;</span><br><span class=\"line\">\t&quot;strings&quot;</span><br><span class=\"line\">\t&quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main()&#123;</span><br><span class=\"line\">\t// 获取文件夹中所有文件</span><br><span class=\"line\">\tpathPrefix := &quot;$&#123;pathPrefix&#125;&quot;</span><br><span class=\"line\">\tfiles := getAllFiles(pathPrefix)</span><br><span class=\"line\">\tfor _,f := range files &#123;</span><br><span class=\"line\">\t\t// 先读文件，在写文件</span><br><span class=\"line\">\t\terr := writeFile(f, readFile(f))</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\tfmt.Printf(&quot;write error %v&quot;, err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func readFile(filepath string) []byte&#123;</span><br><span class=\"line\">\tfile, _ := os.OpenFile(filepath, os.O_RDONLY, 0644)</span><br><span class=\"line\">\tdefer file.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\treader := bufio.NewReader(file)</span><br><span class=\"line\">\tbuffer := make([]byte, 0)</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar title, author, tags, categories, date string</span><br><span class=\"line\"></span><br><span class=\"line\">\tappendFlag := false</span><br><span class=\"line\">\tfor &#123;</span><br><span class=\"line\">\t\tline, _, err := reader.ReadLine()</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\tif err == io.EOF &#123;</span><br><span class=\"line\">\t\t\t\tappendPre := make([]byte, 0)</span><br><span class=\"line\">\t\t\t\tappendPre = append(appendPre, &quot;---\\n&quot;...)</span><br><span class=\"line\">\t\t\t\tappendPre = append(appendPre, &quot;title: &quot; + title +&quot;\\n&quot;...)</span><br><span class=\"line\">\t\t\t\tappendPre = append(appendPre, &quot;author: &quot; + author +&quot;\\n&quot;...)</span><br><span class=\"line\">\t\t\t\tappendPre = append(appendPre, &quot;authorLink: http://www.yywang.top\\n&quot;...)</span><br><span class=\"line\">\t\t\t\tappendPre = append(appendPre, &quot;date: &quot; + date +&quot;\\n&quot;...)</span><br><span class=\"line\">\t\t\t\tappendPre = append(appendPre, &quot;lastmod: &quot; + date +&quot;\\n&quot;...)</span><br><span class=\"line\">\t\t\t\tappendPre = append(appendPre, &quot;draft: false\\n&quot;...)</span><br><span class=\"line\">\t\t\t\tappendPre = append(appendPre, &quot;tags: [\\&quot;&quot;+tags+&quot;\\&quot;]\\n&quot;...)</span><br><span class=\"line\">\t\t\t\tappendPre = append(appendPre, &quot;categories: [\\&quot;&quot;+categories+&quot;\\&quot;]\\n&quot;...)</span><br><span class=\"line\">\t\t\t\tappendPre = append(appendPre, &quot;featuredImagePreview: \\n&quot;...)</span><br><span class=\"line\">\t\t\t\tappendPre = append(appendPre, &quot;---\\n&quot;...)</span><br><span class=\"line\">\t\t\t\treturn  append(appendPre, buffer...)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlineStr := string(line[:])</span><br><span class=\"line\">\t\tif strings.EqualFold(lineStr, &quot;---&quot;) &#123;</span><br><span class=\"line\">\t\t\tappendFlag = true</span><br><span class=\"line\">\t\t\tcontinue</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif appendFlag &#123;</span><br><span class=\"line\">\t\t\t// copy</span><br><span class=\"line\">\t\t\tbuffer = append(buffer, line...)</span><br><span class=\"line\">\t\t\tbuffer = append(buffer, &quot;\\n&quot;...)</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\ti := strings.Index(lineStr, &quot;:&quot;)</span><br><span class=\"line\">\t\t\tif i &gt; 0 &#123;</span><br><span class=\"line\">\t\t\t\tk := lineStr[0:i]</span><br><span class=\"line\">\t\t\t\tv := strings.TrimSpace(lineStr[i+1:])</span><br><span class=\"line\">\t\t\t\tswitch k &#123;</span><br><span class=\"line\">\t\t\t\tcase &quot;title&quot;:</span><br><span class=\"line\">\t\t\t\t\ttitle = v</span><br><span class=\"line\">\t\t\t\tcase &quot;author&quot;:</span><br><span class=\"line\">\t\t\t\t\tauthor = v</span><br><span class=\"line\">\t\t\t\tcase &quot;tags&quot;:</span><br><span class=\"line\">\t\t\t\t\ttags = v</span><br><span class=\"line\">\t\t\t\tcase &quot;categories&quot;:</span><br><span class=\"line\">\t\t\t\t\tcategories = v</span><br><span class=\"line\">\t\t\t\tcase &quot;date&quot;:</span><br><span class=\"line\">\t\t\t\t\tdate = transDataFormat(v, &quot;2006-01-02 15:04:05&quot;, &quot;2006-01-02T15:04:05+08:00&quot;)</span><br><span class=\"line\">\t\t\t\tdefault:</span><br><span class=\"line\">\t\t\t\t\tfmt.Println(&quot;error switch &quot; + k)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(&quot;split error &quot; + lineStr)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func getAllFiles(path string) []string &#123;</span><br><span class=\"line\">\tfiles := make([]string, 0)</span><br><span class=\"line\">\terr := filepath.Walk(path, func(path string, f os.FileInfo, err error) error&#123;</span><br><span class=\"line\">\t\tif f.IsDir() &#123;</span><br><span class=\"line\">\t\t\treturn nil</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfiles = append(files, path)</span><br><span class=\"line\">\t\treturn  nil</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tfmt.Printf(&quot;walk file path err info is %v&quot;, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn files</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func transDataFormat(timeStr string, oldFormat string, newFormat string) string &#123;</span><br><span class=\"line\">\tdate, _ := time.Parse(oldFormat, timeStr)</span><br><span class=\"line\">\treturn date.Format(newFormat)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func writeFile(filePath string, content []byte) error &#123;</span><br><span class=\"line\">\tf, err := os.OpenFile(filePath, os.O_WRONLY|os.O_TRUNC, 0600)</span><br><span class=\"line\">\tdefer f.Close()</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\treturn err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twriter := bufio.NewWriter(f)</span><br><span class=\"line\">\t_, err = writer.Write(content)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\treturn err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\terr = writer.Flush()</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tfmt.Printf(&quot;flush error %v&quot;, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn nil</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后将新修改的文件移动到 blog-hugo/content/posts/ 目录下</p>\n<ol start=\"2\">\n<li>将文章中引用的图片移动到 blog-hugo/assets/images/ 目录下</li>\n<li>如果在文章中还引用过其他文章，url会失效，手动修改下或者参考<a href=\"https://liujiacai.net/blog/2020/12/05/hexo-to-hugo/\" target=\"_blank\" rel=\"noopener\">这里，查看文件链接</a>处理</li>\n</ol>\n<p><strong>到这里博客基本上迁移完毕了，附一个初步的效果图，后面还需进一步美化和优化，等上线了再切负载替换hexo</strong></p>\n<p><img src=\"/images/hugodemo.png\" alt=\"hugodemodemo\"></p>\n<h4 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h4><ul>\n<li>打包docker镜像，以docker的方式部署，nginx切换负载</li>\n<li>备份hugo博客的方案</li>\n<li>参考<a href=\"https://lewky.cn/tags/hugo/\" target=\"_blank\" rel=\"noopener\">这里</a>做增强</li>\n<li>换一套头像，大图小图啥的，参考主题中exampleSite里的post介绍，<a href=\"https://realfavicongenerator.net/\" target=\"_blank\" rel=\"noopener\">这个网站生成套图</a></li>\n<li>更换评论系统插件<a href=\"https://waline.js.org/\" target=\"_blank\" rel=\"noopener\">waline</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>云原生第一步首先要拥抱 go 语言，go 语言第一步首先从迁移博客开始，hugo 是用 golang 实现的静态博客生成工具，给我最大的吸引力是生成静态资源的速度很快，并且是热更新，就是说我修改了文章后不需要重启 hugo 就可以更新博客的状态，这简直太爽了</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装</span><br><span class=\"line\">brew install hugo</span><br><span class=\"line\">#</span><br><span class=\"line\">Error: hugo: no bottle available!</span><br><span class=\"line\">You can try to install from source with:</span><br><span class=\"line\">  brew install --build-from-source hugo</span><br><span class=\"line\">Please note building from source is unsupported. You will encounter build</span><br><span class=\"line\">failures with some formulae. If you experience any issues please create pull</span><br><span class=\"line\">requests instead of asking for help on Homebrew&apos;s GitHub, Twitter or any other</span><br><span class=\"line\">official channels.</span><br><span class=\"line\"># 按照提示重新安装</span><br><span class=\"line\">brew install --build-from-source hugo</span><br><span class=\"line\"># 验证</span><br><span class=\"line\">hugo version </span><br><span class=\"line\"># 成功</span><br><span class=\"line\">Hugo Static Site Generator v0.80.0/extended darwin/amd64 BuildDate: unknown</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建一个网站\"><a href=\"#创建一个网站\" class=\"headerlink\" title=\"创建一个网站\"></a>创建一个网站</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo new site blog-hugo</span><br></pre></td></tr></table></figure>\n<p>会在hugo目录下创建一个 blog-hugo 的文件夹，目录结构为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── archetypes</span><br><span class=\"line\">│   └── default.md</span><br><span class=\"line\">├── config.toml</span><br><span class=\"line\">├── content</span><br><span class=\"line\">├── data</span><br><span class=\"line\">├── layouts</span><br><span class=\"line\">├── static</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加主题\"><a href=\"#添加主题\" class=\"headerlink\" title=\"添加主题\"></a>添加主题</h4><p>我选用LoveIt的主题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd blog-hugo/themes/</span><br><span class=\"line\">git clone https://github.com/dillonzq/LoveIt.git</span><br><span class=\"line\"># 复制 exampleSite 中的文件到 blog-hugo 目录下</span><br><span class=\"line\">cp -rf LoveIt/exampleSite/ ../../</span><br><span class=\"line\"># 修改主题位置</span><br><span class=\"line\">vim config.toml</span><br><span class=\"line\"># 修改 themesDir = &quot;themes/&quot;</span><br><span class=\"line\"># 启动 必须要在创建的 Site 目录下，否有要 -s=xxx 指定目录</span><br><span class=\"line\">hugo server</span><br></pre></td></tr></table></figure>\n<p><strong>踩坑! 如果提示保持 too many request from balabala … 需要在config.toml中添加配置 ignoreErrors = [“error-remote-getjson”]</strong></p>\n<h4 id=\"迁移博客\"><a href=\"#迁移博客\" class=\"headerlink\" title=\"迁移博客\"></a>迁移博客</h4><ol>\n<li>头信息修改，hexo中的头信息我是这样写的</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 2020 又是起起落落落落的一年 </span><br><span class=\"line\">author: YyWang </span><br><span class=\"line\">tags: 生活杂谈 </span><br><span class=\"line\">categories: 生活杂谈</span><br><span class=\"line\">date: 2021-02-08 17:57:12</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>hugo 中头信息为这样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 2020 又是起起落落落落的一年</span><br><span class=\"line\">author: YyWang</span><br><span class=\"line\">authorLink: http://www.yywang.top #新增</span><br><span class=\"line\">date: 2021-02-08T17:57:12+08:00 #修改格式</span><br><span class=\"line\">lastmod: 2021-02-08T17:57:12+08:00 #新增</span><br><span class=\"line\">draft: false #新增</span><br><span class=\"line\">tags: [&quot;生活杂谈&quot;] #修改格式</span><br><span class=\"line\">categories: [&quot;生活杂谈&quot;] #修改格式</span><br><span class=\"line\">featuredImagePreview: #新增</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>当然是写代码修改啦，因为hexo中的文章都没以 — 开头，所以我就统一这个格式处理了，(刚学golang写的很糙😬)，处理代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;bufio&quot;</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;io&quot;</span><br><span class=\"line\">\t&quot;os&quot;</span><br><span class=\"line\">\t&quot;path/filepath&quot;</span><br><span class=\"line\">\t&quot;strings&quot;</span><br><span class=\"line\">\t&quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main()&#123;</span><br><span class=\"line\">\t// 获取文件夹中所有文件</span><br><span class=\"line\">\tpathPrefix := &quot;$&#123;pathPrefix&#125;&quot;</span><br><span class=\"line\">\tfiles := getAllFiles(pathPrefix)</span><br><span class=\"line\">\tfor _,f := range files &#123;</span><br><span class=\"line\">\t\t// 先读文件，在写文件</span><br><span class=\"line\">\t\terr := writeFile(f, readFile(f))</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\tfmt.Printf(&quot;write error %v&quot;, err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func readFile(filepath string) []byte&#123;</span><br><span class=\"line\">\tfile, _ := os.OpenFile(filepath, os.O_RDONLY, 0644)</span><br><span class=\"line\">\tdefer file.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\treader := bufio.NewReader(file)</span><br><span class=\"line\">\tbuffer := make([]byte, 0)</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar title, author, tags, categories, date string</span><br><span class=\"line\"></span><br><span class=\"line\">\tappendFlag := false</span><br><span class=\"line\">\tfor &#123;</span><br><span class=\"line\">\t\tline, _, err := reader.ReadLine()</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\tif err == io.EOF &#123;</span><br><span class=\"line\">\t\t\t\tappendPre := make([]byte, 0)</span><br><span class=\"line\">\t\t\t\tappendPre = append(appendPre, &quot;---\\n&quot;...)</span><br><span class=\"line\">\t\t\t\tappendPre = append(appendPre, &quot;title: &quot; + title +&quot;\\n&quot;...)</span><br><span class=\"line\">\t\t\t\tappendPre = append(appendPre, &quot;author: &quot; + author +&quot;\\n&quot;...)</span><br><span class=\"line\">\t\t\t\tappendPre = append(appendPre, &quot;authorLink: http://www.yywang.top\\n&quot;...)</span><br><span class=\"line\">\t\t\t\tappendPre = append(appendPre, &quot;date: &quot; + date +&quot;\\n&quot;...)</span><br><span class=\"line\">\t\t\t\tappendPre = append(appendPre, &quot;lastmod: &quot; + date +&quot;\\n&quot;...)</span><br><span class=\"line\">\t\t\t\tappendPre = append(appendPre, &quot;draft: false\\n&quot;...)</span><br><span class=\"line\">\t\t\t\tappendPre = append(appendPre, &quot;tags: [\\&quot;&quot;+tags+&quot;\\&quot;]\\n&quot;...)</span><br><span class=\"line\">\t\t\t\tappendPre = append(appendPre, &quot;categories: [\\&quot;&quot;+categories+&quot;\\&quot;]\\n&quot;...)</span><br><span class=\"line\">\t\t\t\tappendPre = append(appendPre, &quot;featuredImagePreview: \\n&quot;...)</span><br><span class=\"line\">\t\t\t\tappendPre = append(appendPre, &quot;---\\n&quot;...)</span><br><span class=\"line\">\t\t\t\treturn  append(appendPre, buffer...)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlineStr := string(line[:])</span><br><span class=\"line\">\t\tif strings.EqualFold(lineStr, &quot;---&quot;) &#123;</span><br><span class=\"line\">\t\t\tappendFlag = true</span><br><span class=\"line\">\t\t\tcontinue</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif appendFlag &#123;</span><br><span class=\"line\">\t\t\t// copy</span><br><span class=\"line\">\t\t\tbuffer = append(buffer, line...)</span><br><span class=\"line\">\t\t\tbuffer = append(buffer, &quot;\\n&quot;...)</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\ti := strings.Index(lineStr, &quot;:&quot;)</span><br><span class=\"line\">\t\t\tif i &gt; 0 &#123;</span><br><span class=\"line\">\t\t\t\tk := lineStr[0:i]</span><br><span class=\"line\">\t\t\t\tv := strings.TrimSpace(lineStr[i+1:])</span><br><span class=\"line\">\t\t\t\tswitch k &#123;</span><br><span class=\"line\">\t\t\t\tcase &quot;title&quot;:</span><br><span class=\"line\">\t\t\t\t\ttitle = v</span><br><span class=\"line\">\t\t\t\tcase &quot;author&quot;:</span><br><span class=\"line\">\t\t\t\t\tauthor = v</span><br><span class=\"line\">\t\t\t\tcase &quot;tags&quot;:</span><br><span class=\"line\">\t\t\t\t\ttags = v</span><br><span class=\"line\">\t\t\t\tcase &quot;categories&quot;:</span><br><span class=\"line\">\t\t\t\t\tcategories = v</span><br><span class=\"line\">\t\t\t\tcase &quot;date&quot;:</span><br><span class=\"line\">\t\t\t\t\tdate = transDataFormat(v, &quot;2006-01-02 15:04:05&quot;, &quot;2006-01-02T15:04:05+08:00&quot;)</span><br><span class=\"line\">\t\t\t\tdefault:</span><br><span class=\"line\">\t\t\t\t\tfmt.Println(&quot;error switch &quot; + k)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(&quot;split error &quot; + lineStr)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func getAllFiles(path string) []string &#123;</span><br><span class=\"line\">\tfiles := make([]string, 0)</span><br><span class=\"line\">\terr := filepath.Walk(path, func(path string, f os.FileInfo, err error) error&#123;</span><br><span class=\"line\">\t\tif f.IsDir() &#123;</span><br><span class=\"line\">\t\t\treturn nil</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfiles = append(files, path)</span><br><span class=\"line\">\t\treturn  nil</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tfmt.Printf(&quot;walk file path err info is %v&quot;, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn files</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func transDataFormat(timeStr string, oldFormat string, newFormat string) string &#123;</span><br><span class=\"line\">\tdate, _ := time.Parse(oldFormat, timeStr)</span><br><span class=\"line\">\treturn date.Format(newFormat)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func writeFile(filePath string, content []byte) error &#123;</span><br><span class=\"line\">\tf, err := os.OpenFile(filePath, os.O_WRONLY|os.O_TRUNC, 0600)</span><br><span class=\"line\">\tdefer f.Close()</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\treturn err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twriter := bufio.NewWriter(f)</span><br><span class=\"line\">\t_, err = writer.Write(content)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\treturn err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\terr = writer.Flush()</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tfmt.Printf(&quot;flush error %v&quot;, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn nil</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后将新修改的文件移动到 blog-hugo/content/posts/ 目录下</p>\n<ol start=\"2\">\n<li>将文章中引用的图片移动到 blog-hugo/assets/images/ 目录下</li>\n<li>如果在文章中还引用过其他文章，url会失效，手动修改下或者参考<a href=\"https://liujiacai.net/blog/2020/12/05/hexo-to-hugo/\" target=\"_blank\" rel=\"noopener\">这里，查看文件链接</a>处理</li>\n</ol>\n<p><strong>到这里博客基本上迁移完毕了，附一个初步的效果图，后面还需进一步美化和优化，等上线了再切负载替换hexo</strong></p>\n<p><img src=\"/images/hugodemo.png\" alt=\"hugodemodemo\"></p>\n<h4 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h4><ul>\n<li>打包docker镜像，以docker的方式部署，nginx切换负载</li>\n<li>备份hugo博客的方案</li>\n<li>参考<a href=\"https://lewky.cn/tags/hugo/\" target=\"_blank\" rel=\"noopener\">这里</a>做增强</li>\n<li>换一套头像，大图小图啥的，参考主题中exampleSite里的post介绍，<a href=\"https://realfavicongenerator.net/\" target=\"_blank\" rel=\"noopener\">这个网站生成套图</a></li>\n<li>更换评论系统插件<a href=\"https://waline.js.org/\" target=\"_blank\" rel=\"noopener\">waline</a></li>\n</ul>\n"},{"title":"iptables是个啥","author":"YyWang","date":"2021-07-13T13:16:15.000Z","_content":"## 前言\niptables 是 Linux 中经常使用的防火墙，还记得之前部署 Tomcat 服务到一个 web 服务器需要配置新的 iptables 规则，开放8080端口，否则无法访问自\n己的服务，当时满脑子只想完成任务，网上 copy 命令改改改直接敲，甚至直接粗暴的关闭防火墙 🤐 现在 k8s 中的服务发现以及 service mesh 中的流量劫持\n都使用到了 iptables。so 今天我来还债了\n\n## 概述\niptables其实不是防火墙，真正的防火墙是 netfilter 字面意思就是网络过滤器，可以过滤进出 Linux 网络协议栈的数据包，通过指定各种自定义的规则对进\n出的数据包进行拦截修改等操作，netfilter 在内核空间处于内核态，而 iptables 是对 netfilter 的配置工具，通过 iptables 可以配置 netfilter 的\n过滤规则，iptables 在用户空间处于用户态。这么看 iptables 可以理解成\"控制面\"，netfilter 可以理解成\"数据面\"\n\n## 原理\nnetfilter 在数据包进出 Linux 网络协议栈的不同节点上设有 hooks （可以理解为回调函数），当满足了匹配条件就会出发回调进行后面的操作，hooks 主要\n在 PRE_ROUTING、LOCAL_IN、FORWARD、LOCAL_OUT 和 POST_ROUTING 5个位置上，覆盖了数据包进出 Linux 协议栈的整个生命周期，来整一张图看下这\n5个位置（图中橙色的圆型就是）\n\n![iptables1](/images/iptables1.png)\n\n* PRE_ROUTING 在数据包进入被路由前进入这个节点，这个节点之后会进行路由\n* LOCAL_IN 在数据包被路由之后，判定目的地址是本机，会进入这个节点，这个节点之后会将数据包传递给应用程序\n* FORWARD 在数据包被路由之后，判定目的地址不是本机，会进入这个节点，这个节点之后会重新路由，将数据包传递出去\n* LOCAL_OUT 应用程序发出数据包，还没有路由前，这个节点之后会进行路由\n* POST_ROUTING 在应用程序，或者 FORWARD 发出的数据包路由之后进入这个节点，这个节点后会将数据包发送出去\n\n## iptables 表和链\niptables 有\"四表五链\"来管理数据包的规则和动作\n\n* 五链，对应上图中五个橙色的 hooks，\n  * PREROUTING 对应 PRE_ROUTING hooks\n  * INPUT 对应 LOCAL_IN hooks\n  * FORWARD 对应 FORWARD hooks\n  * OUTPUT 对应 LOCAL_OUT hooks\n  * POSTROUTING 对应 POST_ROUTING hooks\n* 四表，将链上的动作按照不同的类别分成了4张表，优先级依次是 Raw->Mangle->NAT->Filter\n  * Raw，决定数据包是否被状态跟踪机制处理\n  * Mangle，用来修改数据包的 TOS、TTL 配置\n  * NAT，用来修改数据包的 Ip 地址和端口等信息，做网络地址转换（SNAT、DNAT）\n  * Filter，用来过滤数据包，决定数据包的去留，接受或者拒绝\n  \n### 表和链的关系\n表和链属于多对多的关系，\"表中有链，链中有表\"\n\n| | PREROUTING | INPUT | FORWARD | OUTPUT | POSTROUTING |\n|---|---|---|---|---|---|\n|Raw| ✅ | | | ✅ | ✅ |\n|Mangle| ✅ | ✅ | ✅ | ✅ | ✅ |\n|Nat| ✅ | | | ✅ | ✅ |\n|Filter| | ✅ | ✅ | ✅ | |\n\n按链的维度来看，不同的链中包含的表不同，说明每个链的功能不一样，比如 PREROUTING 链只包含 Raw、Mangle、Nat 三个表也就是说只能配置这三个表的动作；\n按表的维度来看，不同的表中的链不是相同的，也就是说表所配置的动作只能在特定的链上，比如说要做 ip 地址转（即 Nat 表）只可以在 PREROUTING、OUTPUT\n、POSTROUTING 三 个链上进行；那么数据包在进入网络协议栈的过程就变成了这样（其中 hooks 换成了链）\n\n![iptables2](/images/iptables2.png)\n\n## 配置\n\n```\niptables [-t 表名] COMMAND [要操作的链名] [匹配规则] -j [目标动作]\n```\n\n* COMMAND\n  * -A ：append 新增加一条规则，该规则增加在原本规则的最后面。不显式指定表默认为filter表\n  * -D ：delete 删除一条规则\n  * -I ：insert 插入一条规则，如果没有指定顺序默认插入成第一条规则\n  * -R ：replace 替换一条规则\n  * -L ：list 查看规则\n  \n* 匹配规则\n  * -p ：指定匹配的协议 tcp、upd、icmp、all\n  * -s ：指定匹配来源 IP 或者网段\n  * -d ：指定匹配目的 IP 或者网段\n  * --sport ：指定匹配源端口 \n  * --dport ：指定匹配目的端口\n\n* 目标动作 ACCEPT、DROP、REJECT、LOG\n\n[这篇文章](https://www.huaweicloud.com/articles/3abf0cf9743f2f582f45e320452596f6.html)最后有些例子可以参考一下\n\n## 参考\n\n* https://xie.infoq.cn/article/b0cfe588251d024d9114c84f3\n* https://cloud.tencent.com/developer/article/1619659\n* https://www.huaweicloud.com/articles/3abf0cf9743f2f582f45e320452596f6.html","source":"_posts/iptables.md","raw":"---\ntitle: iptables是个啥\nauthor: YyWang\ndate: 2021-07-13 21:16:15\ntags: Linux\ncategories: Linux\n---\n## 前言\niptables 是 Linux 中经常使用的防火墙，还记得之前部署 Tomcat 服务到一个 web 服务器需要配置新的 iptables 规则，开放8080端口，否则无法访问自\n己的服务，当时满脑子只想完成任务，网上 copy 命令改改改直接敲，甚至直接粗暴的关闭防火墙 🤐 现在 k8s 中的服务发现以及 service mesh 中的流量劫持\n都使用到了 iptables。so 今天我来还债了\n\n## 概述\niptables其实不是防火墙，真正的防火墙是 netfilter 字面意思就是网络过滤器，可以过滤进出 Linux 网络协议栈的数据包，通过指定各种自定义的规则对进\n出的数据包进行拦截修改等操作，netfilter 在内核空间处于内核态，而 iptables 是对 netfilter 的配置工具，通过 iptables 可以配置 netfilter 的\n过滤规则，iptables 在用户空间处于用户态。这么看 iptables 可以理解成\"控制面\"，netfilter 可以理解成\"数据面\"\n\n## 原理\nnetfilter 在数据包进出 Linux 网络协议栈的不同节点上设有 hooks （可以理解为回调函数），当满足了匹配条件就会出发回调进行后面的操作，hooks 主要\n在 PRE_ROUTING、LOCAL_IN、FORWARD、LOCAL_OUT 和 POST_ROUTING 5个位置上，覆盖了数据包进出 Linux 协议栈的整个生命周期，来整一张图看下这\n5个位置（图中橙色的圆型就是）\n\n![iptables1](/images/iptables1.png)\n\n* PRE_ROUTING 在数据包进入被路由前进入这个节点，这个节点之后会进行路由\n* LOCAL_IN 在数据包被路由之后，判定目的地址是本机，会进入这个节点，这个节点之后会将数据包传递给应用程序\n* FORWARD 在数据包被路由之后，判定目的地址不是本机，会进入这个节点，这个节点之后会重新路由，将数据包传递出去\n* LOCAL_OUT 应用程序发出数据包，还没有路由前，这个节点之后会进行路由\n* POST_ROUTING 在应用程序，或者 FORWARD 发出的数据包路由之后进入这个节点，这个节点后会将数据包发送出去\n\n## iptables 表和链\niptables 有\"四表五链\"来管理数据包的规则和动作\n\n* 五链，对应上图中五个橙色的 hooks，\n  * PREROUTING 对应 PRE_ROUTING hooks\n  * INPUT 对应 LOCAL_IN hooks\n  * FORWARD 对应 FORWARD hooks\n  * OUTPUT 对应 LOCAL_OUT hooks\n  * POSTROUTING 对应 POST_ROUTING hooks\n* 四表，将链上的动作按照不同的类别分成了4张表，优先级依次是 Raw->Mangle->NAT->Filter\n  * Raw，决定数据包是否被状态跟踪机制处理\n  * Mangle，用来修改数据包的 TOS、TTL 配置\n  * NAT，用来修改数据包的 Ip 地址和端口等信息，做网络地址转换（SNAT、DNAT）\n  * Filter，用来过滤数据包，决定数据包的去留，接受或者拒绝\n  \n### 表和链的关系\n表和链属于多对多的关系，\"表中有链，链中有表\"\n\n| | PREROUTING | INPUT | FORWARD | OUTPUT | POSTROUTING |\n|---|---|---|---|---|---|\n|Raw| ✅ | | | ✅ | ✅ |\n|Mangle| ✅ | ✅ | ✅ | ✅ | ✅ |\n|Nat| ✅ | | | ✅ | ✅ |\n|Filter| | ✅ | ✅ | ✅ | |\n\n按链的维度来看，不同的链中包含的表不同，说明每个链的功能不一样，比如 PREROUTING 链只包含 Raw、Mangle、Nat 三个表也就是说只能配置这三个表的动作；\n按表的维度来看，不同的表中的链不是相同的，也就是说表所配置的动作只能在特定的链上，比如说要做 ip 地址转（即 Nat 表）只可以在 PREROUTING、OUTPUT\n、POSTROUTING 三 个链上进行；那么数据包在进入网络协议栈的过程就变成了这样（其中 hooks 换成了链）\n\n![iptables2](/images/iptables2.png)\n\n## 配置\n\n```\niptables [-t 表名] COMMAND [要操作的链名] [匹配规则] -j [目标动作]\n```\n\n* COMMAND\n  * -A ：append 新增加一条规则，该规则增加在原本规则的最后面。不显式指定表默认为filter表\n  * -D ：delete 删除一条规则\n  * -I ：insert 插入一条规则，如果没有指定顺序默认插入成第一条规则\n  * -R ：replace 替换一条规则\n  * -L ：list 查看规则\n  \n* 匹配规则\n  * -p ：指定匹配的协议 tcp、upd、icmp、all\n  * -s ：指定匹配来源 IP 或者网段\n  * -d ：指定匹配目的 IP 或者网段\n  * --sport ：指定匹配源端口 \n  * --dport ：指定匹配目的端口\n\n* 目标动作 ACCEPT、DROP、REJECT、LOG\n\n[这篇文章](https://www.huaweicloud.com/articles/3abf0cf9743f2f582f45e320452596f6.html)最后有些例子可以参考一下\n\n## 参考\n\n* https://xie.infoq.cn/article/b0cfe588251d024d9114c84f3\n* https://cloud.tencent.com/developer/article/1619659\n* https://www.huaweicloud.com/articles/3abf0cf9743f2f582f45e320452596f6.html","slug":"iptables","published":1,"updated":"2021-07-13T12:25:17.332Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj7h002j81fyrxfex49o","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>iptables 是 Linux 中经常使用的防火墙，还记得之前部署 Tomcat 服务到一个 web 服务器需要配置新的 iptables 规则，开放8080端口，否则无法访问自<br>己的服务，当时满脑子只想完成任务，网上 copy 命令改改改直接敲，甚至直接粗暴的关闭防火墙 🤐 现在 k8s 中的服务发现以及 service mesh 中的流量劫持<br>都使用到了 iptables。so 今天我来还债了</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>iptables其实不是防火墙，真正的防火墙是 netfilter 字面意思就是网络过滤器，可以过滤进出 Linux 网络协议栈的数据包，通过指定各种自定义的规则对进<br>出的数据包进行拦截修改等操作，netfilter 在内核空间处于内核态，而 iptables 是对 netfilter 的配置工具，通过 iptables 可以配置 netfilter 的<br>过滤规则，iptables 在用户空间处于用户态。这么看 iptables 可以理解成”控制面”，netfilter 可以理解成”数据面”</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>netfilter 在数据包进出 Linux 网络协议栈的不同节点上设有 hooks （可以理解为回调函数），当满足了匹配条件就会出发回调进行后面的操作，hooks 主要<br>在 PRE_ROUTING、LOCAL_IN、FORWARD、LOCAL_OUT 和 POST_ROUTING 5个位置上，覆盖了数据包进出 Linux 协议栈的整个生命周期，来整一张图看下这<br>5个位置（图中橙色的圆型就是）</p>\n<p><img src=\"/images/iptables1.png\" alt=\"iptables1\"></p>\n<ul>\n<li>PRE_ROUTING 在数据包进入被路由前进入这个节点，这个节点之后会进行路由</li>\n<li>LOCAL_IN 在数据包被路由之后，判定目的地址是本机，会进入这个节点，这个节点之后会将数据包传递给应用程序</li>\n<li>FORWARD 在数据包被路由之后，判定目的地址不是本机，会进入这个节点，这个节点之后会重新路由，将数据包传递出去</li>\n<li>LOCAL_OUT 应用程序发出数据包，还没有路由前，这个节点之后会进行路由</li>\n<li>POST_ROUTING 在应用程序，或者 FORWARD 发出的数据包路由之后进入这个节点，这个节点后会将数据包发送出去</li>\n</ul>\n<h2 id=\"iptables-表和链\"><a href=\"#iptables-表和链\" class=\"headerlink\" title=\"iptables 表和链\"></a>iptables 表和链</h2><p>iptables 有”四表五链”来管理数据包的规则和动作</p>\n<ul>\n<li>五链，对应上图中五个橙色的 hooks，<ul>\n<li>PREROUTING 对应 PRE_ROUTING hooks</li>\n<li>INPUT 对应 LOCAL_IN hooks</li>\n<li>FORWARD 对应 FORWARD hooks</li>\n<li>OUTPUT 对应 LOCAL_OUT hooks</li>\n<li>POSTROUTING 对应 POST_ROUTING hooks</li>\n</ul>\n</li>\n<li>四表，将链上的动作按照不同的类别分成了4张表，优先级依次是 Raw-&gt;Mangle-&gt;NAT-&gt;Filter<ul>\n<li>Raw，决定数据包是否被状态跟踪机制处理</li>\n<li>Mangle，用来修改数据包的 TOS、TTL 配置</li>\n<li>NAT，用来修改数据包的 Ip 地址和端口等信息，做网络地址转换（SNAT、DNAT）</li>\n<li>Filter，用来过滤数据包，决定数据包的去留，接受或者拒绝</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"表和链的关系\"><a href=\"#表和链的关系\" class=\"headerlink\" title=\"表和链的关系\"></a>表和链的关系</h3><p>表和链属于多对多的关系，”表中有链，链中有表”</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>PREROUTING</th>\n<th>INPUT</th>\n<th>FORWARD</th>\n<th>OUTPUT</th>\n<th>POSTROUTING</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Raw</td>\n<td>✅</td>\n<td></td>\n<td></td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>Mangle</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>Nat</td>\n<td>✅</td>\n<td></td>\n<td></td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>Filter</td>\n<td></td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n</tbody>\n</table>\n<p>按链的维度来看，不同的链中包含的表不同，说明每个链的功能不一样，比如 PREROUTING 链只包含 Raw、Mangle、Nat 三个表也就是说只能配置这三个表的动作；<br>按表的维度来看，不同的表中的链不是相同的，也就是说表所配置的动作只能在特定的链上，比如说要做 ip 地址转（即 Nat 表）只可以在 PREROUTING、OUTPUT<br>、POSTROUTING 三 个链上进行；那么数据包在进入网络协议栈的过程就变成了这样（其中 hooks 换成了链）</p>\n<p><img src=\"/images/iptables2.png\" alt=\"iptables2\"></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables [-t 表名] COMMAND [要操作的链名] [匹配规则] -j [目标动作]</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>COMMAND</p>\n<ul>\n<li>-A ：append 新增加一条规则，该规则增加在原本规则的最后面。不显式指定表默认为filter表</li>\n<li>-D ：delete 删除一条规则</li>\n<li>-I ：insert 插入一条规则，如果没有指定顺序默认插入成第一条规则</li>\n<li>-R ：replace 替换一条规则</li>\n<li>-L ：list 查看规则</li>\n</ul>\n</li>\n<li><p>匹配规则</p>\n<ul>\n<li>-p ：指定匹配的协议 tcp、upd、icmp、all</li>\n<li>-s ：指定匹配来源 IP 或者网段</li>\n<li>-d ：指定匹配目的 IP 或者网段</li>\n<li>–sport ：指定匹配源端口 </li>\n<li>–dport ：指定匹配目的端口</li>\n</ul>\n</li>\n<li><p>目标动作 ACCEPT、DROP、REJECT、LOG</p>\n</li>\n</ul>\n<p><a href=\"https://www.huaweicloud.com/articles/3abf0cf9743f2f582f45e320452596f6.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a>最后有些例子可以参考一下</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://xie.infoq.cn/article/b0cfe588251d024d9114c84f3\" target=\"_blank\" rel=\"noopener\">https://xie.infoq.cn/article/b0cfe588251d024d9114c84f3</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1619659\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/developer/article/1619659</a></li>\n<li><a href=\"https://www.huaweicloud.com/articles/3abf0cf9743f2f582f45e320452596f6.html\" target=\"_blank\" rel=\"noopener\">https://www.huaweicloud.com/articles/3abf0cf9743f2f582f45e320452596f6.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>iptables 是 Linux 中经常使用的防火墙，还记得之前部署 Tomcat 服务到一个 web 服务器需要配置新的 iptables 规则，开放8080端口，否则无法访问自<br>己的服务，当时满脑子只想完成任务，网上 copy 命令改改改直接敲，甚至直接粗暴的关闭防火墙 🤐 现在 k8s 中的服务发现以及 service mesh 中的流量劫持<br>都使用到了 iptables。so 今天我来还债了</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>iptables其实不是防火墙，真正的防火墙是 netfilter 字面意思就是网络过滤器，可以过滤进出 Linux 网络协议栈的数据包，通过指定各种自定义的规则对进<br>出的数据包进行拦截修改等操作，netfilter 在内核空间处于内核态，而 iptables 是对 netfilter 的配置工具，通过 iptables 可以配置 netfilter 的<br>过滤规则，iptables 在用户空间处于用户态。这么看 iptables 可以理解成”控制面”，netfilter 可以理解成”数据面”</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>netfilter 在数据包进出 Linux 网络协议栈的不同节点上设有 hooks （可以理解为回调函数），当满足了匹配条件就会出发回调进行后面的操作，hooks 主要<br>在 PRE_ROUTING、LOCAL_IN、FORWARD、LOCAL_OUT 和 POST_ROUTING 5个位置上，覆盖了数据包进出 Linux 协议栈的整个生命周期，来整一张图看下这<br>5个位置（图中橙色的圆型就是）</p>\n<p><img src=\"/images/iptables1.png\" alt=\"iptables1\"></p>\n<ul>\n<li>PRE_ROUTING 在数据包进入被路由前进入这个节点，这个节点之后会进行路由</li>\n<li>LOCAL_IN 在数据包被路由之后，判定目的地址是本机，会进入这个节点，这个节点之后会将数据包传递给应用程序</li>\n<li>FORWARD 在数据包被路由之后，判定目的地址不是本机，会进入这个节点，这个节点之后会重新路由，将数据包传递出去</li>\n<li>LOCAL_OUT 应用程序发出数据包，还没有路由前，这个节点之后会进行路由</li>\n<li>POST_ROUTING 在应用程序，或者 FORWARD 发出的数据包路由之后进入这个节点，这个节点后会将数据包发送出去</li>\n</ul>\n<h2 id=\"iptables-表和链\"><a href=\"#iptables-表和链\" class=\"headerlink\" title=\"iptables 表和链\"></a>iptables 表和链</h2><p>iptables 有”四表五链”来管理数据包的规则和动作</p>\n<ul>\n<li>五链，对应上图中五个橙色的 hooks，<ul>\n<li>PREROUTING 对应 PRE_ROUTING hooks</li>\n<li>INPUT 对应 LOCAL_IN hooks</li>\n<li>FORWARD 对应 FORWARD hooks</li>\n<li>OUTPUT 对应 LOCAL_OUT hooks</li>\n<li>POSTROUTING 对应 POST_ROUTING hooks</li>\n</ul>\n</li>\n<li>四表，将链上的动作按照不同的类别分成了4张表，优先级依次是 Raw-&gt;Mangle-&gt;NAT-&gt;Filter<ul>\n<li>Raw，决定数据包是否被状态跟踪机制处理</li>\n<li>Mangle，用来修改数据包的 TOS、TTL 配置</li>\n<li>NAT，用来修改数据包的 Ip 地址和端口等信息，做网络地址转换（SNAT、DNAT）</li>\n<li>Filter，用来过滤数据包，决定数据包的去留，接受或者拒绝</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"表和链的关系\"><a href=\"#表和链的关系\" class=\"headerlink\" title=\"表和链的关系\"></a>表和链的关系</h3><p>表和链属于多对多的关系，”表中有链，链中有表”</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>PREROUTING</th>\n<th>INPUT</th>\n<th>FORWARD</th>\n<th>OUTPUT</th>\n<th>POSTROUTING</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Raw</td>\n<td>✅</td>\n<td></td>\n<td></td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>Mangle</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>Nat</td>\n<td>✅</td>\n<td></td>\n<td></td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>Filter</td>\n<td></td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n</tbody>\n</table>\n<p>按链的维度来看，不同的链中包含的表不同，说明每个链的功能不一样，比如 PREROUTING 链只包含 Raw、Mangle、Nat 三个表也就是说只能配置这三个表的动作；<br>按表的维度来看，不同的表中的链不是相同的，也就是说表所配置的动作只能在特定的链上，比如说要做 ip 地址转（即 Nat 表）只可以在 PREROUTING、OUTPUT<br>、POSTROUTING 三 个链上进行；那么数据包在进入网络协议栈的过程就变成了这样（其中 hooks 换成了链）</p>\n<p><img src=\"/images/iptables2.png\" alt=\"iptables2\"></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables [-t 表名] COMMAND [要操作的链名] [匹配规则] -j [目标动作]</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>COMMAND</p>\n<ul>\n<li>-A ：append 新增加一条规则，该规则增加在原本规则的最后面。不显式指定表默认为filter表</li>\n<li>-D ：delete 删除一条规则</li>\n<li>-I ：insert 插入一条规则，如果没有指定顺序默认插入成第一条规则</li>\n<li>-R ：replace 替换一条规则</li>\n<li>-L ：list 查看规则</li>\n</ul>\n</li>\n<li><p>匹配规则</p>\n<ul>\n<li>-p ：指定匹配的协议 tcp、upd、icmp、all</li>\n<li>-s ：指定匹配来源 IP 或者网段</li>\n<li>-d ：指定匹配目的 IP 或者网段</li>\n<li>–sport ：指定匹配源端口 </li>\n<li>–dport ：指定匹配目的端口</li>\n</ul>\n</li>\n<li><p>目标动作 ACCEPT、DROP、REJECT、LOG</p>\n</li>\n</ul>\n<p><a href=\"https://www.huaweicloud.com/articles/3abf0cf9743f2f582f45e320452596f6.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a>最后有些例子可以参考一下</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://xie.infoq.cn/article/b0cfe588251d024d9114c84f3\" target=\"_blank\" rel=\"noopener\">https://xie.infoq.cn/article/b0cfe588251d024d9114c84f3</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1619659\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/developer/article/1619659</a></li>\n<li><a href=\"https://www.huaweicloud.com/articles/3abf0cf9743f2f582f45e320452596f6.html\" target=\"_blank\" rel=\"noopener\">https://www.huaweicloud.com/articles/3abf0cf9743f2f582f45e320452596f6.html</a></li>\n</ul>\n"},{"title":"一张图看懂CPU","author":"YyWang","date":"2020-03-20T07:38:43.000Z","_content":"废话不说，直接上图\n\n![upload successful](/images/一张图看懂CPU.png)\n\nCPU可以拆解为三个部分\n\n1. 控制单元 理解为软件设计中的controller，控制数据的流向以及执行计算机指令\n2. 数据单元 用做内存的缓存，存放CPU运算的中间结果\n3. 运算单元 负责运算，例如加、减、移位这样\n\n简单来说CPU的工作过程是这样的：获取进程中的的指令（程序代码编译运行后的二进制），然后执行这些指令，在此过程中控制单元执行的一些指令，从内存中加载数数据到数据单元，指挥运算单元进行运算，将结果返回数据单元，最后将结果从数据单元写会内存\n\n往细了说\n\n* 控制单元中有一个指令指针寄存器和一个指令寄存器，控制单元通过下一条指令在内存中的地址，找到该指令并存入指令寄存器；控制单元中还有一个指令起始寄存器和一个数据起始寄存器，这就是进程切换中上下文的概念了，进程1切换到进程2，将进程1的状态分别保存在指令起始地址寄存器（进程1执行到了哪一行代码）和数据起始地址寄存器（进程1数据读到了哪一行）；\n\n再往细了说\n\n* 先看数据单元，数据寄存器用来保存数据段（内存中分配给进程存放变量的区域，代码段指内存中存放运行代码的区域）的偏移量，数据段的起始地址在控制单元的寄存器中，起始地址+偏移量 就可以得出读出的数据；\n* 就以x86架构的经典处理器8086来说，数据寄存器有8个16位通用寄存器 AX、BX、CX、DX、SP、BP、SI、DI ，其中前4个寄存器分别可以单独拆分为2个8位的寄存器来使用，这就可以获取短的数据或者长的数据，很灵活；\n* 再看控制单元，CS和DS分别保存代码段的起始地址（指令的起始地址）和数据段的起始地址，C为code，D为data；SS是栈寄存器，存放函数的调用关系；IP寄存器存放下一条指令的地址\n* 8086的寄存器都是16位的，可地址总线是20位的，所以说在内存中寻址的时候起始地址需要左移4位再加偏移量得到最终的地址\n\n再再往细了说\n\n* 32位处理器的数据单元将原来16位的寄存器扩展到32位，并且为了兼容保持了原始16位寄存器的结构；控制单元中的段寄存器（CS,DS,SS,ES）变化较大，其中CS,DS,SS,ES还是16位，只是不在存起始地址，真正的地址在后面16位中的段描述符缓存器里，而端寄存器中存的东西叫做选择子，来选择段描述符缓存器中的地址信息\n\n再再再往细了说呢\n\n* 没有了，哈哈，我就学习到这里了\n","source":"_posts/一张图看懂CPU.md","raw":"title: 一张图看懂CPU\nauthor: YyWang\ntags: Linux\ncategories: Linux\ndate: 2020-03-20 15:38:43\n---\n废话不说，直接上图\n\n![upload successful](/images/一张图看懂CPU.png)\n\nCPU可以拆解为三个部分\n\n1. 控制单元 理解为软件设计中的controller，控制数据的流向以及执行计算机指令\n2. 数据单元 用做内存的缓存，存放CPU运算的中间结果\n3. 运算单元 负责运算，例如加、减、移位这样\n\n简单来说CPU的工作过程是这样的：获取进程中的的指令（程序代码编译运行后的二进制），然后执行这些指令，在此过程中控制单元执行的一些指令，从内存中加载数数据到数据单元，指挥运算单元进行运算，将结果返回数据单元，最后将结果从数据单元写会内存\n\n往细了说\n\n* 控制单元中有一个指令指针寄存器和一个指令寄存器，控制单元通过下一条指令在内存中的地址，找到该指令并存入指令寄存器；控制单元中还有一个指令起始寄存器和一个数据起始寄存器，这就是进程切换中上下文的概念了，进程1切换到进程2，将进程1的状态分别保存在指令起始地址寄存器（进程1执行到了哪一行代码）和数据起始地址寄存器（进程1数据读到了哪一行）；\n\n再往细了说\n\n* 先看数据单元，数据寄存器用来保存数据段（内存中分配给进程存放变量的区域，代码段指内存中存放运行代码的区域）的偏移量，数据段的起始地址在控制单元的寄存器中，起始地址+偏移量 就可以得出读出的数据；\n* 就以x86架构的经典处理器8086来说，数据寄存器有8个16位通用寄存器 AX、BX、CX、DX、SP、BP、SI、DI ，其中前4个寄存器分别可以单独拆分为2个8位的寄存器来使用，这就可以获取短的数据或者长的数据，很灵活；\n* 再看控制单元，CS和DS分别保存代码段的起始地址（指令的起始地址）和数据段的起始地址，C为code，D为data；SS是栈寄存器，存放函数的调用关系；IP寄存器存放下一条指令的地址\n* 8086的寄存器都是16位的，可地址总线是20位的，所以说在内存中寻址的时候起始地址需要左移4位再加偏移量得到最终的地址\n\n再再往细了说\n\n* 32位处理器的数据单元将原来16位的寄存器扩展到32位，并且为了兼容保持了原始16位寄存器的结构；控制单元中的段寄存器（CS,DS,SS,ES）变化较大，其中CS,DS,SS,ES还是16位，只是不在存起始地址，真正的地址在后面16位中的段描述符缓存器里，而端寄存器中存的东西叫做选择子，来选择段描述符缓存器中的地址信息\n\n再再再往细了说呢\n\n* 没有了，哈哈，我就学习到这里了\n","slug":"一张图看懂CPU","published":1,"updated":"2021-07-13T12:27:08.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj7i002m81fyj2hqohl0","content":"<p>废话不说，直接上图</p>\n<p><img src=\"/images/一张图看懂CPU.png\" alt=\"upload successful\"></p>\n<p>CPU可以拆解为三个部分</p>\n<ol>\n<li>控制单元 理解为软件设计中的controller，控制数据的流向以及执行计算机指令</li>\n<li>数据单元 用做内存的缓存，存放CPU运算的中间结果</li>\n<li>运算单元 负责运算，例如加、减、移位这样</li>\n</ol>\n<p>简单来说CPU的工作过程是这样的：获取进程中的的指令（程序代码编译运行后的二进制），然后执行这些指令，在此过程中控制单元执行的一些指令，从内存中加载数数据到数据单元，指挥运算单元进行运算，将结果返回数据单元，最后将结果从数据单元写会内存</p>\n<p>往细了说</p>\n<ul>\n<li>控制单元中有一个指令指针寄存器和一个指令寄存器，控制单元通过下一条指令在内存中的地址，找到该指令并存入指令寄存器；控制单元中还有一个指令起始寄存器和一个数据起始寄存器，这就是进程切换中上下文的概念了，进程1切换到进程2，将进程1的状态分别保存在指令起始地址寄存器（进程1执行到了哪一行代码）和数据起始地址寄存器（进程1数据读到了哪一行）；</li>\n</ul>\n<p>再往细了说</p>\n<ul>\n<li>先看数据单元，数据寄存器用来保存数据段（内存中分配给进程存放变量的区域，代码段指内存中存放运行代码的区域）的偏移量，数据段的起始地址在控制单元的寄存器中，起始地址+偏移量 就可以得出读出的数据；</li>\n<li>就以x86架构的经典处理器8086来说，数据寄存器有8个16位通用寄存器 AX、BX、CX、DX、SP、BP、SI、DI ，其中前4个寄存器分别可以单独拆分为2个8位的寄存器来使用，这就可以获取短的数据或者长的数据，很灵活；</li>\n<li>再看控制单元，CS和DS分别保存代码段的起始地址（指令的起始地址）和数据段的起始地址，C为code，D为data；SS是栈寄存器，存放函数的调用关系；IP寄存器存放下一条指令的地址</li>\n<li>8086的寄存器都是16位的，可地址总线是20位的，所以说在内存中寻址的时候起始地址需要左移4位再加偏移量得到最终的地址</li>\n</ul>\n<p>再再往细了说</p>\n<ul>\n<li>32位处理器的数据单元将原来16位的寄存器扩展到32位，并且为了兼容保持了原始16位寄存器的结构；控制单元中的段寄存器（CS,DS,SS,ES）变化较大，其中CS,DS,SS,ES还是16位，只是不在存起始地址，真正的地址在后面16位中的段描述符缓存器里，而端寄存器中存的东西叫做选择子，来选择段描述符缓存器中的地址信息</li>\n</ul>\n<p>再再再往细了说呢</p>\n<ul>\n<li>没有了，哈哈，我就学习到这里了</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>废话不说，直接上图</p>\n<p><img src=\"/images/一张图看懂CPU.png\" alt=\"upload successful\"></p>\n<p>CPU可以拆解为三个部分</p>\n<ol>\n<li>控制单元 理解为软件设计中的controller，控制数据的流向以及执行计算机指令</li>\n<li>数据单元 用做内存的缓存，存放CPU运算的中间结果</li>\n<li>运算单元 负责运算，例如加、减、移位这样</li>\n</ol>\n<p>简单来说CPU的工作过程是这样的：获取进程中的的指令（程序代码编译运行后的二进制），然后执行这些指令，在此过程中控制单元执行的一些指令，从内存中加载数数据到数据单元，指挥运算单元进行运算，将结果返回数据单元，最后将结果从数据单元写会内存</p>\n<p>往细了说</p>\n<ul>\n<li>控制单元中有一个指令指针寄存器和一个指令寄存器，控制单元通过下一条指令在内存中的地址，找到该指令并存入指令寄存器；控制单元中还有一个指令起始寄存器和一个数据起始寄存器，这就是进程切换中上下文的概念了，进程1切换到进程2，将进程1的状态分别保存在指令起始地址寄存器（进程1执行到了哪一行代码）和数据起始地址寄存器（进程1数据读到了哪一行）；</li>\n</ul>\n<p>再往细了说</p>\n<ul>\n<li>先看数据单元，数据寄存器用来保存数据段（内存中分配给进程存放变量的区域，代码段指内存中存放运行代码的区域）的偏移量，数据段的起始地址在控制单元的寄存器中，起始地址+偏移量 就可以得出读出的数据；</li>\n<li>就以x86架构的经典处理器8086来说，数据寄存器有8个16位通用寄存器 AX、BX、CX、DX、SP、BP、SI、DI ，其中前4个寄存器分别可以单独拆分为2个8位的寄存器来使用，这就可以获取短的数据或者长的数据，很灵活；</li>\n<li>再看控制单元，CS和DS分别保存代码段的起始地址（指令的起始地址）和数据段的起始地址，C为code，D为data；SS是栈寄存器，存放函数的调用关系；IP寄存器存放下一条指令的地址</li>\n<li>8086的寄存器都是16位的，可地址总线是20位的，所以说在内存中寻址的时候起始地址需要左移4位再加偏移量得到最终的地址</li>\n</ul>\n<p>再再往细了说</p>\n<ul>\n<li>32位处理器的数据单元将原来16位的寄存器扩展到32位，并且为了兼容保持了原始16位寄存器的结构；控制单元中的段寄存器（CS,DS,SS,ES）变化较大，其中CS,DS,SS,ES还是16位，只是不在存起始地址，真正的地址在后面16位中的段描述符缓存器里，而端寄存器中存的东西叫做选择子，来选择段描述符缓存器中的地址信息</li>\n</ul>\n<p>再再再往细了说呢</p>\n<ul>\n<li>没有了，哈哈，我就学习到这里了</li>\n</ul>\n"},{"title":"一年菜鸡带你看微服务","author":"YyWang","date":"2020-06-25T08:36:16.000Z","_content":"\n工作快一年了，我从一个刚入职时候的小白变成了现在有一年经验的小白,在我这一年的工作中修炼自己，现在可以说是把自己的一条腿抬过了微服务的门槛，在这个位置看到了一下东西，把我的理解记录分享一下。\n\n## 前言\n随着历史进程的发展，我们的业务量也愈发膨胀，系统的也从原来的单体架构，逐渐演化成微服务架构，将重复的业务逻辑抽象成基础的服务，这样做不仅仅可以将业务解耦，还通过将一个大的系统拆分成服务粒度的子系统，各个子系统单独开发编译测试上线，大大提高了开发的效率，加快了系统迭代的速度。根据我的理解，微服务框架包括RPC框架和注册中心两个部分，下面就来分别介绍一下\n\n### 注册中心\n微服务框架是用来进行远程调用，涉及到远程调用就会有服务的提供方（provider）和调用方（consumer），注册中心的工作就是让他们彼此认识，即服务注册和服务发现，除此之外注册中心还负责将对方状态的变化通知到另一方，配置下发等功能，主要有CP和AP两种选型的注册中心\n\n* CP 强一致性 Zookeeper、etcd ...\n\t* 用Zookeeper举例来说，发布服务就会创建一个目录，在该目录下维护服务提供方和调用方的信息，通过zk本身的watch机制来观察服务状态变化\n\t* 缺点是当服务规模很大时，zk需要数据同步的时间变长，期间服务不可用，也就是选择CP会出现的问题；数据同步的请求量大很可能将leader打挂（比如说我了解到曾经有服务大规模扩容，为了保证顺序所有follower将写请求发送给leader，大量写请求导致leader宕机，重新选择leader期间服务不可用，新的leader瞬间又被打挂）\n* AP 弱一致性 消息总线型\n\t* 服务注册和订阅的数据全量保存在一个存储介质中，注册中心从存储介质中获取的数据缓存在内存中，通过消息总线做数据同步（推拉结合，用版本号保证消息的顺序性）\n\t* 服务调用方从注册中心获取数据保存在调用方的内存中，同样采用推拉结合，保证最终一致性；\n\t\t* 推 callback机制，服务调用方在生成代理的目标对象之前会向注册中心订阅配置，订阅的时候会将callback序列化发送给注册中心，注册中心收到带有callback参数的请求为callback创建代理对象，相当于是一个反向的RPC调用（服务提供方向服务调用方发送请求复用已有的tcp连接）\n\t\t* 拉 心跳，服务调用方通常会向注册中心发送心跳来告知自己的状态，发心跳的同时拉取需要更新的数据到内存中\n\n### RPC框架\nRPC框架用于服务之间的通信，例如Dubbo、SpringCloud、gRPC，通过不同的协议完成服务之间的调用；除了最基本的通信以外还包括服务治理策和流量控制的策略，服务监控和追踪，等其他特性\n\n#### 服务治理&流量控制\n\n* 服务管理\n\t* 服务节点的新增删除；分组，动态分组的设置与取消；不同维度的上下线\n* 路由策略\n\t* 调用者将请求路由至固定的一个或者多个服务提供方的节点；用于测试，或者灰度发布\n* 负载均衡\n\t* 将服务调用方的请求均匀的发送给选择到的服务提供方节点；随机、加权随机、轮询、加权轮询、最少活跃、一致性哈希，之前分析过不同的策略实现，移步[这里](http://yywang.top/2020/03/27/%E6%8F%AD%E7%A7%98%E4%BA%AC%E4%B8%9C%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95/)查看\n* 容错策略(集群策略)\n\t* failover 失败自动切换不同的服务提供方进行重试 （业务错误重试和安全重试？）\n\t* failfast 快速失败，失败\n\t* failsafe 失败安全，出现异常直接忽略，用于记录审计日志\n\t* broadcast 广播调用，失败的跳过\n\t* pinpoint 点对点调用\n* 限流 用于保护服务提供方（按APP，接口，分组，IP，方法不同的维度）在服务提供方和调用方都可以实现限流的逻辑\n\t* 在服务提供方的限流逻辑只是针对于单个容器或者物理机，服务提供方只需处理小于最大限流值的请求即可，不需要关心其他的服务节点，几乎没有性能的损耗，具体的限流算法之前写过一篇限流算法的[介绍](http://yywang.top/2020/05/14/get%E9%99%90%E6%B5%81%E5%A7%BF%E5%8A%BF/#more)\n\t* 在服务调用方做限流逻辑可针对整个集群的维度，一般是先请求集中式的服务来判断本次请求是否超过限流值，多了一次rpc请求，会影响性能，在京东微服务框架中，限流逻辑在服务调用方有monitor和counter两种实现方式；monitor服务，对es中的监控日志进行统计异步判断是否超过限流值，因为是异步请求不影响性能，但限流的实时性无法保证不完全精准，目前这种方式已经废弃；counter服务，通过访问缓存数据库实时统计请求，判断是否超过限流值，精度准确，会影响性能；\n* 熔断，用于保护服务调用方\n\t* 防止服务调用方依赖下游服务异常，挂起大量请求压垮容器，比如服务调用方依赖下游的服务，由于下游的服务异常导致短时间内无法收到响应而一直挂起，如果挂起的请求过大可能会使服务不可用，熔断策略可以快速返回失败从而保护服务不被打挂掉\n\t* 熔断器（打开，半打开，关闭三种状态；服务调用的失败率高于某一阈值，新的请求直接返回失败不进行处理，进入半打开状态；半打开状态一段时间后，开始处理新的请求，如果失败率仍然高于阈值，则进入关闭状态否则进入打开状态）\n* 分组\n\t* 业务流量隔离，将核心业务与其他业务隔离开来\n\t* 控制同机房调用，不同的机房设置不同的分组，通过分组来实现相同机房的服务以及互相调用\n\t* 动态分组；可以用来流量切换；可以应对突发的流量激增，分组中预留的容器依然不能顶住流量，可以借用其他分组中容器来分担一部分流量\n* 流量回放；服务调用方异步存储请求和响应，用来测试\n\n#### 服务监控和追踪\n用来查看请求量（TPS，实时和历史数据）、响应时间\n\n* 服务监控 数据采集方式 a)通过服务主动上报，将日志数据发送到日志节点 b)通过代理收集，将日志数据保存到本地，代理解析本地日志（sidecar）\n* 服务追踪 整条链路用TraceId标记，其中经过的每个服务节点都有不同的SpanId，最终通过对数据结构的解析绘制链路图\n\n#### 其他特性\n* 健康检查，通过发送心跳报告节点的状态\n  * 比如在京东微服务框架中调用方隔30s向内存中的服务提供方列表发送心跳（探活），探活不同结果将列表分成不同的状态（健康、亚健康、死亡），调用方每次从健康节点的集合中选择一个发起调用；亚健康状态只发心跳不发请求，当心跳恢复移至健康节点，健康->亚健康（连续6次心跳失败，异常心跳可重试两次，三次都失败则当前心跳失败），连续60次心跳失败加入重连的集合中，10s重连一次\n  * 服务提供方和服务调用方都会想注册中心发送心跳报告状态，30s，服务提供方连续8小时没有向注册中心发送心跳会删除\n* 优雅启停\n\t* 停止；拒绝新的请求，返回一个正在关闭的异常，调用方安全重试->在超时时间范围内处理完已经接受的请求，时间范围以外的返回异常->开始关闭动作释放资源\n\t* 启动；启动预热，随着启动时间的增加逐步增加流量，定时动态修改负载均衡策略的权重；提前加载缓存数据；注册之前模拟调用逻辑保证服务可用->延迟暴露，待所有的服务完全启动完再想注册中心注册服务\n* 泛化调用；在没有接口和API的情况下发起调用，将服务提供方的接口名，分组，方法名，参数发送给服务提供方，随后根据信息通过反射调用本地方法（1.测试平台，无需修改配置重启再发起调用；2.统一网关，无需引入jar包）\n* 安全问题；服务调用方通过引入jar包的方式来发起调用，可能会发生在服务提供方不知情的情况下发起调用，成为压垮服务的最后一根稻草\n\t* 服务的提供方和调用方商量一个token，服务提供方收到请求在filter中校验隐式传参的的token判断是否通行\n\t* 在京东微服务框架中还可以再服务治理平台中开启APP调用，只有申请了APP调用被服务提供方审核之后才能从注册中心中获取服务列表\n\n#### 实现原理\n将远程调用的过程通过动态代理封装起来，与业务逻辑解耦，使用者可以专心于业务逻辑而不必关心RPC调用的过程；\n\n* 服务提供方启动\n\t* 与注册中心建立连接，订阅全局配置（远程callback机制，发送请求将callback序列化发送出去，接收方对callback进行动态代理回调发送方）\n\t* 开启并暴露服务的端口，向注册中心注册\n* 服务调用方启动\n\t* 与注册中心建立连接，订阅全局配置\n\t* 创建动态代理对象，构造执行链 filter chain（内置的filter->自定义的filter->最后的filter根据配置生成路由，负载均衡策略的逻辑）注入到代理对象中\n\t* 向注册中心订阅服务列表\n* 调用方发起调用\n\t* 调用前首先运行执行链，最后的filter过滤出服务提供方节点（本地调用->路由策略->黑白名单->负载均衡）\n\t* 序列化请求的参数，封装协议报文，根据配置的集群容错策略通过netty框架向服务提供方发送请求，\n* 服务方处理请求\n\t* 接收到请求首先适配协议，根据协议和序列化、压缩的方式解析请求\n\t* 运行执行链，最后的filter会根据接口名、方法和参数信息通过反射调用本地方法，最后将接口返回给调用方，调用方进行反序列化得到响应结果\n\n## Service Mesh 服务网格\n微服务发展到今天一些弊端也逐渐显露出来，最大的痛点就是业务入侵严重，使用者通过引入jar包使用微服务框架，如果要增加新的功能点或者修复一个紧急的bug就需要告诉所有使用方升级一下jar包，这会非常困难，可能你会说maven修改一下版本不就好了，但是在京东如果非常重要的业务比如交易服务，是不希望去做改变的，而且服务上下有着非常复杂的依赖关系牵一发而动全身；另外微服务框架不支持跨语言，对应微服务框架的不同语言直接想要互相调用得需要多个语言开发的框架版本才行，这对于开发和维护的成本都非常大。\n\nService Mesh完美的解决了这两个痛点，可以简单将其理解为将RPC框架的内容抽象成sidecar，微服务框架的jar包中只保留与sidecar通信的总要逻辑即可，这些逻辑基本上是不会变的，当发布你的应用容器的时候注入sidecar，原来是容器中的应用直接互相调用的方式现在变成了容器中的应用与容器中的sidecar通信，sidecar通过iptables规则做请求转发，并且服务治理，流量控制的这些逻辑抽象到了sidecar中这对于业务方来讲只需重新注入sidecar即可完成升级，对于应用来讲升级过程是透明的。\n\n![upload successful](/images/微服务.png)\n\n","source":"_posts/一年菜鸡带你看微服务.md","raw":"title: 一年菜鸡带你看微服务\nauthor: YyWang\ntags: Java\ncategories: Java\ndate: 2020-06-25 16:36:16\n---\n\n工作快一年了，我从一个刚入职时候的小白变成了现在有一年经验的小白,在我这一年的工作中修炼自己，现在可以说是把自己的一条腿抬过了微服务的门槛，在这个位置看到了一下东西，把我的理解记录分享一下。\n\n## 前言\n随着历史进程的发展，我们的业务量也愈发膨胀，系统的也从原来的单体架构，逐渐演化成微服务架构，将重复的业务逻辑抽象成基础的服务，这样做不仅仅可以将业务解耦，还通过将一个大的系统拆分成服务粒度的子系统，各个子系统单独开发编译测试上线，大大提高了开发的效率，加快了系统迭代的速度。根据我的理解，微服务框架包括RPC框架和注册中心两个部分，下面就来分别介绍一下\n\n### 注册中心\n微服务框架是用来进行远程调用，涉及到远程调用就会有服务的提供方（provider）和调用方（consumer），注册中心的工作就是让他们彼此认识，即服务注册和服务发现，除此之外注册中心还负责将对方状态的变化通知到另一方，配置下发等功能，主要有CP和AP两种选型的注册中心\n\n* CP 强一致性 Zookeeper、etcd ...\n\t* 用Zookeeper举例来说，发布服务就会创建一个目录，在该目录下维护服务提供方和调用方的信息，通过zk本身的watch机制来观察服务状态变化\n\t* 缺点是当服务规模很大时，zk需要数据同步的时间变长，期间服务不可用，也就是选择CP会出现的问题；数据同步的请求量大很可能将leader打挂（比如说我了解到曾经有服务大规模扩容，为了保证顺序所有follower将写请求发送给leader，大量写请求导致leader宕机，重新选择leader期间服务不可用，新的leader瞬间又被打挂）\n* AP 弱一致性 消息总线型\n\t* 服务注册和订阅的数据全量保存在一个存储介质中，注册中心从存储介质中获取的数据缓存在内存中，通过消息总线做数据同步（推拉结合，用版本号保证消息的顺序性）\n\t* 服务调用方从注册中心获取数据保存在调用方的内存中，同样采用推拉结合，保证最终一致性；\n\t\t* 推 callback机制，服务调用方在生成代理的目标对象之前会向注册中心订阅配置，订阅的时候会将callback序列化发送给注册中心，注册中心收到带有callback参数的请求为callback创建代理对象，相当于是一个反向的RPC调用（服务提供方向服务调用方发送请求复用已有的tcp连接）\n\t\t* 拉 心跳，服务调用方通常会向注册中心发送心跳来告知自己的状态，发心跳的同时拉取需要更新的数据到内存中\n\n### RPC框架\nRPC框架用于服务之间的通信，例如Dubbo、SpringCloud、gRPC，通过不同的协议完成服务之间的调用；除了最基本的通信以外还包括服务治理策和流量控制的策略，服务监控和追踪，等其他特性\n\n#### 服务治理&流量控制\n\n* 服务管理\n\t* 服务节点的新增删除；分组，动态分组的设置与取消；不同维度的上下线\n* 路由策略\n\t* 调用者将请求路由至固定的一个或者多个服务提供方的节点；用于测试，或者灰度发布\n* 负载均衡\n\t* 将服务调用方的请求均匀的发送给选择到的服务提供方节点；随机、加权随机、轮询、加权轮询、最少活跃、一致性哈希，之前分析过不同的策略实现，移步[这里](http://yywang.top/2020/03/27/%E6%8F%AD%E7%A7%98%E4%BA%AC%E4%B8%9C%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95/)查看\n* 容错策略(集群策略)\n\t* failover 失败自动切换不同的服务提供方进行重试 （业务错误重试和安全重试？）\n\t* failfast 快速失败，失败\n\t* failsafe 失败安全，出现异常直接忽略，用于记录审计日志\n\t* broadcast 广播调用，失败的跳过\n\t* pinpoint 点对点调用\n* 限流 用于保护服务提供方（按APP，接口，分组，IP，方法不同的维度）在服务提供方和调用方都可以实现限流的逻辑\n\t* 在服务提供方的限流逻辑只是针对于单个容器或者物理机，服务提供方只需处理小于最大限流值的请求即可，不需要关心其他的服务节点，几乎没有性能的损耗，具体的限流算法之前写过一篇限流算法的[介绍](http://yywang.top/2020/05/14/get%E9%99%90%E6%B5%81%E5%A7%BF%E5%8A%BF/#more)\n\t* 在服务调用方做限流逻辑可针对整个集群的维度，一般是先请求集中式的服务来判断本次请求是否超过限流值，多了一次rpc请求，会影响性能，在京东微服务框架中，限流逻辑在服务调用方有monitor和counter两种实现方式；monitor服务，对es中的监控日志进行统计异步判断是否超过限流值，因为是异步请求不影响性能，但限流的实时性无法保证不完全精准，目前这种方式已经废弃；counter服务，通过访问缓存数据库实时统计请求，判断是否超过限流值，精度准确，会影响性能；\n* 熔断，用于保护服务调用方\n\t* 防止服务调用方依赖下游服务异常，挂起大量请求压垮容器，比如服务调用方依赖下游的服务，由于下游的服务异常导致短时间内无法收到响应而一直挂起，如果挂起的请求过大可能会使服务不可用，熔断策略可以快速返回失败从而保护服务不被打挂掉\n\t* 熔断器（打开，半打开，关闭三种状态；服务调用的失败率高于某一阈值，新的请求直接返回失败不进行处理，进入半打开状态；半打开状态一段时间后，开始处理新的请求，如果失败率仍然高于阈值，则进入关闭状态否则进入打开状态）\n* 分组\n\t* 业务流量隔离，将核心业务与其他业务隔离开来\n\t* 控制同机房调用，不同的机房设置不同的分组，通过分组来实现相同机房的服务以及互相调用\n\t* 动态分组；可以用来流量切换；可以应对突发的流量激增，分组中预留的容器依然不能顶住流量，可以借用其他分组中容器来分担一部分流量\n* 流量回放；服务调用方异步存储请求和响应，用来测试\n\n#### 服务监控和追踪\n用来查看请求量（TPS，实时和历史数据）、响应时间\n\n* 服务监控 数据采集方式 a)通过服务主动上报，将日志数据发送到日志节点 b)通过代理收集，将日志数据保存到本地，代理解析本地日志（sidecar）\n* 服务追踪 整条链路用TraceId标记，其中经过的每个服务节点都有不同的SpanId，最终通过对数据结构的解析绘制链路图\n\n#### 其他特性\n* 健康检查，通过发送心跳报告节点的状态\n  * 比如在京东微服务框架中调用方隔30s向内存中的服务提供方列表发送心跳（探活），探活不同结果将列表分成不同的状态（健康、亚健康、死亡），调用方每次从健康节点的集合中选择一个发起调用；亚健康状态只发心跳不发请求，当心跳恢复移至健康节点，健康->亚健康（连续6次心跳失败，异常心跳可重试两次，三次都失败则当前心跳失败），连续60次心跳失败加入重连的集合中，10s重连一次\n  * 服务提供方和服务调用方都会想注册中心发送心跳报告状态，30s，服务提供方连续8小时没有向注册中心发送心跳会删除\n* 优雅启停\n\t* 停止；拒绝新的请求，返回一个正在关闭的异常，调用方安全重试->在超时时间范围内处理完已经接受的请求，时间范围以外的返回异常->开始关闭动作释放资源\n\t* 启动；启动预热，随着启动时间的增加逐步增加流量，定时动态修改负载均衡策略的权重；提前加载缓存数据；注册之前模拟调用逻辑保证服务可用->延迟暴露，待所有的服务完全启动完再想注册中心注册服务\n* 泛化调用；在没有接口和API的情况下发起调用，将服务提供方的接口名，分组，方法名，参数发送给服务提供方，随后根据信息通过反射调用本地方法（1.测试平台，无需修改配置重启再发起调用；2.统一网关，无需引入jar包）\n* 安全问题；服务调用方通过引入jar包的方式来发起调用，可能会发生在服务提供方不知情的情况下发起调用，成为压垮服务的最后一根稻草\n\t* 服务的提供方和调用方商量一个token，服务提供方收到请求在filter中校验隐式传参的的token判断是否通行\n\t* 在京东微服务框架中还可以再服务治理平台中开启APP调用，只有申请了APP调用被服务提供方审核之后才能从注册中心中获取服务列表\n\n#### 实现原理\n将远程调用的过程通过动态代理封装起来，与业务逻辑解耦，使用者可以专心于业务逻辑而不必关心RPC调用的过程；\n\n* 服务提供方启动\n\t* 与注册中心建立连接，订阅全局配置（远程callback机制，发送请求将callback序列化发送出去，接收方对callback进行动态代理回调发送方）\n\t* 开启并暴露服务的端口，向注册中心注册\n* 服务调用方启动\n\t* 与注册中心建立连接，订阅全局配置\n\t* 创建动态代理对象，构造执行链 filter chain（内置的filter->自定义的filter->最后的filter根据配置生成路由，负载均衡策略的逻辑）注入到代理对象中\n\t* 向注册中心订阅服务列表\n* 调用方发起调用\n\t* 调用前首先运行执行链，最后的filter过滤出服务提供方节点（本地调用->路由策略->黑白名单->负载均衡）\n\t* 序列化请求的参数，封装协议报文，根据配置的集群容错策略通过netty框架向服务提供方发送请求，\n* 服务方处理请求\n\t* 接收到请求首先适配协议，根据协议和序列化、压缩的方式解析请求\n\t* 运行执行链，最后的filter会根据接口名、方法和参数信息通过反射调用本地方法，最后将接口返回给调用方，调用方进行反序列化得到响应结果\n\n## Service Mesh 服务网格\n微服务发展到今天一些弊端也逐渐显露出来，最大的痛点就是业务入侵严重，使用者通过引入jar包使用微服务框架，如果要增加新的功能点或者修复一个紧急的bug就需要告诉所有使用方升级一下jar包，这会非常困难，可能你会说maven修改一下版本不就好了，但是在京东如果非常重要的业务比如交易服务，是不希望去做改变的，而且服务上下有着非常复杂的依赖关系牵一发而动全身；另外微服务框架不支持跨语言，对应微服务框架的不同语言直接想要互相调用得需要多个语言开发的框架版本才行，这对于开发和维护的成本都非常大。\n\nService Mesh完美的解决了这两个痛点，可以简单将其理解为将RPC框架的内容抽象成sidecar，微服务框架的jar包中只保留与sidecar通信的总要逻辑即可，这些逻辑基本上是不会变的，当发布你的应用容器的时候注入sidecar，原来是容器中的应用直接互相调用的方式现在变成了容器中的应用与容器中的sidecar通信，sidecar通过iptables规则做请求转发，并且服务治理，流量控制的这些逻辑抽象到了sidecar中这对于业务方来讲只需重新注入sidecar即可完成升级，对于应用来讲升级过程是透明的。\n\n![upload successful](/images/微服务.png)\n\n","slug":"一年菜鸡带你看微服务","published":1,"updated":"2021-07-13T12:27:08.590Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj7j002o81fyf8u3blvw","content":"<p>工作快一年了，我从一个刚入职时候的小白变成了现在有一年经验的小白,在我这一年的工作中修炼自己，现在可以说是把自己的一条腿抬过了微服务的门槛，在这个位置看到了一下东西，把我的理解记录分享一下。</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>随着历史进程的发展，我们的业务量也愈发膨胀，系统的也从原来的单体架构，逐渐演化成微服务架构，将重复的业务逻辑抽象成基础的服务，这样做不仅仅可以将业务解耦，还通过将一个大的系统拆分成服务粒度的子系统，各个子系统单独开发编译测试上线，大大提高了开发的效率，加快了系统迭代的速度。根据我的理解，微服务框架包括RPC框架和注册中心两个部分，下面就来分别介绍一下</p>\n<h3 id=\"注册中心\"><a href=\"#注册中心\" class=\"headerlink\" title=\"注册中心\"></a>注册中心</h3><p>微服务框架是用来进行远程调用，涉及到远程调用就会有服务的提供方（provider）和调用方（consumer），注册中心的工作就是让他们彼此认识，即服务注册和服务发现，除此之外注册中心还负责将对方状态的变化通知到另一方，配置下发等功能，主要有CP和AP两种选型的注册中心</p>\n<ul>\n<li>CP 强一致性 Zookeeper、etcd …<ul>\n<li>用Zookeeper举例来说，发布服务就会创建一个目录，在该目录下维护服务提供方和调用方的信息，通过zk本身的watch机制来观察服务状态变化</li>\n<li>缺点是当服务规模很大时，zk需要数据同步的时间变长，期间服务不可用，也就是选择CP会出现的问题；数据同步的请求量大很可能将leader打挂（比如说我了解到曾经有服务大规模扩容，为了保证顺序所有follower将写请求发送给leader，大量写请求导致leader宕机，重新选择leader期间服务不可用，新的leader瞬间又被打挂）</li>\n</ul>\n</li>\n<li>AP 弱一致性 消息总线型<ul>\n<li>服务注册和订阅的数据全量保存在一个存储介质中，注册中心从存储介质中获取的数据缓存在内存中，通过消息总线做数据同步（推拉结合，用版本号保证消息的顺序性）</li>\n<li>服务调用方从注册中心获取数据保存在调用方的内存中，同样采用推拉结合，保证最终一致性；<ul>\n<li>推 callback机制，服务调用方在生成代理的目标对象之前会向注册中心订阅配置，订阅的时候会将callback序列化发送给注册中心，注册中心收到带有callback参数的请求为callback创建代理对象，相当于是一个反向的RPC调用（服务提供方向服务调用方发送请求复用已有的tcp连接）</li>\n<li>拉 心跳，服务调用方通常会向注册中心发送心跳来告知自己的状态，发心跳的同时拉取需要更新的数据到内存中</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"RPC框架\"><a href=\"#RPC框架\" class=\"headerlink\" title=\"RPC框架\"></a>RPC框架</h3><p>RPC框架用于服务之间的通信，例如Dubbo、SpringCloud、gRPC，通过不同的协议完成服务之间的调用；除了最基本的通信以外还包括服务治理策和流量控制的策略，服务监控和追踪，等其他特性</p>\n<h4 id=\"服务治理-amp-流量控制\"><a href=\"#服务治理-amp-流量控制\" class=\"headerlink\" title=\"服务治理&amp;流量控制\"></a>服务治理&amp;流量控制</h4><ul>\n<li>服务管理<ul>\n<li>服务节点的新增删除；分组，动态分组的设置与取消；不同维度的上下线</li>\n</ul>\n</li>\n<li>路由策略<ul>\n<li>调用者将请求路由至固定的一个或者多个服务提供方的节点；用于测试，或者灰度发布</li>\n</ul>\n</li>\n<li>负载均衡<ul>\n<li>将服务调用方的请求均匀的发送给选择到的服务提供方节点；随机、加权随机、轮询、加权轮询、最少活跃、一致性哈希，之前分析过不同的策略实现，移步<a href=\"http://yywang.top/2020/03/27/%E6%8F%AD%E7%A7%98%E4%BA%AC%E4%B8%9C%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95/\" target=\"_blank\" rel=\"noopener\">这里</a>查看</li>\n</ul>\n</li>\n<li>容错策略(集群策略)<ul>\n<li>failover 失败自动切换不同的服务提供方进行重试 （业务错误重试和安全重试？）</li>\n<li>failfast 快速失败，失败</li>\n<li>failsafe 失败安全，出现异常直接忽略，用于记录审计日志</li>\n<li>broadcast 广播调用，失败的跳过</li>\n<li>pinpoint 点对点调用</li>\n</ul>\n</li>\n<li>限流 用于保护服务提供方（按APP，接口，分组，IP，方法不同的维度）在服务提供方和调用方都可以实现限流的逻辑<ul>\n<li>在服务提供方的限流逻辑只是针对于单个容器或者物理机，服务提供方只需处理小于最大限流值的请求即可，不需要关心其他的服务节点，几乎没有性能的损耗，具体的限流算法之前写过一篇限流算法的<a href=\"http://yywang.top/2020/05/14/get%E9%99%90%E6%B5%81%E5%A7%BF%E5%8A%BF/#more\" target=\"_blank\" rel=\"noopener\">介绍</a></li>\n<li>在服务调用方做限流逻辑可针对整个集群的维度，一般是先请求集中式的服务来判断本次请求是否超过限流值，多了一次rpc请求，会影响性能，在京东微服务框架中，限流逻辑在服务调用方有monitor和counter两种实现方式；monitor服务，对es中的监控日志进行统计异步判断是否超过限流值，因为是异步请求不影响性能，但限流的实时性无法保证不完全精准，目前这种方式已经废弃；counter服务，通过访问缓存数据库实时统计请求，判断是否超过限流值，精度准确，会影响性能；</li>\n</ul>\n</li>\n<li>熔断，用于保护服务调用方<ul>\n<li>防止服务调用方依赖下游服务异常，挂起大量请求压垮容器，比如服务调用方依赖下游的服务，由于下游的服务异常导致短时间内无法收到响应而一直挂起，如果挂起的请求过大可能会使服务不可用，熔断策略可以快速返回失败从而保护服务不被打挂掉</li>\n<li>熔断器（打开，半打开，关闭三种状态；服务调用的失败率高于某一阈值，新的请求直接返回失败不进行处理，进入半打开状态；半打开状态一段时间后，开始处理新的请求，如果失败率仍然高于阈值，则进入关闭状态否则进入打开状态）</li>\n</ul>\n</li>\n<li>分组<ul>\n<li>业务流量隔离，将核心业务与其他业务隔离开来</li>\n<li>控制同机房调用，不同的机房设置不同的分组，通过分组来实现相同机房的服务以及互相调用</li>\n<li>动态分组；可以用来流量切换；可以应对突发的流量激增，分组中预留的容器依然不能顶住流量，可以借用其他分组中容器来分担一部分流量</li>\n</ul>\n</li>\n<li>流量回放；服务调用方异步存储请求和响应，用来测试</li>\n</ul>\n<h4 id=\"服务监控和追踪\"><a href=\"#服务监控和追踪\" class=\"headerlink\" title=\"服务监控和追踪\"></a>服务监控和追踪</h4><p>用来查看请求量（TPS，实时和历史数据）、响应时间</p>\n<ul>\n<li>服务监控 数据采集方式 a)通过服务主动上报，将日志数据发送到日志节点 b)通过代理收集，将日志数据保存到本地，代理解析本地日志（sidecar）</li>\n<li>服务追踪 整条链路用TraceId标记，其中经过的每个服务节点都有不同的SpanId，最终通过对数据结构的解析绘制链路图</li>\n</ul>\n<h4 id=\"其他特性\"><a href=\"#其他特性\" class=\"headerlink\" title=\"其他特性\"></a>其他特性</h4><ul>\n<li>健康检查，通过发送心跳报告节点的状态<ul>\n<li>比如在京东微服务框架中调用方隔30s向内存中的服务提供方列表发送心跳（探活），探活不同结果将列表分成不同的状态（健康、亚健康、死亡），调用方每次从健康节点的集合中选择一个发起调用；亚健康状态只发心跳不发请求，当心跳恢复移至健康节点，健康-&gt;亚健康（连续6次心跳失败，异常心跳可重试两次，三次都失败则当前心跳失败），连续60次心跳失败加入重连的集合中，10s重连一次</li>\n<li>服务提供方和服务调用方都会想注册中心发送心跳报告状态，30s，服务提供方连续8小时没有向注册中心发送心跳会删除</li>\n</ul>\n</li>\n<li>优雅启停<ul>\n<li>停止；拒绝新的请求，返回一个正在关闭的异常，调用方安全重试-&gt;在超时时间范围内处理完已经接受的请求，时间范围以外的返回异常-&gt;开始关闭动作释放资源</li>\n<li>启动；启动预热，随着启动时间的增加逐步增加流量，定时动态修改负载均衡策略的权重；提前加载缓存数据；注册之前模拟调用逻辑保证服务可用-&gt;延迟暴露，待所有的服务完全启动完再想注册中心注册服务</li>\n</ul>\n</li>\n<li>泛化调用；在没有接口和API的情况下发起调用，将服务提供方的接口名，分组，方法名，参数发送给服务提供方，随后根据信息通过反射调用本地方法（1.测试平台，无需修改配置重启再发起调用；2.统一网关，无需引入jar包）</li>\n<li>安全问题；服务调用方通过引入jar包的方式来发起调用，可能会发生在服务提供方不知情的情况下发起调用，成为压垮服务的最后一根稻草<ul>\n<li>服务的提供方和调用方商量一个token，服务提供方收到请求在filter中校验隐式传参的的token判断是否通行</li>\n<li>在京东微服务框架中还可以再服务治理平台中开启APP调用，只有申请了APP调用被服务提供方审核之后才能从注册中心中获取服务列表</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h4><p>将远程调用的过程通过动态代理封装起来，与业务逻辑解耦，使用者可以专心于业务逻辑而不必关心RPC调用的过程；</p>\n<ul>\n<li>服务提供方启动<ul>\n<li>与注册中心建立连接，订阅全局配置（远程callback机制，发送请求将callback序列化发送出去，接收方对callback进行动态代理回调发送方）</li>\n<li>开启并暴露服务的端口，向注册中心注册</li>\n</ul>\n</li>\n<li>服务调用方启动<ul>\n<li>与注册中心建立连接，订阅全局配置</li>\n<li>创建动态代理对象，构造执行链 filter chain（内置的filter-&gt;自定义的filter-&gt;最后的filter根据配置生成路由，负载均衡策略的逻辑）注入到代理对象中</li>\n<li>向注册中心订阅服务列表</li>\n</ul>\n</li>\n<li>调用方发起调用<ul>\n<li>调用前首先运行执行链，最后的filter过滤出服务提供方节点（本地调用-&gt;路由策略-&gt;黑白名单-&gt;负载均衡）</li>\n<li>序列化请求的参数，封装协议报文，根据配置的集群容错策略通过netty框架向服务提供方发送请求，</li>\n</ul>\n</li>\n<li>服务方处理请求<ul>\n<li>接收到请求首先适配协议，根据协议和序列化、压缩的方式解析请求</li>\n<li>运行执行链，最后的filter会根据接口名、方法和参数信息通过反射调用本地方法，最后将接口返回给调用方，调用方进行反序列化得到响应结果</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Service-Mesh-服务网格\"><a href=\"#Service-Mesh-服务网格\" class=\"headerlink\" title=\"Service Mesh 服务网格\"></a>Service Mesh 服务网格</h2><p>微服务发展到今天一些弊端也逐渐显露出来，最大的痛点就是业务入侵严重，使用者通过引入jar包使用微服务框架，如果要增加新的功能点或者修复一个紧急的bug就需要告诉所有使用方升级一下jar包，这会非常困难，可能你会说maven修改一下版本不就好了，但是在京东如果非常重要的业务比如交易服务，是不希望去做改变的，而且服务上下有着非常复杂的依赖关系牵一发而动全身；另外微服务框架不支持跨语言，对应微服务框架的不同语言直接想要互相调用得需要多个语言开发的框架版本才行，这对于开发和维护的成本都非常大。</p>\n<p>Service Mesh完美的解决了这两个痛点，可以简单将其理解为将RPC框架的内容抽象成sidecar，微服务框架的jar包中只保留与sidecar通信的总要逻辑即可，这些逻辑基本上是不会变的，当发布你的应用容器的时候注入sidecar，原来是容器中的应用直接互相调用的方式现在变成了容器中的应用与容器中的sidecar通信，sidecar通过iptables规则做请求转发，并且服务治理，流量控制的这些逻辑抽象到了sidecar中这对于业务方来讲只需重新注入sidecar即可完成升级，对于应用来讲升级过程是透明的。</p>\n<p><img src=\"/images/微服务.png\" alt=\"upload successful\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>工作快一年了，我从一个刚入职时候的小白变成了现在有一年经验的小白,在我这一年的工作中修炼自己，现在可以说是把自己的一条腿抬过了微服务的门槛，在这个位置看到了一下东西，把我的理解记录分享一下。</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>随着历史进程的发展，我们的业务量也愈发膨胀，系统的也从原来的单体架构，逐渐演化成微服务架构，将重复的业务逻辑抽象成基础的服务，这样做不仅仅可以将业务解耦，还通过将一个大的系统拆分成服务粒度的子系统，各个子系统单独开发编译测试上线，大大提高了开发的效率，加快了系统迭代的速度。根据我的理解，微服务框架包括RPC框架和注册中心两个部分，下面就来分别介绍一下</p>\n<h3 id=\"注册中心\"><a href=\"#注册中心\" class=\"headerlink\" title=\"注册中心\"></a>注册中心</h3><p>微服务框架是用来进行远程调用，涉及到远程调用就会有服务的提供方（provider）和调用方（consumer），注册中心的工作就是让他们彼此认识，即服务注册和服务发现，除此之外注册中心还负责将对方状态的变化通知到另一方，配置下发等功能，主要有CP和AP两种选型的注册中心</p>\n<ul>\n<li>CP 强一致性 Zookeeper、etcd …<ul>\n<li>用Zookeeper举例来说，发布服务就会创建一个目录，在该目录下维护服务提供方和调用方的信息，通过zk本身的watch机制来观察服务状态变化</li>\n<li>缺点是当服务规模很大时，zk需要数据同步的时间变长，期间服务不可用，也就是选择CP会出现的问题；数据同步的请求量大很可能将leader打挂（比如说我了解到曾经有服务大规模扩容，为了保证顺序所有follower将写请求发送给leader，大量写请求导致leader宕机，重新选择leader期间服务不可用，新的leader瞬间又被打挂）</li>\n</ul>\n</li>\n<li>AP 弱一致性 消息总线型<ul>\n<li>服务注册和订阅的数据全量保存在一个存储介质中，注册中心从存储介质中获取的数据缓存在内存中，通过消息总线做数据同步（推拉结合，用版本号保证消息的顺序性）</li>\n<li>服务调用方从注册中心获取数据保存在调用方的内存中，同样采用推拉结合，保证最终一致性；<ul>\n<li>推 callback机制，服务调用方在生成代理的目标对象之前会向注册中心订阅配置，订阅的时候会将callback序列化发送给注册中心，注册中心收到带有callback参数的请求为callback创建代理对象，相当于是一个反向的RPC调用（服务提供方向服务调用方发送请求复用已有的tcp连接）</li>\n<li>拉 心跳，服务调用方通常会向注册中心发送心跳来告知自己的状态，发心跳的同时拉取需要更新的数据到内存中</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"RPC框架\"><a href=\"#RPC框架\" class=\"headerlink\" title=\"RPC框架\"></a>RPC框架</h3><p>RPC框架用于服务之间的通信，例如Dubbo、SpringCloud、gRPC，通过不同的协议完成服务之间的调用；除了最基本的通信以外还包括服务治理策和流量控制的策略，服务监控和追踪，等其他特性</p>\n<h4 id=\"服务治理-amp-流量控制\"><a href=\"#服务治理-amp-流量控制\" class=\"headerlink\" title=\"服务治理&amp;流量控制\"></a>服务治理&amp;流量控制</h4><ul>\n<li>服务管理<ul>\n<li>服务节点的新增删除；分组，动态分组的设置与取消；不同维度的上下线</li>\n</ul>\n</li>\n<li>路由策略<ul>\n<li>调用者将请求路由至固定的一个或者多个服务提供方的节点；用于测试，或者灰度发布</li>\n</ul>\n</li>\n<li>负载均衡<ul>\n<li>将服务调用方的请求均匀的发送给选择到的服务提供方节点；随机、加权随机、轮询、加权轮询、最少活跃、一致性哈希，之前分析过不同的策略实现，移步<a href=\"http://yywang.top/2020/03/27/%E6%8F%AD%E7%A7%98%E4%BA%AC%E4%B8%9C%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95/\" target=\"_blank\" rel=\"noopener\">这里</a>查看</li>\n</ul>\n</li>\n<li>容错策略(集群策略)<ul>\n<li>failover 失败自动切换不同的服务提供方进行重试 （业务错误重试和安全重试？）</li>\n<li>failfast 快速失败，失败</li>\n<li>failsafe 失败安全，出现异常直接忽略，用于记录审计日志</li>\n<li>broadcast 广播调用，失败的跳过</li>\n<li>pinpoint 点对点调用</li>\n</ul>\n</li>\n<li>限流 用于保护服务提供方（按APP，接口，分组，IP，方法不同的维度）在服务提供方和调用方都可以实现限流的逻辑<ul>\n<li>在服务提供方的限流逻辑只是针对于单个容器或者物理机，服务提供方只需处理小于最大限流值的请求即可，不需要关心其他的服务节点，几乎没有性能的损耗，具体的限流算法之前写过一篇限流算法的<a href=\"http://yywang.top/2020/05/14/get%E9%99%90%E6%B5%81%E5%A7%BF%E5%8A%BF/#more\" target=\"_blank\" rel=\"noopener\">介绍</a></li>\n<li>在服务调用方做限流逻辑可针对整个集群的维度，一般是先请求集中式的服务来判断本次请求是否超过限流值，多了一次rpc请求，会影响性能，在京东微服务框架中，限流逻辑在服务调用方有monitor和counter两种实现方式；monitor服务，对es中的监控日志进行统计异步判断是否超过限流值，因为是异步请求不影响性能，但限流的实时性无法保证不完全精准，目前这种方式已经废弃；counter服务，通过访问缓存数据库实时统计请求，判断是否超过限流值，精度准确，会影响性能；</li>\n</ul>\n</li>\n<li>熔断，用于保护服务调用方<ul>\n<li>防止服务调用方依赖下游服务异常，挂起大量请求压垮容器，比如服务调用方依赖下游的服务，由于下游的服务异常导致短时间内无法收到响应而一直挂起，如果挂起的请求过大可能会使服务不可用，熔断策略可以快速返回失败从而保护服务不被打挂掉</li>\n<li>熔断器（打开，半打开，关闭三种状态；服务调用的失败率高于某一阈值，新的请求直接返回失败不进行处理，进入半打开状态；半打开状态一段时间后，开始处理新的请求，如果失败率仍然高于阈值，则进入关闭状态否则进入打开状态）</li>\n</ul>\n</li>\n<li>分组<ul>\n<li>业务流量隔离，将核心业务与其他业务隔离开来</li>\n<li>控制同机房调用，不同的机房设置不同的分组，通过分组来实现相同机房的服务以及互相调用</li>\n<li>动态分组；可以用来流量切换；可以应对突发的流量激增，分组中预留的容器依然不能顶住流量，可以借用其他分组中容器来分担一部分流量</li>\n</ul>\n</li>\n<li>流量回放；服务调用方异步存储请求和响应，用来测试</li>\n</ul>\n<h4 id=\"服务监控和追踪\"><a href=\"#服务监控和追踪\" class=\"headerlink\" title=\"服务监控和追踪\"></a>服务监控和追踪</h4><p>用来查看请求量（TPS，实时和历史数据）、响应时间</p>\n<ul>\n<li>服务监控 数据采集方式 a)通过服务主动上报，将日志数据发送到日志节点 b)通过代理收集，将日志数据保存到本地，代理解析本地日志（sidecar）</li>\n<li>服务追踪 整条链路用TraceId标记，其中经过的每个服务节点都有不同的SpanId，最终通过对数据结构的解析绘制链路图</li>\n</ul>\n<h4 id=\"其他特性\"><a href=\"#其他特性\" class=\"headerlink\" title=\"其他特性\"></a>其他特性</h4><ul>\n<li>健康检查，通过发送心跳报告节点的状态<ul>\n<li>比如在京东微服务框架中调用方隔30s向内存中的服务提供方列表发送心跳（探活），探活不同结果将列表分成不同的状态（健康、亚健康、死亡），调用方每次从健康节点的集合中选择一个发起调用；亚健康状态只发心跳不发请求，当心跳恢复移至健康节点，健康-&gt;亚健康（连续6次心跳失败，异常心跳可重试两次，三次都失败则当前心跳失败），连续60次心跳失败加入重连的集合中，10s重连一次</li>\n<li>服务提供方和服务调用方都会想注册中心发送心跳报告状态，30s，服务提供方连续8小时没有向注册中心发送心跳会删除</li>\n</ul>\n</li>\n<li>优雅启停<ul>\n<li>停止；拒绝新的请求，返回一个正在关闭的异常，调用方安全重试-&gt;在超时时间范围内处理完已经接受的请求，时间范围以外的返回异常-&gt;开始关闭动作释放资源</li>\n<li>启动；启动预热，随着启动时间的增加逐步增加流量，定时动态修改负载均衡策略的权重；提前加载缓存数据；注册之前模拟调用逻辑保证服务可用-&gt;延迟暴露，待所有的服务完全启动完再想注册中心注册服务</li>\n</ul>\n</li>\n<li>泛化调用；在没有接口和API的情况下发起调用，将服务提供方的接口名，分组，方法名，参数发送给服务提供方，随后根据信息通过反射调用本地方法（1.测试平台，无需修改配置重启再发起调用；2.统一网关，无需引入jar包）</li>\n<li>安全问题；服务调用方通过引入jar包的方式来发起调用，可能会发生在服务提供方不知情的情况下发起调用，成为压垮服务的最后一根稻草<ul>\n<li>服务的提供方和调用方商量一个token，服务提供方收到请求在filter中校验隐式传参的的token判断是否通行</li>\n<li>在京东微服务框架中还可以再服务治理平台中开启APP调用，只有申请了APP调用被服务提供方审核之后才能从注册中心中获取服务列表</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h4><p>将远程调用的过程通过动态代理封装起来，与业务逻辑解耦，使用者可以专心于业务逻辑而不必关心RPC调用的过程；</p>\n<ul>\n<li>服务提供方启动<ul>\n<li>与注册中心建立连接，订阅全局配置（远程callback机制，发送请求将callback序列化发送出去，接收方对callback进行动态代理回调发送方）</li>\n<li>开启并暴露服务的端口，向注册中心注册</li>\n</ul>\n</li>\n<li>服务调用方启动<ul>\n<li>与注册中心建立连接，订阅全局配置</li>\n<li>创建动态代理对象，构造执行链 filter chain（内置的filter-&gt;自定义的filter-&gt;最后的filter根据配置生成路由，负载均衡策略的逻辑）注入到代理对象中</li>\n<li>向注册中心订阅服务列表</li>\n</ul>\n</li>\n<li>调用方发起调用<ul>\n<li>调用前首先运行执行链，最后的filter过滤出服务提供方节点（本地调用-&gt;路由策略-&gt;黑白名单-&gt;负载均衡）</li>\n<li>序列化请求的参数，封装协议报文，根据配置的集群容错策略通过netty框架向服务提供方发送请求，</li>\n</ul>\n</li>\n<li>服务方处理请求<ul>\n<li>接收到请求首先适配协议，根据协议和序列化、压缩的方式解析请求</li>\n<li>运行执行链，最后的filter会根据接口名、方法和参数信息通过反射调用本地方法，最后将接口返回给调用方，调用方进行反序列化得到响应结果</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Service-Mesh-服务网格\"><a href=\"#Service-Mesh-服务网格\" class=\"headerlink\" title=\"Service Mesh 服务网格\"></a>Service Mesh 服务网格</h2><p>微服务发展到今天一些弊端也逐渐显露出来，最大的痛点就是业务入侵严重，使用者通过引入jar包使用微服务框架，如果要增加新的功能点或者修复一个紧急的bug就需要告诉所有使用方升级一下jar包，这会非常困难，可能你会说maven修改一下版本不就好了，但是在京东如果非常重要的业务比如交易服务，是不希望去做改变的，而且服务上下有着非常复杂的依赖关系牵一发而动全身；另外微服务框架不支持跨语言，对应微服务框架的不同语言直接想要互相调用得需要多个语言开发的框架版本才行，这对于开发和维护的成本都非常大。</p>\n<p>Service Mesh完美的解决了这两个痛点，可以简单将其理解为将RPC框架的内容抽象成sidecar，微服务框架的jar包中只保留与sidecar通信的总要逻辑即可，这些逻辑基本上是不会变的，当发布你的应用容器的时候注入sidecar，原来是容器中的应用直接互相调用的方式现在变成了容器中的应用与容器中的sidecar通信，sidecar通过iptables规则做请求转发，并且服务治理，流量控制的这些逻辑抽象到了sidecar中这对于业务方来讲只需重新注入sidecar即可完成升级，对于应用来讲升级过程是透明的。</p>\n<p><img src=\"/images/微服务.png\" alt=\"upload successful\"></p>\n"},{"title":"maven-assembly插件打zip包","author":"YyWang","date":"2019-10-11T09:50:37.000Z","_content":"web工程通过maven打包通常都是war包，Tomcat会自动将war包解压并发布出来，但如果本身做的不是web工程，是普通java项目如何发布到服务器上并运行main方法呢？公司里使用maven-assembly这个插件，将项目打包成zip压缩包，里面包含bin、conf和lib三个文件夹，bin目录中保存启动和停止的shell脚本，conf中保存配置文件，lib目录中保存编译好的jar和所依赖的jar；然后将zip包抽取并解压到服务器启动start.sh脚本来运行java项目。\n\n在这个过程中就用到了maven-assembly这个插件来进行编译并打包，步骤如下\n\n目录结构\n\n```\nmain\n  |--assembly\n         |----bin\n               |---start.sh\n               |---stop.sh\n               |---jvm.properties\n         |----assembly.xml\n```\n\n* 1. pom中配置assembly插件\n\n```\n<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-assembly-plugin</artifactId>\n\t<version>3.1.0</version>\n\t<configuration>\n\t\t<!--打包规则的配置-->\n\t\t<descriptors>\n\t\t\t<descriptor>src/main/assembly/assembly.xml</descriptor>\n\t\t</descriptors>\n\t\t<tarLongFileMode>posix</tarLongFileMode>\n\t</configuration>\n\t<executions>\n\t\t<execution>\n\t\t\t<id>make-assembly</id>\n\t\t\t<phase>package</phase>\n\t\t\t<goals>\n\t\t\t\t<goal>single</goal>\n\t\t\t</goals>\n\t\t</execution>\n\t</executions>\n</plugin>\n```\n\n注：使用assembly插件编译要讲该插件的配置放在plugins标签中的第一个，在我的工程中开始在前面的时spring-boot-maven-plugin插件导致编译失败了\n\n* 2.创建并配置assembly.xml文件\n\n```\n<assembly>\n\n    <id>assembly</id>\n\n    <formats>\n        <format>zip</format>\n        <format>dir</format>\n    </formats>\n\n    <includeBaseDirectory>false</includeBaseDirectory>\n\n    <!--输出文件的配置  3个属性分别是 编译路径 输出路径 文件权限-->\n    <fileSets>\n        <fileSet>\n            <directory>src/main/resources</directory>\n            <outputDirectory>conf</outputDirectory>\n            <fileMode>0644</fileMode>\n        </fileSet>\n        <fileSet>\n            <directory>src/main/assembly/bin</directory>\n            <outputDirectory>bin</outputDirectory>\n            <includes>\n                <include>start.sh</include>\n                <include>stop.sh</include>\n            </includes>\n            <fileMode>0755</fileMode>\n        </fileSet>\n        <fileSet>\n            <directory>src/main/assembly/bin</directory>\n            <outputDirectory>bin</outputDirectory>\n            <includes>\n                <include>jvm.properties</include>\n            </includes>\n            <filtered>true</filtered>\n            <fileMode>0644</fileMode>\n        </fileSet>\n    </fileSets>\n\n    <dependencySets>\n        <dependencySet>\n            <outputDirectory>lib</outputDirectory>\n        </dependencySet>\n    </dependencySets>\n\n</assembly>\n```\n\n* 3.编写脚本\n\nstart.sh\n\n```\n#!/bin/sh\n\nBASEDIR=`dirname $0`/..\nBASEDIR=`(cd \"$BASEDIR\"; pwd)`\necho current path:$BASEDIR\n\nBASEBIN_DIR=$BASEDIR\"/bin\"\ncd $BASEBIN_DIR\n\nLAF_REG_INSTANCE=\"test-jsf-demo\"\nLOGPATH=\"\"\nLAF_REG_PIDPATH=\"$BASEBIN_DIR\"\n\nif [ \"$1\" != \"\" ] && [ \"$2\" != \"\" ]; then\n    LAF_REG_INSTANCE=\"$1\"\n    LOGPATH=\"$2\"\nfi\n\nif [ \"$3\" != \"\" ]; then\n    LAF_REG_PIDPATH=\"$3\"\nfi\n\n\n# ------ check if server is already running\nPIDFILE=$LAF_REG_PIDPATH\"/\"$LAF_REG_INSTANCE\"_startup.pid\"\nif [ -f $PIDFILE ]; then\n    if kill -0 `cat $PIDFILE` > /dev/null 2>&1; then\n        echo server already running as process `cat $PIDFILE`.\n        exit 0\n    fi\nfi\n\n# ------ set JAVACMD\n# If a specific java binary isn't specified search for the standard 'java' binary\nif [ -z \"$JAVACMD\" ] ; then\n  if [ -n \"$JAVA_HOME\"  ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n      # IBM's JDK on AIX uses strange locations for the executables\n      JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n      JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n  else\n    JAVACMD=`which java`\n  fi\nfi\n\nif [ ! -x \"$JAVACMD\" ] ; then\n  echo \"Error: JAVA_HOME is not defined correctly.\"\n  echo \"  We cannot execute $JAVACMD\"\n  exit 1\nfi\n\n# ------ set CLASSPATH\nCLASSPATH=\"$BASEDIR\"/conf/:\"$BASEDIR\"/root/:\"$BASEDIR\"/lib/*\necho \"$CLASSPATH\"\n\n# ------ set jvm memory\nsed \"s/\\r$//g\" jvm.properties > 1.properties\nmv 1.properties jvm.properties\nif [ -z \"$OPTS_MEMORY\" ] ; then\n    OPTS_MEMORY=\"`sed -n '1p' jvm.properties`\"\nfi\nif [ \"`sed -n '2p' jvm.properties`\" != \"\" ] ; then\n    JAVA_CMD=\"`sed -n '2p' jvm.properties`\"\n    if [ -f $JAVA_CMD ]; then\n        JAVACMD=$JAVA_CMD\n    fi\nfi\n\n#DEBUG_OPTS=\"-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000\"\n#JPDA_OPTS=\"-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n\"\n# ------ run proxy\nnohup \"$JAVACMD\" $JPDA_OPTS \\\n  $OPTS_MEMORY $DEBUG_OPTS \\\n  -classpath \"$CLASSPATH\" \\\n  -Dbasedir=\"$BASEDIR\" \\\n  -Dfile.encoding=\"UTF-8\" \\\n  com.jd.testjsfdemo.TestjsfdemoApplication \\\n  > /Users/Logs/testjsfdemo_std.out &\n\n\n# ------ wirte pid to file\nif [ $? -eq 0 ]\nthen\n    if /bin/echo -n $! > \"$PIDFILE\"\n    then\n        sleep 1\n        echo STARTED SUCCESS\n    else\n        echo FAILED TO WRITE PID\n        exit 1\n    fi\n#    tail -100f $LOGFILE\nelse\n    echo SERVER DID NOT START\n    exit 1\nfi\n```\n\nstop.sh\n\n```\n#!/bin/sh\nBASEDIR=`dirname $0`\nBASEDIR=`(cd \"$BASEDIR\"; pwd)`\necho current path $BASEDIR\n\nLAF_REG_INSTANCE=\"test-jsf-demo\"\nLAF_REG_PIDPATH=\"$BASEDIR\"\n\nif [ \"$1\" != \"\" ]; then\n    LAF_REG_INSTANCE=\"$1\"\nfi\n\nif [ \"$2\" != \"\" ]; then\n    LAF_REG_PIDPATH=\"$2\"\nfi\n\nPIDFILE=$LAF_REG_PIDPATH\"/\"$LAF_REG_INSTANCE\"_startup.pid\"\necho $PIDFILE\n\nif [ ! -f \"$PIDFILE\" ]\nthen\n    echo \"no registry to stop (could not find file $PIDFILE)\"\nelse\n    kill $(cat \"$PIDFILE\")\n    sleep 10\n    kill -9 $(cat \"$PIDFILE\")\n    rm -f \"$PIDFILE\"\n    echo STOPPED\nfi\nexit 0\n\necho stop finished.\n```\n\njvm.properties\n\n```\n-Xms1024m -Xmx1024m -Xmn400m\n/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/bin/java\n```\n\n* 4.编译后就成功啦，之后在jdos上配置一下就可以自动部署了","source":"_posts/maven-assembly插件打zip包.md","raw":"title: maven-assembly插件打zip包\nauthor: YyWang\ndate: 2019-10-11 17:50:37\ntags:\n---\nweb工程通过maven打包通常都是war包，Tomcat会自动将war包解压并发布出来，但如果本身做的不是web工程，是普通java项目如何发布到服务器上并运行main方法呢？公司里使用maven-assembly这个插件，将项目打包成zip压缩包，里面包含bin、conf和lib三个文件夹，bin目录中保存启动和停止的shell脚本，conf中保存配置文件，lib目录中保存编译好的jar和所依赖的jar；然后将zip包抽取并解压到服务器启动start.sh脚本来运行java项目。\n\n在这个过程中就用到了maven-assembly这个插件来进行编译并打包，步骤如下\n\n目录结构\n\n```\nmain\n  |--assembly\n         |----bin\n               |---start.sh\n               |---stop.sh\n               |---jvm.properties\n         |----assembly.xml\n```\n\n* 1. pom中配置assembly插件\n\n```\n<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-assembly-plugin</artifactId>\n\t<version>3.1.0</version>\n\t<configuration>\n\t\t<!--打包规则的配置-->\n\t\t<descriptors>\n\t\t\t<descriptor>src/main/assembly/assembly.xml</descriptor>\n\t\t</descriptors>\n\t\t<tarLongFileMode>posix</tarLongFileMode>\n\t</configuration>\n\t<executions>\n\t\t<execution>\n\t\t\t<id>make-assembly</id>\n\t\t\t<phase>package</phase>\n\t\t\t<goals>\n\t\t\t\t<goal>single</goal>\n\t\t\t</goals>\n\t\t</execution>\n\t</executions>\n</plugin>\n```\n\n注：使用assembly插件编译要讲该插件的配置放在plugins标签中的第一个，在我的工程中开始在前面的时spring-boot-maven-plugin插件导致编译失败了\n\n* 2.创建并配置assembly.xml文件\n\n```\n<assembly>\n\n    <id>assembly</id>\n\n    <formats>\n        <format>zip</format>\n        <format>dir</format>\n    </formats>\n\n    <includeBaseDirectory>false</includeBaseDirectory>\n\n    <!--输出文件的配置  3个属性分别是 编译路径 输出路径 文件权限-->\n    <fileSets>\n        <fileSet>\n            <directory>src/main/resources</directory>\n            <outputDirectory>conf</outputDirectory>\n            <fileMode>0644</fileMode>\n        </fileSet>\n        <fileSet>\n            <directory>src/main/assembly/bin</directory>\n            <outputDirectory>bin</outputDirectory>\n            <includes>\n                <include>start.sh</include>\n                <include>stop.sh</include>\n            </includes>\n            <fileMode>0755</fileMode>\n        </fileSet>\n        <fileSet>\n            <directory>src/main/assembly/bin</directory>\n            <outputDirectory>bin</outputDirectory>\n            <includes>\n                <include>jvm.properties</include>\n            </includes>\n            <filtered>true</filtered>\n            <fileMode>0644</fileMode>\n        </fileSet>\n    </fileSets>\n\n    <dependencySets>\n        <dependencySet>\n            <outputDirectory>lib</outputDirectory>\n        </dependencySet>\n    </dependencySets>\n\n</assembly>\n```\n\n* 3.编写脚本\n\nstart.sh\n\n```\n#!/bin/sh\n\nBASEDIR=`dirname $0`/..\nBASEDIR=`(cd \"$BASEDIR\"; pwd)`\necho current path:$BASEDIR\n\nBASEBIN_DIR=$BASEDIR\"/bin\"\ncd $BASEBIN_DIR\n\nLAF_REG_INSTANCE=\"test-jsf-demo\"\nLOGPATH=\"\"\nLAF_REG_PIDPATH=\"$BASEBIN_DIR\"\n\nif [ \"$1\" != \"\" ] && [ \"$2\" != \"\" ]; then\n    LAF_REG_INSTANCE=\"$1\"\n    LOGPATH=\"$2\"\nfi\n\nif [ \"$3\" != \"\" ]; then\n    LAF_REG_PIDPATH=\"$3\"\nfi\n\n\n# ------ check if server is already running\nPIDFILE=$LAF_REG_PIDPATH\"/\"$LAF_REG_INSTANCE\"_startup.pid\"\nif [ -f $PIDFILE ]; then\n    if kill -0 `cat $PIDFILE` > /dev/null 2>&1; then\n        echo server already running as process `cat $PIDFILE`.\n        exit 0\n    fi\nfi\n\n# ------ set JAVACMD\n# If a specific java binary isn't specified search for the standard 'java' binary\nif [ -z \"$JAVACMD\" ] ; then\n  if [ -n \"$JAVA_HOME\"  ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n      # IBM's JDK on AIX uses strange locations for the executables\n      JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n      JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n  else\n    JAVACMD=`which java`\n  fi\nfi\n\nif [ ! -x \"$JAVACMD\" ] ; then\n  echo \"Error: JAVA_HOME is not defined correctly.\"\n  echo \"  We cannot execute $JAVACMD\"\n  exit 1\nfi\n\n# ------ set CLASSPATH\nCLASSPATH=\"$BASEDIR\"/conf/:\"$BASEDIR\"/root/:\"$BASEDIR\"/lib/*\necho \"$CLASSPATH\"\n\n# ------ set jvm memory\nsed \"s/\\r$//g\" jvm.properties > 1.properties\nmv 1.properties jvm.properties\nif [ -z \"$OPTS_MEMORY\" ] ; then\n    OPTS_MEMORY=\"`sed -n '1p' jvm.properties`\"\nfi\nif [ \"`sed -n '2p' jvm.properties`\" != \"\" ] ; then\n    JAVA_CMD=\"`sed -n '2p' jvm.properties`\"\n    if [ -f $JAVA_CMD ]; then\n        JAVACMD=$JAVA_CMD\n    fi\nfi\n\n#DEBUG_OPTS=\"-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000\"\n#JPDA_OPTS=\"-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n\"\n# ------ run proxy\nnohup \"$JAVACMD\" $JPDA_OPTS \\\n  $OPTS_MEMORY $DEBUG_OPTS \\\n  -classpath \"$CLASSPATH\" \\\n  -Dbasedir=\"$BASEDIR\" \\\n  -Dfile.encoding=\"UTF-8\" \\\n  com.jd.testjsfdemo.TestjsfdemoApplication \\\n  > /Users/Logs/testjsfdemo_std.out &\n\n\n# ------ wirte pid to file\nif [ $? -eq 0 ]\nthen\n    if /bin/echo -n $! > \"$PIDFILE\"\n    then\n        sleep 1\n        echo STARTED SUCCESS\n    else\n        echo FAILED TO WRITE PID\n        exit 1\n    fi\n#    tail -100f $LOGFILE\nelse\n    echo SERVER DID NOT START\n    exit 1\nfi\n```\n\nstop.sh\n\n```\n#!/bin/sh\nBASEDIR=`dirname $0`\nBASEDIR=`(cd \"$BASEDIR\"; pwd)`\necho current path $BASEDIR\n\nLAF_REG_INSTANCE=\"test-jsf-demo\"\nLAF_REG_PIDPATH=\"$BASEDIR\"\n\nif [ \"$1\" != \"\" ]; then\n    LAF_REG_INSTANCE=\"$1\"\nfi\n\nif [ \"$2\" != \"\" ]; then\n    LAF_REG_PIDPATH=\"$2\"\nfi\n\nPIDFILE=$LAF_REG_PIDPATH\"/\"$LAF_REG_INSTANCE\"_startup.pid\"\necho $PIDFILE\n\nif [ ! -f \"$PIDFILE\" ]\nthen\n    echo \"no registry to stop (could not find file $PIDFILE)\"\nelse\n    kill $(cat \"$PIDFILE\")\n    sleep 10\n    kill -9 $(cat \"$PIDFILE\")\n    rm -f \"$PIDFILE\"\n    echo STOPPED\nfi\nexit 0\n\necho stop finished.\n```\n\njvm.properties\n\n```\n-Xms1024m -Xmx1024m -Xmn400m\n/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/bin/java\n```\n\n* 4.编译后就成功啦，之后在jdos上配置一下就可以自动部署了","slug":"maven-assembly插件打zip包","published":1,"updated":"2021-07-13T12:27:08.590Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj7j002q81fyysve35lq","content":"<p>web工程通过maven打包通常都是war包，Tomcat会自动将war包解压并发布出来，但如果本身做的不是web工程，是普通java项目如何发布到服务器上并运行main方法呢？公司里使用maven-assembly这个插件，将项目打包成zip压缩包，里面包含bin、conf和lib三个文件夹，bin目录中保存启动和停止的shell脚本，conf中保存配置文件，lib目录中保存编译好的jar和所依赖的jar；然后将zip包抽取并解压到服务器启动start.sh脚本来运行java项目。</p>\n<p>在这个过程中就用到了maven-assembly这个插件来进行编译并打包，步骤如下</p>\n<p>目录结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main</span><br><span class=\"line\">  |--assembly</span><br><span class=\"line\">         |----bin</span><br><span class=\"line\">               |---start.sh</span><br><span class=\"line\">               |---stop.sh</span><br><span class=\"line\">               |---jvm.properties</span><br><span class=\"line\">         |----assembly.xml</span><br></pre></td></tr></table></figure>\n<ul>\n<li><ol>\n<li>pom中配置assembly插件</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class=\"line\">\t&lt;configuration&gt;</span><br><span class=\"line\">\t\t&lt;!--打包规则的配置--&gt;</span><br><span class=\"line\">\t\t&lt;descriptors&gt;</span><br><span class=\"line\">\t\t\t&lt;descriptor&gt;src/main/assembly/assembly.xml&lt;/descriptor&gt;</span><br><span class=\"line\">\t\t&lt;/descriptors&gt;</span><br><span class=\"line\">\t\t&lt;tarLongFileMode&gt;posix&lt;/tarLongFileMode&gt;</span><br><span class=\"line\">\t&lt;/configuration&gt;</span><br><span class=\"line\">\t&lt;executions&gt;</span><br><span class=\"line\">\t\t&lt;execution&gt;</span><br><span class=\"line\">\t\t\t&lt;id&gt;make-assembly&lt;/id&gt;</span><br><span class=\"line\">\t\t\t&lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">\t\t\t&lt;goals&gt;</span><br><span class=\"line\">\t\t\t\t&lt;goal&gt;single&lt;/goal&gt;</span><br><span class=\"line\">\t\t\t&lt;/goals&gt;</span><br><span class=\"line\">\t\t&lt;/execution&gt;</span><br><span class=\"line\">\t&lt;/executions&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>注：使用assembly插件编译要讲该插件的配置放在plugins标签中的第一个，在我的工程中开始在前面的时spring-boot-maven-plugin插件导致编译失败了</p>\n<ul>\n<li>2.创建并配置assembly.xml文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;assembly&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;id&gt;assembly&lt;/id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;formats&gt;</span><br><span class=\"line\">        &lt;format&gt;zip&lt;/format&gt;</span><br><span class=\"line\">        &lt;format&gt;dir&lt;/format&gt;</span><br><span class=\"line\">    &lt;/formats&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;includeBaseDirectory&gt;false&lt;/includeBaseDirectory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--输出文件的配置  3个属性分别是 编译路径 输出路径 文件权限--&gt;</span><br><span class=\"line\">    &lt;fileSets&gt;</span><br><span class=\"line\">        &lt;fileSet&gt;</span><br><span class=\"line\">            &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class=\"line\">            &lt;outputDirectory&gt;conf&lt;/outputDirectory&gt;</span><br><span class=\"line\">            &lt;fileMode&gt;0644&lt;/fileMode&gt;</span><br><span class=\"line\">        &lt;/fileSet&gt;</span><br><span class=\"line\">        &lt;fileSet&gt;</span><br><span class=\"line\">            &lt;directory&gt;src/main/assembly/bin&lt;/directory&gt;</span><br><span class=\"line\">            &lt;outputDirectory&gt;bin&lt;/outputDirectory&gt;</span><br><span class=\"line\">            &lt;includes&gt;</span><br><span class=\"line\">                &lt;include&gt;start.sh&lt;/include&gt;</span><br><span class=\"line\">                &lt;include&gt;stop.sh&lt;/include&gt;</span><br><span class=\"line\">            &lt;/includes&gt;</span><br><span class=\"line\">            &lt;fileMode&gt;0755&lt;/fileMode&gt;</span><br><span class=\"line\">        &lt;/fileSet&gt;</span><br><span class=\"line\">        &lt;fileSet&gt;</span><br><span class=\"line\">            &lt;directory&gt;src/main/assembly/bin&lt;/directory&gt;</span><br><span class=\"line\">            &lt;outputDirectory&gt;bin&lt;/outputDirectory&gt;</span><br><span class=\"line\">            &lt;includes&gt;</span><br><span class=\"line\">                &lt;include&gt;jvm.properties&lt;/include&gt;</span><br><span class=\"line\">            &lt;/includes&gt;</span><br><span class=\"line\">            &lt;filtered&gt;true&lt;/filtered&gt;</span><br><span class=\"line\">            &lt;fileMode&gt;0644&lt;/fileMode&gt;</span><br><span class=\"line\">        &lt;/fileSet&gt;</span><br><span class=\"line\">    &lt;/fileSets&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencySets&gt;</span><br><span class=\"line\">        &lt;dependencySet&gt;</span><br><span class=\"line\">            &lt;outputDirectory&gt;lib&lt;/outputDirectory&gt;</span><br><span class=\"line\">        &lt;/dependencySet&gt;</span><br><span class=\"line\">    &lt;/dependencySets&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/assembly&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>3.编写脚本</li>\n</ul>\n<p>start.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">BASEDIR=`dirname $0`/..</span><br><span class=\"line\">BASEDIR=`(cd &quot;$BASEDIR&quot;; pwd)`</span><br><span class=\"line\">echo current path:$BASEDIR</span><br><span class=\"line\"></span><br><span class=\"line\">BASEBIN_DIR=$BASEDIR&quot;/bin&quot;</span><br><span class=\"line\">cd $BASEBIN_DIR</span><br><span class=\"line\"></span><br><span class=\"line\">LAF_REG_INSTANCE=&quot;test-jsf-demo&quot;</span><br><span class=\"line\">LOGPATH=&quot;&quot;</span><br><span class=\"line\">LAF_REG_PIDPATH=&quot;$BASEBIN_DIR&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ &quot;$1&quot; != &quot;&quot; ] &amp;&amp; [ &quot;$2&quot; != &quot;&quot; ]; then</span><br><span class=\"line\">    LAF_REG_INSTANCE=&quot;$1&quot;</span><br><span class=\"line\">    LOGPATH=&quot;$2&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ &quot;$3&quot; != &quot;&quot; ]; then</span><br><span class=\"line\">    LAF_REG_PIDPATH=&quot;$3&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># ------ check if server is already running</span><br><span class=\"line\">PIDFILE=$LAF_REG_PIDPATH&quot;/&quot;$LAF_REG_INSTANCE&quot;_startup.pid&quot;</span><br><span class=\"line\">if [ -f $PIDFILE ]; then</span><br><span class=\"line\">    if kill -0 `cat $PIDFILE` &gt; /dev/null 2&gt;&amp;1; then</span><br><span class=\"line\">        echo server already running as process `cat $PIDFILE`.</span><br><span class=\"line\">        exit 0</span><br><span class=\"line\">    fi</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># ------ set JAVACMD</span><br><span class=\"line\"># If a specific java binary isn&apos;t specified search for the standard &apos;java&apos; binary</span><br><span class=\"line\">if [ -z &quot;$JAVACMD&quot; ] ; then</span><br><span class=\"line\">  if [ -n &quot;$JAVA_HOME&quot;  ] ; then</span><br><span class=\"line\">    if [ -x &quot;$JAVA_HOME/jre/sh/java&quot; ] ; then</span><br><span class=\"line\">      # IBM&apos;s JDK on AIX uses strange locations for the executables</span><br><span class=\"line\">      JAVACMD=&quot;$JAVA_HOME/jre/sh/java&quot;</span><br><span class=\"line\">    else</span><br><span class=\"line\">      JAVACMD=&quot;$JAVA_HOME/bin/java&quot;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">  else</span><br><span class=\"line\">    JAVACMD=`which java`</span><br><span class=\"line\">  fi</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ ! -x &quot;$JAVACMD&quot; ] ; then</span><br><span class=\"line\">  echo &quot;Error: JAVA_HOME is not defined correctly.&quot;</span><br><span class=\"line\">  echo &quot;  We cannot execute $JAVACMD&quot;</span><br><span class=\"line\">  exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># ------ set CLASSPATH</span><br><span class=\"line\">CLASSPATH=&quot;$BASEDIR&quot;/conf/:&quot;$BASEDIR&quot;/root/:&quot;$BASEDIR&quot;/lib/*</span><br><span class=\"line\">echo &quot;$CLASSPATH&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># ------ set jvm memory</span><br><span class=\"line\">sed &quot;s/\\r$//g&quot; jvm.properties &gt; 1.properties</span><br><span class=\"line\">mv 1.properties jvm.properties</span><br><span class=\"line\">if [ -z &quot;$OPTS_MEMORY&quot; ] ; then</span><br><span class=\"line\">    OPTS_MEMORY=&quot;`sed -n &apos;1p&apos; jvm.properties`&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [ &quot;`sed -n &apos;2p&apos; jvm.properties`&quot; != &quot;&quot; ] ; then</span><br><span class=\"line\">    JAVA_CMD=&quot;`sed -n &apos;2p&apos; jvm.properties`&quot;</span><br><span class=\"line\">    if [ -f $JAVA_CMD ]; then</span><br><span class=\"line\">        JAVACMD=$JAVA_CMD</span><br><span class=\"line\">    fi</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">#DEBUG_OPTS=&quot;-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000&quot;</span><br><span class=\"line\">#JPDA_OPTS=&quot;-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n&quot;</span><br><span class=\"line\"># ------ run proxy</span><br><span class=\"line\">nohup &quot;$JAVACMD&quot; $JPDA_OPTS \\</span><br><span class=\"line\">  $OPTS_MEMORY $DEBUG_OPTS \\</span><br><span class=\"line\">  -classpath &quot;$CLASSPATH&quot; \\</span><br><span class=\"line\">  -Dbasedir=&quot;$BASEDIR&quot; \\</span><br><span class=\"line\">  -Dfile.encoding=&quot;UTF-8&quot; \\</span><br><span class=\"line\">  com.jd.testjsfdemo.TestjsfdemoApplication \\</span><br><span class=\"line\">  &gt; /Users/Logs/testjsfdemo_std.out &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># ------ wirte pid to file</span><br><span class=\"line\">if [ $? -eq 0 ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    if /bin/echo -n $! &gt; &quot;$PIDFILE&quot;</span><br><span class=\"line\">    then</span><br><span class=\"line\">        sleep 1</span><br><span class=\"line\">        echo STARTED SUCCESS</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo FAILED TO WRITE PID</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">#    tail -100f $LOGFILE</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo SERVER DID NOT START</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>stop.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">BASEDIR=`dirname $0`</span><br><span class=\"line\">BASEDIR=`(cd &quot;$BASEDIR&quot;; pwd)`</span><br><span class=\"line\">echo current path $BASEDIR</span><br><span class=\"line\"></span><br><span class=\"line\">LAF_REG_INSTANCE=&quot;test-jsf-demo&quot;</span><br><span class=\"line\">LAF_REG_PIDPATH=&quot;$BASEDIR&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ &quot;$1&quot; != &quot;&quot; ]; then</span><br><span class=\"line\">    LAF_REG_INSTANCE=&quot;$1&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ &quot;$2&quot; != &quot;&quot; ]; then</span><br><span class=\"line\">    LAF_REG_PIDPATH=&quot;$2&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">PIDFILE=$LAF_REG_PIDPATH&quot;/&quot;$LAF_REG_INSTANCE&quot;_startup.pid&quot;</span><br><span class=\"line\">echo $PIDFILE</span><br><span class=\"line\"></span><br><span class=\"line\">if [ ! -f &quot;$PIDFILE&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;no registry to stop (could not find file $PIDFILE)&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    kill $(cat &quot;$PIDFILE&quot;)</span><br><span class=\"line\">    sleep 10</span><br><span class=\"line\">    kill -9 $(cat &quot;$PIDFILE&quot;)</span><br><span class=\"line\">    rm -f &quot;$PIDFILE&quot;</span><br><span class=\"line\">    echo STOPPED</span><br><span class=\"line\">fi</span><br><span class=\"line\">exit 0</span><br><span class=\"line\"></span><br><span class=\"line\">echo stop finished.</span><br></pre></td></tr></table></figure>\n<p>jvm.properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Xms1024m -Xmx1024m -Xmn400m</span><br><span class=\"line\">/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/bin/java</span><br></pre></td></tr></table></figure>\n<ul>\n<li>4.编译后就成功啦，之后在jdos上配置一下就可以自动部署了</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>web工程通过maven打包通常都是war包，Tomcat会自动将war包解压并发布出来，但如果本身做的不是web工程，是普通java项目如何发布到服务器上并运行main方法呢？公司里使用maven-assembly这个插件，将项目打包成zip压缩包，里面包含bin、conf和lib三个文件夹，bin目录中保存启动和停止的shell脚本，conf中保存配置文件，lib目录中保存编译好的jar和所依赖的jar；然后将zip包抽取并解压到服务器启动start.sh脚本来运行java项目。</p>\n<p>在这个过程中就用到了maven-assembly这个插件来进行编译并打包，步骤如下</p>\n<p>目录结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main</span><br><span class=\"line\">  |--assembly</span><br><span class=\"line\">         |----bin</span><br><span class=\"line\">               |---start.sh</span><br><span class=\"line\">               |---stop.sh</span><br><span class=\"line\">               |---jvm.properties</span><br><span class=\"line\">         |----assembly.xml</span><br></pre></td></tr></table></figure>\n<ul>\n<li><ol>\n<li>pom中配置assembly插件</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class=\"line\">\t&lt;configuration&gt;</span><br><span class=\"line\">\t\t&lt;!--打包规则的配置--&gt;</span><br><span class=\"line\">\t\t&lt;descriptors&gt;</span><br><span class=\"line\">\t\t\t&lt;descriptor&gt;src/main/assembly/assembly.xml&lt;/descriptor&gt;</span><br><span class=\"line\">\t\t&lt;/descriptors&gt;</span><br><span class=\"line\">\t\t&lt;tarLongFileMode&gt;posix&lt;/tarLongFileMode&gt;</span><br><span class=\"line\">\t&lt;/configuration&gt;</span><br><span class=\"line\">\t&lt;executions&gt;</span><br><span class=\"line\">\t\t&lt;execution&gt;</span><br><span class=\"line\">\t\t\t&lt;id&gt;make-assembly&lt;/id&gt;</span><br><span class=\"line\">\t\t\t&lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">\t\t\t&lt;goals&gt;</span><br><span class=\"line\">\t\t\t\t&lt;goal&gt;single&lt;/goal&gt;</span><br><span class=\"line\">\t\t\t&lt;/goals&gt;</span><br><span class=\"line\">\t\t&lt;/execution&gt;</span><br><span class=\"line\">\t&lt;/executions&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>注：使用assembly插件编译要讲该插件的配置放在plugins标签中的第一个，在我的工程中开始在前面的时spring-boot-maven-plugin插件导致编译失败了</p>\n<ul>\n<li>2.创建并配置assembly.xml文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;assembly&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;id&gt;assembly&lt;/id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;formats&gt;</span><br><span class=\"line\">        &lt;format&gt;zip&lt;/format&gt;</span><br><span class=\"line\">        &lt;format&gt;dir&lt;/format&gt;</span><br><span class=\"line\">    &lt;/formats&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;includeBaseDirectory&gt;false&lt;/includeBaseDirectory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--输出文件的配置  3个属性分别是 编译路径 输出路径 文件权限--&gt;</span><br><span class=\"line\">    &lt;fileSets&gt;</span><br><span class=\"line\">        &lt;fileSet&gt;</span><br><span class=\"line\">            &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class=\"line\">            &lt;outputDirectory&gt;conf&lt;/outputDirectory&gt;</span><br><span class=\"line\">            &lt;fileMode&gt;0644&lt;/fileMode&gt;</span><br><span class=\"line\">        &lt;/fileSet&gt;</span><br><span class=\"line\">        &lt;fileSet&gt;</span><br><span class=\"line\">            &lt;directory&gt;src/main/assembly/bin&lt;/directory&gt;</span><br><span class=\"line\">            &lt;outputDirectory&gt;bin&lt;/outputDirectory&gt;</span><br><span class=\"line\">            &lt;includes&gt;</span><br><span class=\"line\">                &lt;include&gt;start.sh&lt;/include&gt;</span><br><span class=\"line\">                &lt;include&gt;stop.sh&lt;/include&gt;</span><br><span class=\"line\">            &lt;/includes&gt;</span><br><span class=\"line\">            &lt;fileMode&gt;0755&lt;/fileMode&gt;</span><br><span class=\"line\">        &lt;/fileSet&gt;</span><br><span class=\"line\">        &lt;fileSet&gt;</span><br><span class=\"line\">            &lt;directory&gt;src/main/assembly/bin&lt;/directory&gt;</span><br><span class=\"line\">            &lt;outputDirectory&gt;bin&lt;/outputDirectory&gt;</span><br><span class=\"line\">            &lt;includes&gt;</span><br><span class=\"line\">                &lt;include&gt;jvm.properties&lt;/include&gt;</span><br><span class=\"line\">            &lt;/includes&gt;</span><br><span class=\"line\">            &lt;filtered&gt;true&lt;/filtered&gt;</span><br><span class=\"line\">            &lt;fileMode&gt;0644&lt;/fileMode&gt;</span><br><span class=\"line\">        &lt;/fileSet&gt;</span><br><span class=\"line\">    &lt;/fileSets&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencySets&gt;</span><br><span class=\"line\">        &lt;dependencySet&gt;</span><br><span class=\"line\">            &lt;outputDirectory&gt;lib&lt;/outputDirectory&gt;</span><br><span class=\"line\">        &lt;/dependencySet&gt;</span><br><span class=\"line\">    &lt;/dependencySets&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/assembly&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>3.编写脚本</li>\n</ul>\n<p>start.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">BASEDIR=`dirname $0`/..</span><br><span class=\"line\">BASEDIR=`(cd &quot;$BASEDIR&quot;; pwd)`</span><br><span class=\"line\">echo current path:$BASEDIR</span><br><span class=\"line\"></span><br><span class=\"line\">BASEBIN_DIR=$BASEDIR&quot;/bin&quot;</span><br><span class=\"line\">cd $BASEBIN_DIR</span><br><span class=\"line\"></span><br><span class=\"line\">LAF_REG_INSTANCE=&quot;test-jsf-demo&quot;</span><br><span class=\"line\">LOGPATH=&quot;&quot;</span><br><span class=\"line\">LAF_REG_PIDPATH=&quot;$BASEBIN_DIR&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ &quot;$1&quot; != &quot;&quot; ] &amp;&amp; [ &quot;$2&quot; != &quot;&quot; ]; then</span><br><span class=\"line\">    LAF_REG_INSTANCE=&quot;$1&quot;</span><br><span class=\"line\">    LOGPATH=&quot;$2&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ &quot;$3&quot; != &quot;&quot; ]; then</span><br><span class=\"line\">    LAF_REG_PIDPATH=&quot;$3&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># ------ check if server is already running</span><br><span class=\"line\">PIDFILE=$LAF_REG_PIDPATH&quot;/&quot;$LAF_REG_INSTANCE&quot;_startup.pid&quot;</span><br><span class=\"line\">if [ -f $PIDFILE ]; then</span><br><span class=\"line\">    if kill -0 `cat $PIDFILE` &gt; /dev/null 2&gt;&amp;1; then</span><br><span class=\"line\">        echo server already running as process `cat $PIDFILE`.</span><br><span class=\"line\">        exit 0</span><br><span class=\"line\">    fi</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># ------ set JAVACMD</span><br><span class=\"line\"># If a specific java binary isn&apos;t specified search for the standard &apos;java&apos; binary</span><br><span class=\"line\">if [ -z &quot;$JAVACMD&quot; ] ; then</span><br><span class=\"line\">  if [ -n &quot;$JAVA_HOME&quot;  ] ; then</span><br><span class=\"line\">    if [ -x &quot;$JAVA_HOME/jre/sh/java&quot; ] ; then</span><br><span class=\"line\">      # IBM&apos;s JDK on AIX uses strange locations for the executables</span><br><span class=\"line\">      JAVACMD=&quot;$JAVA_HOME/jre/sh/java&quot;</span><br><span class=\"line\">    else</span><br><span class=\"line\">      JAVACMD=&quot;$JAVA_HOME/bin/java&quot;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">  else</span><br><span class=\"line\">    JAVACMD=`which java`</span><br><span class=\"line\">  fi</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ ! -x &quot;$JAVACMD&quot; ] ; then</span><br><span class=\"line\">  echo &quot;Error: JAVA_HOME is not defined correctly.&quot;</span><br><span class=\"line\">  echo &quot;  We cannot execute $JAVACMD&quot;</span><br><span class=\"line\">  exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># ------ set CLASSPATH</span><br><span class=\"line\">CLASSPATH=&quot;$BASEDIR&quot;/conf/:&quot;$BASEDIR&quot;/root/:&quot;$BASEDIR&quot;/lib/*</span><br><span class=\"line\">echo &quot;$CLASSPATH&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># ------ set jvm memory</span><br><span class=\"line\">sed &quot;s/\\r$//g&quot; jvm.properties &gt; 1.properties</span><br><span class=\"line\">mv 1.properties jvm.properties</span><br><span class=\"line\">if [ -z &quot;$OPTS_MEMORY&quot; ] ; then</span><br><span class=\"line\">    OPTS_MEMORY=&quot;`sed -n &apos;1p&apos; jvm.properties`&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [ &quot;`sed -n &apos;2p&apos; jvm.properties`&quot; != &quot;&quot; ] ; then</span><br><span class=\"line\">    JAVA_CMD=&quot;`sed -n &apos;2p&apos; jvm.properties`&quot;</span><br><span class=\"line\">    if [ -f $JAVA_CMD ]; then</span><br><span class=\"line\">        JAVACMD=$JAVA_CMD</span><br><span class=\"line\">    fi</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">#DEBUG_OPTS=&quot;-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000&quot;</span><br><span class=\"line\">#JPDA_OPTS=&quot;-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n&quot;</span><br><span class=\"line\"># ------ run proxy</span><br><span class=\"line\">nohup &quot;$JAVACMD&quot; $JPDA_OPTS \\</span><br><span class=\"line\">  $OPTS_MEMORY $DEBUG_OPTS \\</span><br><span class=\"line\">  -classpath &quot;$CLASSPATH&quot; \\</span><br><span class=\"line\">  -Dbasedir=&quot;$BASEDIR&quot; \\</span><br><span class=\"line\">  -Dfile.encoding=&quot;UTF-8&quot; \\</span><br><span class=\"line\">  com.jd.testjsfdemo.TestjsfdemoApplication \\</span><br><span class=\"line\">  &gt; /Users/Logs/testjsfdemo_std.out &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># ------ wirte pid to file</span><br><span class=\"line\">if [ $? -eq 0 ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    if /bin/echo -n $! &gt; &quot;$PIDFILE&quot;</span><br><span class=\"line\">    then</span><br><span class=\"line\">        sleep 1</span><br><span class=\"line\">        echo STARTED SUCCESS</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo FAILED TO WRITE PID</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">#    tail -100f $LOGFILE</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo SERVER DID NOT START</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>stop.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">BASEDIR=`dirname $0`</span><br><span class=\"line\">BASEDIR=`(cd &quot;$BASEDIR&quot;; pwd)`</span><br><span class=\"line\">echo current path $BASEDIR</span><br><span class=\"line\"></span><br><span class=\"line\">LAF_REG_INSTANCE=&quot;test-jsf-demo&quot;</span><br><span class=\"line\">LAF_REG_PIDPATH=&quot;$BASEDIR&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ &quot;$1&quot; != &quot;&quot; ]; then</span><br><span class=\"line\">    LAF_REG_INSTANCE=&quot;$1&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ &quot;$2&quot; != &quot;&quot; ]; then</span><br><span class=\"line\">    LAF_REG_PIDPATH=&quot;$2&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">PIDFILE=$LAF_REG_PIDPATH&quot;/&quot;$LAF_REG_INSTANCE&quot;_startup.pid&quot;</span><br><span class=\"line\">echo $PIDFILE</span><br><span class=\"line\"></span><br><span class=\"line\">if [ ! -f &quot;$PIDFILE&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;no registry to stop (could not find file $PIDFILE)&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    kill $(cat &quot;$PIDFILE&quot;)</span><br><span class=\"line\">    sleep 10</span><br><span class=\"line\">    kill -9 $(cat &quot;$PIDFILE&quot;)</span><br><span class=\"line\">    rm -f &quot;$PIDFILE&quot;</span><br><span class=\"line\">    echo STOPPED</span><br><span class=\"line\">fi</span><br><span class=\"line\">exit 0</span><br><span class=\"line\"></span><br><span class=\"line\">echo stop finished.</span><br></pre></td></tr></table></figure>\n<p>jvm.properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Xms1024m -Xmx1024m -Xmn400m</span><br><span class=\"line\">/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/bin/java</span><br></pre></td></tr></table></figure>\n<ul>\n<li>4.编译后就成功啦，之后在jdos上配置一下就可以自动部署了</li>\n</ul>\n"},{"title":"一次MySQL死锁的踩坑记录","author":"YyWang","date":"2020-11-17T06:23:43.000Z","_content":"\n我又写bug了，O(∩_∩)O哈哈~，这次是MySQL数据库的死锁，真实太菜了🤷‍♀️(日常一菜)\n\n### 背景\n\n* 我在实现一个接口，使用动态配置中心的API，创建配置并发布，因为要保证接口的幂等性，我为了方便每次将配置删除并重新创建再发布，相较于先查询所有的配置，判断当前配置不存在后再创建的方法，我觉着会多了判断的逻辑消耗，所以采用了第一种方式： 调用删除配置的api接口清空历史数据 -> 创建新的配置 -> 发布新的配置\n* 接下来介绍一下动态配置中心的背景，创建的配置保存在config_item表中，发布的配置将config_item表中的数据插入到config_item_release表中，两个表的结构是一样的，主要信息粘一下，发布配置是以profile维度(就理解为配置的路径)，所以会有profile_id+key的唯一索引；\n\n```\nconfig_item和config_item_release\n(\n  id bigint not null comment '主键id' primary key,\n  profile_id bigint not null comment 'profile id',\n  `key` varchar(200) not null comment '配置项key',\n  value varchar(6144) not null comment '配置项value',\n  constraint uniq_profile_key\n    unique (profile_id, `key`)\n)\n```\n\n* 这样经过测试是没有问题的，后面我的操作就写了bug，我在测试的过程中发现接口比较慢，想优化一下速度，发现接口的操作都是串行的，我创建并发布的配置比较多，所以马上就会想到改为多线程，再联想到插入config_item_release表是以profileId维度，不同profile是相互隔离的，脑补了一下没问题就开干了\n* 多线程版本后，运行几次后只有很小的概率会成功，这就踩到坑了\n\n\n### 定位\n\n首先要看日志，具体日志找不到了，主要是有下面这么一行，deadlock关键字可以定位到问题了，简单思考一下，数据库的并发操作都是不同的数据行，没有并发对统一数据的写操作，下面就开始科学排查了（Google）\n\n***### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLTransactionRollbackException: Deadlock found when trying to get lock; try restarting transaction***\n\n首先要找到MySQL死锁的日志，都说用这个SQL *SHOW ENGINE INNODB STATUS* 可以看；我怎么搞都不行，最后是用 *select @@log_error* 找到MySQL错误日志的位置，再通过命令行去看的，如下\n\n```\n------------------------\nLATEST DETECTED DEADLOCK\n------------------------\n-- 这行可以定位到头发越来越少的原因了😹\n2020-11-12 03:04:06 0x70000fccb000\n-- 第一个事务\n*** (1) TRANSACTION:\n-- 事务id=69581 正在执行插入语句\nTRANSACTION 69581, ACTIVE 0 sec inserting\n-- 使用到了两张表，加锁了两张表\nmysql tables in use 2, locked 2\n-- 事务处于LOCK WAIT状态，有6种锁结构 其中4个行锁\nLOCK WAIT 6 lock struct(s), heap size 1136, 4 row lock(s), undo log entries 1\n-- 线程信息\nMySQL thread id 627, OS thread handle 123145568219136, query id 21548 localhost 127.0.0.1 root Sending data\n-- 事务发生阻塞的SQL语句\nINSERT INTO config_item_release\n        SELECT * FROM config_item c WHERE c.profile_id=8720\n-- 等待获取的锁\n*** (1) WAITING FOR THIS LOCK TO BE GRANTED:\n-- 等待获取唯一索引insert intention锁 细节1\nRECORD LOCKS space id 1112 page no 1955 n bits 376 index uniq_profile_key of table `my_table`.`config_item_release` trx id 69581 lock_mode X insert intention waiting\n-- 该记录的信息\nRecord lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0\n-- supremum 细节2\n 0: len 8; hex 73757072656d756d; asc supremum;;\n\n-- 第二个事务\n*** (2) TRANSACTION:\nTRANSACTION 69580, ACTIVE 0 sec inserting\nmysql tables in use 2, locked 2\n6 lock struct(s), heap size 1136, 4 row lock(s), undo log entries 1\nMySQL thread id 626, OS thread handle 123145567383552, query id 21549 localhost 127.0.0.1 root Sending data\nINSERT INTO config_item_release\n        SELECT * FROM config_item c WHERE c.profile_id=8721\n-- 当前获取到锁的信息\n*** (2) HOLDS THE LOCK(S):\n-- 当前获取到的时唯一索引的X锁 细节3\nRECORD LOCKS space id 1112 page no 1955 n bits 376 index uniq_profile_key of table `my_table`.`config_item_release` trx id 69580 lock_mode X\nRecord lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0\n 0: len 8; hex 73757072656d756d; asc supremum;;\n\n-- 事务等待获取的锁\n*** (2) WAITING FOR THIS LOCK TO BE GRANTED:\n-- 等待获取唯一索引insert intention锁 细节4\nRECORD LOCKS space id 1112 page no 1955 n bits 376 index uniq_profile_key of table `laf_config`.`config_item_release` trx id 69580 lock_mode X insert intention waiting\nRecord lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0\n 0: len 8; hex 73757072656d756d; asc supremum;;\n\n-- 回滚了事务2\n*** WE ROLL BACK TRANSACTION (2)\n```\n\n在这段日志中，忽略了几个细节导致在排查问题的时候走了很多的弯路\n\n* 事务在等待的锁是Insert Intention锁，这个锁是间隙锁的一种，容易被忽略掉，刚开始的我还以为是insert操作在等待X锁导致排查的方向就做了\n* supremum 代表无穷大，这里也能够猜想到等待锁的时一个区间是(8720,+∞)的间隙锁，这个细节也被我忽略掉了，注意力完全被 lock model X 吸引走了\n* 事务2当前获取到的锁是唯一索引的X锁，与事务1等待的锁是不一样的，还是对Insert Intention锁不了解导致这个细节忽略掉了\n* 事务2等待的锁和事务1等待的锁是相同的，应该是互相等待对方释放形成了闭环所以才会发生死锁，死锁的基本概念都忘了，感觉自己像做梦一样🤷‍♀️\n\n### 分析\n\n* 从死锁的定义来看，多个事物要获取的资源形成了闭环，结合日志来看两个事务都在insert操作时阻塞，等待相同位置资源锁，并且被对方限制\n* 在从日志来看事务1并没有获取到任何的锁，事务2获得的是唯一索引的记录锁，看不出来有什么资源被互相限制；大胆猜想一下，这里一定存在事务已经获取到的锁但是没有在日志中体现出来\n* 从日志中被阻塞到的insert操作和Insert Intention关键字入手查找资料发现了惊人的东西，我的知识体系中存在这巨大漏洞，下面就是被忽略的细节\n\t* 在insert操作之前会有Insert Intention锁(插入意向锁)是间隙锁的一种，从日志来看加锁的间隙为(max,+∞)\n\t* Insert Intention锁之间只要插入的数据不是同一个数据是不会冲突的\n\t* 间隙锁和Insert Intention锁之间也会有互斥的关系，已经存在了G锁(间隙锁)是不能在加I锁(插入意向锁)，相反已经存在I锁是可以再加G锁的\n\t* 两个G锁直接是相互兼容的\n* 在补充了这些知识盲区后，真相浮出水面，两个事务都先加了范围是的G锁，下一步都要执行insert操作，insert之前都要加I锁，I锁都被对方事务事先加号的G锁阻塞，形成了闭环，发生死锁\n* 结合业务逻辑来看\n\t* 第一步删除历史数据清空了config_item_release表的数据\n    * 第二步更新配置，在config_item表中update操作\n    * 第三步发布配置，这个api的逻辑是先删除config_item_release中的记录，在将config_item表中的数据插入进来\n    * 问题就出现在第一步清空了config_item_release表的数据后该表中是没有数据的，第三步先delete操作这时候两个事务会加区间为(max,+∞)的G锁，然后insert操作前会在这个区间加I锁，都被对方的G锁排斥形成死锁，\n* 那么如果是这个问题，在config_item_release表中存在数据时，不同事务delete加G锁的区间不同在加I锁就不会被阻塞就可以避免死锁了(delete操作的加锁过程见参考文章)\n\n### 验证\n\n这里通过两个实验来验证上面的分析结果\n\n#### 实验一：config_item_release不存在数据，两个事务先delete后insert会发生死锁\n\n|事务1|事务2|结果|分析|\n|---|---|---|---|\n|begain||||\n||begain||||\n|DELETE FROM config_item_release WHERE profile_id=9118||Affected rows: 0, Time: 0.002000s|事务1对(max,+∞)区间加G锁|\n||DELETE FROM config_item_release WHERE profile_id=9112|Affected rows: 0, Time: 0.002000s|事务2对(max,+∞)区间加G锁|\n|INSERT INTO config_item_release SELECT * FROM config_item c WHERE c.profile_id=9108|||事务1对(max,+∞)加插入意向锁，被事务2阻塞|\n||INSERT INTO config_item_release SELECT * FROM config_item c WHERE c.profile_id=9112|1213 - Deadlock found when trying to get lock; try restarting transaction, Time: 0.008000s|事务2对(max,+∞)加插入意向锁，被事务1阻塞，出现死锁|\n\n#### 实验二：config_item_release存在数据，两个事务先delete后insert不会发生死锁\n\n首先执行下面两条语句初始化表中的数据\n\n```\nINSERT INTO config_item_release SELECT * FROM config_item c WHERE c.profile_id=9111;\nINSERT INTO config_item_release SELECT * FROM config_item c WHERE c.profile_id=9112;\n```\n\n|事务1|事务2|结果|分析|\n|---|---|---|---|\n|begain||||\n||begain||||\n|DELETE FROM config_item_release WHERE profile_id=9111||Affected rows: 1, Time: 0.000000s|事务1对profile_id=9111记录前的间隙加G锁|\n||DELETE FROM config_item_release WHERE profile_id=9112|Affected rows: 3, Time: 0.000000s|事务2对profile_id=9112记录前的间隙加G锁|\n|INSERT INTO config_item_release SELECT * FROM config_item c WHERE c.profile_id=9111|||事务1阻塞，因为事务2对profile_id=9112之前的间隙加了G锁，9111这条记录刚好在这个区间，事务1要加I锁时被事务2的G锁阻塞|\n||INSERT INTO config_item_release SELECT * FROM config_item c WHERE c.profile_id=9112|Affected rows: 3, Time: 0.000000s|事务2先对9112之前的间隙加I锁这个间隙是当前事务的G锁不冲突没有阻塞|\n||commit|OK, Time: 0.001000s|事务2成功提交，事务1结束阻塞状态|\n|commit||OK, Time: 0.001000s|事务1成功提交|\n\n综上所述，正式由于我先清除了历史数据，在删除表里不存在的记录时多个事务将相同的区间加了G锁，再加I锁时产生死锁，解决：删除业务逻辑中的清除历史数据的操作，保证表中数据存在。\n\n### 总结\n\n* 补充一下自己的知识盲区，重新梳理数据库的锁，详细见[上一篇文章](http://yywang.top/2020/11/16/%E6%8D%8B%E4%B8%80%E6%8D%8BMySQL%E7%9A%84%E9%94%81/#more)\n* 避免删除不存在的记录的操作，这个操作会加G锁，可能多个事务的G锁重叠了导致死锁\n* 删除操作最好是先找到记录的id再根据id删除；因为只有在唯一索引的删除操作才会加R锁其他情况都会有G锁\n\n### 参考资料\n\n[MySQL DELETE 删除语句加锁分析](https://www.fordba.com/lock-analyse-of-delete.html)\n\n[从一个死锁看mysql innodb的锁机制](https://www.iteye.com/blog/narcissusoyf-1637309)\n\n[一个死锁问题](http://xiaobaoqiu.github.io/blog/2016/07/22/%5B%3F%5D-ge-si-suo-wen-ti/)\n\n[MySQL加锁分析](http://www.fanyilun.me/2017/04/20/MySQL%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90/)","source":"_posts/一次MySQL死锁的踩坑记录.md","raw":"title: 一次MySQL死锁的踩坑记录\nauthor: YyWang\ntags: MySQL\ncategories: MySQL\ndate: 2020-11-17 14:23:43\n---\n\n我又写bug了，O(∩_∩)O哈哈~，这次是MySQL数据库的死锁，真实太菜了🤷‍♀️(日常一菜)\n\n### 背景\n\n* 我在实现一个接口，使用动态配置中心的API，创建配置并发布，因为要保证接口的幂等性，我为了方便每次将配置删除并重新创建再发布，相较于先查询所有的配置，判断当前配置不存在后再创建的方法，我觉着会多了判断的逻辑消耗，所以采用了第一种方式： 调用删除配置的api接口清空历史数据 -> 创建新的配置 -> 发布新的配置\n* 接下来介绍一下动态配置中心的背景，创建的配置保存在config_item表中，发布的配置将config_item表中的数据插入到config_item_release表中，两个表的结构是一样的，主要信息粘一下，发布配置是以profile维度(就理解为配置的路径)，所以会有profile_id+key的唯一索引；\n\n```\nconfig_item和config_item_release\n(\n  id bigint not null comment '主键id' primary key,\n  profile_id bigint not null comment 'profile id',\n  `key` varchar(200) not null comment '配置项key',\n  value varchar(6144) not null comment '配置项value',\n  constraint uniq_profile_key\n    unique (profile_id, `key`)\n)\n```\n\n* 这样经过测试是没有问题的，后面我的操作就写了bug，我在测试的过程中发现接口比较慢，想优化一下速度，发现接口的操作都是串行的，我创建并发布的配置比较多，所以马上就会想到改为多线程，再联想到插入config_item_release表是以profileId维度，不同profile是相互隔离的，脑补了一下没问题就开干了\n* 多线程版本后，运行几次后只有很小的概率会成功，这就踩到坑了\n\n\n### 定位\n\n首先要看日志，具体日志找不到了，主要是有下面这么一行，deadlock关键字可以定位到问题了，简单思考一下，数据库的并发操作都是不同的数据行，没有并发对统一数据的写操作，下面就开始科学排查了（Google）\n\n***### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLTransactionRollbackException: Deadlock found when trying to get lock; try restarting transaction***\n\n首先要找到MySQL死锁的日志，都说用这个SQL *SHOW ENGINE INNODB STATUS* 可以看；我怎么搞都不行，最后是用 *select @@log_error* 找到MySQL错误日志的位置，再通过命令行去看的，如下\n\n```\n------------------------\nLATEST DETECTED DEADLOCK\n------------------------\n-- 这行可以定位到头发越来越少的原因了😹\n2020-11-12 03:04:06 0x70000fccb000\n-- 第一个事务\n*** (1) TRANSACTION:\n-- 事务id=69581 正在执行插入语句\nTRANSACTION 69581, ACTIVE 0 sec inserting\n-- 使用到了两张表，加锁了两张表\nmysql tables in use 2, locked 2\n-- 事务处于LOCK WAIT状态，有6种锁结构 其中4个行锁\nLOCK WAIT 6 lock struct(s), heap size 1136, 4 row lock(s), undo log entries 1\n-- 线程信息\nMySQL thread id 627, OS thread handle 123145568219136, query id 21548 localhost 127.0.0.1 root Sending data\n-- 事务发生阻塞的SQL语句\nINSERT INTO config_item_release\n        SELECT * FROM config_item c WHERE c.profile_id=8720\n-- 等待获取的锁\n*** (1) WAITING FOR THIS LOCK TO BE GRANTED:\n-- 等待获取唯一索引insert intention锁 细节1\nRECORD LOCKS space id 1112 page no 1955 n bits 376 index uniq_profile_key of table `my_table`.`config_item_release` trx id 69581 lock_mode X insert intention waiting\n-- 该记录的信息\nRecord lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0\n-- supremum 细节2\n 0: len 8; hex 73757072656d756d; asc supremum;;\n\n-- 第二个事务\n*** (2) TRANSACTION:\nTRANSACTION 69580, ACTIVE 0 sec inserting\nmysql tables in use 2, locked 2\n6 lock struct(s), heap size 1136, 4 row lock(s), undo log entries 1\nMySQL thread id 626, OS thread handle 123145567383552, query id 21549 localhost 127.0.0.1 root Sending data\nINSERT INTO config_item_release\n        SELECT * FROM config_item c WHERE c.profile_id=8721\n-- 当前获取到锁的信息\n*** (2) HOLDS THE LOCK(S):\n-- 当前获取到的时唯一索引的X锁 细节3\nRECORD LOCKS space id 1112 page no 1955 n bits 376 index uniq_profile_key of table `my_table`.`config_item_release` trx id 69580 lock_mode X\nRecord lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0\n 0: len 8; hex 73757072656d756d; asc supremum;;\n\n-- 事务等待获取的锁\n*** (2) WAITING FOR THIS LOCK TO BE GRANTED:\n-- 等待获取唯一索引insert intention锁 细节4\nRECORD LOCKS space id 1112 page no 1955 n bits 376 index uniq_profile_key of table `laf_config`.`config_item_release` trx id 69580 lock_mode X insert intention waiting\nRecord lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0\n 0: len 8; hex 73757072656d756d; asc supremum;;\n\n-- 回滚了事务2\n*** WE ROLL BACK TRANSACTION (2)\n```\n\n在这段日志中，忽略了几个细节导致在排查问题的时候走了很多的弯路\n\n* 事务在等待的锁是Insert Intention锁，这个锁是间隙锁的一种，容易被忽略掉，刚开始的我还以为是insert操作在等待X锁导致排查的方向就做了\n* supremum 代表无穷大，这里也能够猜想到等待锁的时一个区间是(8720,+∞)的间隙锁，这个细节也被我忽略掉了，注意力完全被 lock model X 吸引走了\n* 事务2当前获取到的锁是唯一索引的X锁，与事务1等待的锁是不一样的，还是对Insert Intention锁不了解导致这个细节忽略掉了\n* 事务2等待的锁和事务1等待的锁是相同的，应该是互相等待对方释放形成了闭环所以才会发生死锁，死锁的基本概念都忘了，感觉自己像做梦一样🤷‍♀️\n\n### 分析\n\n* 从死锁的定义来看，多个事物要获取的资源形成了闭环，结合日志来看两个事务都在insert操作时阻塞，等待相同位置资源锁，并且被对方限制\n* 在从日志来看事务1并没有获取到任何的锁，事务2获得的是唯一索引的记录锁，看不出来有什么资源被互相限制；大胆猜想一下，这里一定存在事务已经获取到的锁但是没有在日志中体现出来\n* 从日志中被阻塞到的insert操作和Insert Intention关键字入手查找资料发现了惊人的东西，我的知识体系中存在这巨大漏洞，下面就是被忽略的细节\n\t* 在insert操作之前会有Insert Intention锁(插入意向锁)是间隙锁的一种，从日志来看加锁的间隙为(max,+∞)\n\t* Insert Intention锁之间只要插入的数据不是同一个数据是不会冲突的\n\t* 间隙锁和Insert Intention锁之间也会有互斥的关系，已经存在了G锁(间隙锁)是不能在加I锁(插入意向锁)，相反已经存在I锁是可以再加G锁的\n\t* 两个G锁直接是相互兼容的\n* 在补充了这些知识盲区后，真相浮出水面，两个事务都先加了范围是的G锁，下一步都要执行insert操作，insert之前都要加I锁，I锁都被对方事务事先加号的G锁阻塞，形成了闭环，发生死锁\n* 结合业务逻辑来看\n\t* 第一步删除历史数据清空了config_item_release表的数据\n    * 第二步更新配置，在config_item表中update操作\n    * 第三步发布配置，这个api的逻辑是先删除config_item_release中的记录，在将config_item表中的数据插入进来\n    * 问题就出现在第一步清空了config_item_release表的数据后该表中是没有数据的，第三步先delete操作这时候两个事务会加区间为(max,+∞)的G锁，然后insert操作前会在这个区间加I锁，都被对方的G锁排斥形成死锁，\n* 那么如果是这个问题，在config_item_release表中存在数据时，不同事务delete加G锁的区间不同在加I锁就不会被阻塞就可以避免死锁了(delete操作的加锁过程见参考文章)\n\n### 验证\n\n这里通过两个实验来验证上面的分析结果\n\n#### 实验一：config_item_release不存在数据，两个事务先delete后insert会发生死锁\n\n|事务1|事务2|结果|分析|\n|---|---|---|---|\n|begain||||\n||begain||||\n|DELETE FROM config_item_release WHERE profile_id=9118||Affected rows: 0, Time: 0.002000s|事务1对(max,+∞)区间加G锁|\n||DELETE FROM config_item_release WHERE profile_id=9112|Affected rows: 0, Time: 0.002000s|事务2对(max,+∞)区间加G锁|\n|INSERT INTO config_item_release SELECT * FROM config_item c WHERE c.profile_id=9108|||事务1对(max,+∞)加插入意向锁，被事务2阻塞|\n||INSERT INTO config_item_release SELECT * FROM config_item c WHERE c.profile_id=9112|1213 - Deadlock found when trying to get lock; try restarting transaction, Time: 0.008000s|事务2对(max,+∞)加插入意向锁，被事务1阻塞，出现死锁|\n\n#### 实验二：config_item_release存在数据，两个事务先delete后insert不会发生死锁\n\n首先执行下面两条语句初始化表中的数据\n\n```\nINSERT INTO config_item_release SELECT * FROM config_item c WHERE c.profile_id=9111;\nINSERT INTO config_item_release SELECT * FROM config_item c WHERE c.profile_id=9112;\n```\n\n|事务1|事务2|结果|分析|\n|---|---|---|---|\n|begain||||\n||begain||||\n|DELETE FROM config_item_release WHERE profile_id=9111||Affected rows: 1, Time: 0.000000s|事务1对profile_id=9111记录前的间隙加G锁|\n||DELETE FROM config_item_release WHERE profile_id=9112|Affected rows: 3, Time: 0.000000s|事务2对profile_id=9112记录前的间隙加G锁|\n|INSERT INTO config_item_release SELECT * FROM config_item c WHERE c.profile_id=9111|||事务1阻塞，因为事务2对profile_id=9112之前的间隙加了G锁，9111这条记录刚好在这个区间，事务1要加I锁时被事务2的G锁阻塞|\n||INSERT INTO config_item_release SELECT * FROM config_item c WHERE c.profile_id=9112|Affected rows: 3, Time: 0.000000s|事务2先对9112之前的间隙加I锁这个间隙是当前事务的G锁不冲突没有阻塞|\n||commit|OK, Time: 0.001000s|事务2成功提交，事务1结束阻塞状态|\n|commit||OK, Time: 0.001000s|事务1成功提交|\n\n综上所述，正式由于我先清除了历史数据，在删除表里不存在的记录时多个事务将相同的区间加了G锁，再加I锁时产生死锁，解决：删除业务逻辑中的清除历史数据的操作，保证表中数据存在。\n\n### 总结\n\n* 补充一下自己的知识盲区，重新梳理数据库的锁，详细见[上一篇文章](http://yywang.top/2020/11/16/%E6%8D%8B%E4%B8%80%E6%8D%8BMySQL%E7%9A%84%E9%94%81/#more)\n* 避免删除不存在的记录的操作，这个操作会加G锁，可能多个事务的G锁重叠了导致死锁\n* 删除操作最好是先找到记录的id再根据id删除；因为只有在唯一索引的删除操作才会加R锁其他情况都会有G锁\n\n### 参考资料\n\n[MySQL DELETE 删除语句加锁分析](https://www.fordba.com/lock-analyse-of-delete.html)\n\n[从一个死锁看mysql innodb的锁机制](https://www.iteye.com/blog/narcissusoyf-1637309)\n\n[一个死锁问题](http://xiaobaoqiu.github.io/blog/2016/07/22/%5B%3F%5D-ge-si-suo-wen-ti/)\n\n[MySQL加锁分析](http://www.fanyilun.me/2017/04/20/MySQL%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90/)","slug":"一次MySQL死锁的踩坑记录","published":1,"updated":"2021-07-13T12:27:08.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj7l002t81fyg8zcl694","content":"<p>我又写bug了，O(∩_∩)O哈哈~，这次是MySQL数据库的死锁，真实太菜了🤷‍♀️(日常一菜)</p>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><ul>\n<li>我在实现一个接口，使用动态配置中心的API，创建配置并发布，因为要保证接口的幂等性，我为了方便每次将配置删除并重新创建再发布，相较于先查询所有的配置，判断当前配置不存在后再创建的方法，我觉着会多了判断的逻辑消耗，所以采用了第一种方式： 调用删除配置的api接口清空历史数据 -&gt; 创建新的配置 -&gt; 发布新的配置</li>\n<li>接下来介绍一下动态配置中心的背景，创建的配置保存在config_item表中，发布的配置将config_item表中的数据插入到config_item_release表中，两个表的结构是一样的，主要信息粘一下，发布配置是以profile维度(就理解为配置的路径)，所以会有profile_id+key的唯一索引；</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config_item和config_item_release</span><br><span class=\"line\">(</span><br><span class=\"line\">  id bigint not null comment &apos;主键id&apos; primary key,</span><br><span class=\"line\">  profile_id bigint not null comment &apos;profile id&apos;,</span><br><span class=\"line\">  `key` varchar(200) not null comment &apos;配置项key&apos;,</span><br><span class=\"line\">  value varchar(6144) not null comment &apos;配置项value&apos;,</span><br><span class=\"line\">  constraint uniq_profile_key</span><br><span class=\"line\">    unique (profile_id, `key`)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这样经过测试是没有问题的，后面我的操作就写了bug，我在测试的过程中发现接口比较慢，想优化一下速度，发现接口的操作都是串行的，我创建并发布的配置比较多，所以马上就会想到改为多线程，再联想到插入config_item_release表是以profileId维度，不同profile是相互隔离的，脑补了一下没问题就开干了</li>\n<li>多线程版本后，运行几次后只有很小的概率会成功，这就踩到坑了</li>\n</ul>\n<h3 id=\"定位\"><a href=\"#定位\" class=\"headerlink\" title=\"定位\"></a>定位</h3><p>首先要看日志，具体日志找不到了，主要是有下面这么一行，deadlock关键字可以定位到问题了，简单思考一下，数据库的并发操作都是不同的数据行，没有并发对统一数据的写操作，下面就开始科学排查了（Google）</p>\n<p><strong><em>### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLTransactionRollbackException: Deadlock found when trying to get lock; try restarting transaction</em></strong></p>\n<p>首先要找到MySQL死锁的日志，都说用这个SQL <em>SHOW ENGINE INNODB STATUS</em> 可以看；我怎么搞都不行，最后是用 <em>select @@log_error</em> 找到MySQL错误日志的位置，再通过命令行去看的，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">------------------------</span><br><span class=\"line\">LATEST DETECTED DEADLOCK</span><br><span class=\"line\">------------------------</span><br><span class=\"line\">-- 这行可以定位到头发越来越少的原因了😹</span><br><span class=\"line\">2020-11-12 03:04:06 0x70000fccb000</span><br><span class=\"line\">-- 第一个事务</span><br><span class=\"line\">*** (1) TRANSACTION:</span><br><span class=\"line\">-- 事务id=69581 正在执行插入语句</span><br><span class=\"line\">TRANSACTION 69581, ACTIVE 0 sec inserting</span><br><span class=\"line\">-- 使用到了两张表，加锁了两张表</span><br><span class=\"line\">mysql tables in use 2, locked 2</span><br><span class=\"line\">-- 事务处于LOCK WAIT状态，有6种锁结构 其中4个行锁</span><br><span class=\"line\">LOCK WAIT 6 lock struct(s), heap size 1136, 4 row lock(s), undo log entries 1</span><br><span class=\"line\">-- 线程信息</span><br><span class=\"line\">MySQL thread id 627, OS thread handle 123145568219136, query id 21548 localhost 127.0.0.1 root Sending data</span><br><span class=\"line\">-- 事务发生阻塞的SQL语句</span><br><span class=\"line\">INSERT INTO config_item_release</span><br><span class=\"line\">        SELECT * FROM config_item c WHERE c.profile_id=8720</span><br><span class=\"line\">-- 等待获取的锁</span><br><span class=\"line\">*** (1) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class=\"line\">-- 等待获取唯一索引insert intention锁 细节1</span><br><span class=\"line\">RECORD LOCKS space id 1112 page no 1955 n bits 376 index uniq_profile_key of table `my_table`.`config_item_release` trx id 69581 lock_mode X insert intention waiting</span><br><span class=\"line\">-- 该记录的信息</span><br><span class=\"line\">Record lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0</span><br><span class=\"line\">-- supremum 细节2</span><br><span class=\"line\"> 0: len 8; hex 73757072656d756d; asc supremum;;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 第二个事务</span><br><span class=\"line\">*** (2) TRANSACTION:</span><br><span class=\"line\">TRANSACTION 69580, ACTIVE 0 sec inserting</span><br><span class=\"line\">mysql tables in use 2, locked 2</span><br><span class=\"line\">6 lock struct(s), heap size 1136, 4 row lock(s), undo log entries 1</span><br><span class=\"line\">MySQL thread id 626, OS thread handle 123145567383552, query id 21549 localhost 127.0.0.1 root Sending data</span><br><span class=\"line\">INSERT INTO config_item_release</span><br><span class=\"line\">        SELECT * FROM config_item c WHERE c.profile_id=8721</span><br><span class=\"line\">-- 当前获取到锁的信息</span><br><span class=\"line\">*** (2) HOLDS THE LOCK(S):</span><br><span class=\"line\">-- 当前获取到的时唯一索引的X锁 细节3</span><br><span class=\"line\">RECORD LOCKS space id 1112 page no 1955 n bits 376 index uniq_profile_key of table `my_table`.`config_item_release` trx id 69580 lock_mode X</span><br><span class=\"line\">Record lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0</span><br><span class=\"line\"> 0: len 8; hex 73757072656d756d; asc supremum;;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 事务等待获取的锁</span><br><span class=\"line\">*** (2) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class=\"line\">-- 等待获取唯一索引insert intention锁 细节4</span><br><span class=\"line\">RECORD LOCKS space id 1112 page no 1955 n bits 376 index uniq_profile_key of table `laf_config`.`config_item_release` trx id 69580 lock_mode X insert intention waiting</span><br><span class=\"line\">Record lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0</span><br><span class=\"line\"> 0: len 8; hex 73757072656d756d; asc supremum;;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 回滚了事务2</span><br><span class=\"line\">*** WE ROLL BACK TRANSACTION (2)</span><br></pre></td></tr></table></figure>\n<p>在这段日志中，忽略了几个细节导致在排查问题的时候走了很多的弯路</p>\n<ul>\n<li>事务在等待的锁是Insert Intention锁，这个锁是间隙锁的一种，容易被忽略掉，刚开始的我还以为是insert操作在等待X锁导致排查的方向就做了</li>\n<li>supremum 代表无穷大，这里也能够猜想到等待锁的时一个区间是(8720,+∞)的间隙锁，这个细节也被我忽略掉了，注意力完全被 lock model X 吸引走了</li>\n<li>事务2当前获取到的锁是唯一索引的X锁，与事务1等待的锁是不一样的，还是对Insert Intention锁不了解导致这个细节忽略掉了</li>\n<li>事务2等待的锁和事务1等待的锁是相同的，应该是互相等待对方释放形成了闭环所以才会发生死锁，死锁的基本概念都忘了，感觉自己像做梦一样🤷‍♀️</li>\n</ul>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><ul>\n<li>从死锁的定义来看，多个事物要获取的资源形成了闭环，结合日志来看两个事务都在insert操作时阻塞，等待相同位置资源锁，并且被对方限制</li>\n<li>在从日志来看事务1并没有获取到任何的锁，事务2获得的是唯一索引的记录锁，看不出来有什么资源被互相限制；大胆猜想一下，这里一定存在事务已经获取到的锁但是没有在日志中体现出来</li>\n<li>从日志中被阻塞到的insert操作和Insert Intention关键字入手查找资料发现了惊人的东西，我的知识体系中存在这巨大漏洞，下面就是被忽略的细节<ul>\n<li>在insert操作之前会有Insert Intention锁(插入意向锁)是间隙锁的一种，从日志来看加锁的间隙为(max,+∞)</li>\n<li>Insert Intention锁之间只要插入的数据不是同一个数据是不会冲突的</li>\n<li>间隙锁和Insert Intention锁之间也会有互斥的关系，已经存在了G锁(间隙锁)是不能在加I锁(插入意向锁)，相反已经存在I锁是可以再加G锁的</li>\n<li>两个G锁直接是相互兼容的</li>\n</ul>\n</li>\n<li>在补充了这些知识盲区后，真相浮出水面，两个事务都先加了范围是的G锁，下一步都要执行insert操作，insert之前都要加I锁，I锁都被对方事务事先加号的G锁阻塞，形成了闭环，发生死锁</li>\n<li>结合业务逻辑来看<ul>\n<li>第一步删除历史数据清空了config_item_release表的数据</li>\n<li>第二步更新配置，在config_item表中update操作</li>\n<li>第三步发布配置，这个api的逻辑是先删除config_item_release中的记录，在将config_item表中的数据插入进来</li>\n<li>问题就出现在第一步清空了config_item_release表的数据后该表中是没有数据的，第三步先delete操作这时候两个事务会加区间为(max,+∞)的G锁，然后insert操作前会在这个区间加I锁，都被对方的G锁排斥形成死锁，</li>\n</ul>\n</li>\n<li>那么如果是这个问题，在config_item_release表中存在数据时，不同事务delete加G锁的区间不同在加I锁就不会被阻塞就可以避免死锁了(delete操作的加锁过程见参考文章)</li>\n</ul>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p>这里通过两个实验来验证上面的分析结果</p>\n<h4 id=\"实验一：config-item-release不存在数据，两个事务先delete后insert会发生死锁\"><a href=\"#实验一：config-item-release不存在数据，两个事务先delete后insert会发生死锁\" class=\"headerlink\" title=\"实验一：config_item_release不存在数据，两个事务先delete后insert会发生死锁\"></a>实验一：config_item_release不存在数据，两个事务先delete后insert会发生死锁</h4><table>\n<thead>\n<tr>\n<th>事务1</th>\n<th>事务2</th>\n<th>结果</th>\n<th>分析</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>begain</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>begain</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>DELETE FROM config_item_release WHERE profile_id=9118</td>\n<td></td>\n<td>Affected rows: 0, Time: 0.002000s</td>\n<td>事务1对(max,+∞)区间加G锁</td>\n</tr>\n<tr>\n<td></td>\n<td>DELETE FROM config_item_release WHERE profile_id=9112</td>\n<td>Affected rows: 0, Time: 0.002000s</td>\n<td>事务2对(max,+∞)区间加G锁</td>\n</tr>\n<tr>\n<td>INSERT INTO config_item_release SELECT * FROM config_item c WHERE c.profile_id=9108</td>\n<td></td>\n<td></td>\n<td>事务1对(max,+∞)加插入意向锁，被事务2阻塞</td>\n</tr>\n<tr>\n<td></td>\n<td>INSERT INTO config_item_release SELECT * FROM config_item c WHERE c.profile_id=9112</td>\n<td>1213 - Deadlock found when trying to get lock; try restarting transaction, Time: 0.008000s</td>\n<td>事务2对(max,+∞)加插入意向锁，被事务1阻塞，出现死锁</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"实验二：config-item-release存在数据，两个事务先delete后insert不会发生死锁\"><a href=\"#实验二：config-item-release存在数据，两个事务先delete后insert不会发生死锁\" class=\"headerlink\" title=\"实验二：config_item_release存在数据，两个事务先delete后insert不会发生死锁\"></a>实验二：config_item_release存在数据，两个事务先delete后insert不会发生死锁</h4><p>首先执行下面两条语句初始化表中的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO config_item_release SELECT * FROM config_item c WHERE c.profile_id=9111;</span><br><span class=\"line\">INSERT INTO config_item_release SELECT * FROM config_item c WHERE c.profile_id=9112;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>事务1</th>\n<th>事务2</th>\n<th>结果</th>\n<th>分析</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>begain</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>begain</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>DELETE FROM config_item_release WHERE profile_id=9111</td>\n<td></td>\n<td>Affected rows: 1, Time: 0.000000s</td>\n<td>事务1对profile_id=9111记录前的间隙加G锁</td>\n</tr>\n<tr>\n<td></td>\n<td>DELETE FROM config_item_release WHERE profile_id=9112</td>\n<td>Affected rows: 3, Time: 0.000000s</td>\n<td>事务2对profile_id=9112记录前的间隙加G锁</td>\n</tr>\n<tr>\n<td>INSERT INTO config_item_release SELECT * FROM config_item c WHERE c.profile_id=9111</td>\n<td></td>\n<td></td>\n<td>事务1阻塞，因为事务2对profile_id=9112之前的间隙加了G锁，9111这条记录刚好在这个区间，事务1要加I锁时被事务2的G锁阻塞</td>\n</tr>\n<tr>\n<td></td>\n<td>INSERT INTO config_item_release SELECT * FROM config_item c WHERE c.profile_id=9112</td>\n<td>Affected rows: 3, Time: 0.000000s</td>\n<td>事务2先对9112之前的间隙加I锁这个间隙是当前事务的G锁不冲突没有阻塞</td>\n</tr>\n<tr>\n<td></td>\n<td>commit</td>\n<td>OK, Time: 0.001000s</td>\n<td>事务2成功提交，事务1结束阻塞状态</td>\n</tr>\n<tr>\n<td>commit</td>\n<td></td>\n<td>OK, Time: 0.001000s</td>\n<td>事务1成功提交</td>\n</tr>\n</tbody>\n</table>\n<p>综上所述，正式由于我先清除了历史数据，在删除表里不存在的记录时多个事务将相同的区间加了G锁，再加I锁时产生死锁，解决：删除业务逻辑中的清除历史数据的操作，保证表中数据存在。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>补充一下自己的知识盲区，重新梳理数据库的锁，详细见<a href=\"http://yywang.top/2020/11/16/%E6%8D%8B%E4%B8%80%E6%8D%8BMySQL%E7%9A%84%E9%94%81/#more\" target=\"_blank\" rel=\"noopener\">上一篇文章</a></li>\n<li>避免删除不存在的记录的操作，这个操作会加G锁，可能多个事务的G锁重叠了导致死锁</li>\n<li>删除操作最好是先找到记录的id再根据id删除；因为只有在唯一索引的删除操作才会加R锁其他情况都会有G锁</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://www.fordba.com/lock-analyse-of-delete.html\" target=\"_blank\" rel=\"noopener\">MySQL DELETE 删除语句加锁分析</a></p>\n<p><a href=\"https://www.iteye.com/blog/narcissusoyf-1637309\" target=\"_blank\" rel=\"noopener\">从一个死锁看mysql innodb的锁机制</a></p>\n<p><a href=\"http://xiaobaoqiu.github.io/blog/2016/07/22/%5B%3F%5D-ge-si-suo-wen-ti/\" target=\"_blank\" rel=\"noopener\">一个死锁问题</a></p>\n<p><a href=\"http://www.fanyilun.me/2017/04/20/MySQL%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90/\" target=\"_blank\" rel=\"noopener\">MySQL加锁分析</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>我又写bug了，O(∩_∩)O哈哈~，这次是MySQL数据库的死锁，真实太菜了🤷‍♀️(日常一菜)</p>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><ul>\n<li>我在实现一个接口，使用动态配置中心的API，创建配置并发布，因为要保证接口的幂等性，我为了方便每次将配置删除并重新创建再发布，相较于先查询所有的配置，判断当前配置不存在后再创建的方法，我觉着会多了判断的逻辑消耗，所以采用了第一种方式： 调用删除配置的api接口清空历史数据 -&gt; 创建新的配置 -&gt; 发布新的配置</li>\n<li>接下来介绍一下动态配置中心的背景，创建的配置保存在config_item表中，发布的配置将config_item表中的数据插入到config_item_release表中，两个表的结构是一样的，主要信息粘一下，发布配置是以profile维度(就理解为配置的路径)，所以会有profile_id+key的唯一索引；</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config_item和config_item_release</span><br><span class=\"line\">(</span><br><span class=\"line\">  id bigint not null comment &apos;主键id&apos; primary key,</span><br><span class=\"line\">  profile_id bigint not null comment &apos;profile id&apos;,</span><br><span class=\"line\">  `key` varchar(200) not null comment &apos;配置项key&apos;,</span><br><span class=\"line\">  value varchar(6144) not null comment &apos;配置项value&apos;,</span><br><span class=\"line\">  constraint uniq_profile_key</span><br><span class=\"line\">    unique (profile_id, `key`)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这样经过测试是没有问题的，后面我的操作就写了bug，我在测试的过程中发现接口比较慢，想优化一下速度，发现接口的操作都是串行的，我创建并发布的配置比较多，所以马上就会想到改为多线程，再联想到插入config_item_release表是以profileId维度，不同profile是相互隔离的，脑补了一下没问题就开干了</li>\n<li>多线程版本后，运行几次后只有很小的概率会成功，这就踩到坑了</li>\n</ul>\n<h3 id=\"定位\"><a href=\"#定位\" class=\"headerlink\" title=\"定位\"></a>定位</h3><p>首先要看日志，具体日志找不到了，主要是有下面这么一行，deadlock关键字可以定位到问题了，简单思考一下，数据库的并发操作都是不同的数据行，没有并发对统一数据的写操作，下面就开始科学排查了（Google）</p>\n<p><strong><em>### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLTransactionRollbackException: Deadlock found when trying to get lock; try restarting transaction</em></strong></p>\n<p>首先要找到MySQL死锁的日志，都说用这个SQL <em>SHOW ENGINE INNODB STATUS</em> 可以看；我怎么搞都不行，最后是用 <em>select @@log_error</em> 找到MySQL错误日志的位置，再通过命令行去看的，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">------------------------</span><br><span class=\"line\">LATEST DETECTED DEADLOCK</span><br><span class=\"line\">------------------------</span><br><span class=\"line\">-- 这行可以定位到头发越来越少的原因了😹</span><br><span class=\"line\">2020-11-12 03:04:06 0x70000fccb000</span><br><span class=\"line\">-- 第一个事务</span><br><span class=\"line\">*** (1) TRANSACTION:</span><br><span class=\"line\">-- 事务id=69581 正在执行插入语句</span><br><span class=\"line\">TRANSACTION 69581, ACTIVE 0 sec inserting</span><br><span class=\"line\">-- 使用到了两张表，加锁了两张表</span><br><span class=\"line\">mysql tables in use 2, locked 2</span><br><span class=\"line\">-- 事务处于LOCK WAIT状态，有6种锁结构 其中4个行锁</span><br><span class=\"line\">LOCK WAIT 6 lock struct(s), heap size 1136, 4 row lock(s), undo log entries 1</span><br><span class=\"line\">-- 线程信息</span><br><span class=\"line\">MySQL thread id 627, OS thread handle 123145568219136, query id 21548 localhost 127.0.0.1 root Sending data</span><br><span class=\"line\">-- 事务发生阻塞的SQL语句</span><br><span class=\"line\">INSERT INTO config_item_release</span><br><span class=\"line\">        SELECT * FROM config_item c WHERE c.profile_id=8720</span><br><span class=\"line\">-- 等待获取的锁</span><br><span class=\"line\">*** (1) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class=\"line\">-- 等待获取唯一索引insert intention锁 细节1</span><br><span class=\"line\">RECORD LOCKS space id 1112 page no 1955 n bits 376 index uniq_profile_key of table `my_table`.`config_item_release` trx id 69581 lock_mode X insert intention waiting</span><br><span class=\"line\">-- 该记录的信息</span><br><span class=\"line\">Record lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0</span><br><span class=\"line\">-- supremum 细节2</span><br><span class=\"line\"> 0: len 8; hex 73757072656d756d; asc supremum;;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 第二个事务</span><br><span class=\"line\">*** (2) TRANSACTION:</span><br><span class=\"line\">TRANSACTION 69580, ACTIVE 0 sec inserting</span><br><span class=\"line\">mysql tables in use 2, locked 2</span><br><span class=\"line\">6 lock struct(s), heap size 1136, 4 row lock(s), undo log entries 1</span><br><span class=\"line\">MySQL thread id 626, OS thread handle 123145567383552, query id 21549 localhost 127.0.0.1 root Sending data</span><br><span class=\"line\">INSERT INTO config_item_release</span><br><span class=\"line\">        SELECT * FROM config_item c WHERE c.profile_id=8721</span><br><span class=\"line\">-- 当前获取到锁的信息</span><br><span class=\"line\">*** (2) HOLDS THE LOCK(S):</span><br><span class=\"line\">-- 当前获取到的时唯一索引的X锁 细节3</span><br><span class=\"line\">RECORD LOCKS space id 1112 page no 1955 n bits 376 index uniq_profile_key of table `my_table`.`config_item_release` trx id 69580 lock_mode X</span><br><span class=\"line\">Record lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0</span><br><span class=\"line\"> 0: len 8; hex 73757072656d756d; asc supremum;;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 事务等待获取的锁</span><br><span class=\"line\">*** (2) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class=\"line\">-- 等待获取唯一索引insert intention锁 细节4</span><br><span class=\"line\">RECORD LOCKS space id 1112 page no 1955 n bits 376 index uniq_profile_key of table `laf_config`.`config_item_release` trx id 69580 lock_mode X insert intention waiting</span><br><span class=\"line\">Record lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0</span><br><span class=\"line\"> 0: len 8; hex 73757072656d756d; asc supremum;;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 回滚了事务2</span><br><span class=\"line\">*** WE ROLL BACK TRANSACTION (2)</span><br></pre></td></tr></table></figure>\n<p>在这段日志中，忽略了几个细节导致在排查问题的时候走了很多的弯路</p>\n<ul>\n<li>事务在等待的锁是Insert Intention锁，这个锁是间隙锁的一种，容易被忽略掉，刚开始的我还以为是insert操作在等待X锁导致排查的方向就做了</li>\n<li>supremum 代表无穷大，这里也能够猜想到等待锁的时一个区间是(8720,+∞)的间隙锁，这个细节也被我忽略掉了，注意力完全被 lock model X 吸引走了</li>\n<li>事务2当前获取到的锁是唯一索引的X锁，与事务1等待的锁是不一样的，还是对Insert Intention锁不了解导致这个细节忽略掉了</li>\n<li>事务2等待的锁和事务1等待的锁是相同的，应该是互相等待对方释放形成了闭环所以才会发生死锁，死锁的基本概念都忘了，感觉自己像做梦一样🤷‍♀️</li>\n</ul>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><ul>\n<li>从死锁的定义来看，多个事物要获取的资源形成了闭环，结合日志来看两个事务都在insert操作时阻塞，等待相同位置资源锁，并且被对方限制</li>\n<li>在从日志来看事务1并没有获取到任何的锁，事务2获得的是唯一索引的记录锁，看不出来有什么资源被互相限制；大胆猜想一下，这里一定存在事务已经获取到的锁但是没有在日志中体现出来</li>\n<li>从日志中被阻塞到的insert操作和Insert Intention关键字入手查找资料发现了惊人的东西，我的知识体系中存在这巨大漏洞，下面就是被忽略的细节<ul>\n<li>在insert操作之前会有Insert Intention锁(插入意向锁)是间隙锁的一种，从日志来看加锁的间隙为(max,+∞)</li>\n<li>Insert Intention锁之间只要插入的数据不是同一个数据是不会冲突的</li>\n<li>间隙锁和Insert Intention锁之间也会有互斥的关系，已经存在了G锁(间隙锁)是不能在加I锁(插入意向锁)，相反已经存在I锁是可以再加G锁的</li>\n<li>两个G锁直接是相互兼容的</li>\n</ul>\n</li>\n<li>在补充了这些知识盲区后，真相浮出水面，两个事务都先加了范围是的G锁，下一步都要执行insert操作，insert之前都要加I锁，I锁都被对方事务事先加号的G锁阻塞，形成了闭环，发生死锁</li>\n<li>结合业务逻辑来看<ul>\n<li>第一步删除历史数据清空了config_item_release表的数据</li>\n<li>第二步更新配置，在config_item表中update操作</li>\n<li>第三步发布配置，这个api的逻辑是先删除config_item_release中的记录，在将config_item表中的数据插入进来</li>\n<li>问题就出现在第一步清空了config_item_release表的数据后该表中是没有数据的，第三步先delete操作这时候两个事务会加区间为(max,+∞)的G锁，然后insert操作前会在这个区间加I锁，都被对方的G锁排斥形成死锁，</li>\n</ul>\n</li>\n<li>那么如果是这个问题，在config_item_release表中存在数据时，不同事务delete加G锁的区间不同在加I锁就不会被阻塞就可以避免死锁了(delete操作的加锁过程见参考文章)</li>\n</ul>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p>这里通过两个实验来验证上面的分析结果</p>\n<h4 id=\"实验一：config-item-release不存在数据，两个事务先delete后insert会发生死锁\"><a href=\"#实验一：config-item-release不存在数据，两个事务先delete后insert会发生死锁\" class=\"headerlink\" title=\"实验一：config_item_release不存在数据，两个事务先delete后insert会发生死锁\"></a>实验一：config_item_release不存在数据，两个事务先delete后insert会发生死锁</h4><table>\n<thead>\n<tr>\n<th>事务1</th>\n<th>事务2</th>\n<th>结果</th>\n<th>分析</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>begain</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>begain</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>DELETE FROM config_item_release WHERE profile_id=9118</td>\n<td></td>\n<td>Affected rows: 0, Time: 0.002000s</td>\n<td>事务1对(max,+∞)区间加G锁</td>\n</tr>\n<tr>\n<td></td>\n<td>DELETE FROM config_item_release WHERE profile_id=9112</td>\n<td>Affected rows: 0, Time: 0.002000s</td>\n<td>事务2对(max,+∞)区间加G锁</td>\n</tr>\n<tr>\n<td>INSERT INTO config_item_release SELECT * FROM config_item c WHERE c.profile_id=9108</td>\n<td></td>\n<td></td>\n<td>事务1对(max,+∞)加插入意向锁，被事务2阻塞</td>\n</tr>\n<tr>\n<td></td>\n<td>INSERT INTO config_item_release SELECT * FROM config_item c WHERE c.profile_id=9112</td>\n<td>1213 - Deadlock found when trying to get lock; try restarting transaction, Time: 0.008000s</td>\n<td>事务2对(max,+∞)加插入意向锁，被事务1阻塞，出现死锁</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"实验二：config-item-release存在数据，两个事务先delete后insert不会发生死锁\"><a href=\"#实验二：config-item-release存在数据，两个事务先delete后insert不会发生死锁\" class=\"headerlink\" title=\"实验二：config_item_release存在数据，两个事务先delete后insert不会发生死锁\"></a>实验二：config_item_release存在数据，两个事务先delete后insert不会发生死锁</h4><p>首先执行下面两条语句初始化表中的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO config_item_release SELECT * FROM config_item c WHERE c.profile_id=9111;</span><br><span class=\"line\">INSERT INTO config_item_release SELECT * FROM config_item c WHERE c.profile_id=9112;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>事务1</th>\n<th>事务2</th>\n<th>结果</th>\n<th>分析</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>begain</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>begain</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>DELETE FROM config_item_release WHERE profile_id=9111</td>\n<td></td>\n<td>Affected rows: 1, Time: 0.000000s</td>\n<td>事务1对profile_id=9111记录前的间隙加G锁</td>\n</tr>\n<tr>\n<td></td>\n<td>DELETE FROM config_item_release WHERE profile_id=9112</td>\n<td>Affected rows: 3, Time: 0.000000s</td>\n<td>事务2对profile_id=9112记录前的间隙加G锁</td>\n</tr>\n<tr>\n<td>INSERT INTO config_item_release SELECT * FROM config_item c WHERE c.profile_id=9111</td>\n<td></td>\n<td></td>\n<td>事务1阻塞，因为事务2对profile_id=9112之前的间隙加了G锁，9111这条记录刚好在这个区间，事务1要加I锁时被事务2的G锁阻塞</td>\n</tr>\n<tr>\n<td></td>\n<td>INSERT INTO config_item_release SELECT * FROM config_item c WHERE c.profile_id=9112</td>\n<td>Affected rows: 3, Time: 0.000000s</td>\n<td>事务2先对9112之前的间隙加I锁这个间隙是当前事务的G锁不冲突没有阻塞</td>\n</tr>\n<tr>\n<td></td>\n<td>commit</td>\n<td>OK, Time: 0.001000s</td>\n<td>事务2成功提交，事务1结束阻塞状态</td>\n</tr>\n<tr>\n<td>commit</td>\n<td></td>\n<td>OK, Time: 0.001000s</td>\n<td>事务1成功提交</td>\n</tr>\n</tbody>\n</table>\n<p>综上所述，正式由于我先清除了历史数据，在删除表里不存在的记录时多个事务将相同的区间加了G锁，再加I锁时产生死锁，解决：删除业务逻辑中的清除历史数据的操作，保证表中数据存在。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>补充一下自己的知识盲区，重新梳理数据库的锁，详细见<a href=\"http://yywang.top/2020/11/16/%E6%8D%8B%E4%B8%80%E6%8D%8BMySQL%E7%9A%84%E9%94%81/#more\" target=\"_blank\" rel=\"noopener\">上一篇文章</a></li>\n<li>避免删除不存在的记录的操作，这个操作会加G锁，可能多个事务的G锁重叠了导致死锁</li>\n<li>删除操作最好是先找到记录的id再根据id删除；因为只有在唯一索引的删除操作才会加R锁其他情况都会有G锁</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://www.fordba.com/lock-analyse-of-delete.html\" target=\"_blank\" rel=\"noopener\">MySQL DELETE 删除语句加锁分析</a></p>\n<p><a href=\"https://www.iteye.com/blog/narcissusoyf-1637309\" target=\"_blank\" rel=\"noopener\">从一个死锁看mysql innodb的锁机制</a></p>\n<p><a href=\"http://xiaobaoqiu.github.io/blog/2016/07/22/%5B%3F%5D-ge-si-suo-wen-ti/\" target=\"_blank\" rel=\"noopener\">一个死锁问题</a></p>\n<p><a href=\"http://www.fanyilun.me/2017/04/20/MySQL%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90/\" target=\"_blank\" rel=\"noopener\">MySQL加锁分析</a></p>\n"},{"title":"一次Spring事务不回滚的踩坑记录","author":"YyWang","date":"2019-08-16T13:01:13.000Z","categaries":"Spring","_content":"### 一次Spring事务不回滚的踩坑记录\n\nSpring事务不回滚八成是不知道Spring默认在捕获到unchecked异常才会自动回滚，然而我早已踩过个坑，是一个有经验的人，当我自信满满的加上一行 1/0，并在catch中 throw new RuntimeException，debug之后我懵了，咋不回滚呢？重启Tomcat，浏览器缓存清理之后再试一次，还是不行！！！我就难受了，这和我预想的不一样，检查代码没有发现错误，那咋办呢？开始百度吧，百度的结果千篇一律，都是针对不了解Spring默认捕获unchecked异常的解决办法，这些早已在我的经验里了，有3种方法\n\n* 1.手动抛出unchecked异常，让Spring去捕获，然后自动回滚数据\n* 2.手动回滚，在发生异常的地方添加代码 **TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();**\n* 3.在注解的地方添加配置**rollbackFor = { Exception.class }**，让Spring在捕获到特定的异常自动回滚数据 \n\n3种方法我都知道，但是我一般只用第一种，因为简单，这次我选择用第二种方法试下，竟然没问题了，我意识到是我的问题了，开始检查代码，我的代码逻辑如下（见笑）\n\n```\nboolean result = false;\ntry {\n    // ...业务逻辑\n    System.out.println(1/0);\n    // ...业务逻辑\n    result = true;\n} catch (Exception e) {\n    LOGGER.error(e.getMessage(), e);\n    // rollback\n    throw new RuntimeException(e);\n    result = false;\n} finally {\n\treturn result;\n}\n```\n\n还是不知道错在哪里，没有办法开始Debug，惊奇的发现RuntimeException竟然被忽略了，这才发现我finally中有return，被我自己蠢哭了，基础真是太重要了，我还盲目自信的知道Spring的事务如何使用，到头来连try catch finally都没搞清楚，真是太蠢了。接着我修改了代码：\n\n```\nboolean result = false;\ntry {\n    // ...业务逻辑\n    System.out.println(1/0);\n    // ...业务逻辑\n    result = true;\n} catch (Exception e) {\n    LOGGER.error(e.getMessage(), e);\n    // rollback\n    throw new RuntimeException(e);\n} \nreturn result;\n```\n\n这下确实是回滚了，但是返回值是true，想得到的时false，这又难受了，再次Debug，很多次F6后我明白了，RuntimeException是被Spring框架里的层层代理catch了--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n我把我自己给骗了，RuntimeException抛出程序已经终止了，即使再多的catch最后也不会回到result = true那一行，最终得出原因是其他ajax请求的结果返回到了前台给的提示让我误解了\n\n---\n\n到这里我意识到自己是真的菜，补习一下try catch finally吧\n找到[一篇好文](https://blog.csdn.net/mxd446814583/article/details/80355572)\n\n### 总结一下\n* 如果finally中有return，try和catch中的return会失效，并且**catch中即使抛出unchecked异常也同样会失效**（这是今天踩的坑）；如果finally中有异常相当于整个方法有了异常，那么就没有最终的返回值了,catch中有了异常同样的效果，所以catch和finally中不要出现异常\n* 如果finally中没有return，try和catch中走最先到达return逻辑的地方，并且在return前将返回值暂存，即使finally中修改也不会有效果；（也就是说没有异常最先到达try块中的return，返回值是try块的返回值，catch和finally修改也不会生效；如果try块有异常最先到达catch块中的return，返回值是catch块的返回值，前提是catch块中没有异常，有异常整个方法都没有返回值）\n* 综上所述，**使用Spring事务避免不出错优先使用方法2和方法3，方法1比较绕并且对有返回值的逻辑不是很友好；finally块中尽量不要return，这样会忽略try和catch中的异常；最后，基础真的很重要**\n","source":"_posts/一次Spring事务不回滚的踩坑记录.md","raw":"title: 一次Spring事务不回滚的踩坑记录\nauthor: YyWang\ndate: 2019-08-16 21:01:13\ntags: Spring\ncategaries: Spring\n---\n### 一次Spring事务不回滚的踩坑记录\n\nSpring事务不回滚八成是不知道Spring默认在捕获到unchecked异常才会自动回滚，然而我早已踩过个坑，是一个有经验的人，当我自信满满的加上一行 1/0，并在catch中 throw new RuntimeException，debug之后我懵了，咋不回滚呢？重启Tomcat，浏览器缓存清理之后再试一次，还是不行！！！我就难受了，这和我预想的不一样，检查代码没有发现错误，那咋办呢？开始百度吧，百度的结果千篇一律，都是针对不了解Spring默认捕获unchecked异常的解决办法，这些早已在我的经验里了，有3种方法\n\n* 1.手动抛出unchecked异常，让Spring去捕获，然后自动回滚数据\n* 2.手动回滚，在发生异常的地方添加代码 **TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();**\n* 3.在注解的地方添加配置**rollbackFor = { Exception.class }**，让Spring在捕获到特定的异常自动回滚数据 \n\n3种方法我都知道，但是我一般只用第一种，因为简单，这次我选择用第二种方法试下，竟然没问题了，我意识到是我的问题了，开始检查代码，我的代码逻辑如下（见笑）\n\n```\nboolean result = false;\ntry {\n    // ...业务逻辑\n    System.out.println(1/0);\n    // ...业务逻辑\n    result = true;\n} catch (Exception e) {\n    LOGGER.error(e.getMessage(), e);\n    // rollback\n    throw new RuntimeException(e);\n    result = false;\n} finally {\n\treturn result;\n}\n```\n\n还是不知道错在哪里，没有办法开始Debug，惊奇的发现RuntimeException竟然被忽略了，这才发现我finally中有return，被我自己蠢哭了，基础真是太重要了，我还盲目自信的知道Spring的事务如何使用，到头来连try catch finally都没搞清楚，真是太蠢了。接着我修改了代码：\n\n```\nboolean result = false;\ntry {\n    // ...业务逻辑\n    System.out.println(1/0);\n    // ...业务逻辑\n    result = true;\n} catch (Exception e) {\n    LOGGER.error(e.getMessage(), e);\n    // rollback\n    throw new RuntimeException(e);\n} \nreturn result;\n```\n\n这下确实是回滚了，但是返回值是true，想得到的时false，这又难受了，再次Debug，很多次F6后我明白了，RuntimeException是被Spring框架里的层层代理catch了--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n我把我自己给骗了，RuntimeException抛出程序已经终止了，即使再多的catch最后也不会回到result = true那一行，最终得出原因是其他ajax请求的结果返回到了前台给的提示让我误解了\n\n---\n\n到这里我意识到自己是真的菜，补习一下try catch finally吧\n找到[一篇好文](https://blog.csdn.net/mxd446814583/article/details/80355572)\n\n### 总结一下\n* 如果finally中有return，try和catch中的return会失效，并且**catch中即使抛出unchecked异常也同样会失效**（这是今天踩的坑）；如果finally中有异常相当于整个方法有了异常，那么就没有最终的返回值了,catch中有了异常同样的效果，所以catch和finally中不要出现异常\n* 如果finally中没有return，try和catch中走最先到达return逻辑的地方，并且在return前将返回值暂存，即使finally中修改也不会有效果；（也就是说没有异常最先到达try块中的return，返回值是try块的返回值，catch和finally修改也不会生效；如果try块有异常最先到达catch块中的return，返回值是catch块的返回值，前提是catch块中没有异常，有异常整个方法都没有返回值）\n* 综上所述，**使用Spring事务避免不出错优先使用方法2和方法3，方法1比较绕并且对有返回值的逻辑不是很友好；finally块中尽量不要return，这样会忽略try和catch中的异常；最后，基础真的很重要**\n","slug":"一次Spring事务不回滚的踩坑记录","published":1,"updated":"2021-07-13T12:27:08.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj7m002x81fyv47anoaa","content":"<h3 id=\"一次Spring事务不回滚的踩坑记录\"><a href=\"#一次Spring事务不回滚的踩坑记录\" class=\"headerlink\" title=\"一次Spring事务不回滚的踩坑记录\"></a>一次Spring事务不回滚的踩坑记录</h3><p>Spring事务不回滚八成是不知道Spring默认在捕获到unchecked异常才会自动回滚，然而我早已踩过个坑，是一个有经验的人，当我自信满满的加上一行 1/0，并在catch中 throw new RuntimeException，debug之后我懵了，咋不回滚呢？重启Tomcat，浏览器缓存清理之后再试一次，还是不行！！！我就难受了，这和我预想的不一样，检查代码没有发现错误，那咋办呢？开始百度吧，百度的结果千篇一律，都是针对不了解Spring默认捕获unchecked异常的解决办法，这些早已在我的经验里了，有3种方法</p>\n<ul>\n<li>1.手动抛出unchecked异常，让Spring去捕获，然后自动回滚数据</li>\n<li>2.手动回滚，在发生异常的地方添加代码 <strong>TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</strong></li>\n<li>3.在注解的地方添加配置<strong>rollbackFor = { Exception.class }</strong>，让Spring在捕获到特定的异常自动回滚数据 </li>\n</ul>\n<p>3种方法我都知道，但是我一般只用第一种，因为简单，这次我选择用第二种方法试下，竟然没问题了，我意识到是我的问题了，开始检查代码，我的代码逻辑如下（见笑）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean result = false;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">    // ...业务逻辑</span><br><span class=\"line\">    System.out.println(1/0);</span><br><span class=\"line\">    // ...业务逻辑</span><br><span class=\"line\">    result = true;</span><br><span class=\"line\">&#125; catch (Exception e) &#123;</span><br><span class=\"line\">    LOGGER.error(e.getMessage(), e);</span><br><span class=\"line\">    // rollback</span><br><span class=\"line\">    throw new RuntimeException(e);</span><br><span class=\"line\">    result = false;</span><br><span class=\"line\">&#125; finally &#123;</span><br><span class=\"line\">\treturn result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还是不知道错在哪里，没有办法开始Debug，惊奇的发现RuntimeException竟然被忽略了，这才发现我finally中有return，被我自己蠢哭了，基础真是太重要了，我还盲目自信的知道Spring的事务如何使用，到头来连try catch finally都没搞清楚，真是太蠢了。接着我修改了代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean result = false;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">    // ...业务逻辑</span><br><span class=\"line\">    System.out.println(1/0);</span><br><span class=\"line\">    // ...业务逻辑</span><br><span class=\"line\">    result = true;</span><br><span class=\"line\">&#125; catch (Exception e) &#123;</span><br><span class=\"line\">    LOGGER.error(e.getMessage(), e);</span><br><span class=\"line\">    // rollback</span><br><span class=\"line\">    throw new RuntimeException(e);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">return result;</span><br></pre></td></tr></table></figure>\n<p>这下确实是回滚了，但是返回值是true，想得到的时false，这又难受了，再次Debug，很多次F6后我明白了，RuntimeException是被Spring框架里的层层代理catch了————————————————————————————————————————————————————————————–<br>我把我自己给骗了，RuntimeException抛出程序已经终止了，即使再多的catch最后也不会回到result = true那一行，最终得出原因是其他ajax请求的结果返回到了前台给的提示让我误解了</p>\n<hr>\n<p>到这里我意识到自己是真的菜，补习一下try catch finally吧<br>找到<a href=\"https://blog.csdn.net/mxd446814583/article/details/80355572\" target=\"_blank\" rel=\"noopener\">一篇好文</a></p>\n<h3 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h3><ul>\n<li>如果finally中有return，try和catch中的return会失效，并且<strong>catch中即使抛出unchecked异常也同样会失效</strong>（这是今天踩的坑）；如果finally中有异常相当于整个方法有了异常，那么就没有最终的返回值了,catch中有了异常同样的效果，所以catch和finally中不要出现异常</li>\n<li>如果finally中没有return，try和catch中走最先到达return逻辑的地方，并且在return前将返回值暂存，即使finally中修改也不会有效果；（也就是说没有异常最先到达try块中的return，返回值是try块的返回值，catch和finally修改也不会生效；如果try块有异常最先到达catch块中的return，返回值是catch块的返回值，前提是catch块中没有异常，有异常整个方法都没有返回值）</li>\n<li>综上所述，<strong>使用Spring事务避免不出错优先使用方法2和方法3，方法1比较绕并且对有返回值的逻辑不是很友好；finally块中尽量不要return，这样会忽略try和catch中的异常；最后，基础真的很重要</strong></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一次Spring事务不回滚的踩坑记录\"><a href=\"#一次Spring事务不回滚的踩坑记录\" class=\"headerlink\" title=\"一次Spring事务不回滚的踩坑记录\"></a>一次Spring事务不回滚的踩坑记录</h3><p>Spring事务不回滚八成是不知道Spring默认在捕获到unchecked异常才会自动回滚，然而我早已踩过个坑，是一个有经验的人，当我自信满满的加上一行 1/0，并在catch中 throw new RuntimeException，debug之后我懵了，咋不回滚呢？重启Tomcat，浏览器缓存清理之后再试一次，还是不行！！！我就难受了，这和我预想的不一样，检查代码没有发现错误，那咋办呢？开始百度吧，百度的结果千篇一律，都是针对不了解Spring默认捕获unchecked异常的解决办法，这些早已在我的经验里了，有3种方法</p>\n<ul>\n<li>1.手动抛出unchecked异常，让Spring去捕获，然后自动回滚数据</li>\n<li>2.手动回滚，在发生异常的地方添加代码 <strong>TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</strong></li>\n<li>3.在注解的地方添加配置<strong>rollbackFor = { Exception.class }</strong>，让Spring在捕获到特定的异常自动回滚数据 </li>\n</ul>\n<p>3种方法我都知道，但是我一般只用第一种，因为简单，这次我选择用第二种方法试下，竟然没问题了，我意识到是我的问题了，开始检查代码，我的代码逻辑如下（见笑）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean result = false;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">    // ...业务逻辑</span><br><span class=\"line\">    System.out.println(1/0);</span><br><span class=\"line\">    // ...业务逻辑</span><br><span class=\"line\">    result = true;</span><br><span class=\"line\">&#125; catch (Exception e) &#123;</span><br><span class=\"line\">    LOGGER.error(e.getMessage(), e);</span><br><span class=\"line\">    // rollback</span><br><span class=\"line\">    throw new RuntimeException(e);</span><br><span class=\"line\">    result = false;</span><br><span class=\"line\">&#125; finally &#123;</span><br><span class=\"line\">\treturn result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还是不知道错在哪里，没有办法开始Debug，惊奇的发现RuntimeException竟然被忽略了，这才发现我finally中有return，被我自己蠢哭了，基础真是太重要了，我还盲目自信的知道Spring的事务如何使用，到头来连try catch finally都没搞清楚，真是太蠢了。接着我修改了代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean result = false;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">    // ...业务逻辑</span><br><span class=\"line\">    System.out.println(1/0);</span><br><span class=\"line\">    // ...业务逻辑</span><br><span class=\"line\">    result = true;</span><br><span class=\"line\">&#125; catch (Exception e) &#123;</span><br><span class=\"line\">    LOGGER.error(e.getMessage(), e);</span><br><span class=\"line\">    // rollback</span><br><span class=\"line\">    throw new RuntimeException(e);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">return result;</span><br></pre></td></tr></table></figure>\n<p>这下确实是回滚了，但是返回值是true，想得到的时false，这又难受了，再次Debug，很多次F6后我明白了，RuntimeException是被Spring框架里的层层代理catch了————————————————————————————————————————————————————————————–<br>我把我自己给骗了，RuntimeException抛出程序已经终止了，即使再多的catch最后也不会回到result = true那一行，最终得出原因是其他ajax请求的结果返回到了前台给的提示让我误解了</p>\n<hr>\n<p>到这里我意识到自己是真的菜，补习一下try catch finally吧<br>找到<a href=\"https://blog.csdn.net/mxd446814583/article/details/80355572\" target=\"_blank\" rel=\"noopener\">一篇好文</a></p>\n<h3 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h3><ul>\n<li>如果finally中有return，try和catch中的return会失效，并且<strong>catch中即使抛出unchecked异常也同样会失效</strong>（这是今天踩的坑）；如果finally中有异常相当于整个方法有了异常，那么就没有最终的返回值了,catch中有了异常同样的效果，所以catch和finally中不要出现异常</li>\n<li>如果finally中没有return，try和catch中走最先到达return逻辑的地方，并且在return前将返回值暂存，即使finally中修改也不会有效果；（也就是说没有异常最先到达try块中的return，返回值是try块的返回值，catch和finally修改也不会生效；如果try块有异常最先到达catch块中的return，返回值是catch块的返回值，前提是catch块中没有异常，有异常整个方法都没有返回值）</li>\n<li>综上所述，<strong>使用Spring事务避免不出错优先使用方法2和方法3，方法1比较绕并且对有返回值的逻辑不是很友好；finally块中尽量不要return，这样会忽略try和catch中的异常；最后，基础真的很重要</strong></li>\n</ul>\n"},{"title":"初识Guava Cache","author":"YyWang","date":"2020-05-11T11:37:37.000Z","_content":"\n#### 背景\n随着系统的膨胀，数量越来越大，统计报表的相关SQL会非常慢，代表的SQL是这样，需要统计两张表中不重复的ip，大概是2000w两级，只能两张表分别distinct，最后union的时候再distinct一下，没想到更好的办法，只能加缓存了\n\n* 考虑过使用Redis，这是常规的做法，可是要缓存的数据很少，结构简单，访问量不大通常是管理员来查看统计一下产品的使用情况，使用Redis逻辑复杂，还要考虑缓存击穿，缓存雪崩的情况，还依赖于Redis的可用性，所以决定舍弃该方案，使用Guava Cache来做缓存，并在时间间隔内进行缓存数据的更新\n\t* Guava Cache虽然提供缓存的过期时间，但是只有在过期之后的一次get才会进行缓存的更新，而且如果获取缓存的时间很长会造成阻塞，这样缓存的意义就没了；\n\t* 如果设置成异步刷新缓存，可以解决阻塞的问题，但是得到的时上一个时间周期的数据，缓存的实时性不能保证；\n\t* 最终采用开启定时的线程，在每个时间周期内异步刷新缓存数据，最坏的情况是得到上一个时间周期的数据，但是可以解决上一条中多次点击才会刷新的点，这里还有一个风险点，如果多个服务器在同一时间启动，就会在相同的时间间隔去请求数据库计算数据并更新，可能造成数据库CPU忙碌状态，我的环境是4台服务器，并发的去请求数据库是没问题的，而且通常都是滚动更新，所以不会出现这个问题，综合评估后采用该方案\n* 实现\n\t* 在Spring容器启动完毕的时候（这里有个坑，因为spring容器没有启动完成是不能与数据库建立连接的，所以在spring容器启动过程中就加载缓存是不行的），开启线程统计数据（要查从库避免锁表）\n\t* 再通过定时任务异步去刷新数据\n\n#### Guava Cache\n* 编码过程中那个通常缓存的实现是定义一个全局变量，多个线程都可以访问到，并可以对该变量进行修改；当然需要用到线程安全的数据结构，比如ConcurrentHashMap，但是缓存的更新删除，这些逻辑的自己实现，而我理解的Guava Cache就是封装了这些逻辑并提供出API的一个工具\n* 缓存过期的设置方式\n* 设置缓存的大小，超过阈值的删除（这里指的是缓存的数量，key的数量）\n* 设置缓存的时间，超过时间的删除\n\t* 不是定时去判断的，而是get的时候会判断是否超时，超时就重新加载，这样如果刷新key的用时很长的话会阻塞；Guava Cache也提供了异步刷新key的方式，这样如果对缓存更新实时性要求高的话，在缓存刷新后重新get才能获得最新的缓存值；或者用一个定时任务异步刷新key\n* 设置弱引用，让垃圾收集器来回收\n* 显式的删除key\n* 可以添加key被删除的监听器\n\n使用了类似jdk1.7中ConcurrentHashMap的Segment的结构，降低锁的粒度提高并发的吞吐量；再通过两次hash找到value的位置\n\n#### 相关知识\n\n* 强引用\n\t* 通过 new 关键字产生，不会被JVM回收；如果是局部变量，引用保存在线程栈中，方法结束引用被依赖的数量为0，将会被JVM回收掉；如果是全局变量，引用将一直会存在，可以将引用设置为null被JVM回收\n* 软引用\n\t* 内存充足时不会被回收，当内存空间不足会被回收\n* 弱引用\n\t* JVM进行垃圾回收的时候就会被回收掉，如果长时间不进行垃圾回收就会一直存在\n* 虚引用\n\t* 必须与引用队列一起使用，在JVM进行垃圾回收之前，虚引用会被加入到引用队列中\n* 引用队列\n\t*\t可以和软引用，弱引用，虚引用联合使用，在JVM进行垃圾回收之前，要被回收的引用会被加入到队列中，用来查看JVM垃圾回收情况 \n\n#### ConcurrentHashMap\n\n* HashMap\n* jdk1.7 数组+链表的结构 当有hash冲突的时候链表会很长，查询一个节点效率很低，时间复杂度为O(N)\n* jdk1.8 数组+红黑树的结构 链表中节点大于8时会转成红黑树，查询时间复杂度为O(logN)\n\t* put \n\t\t* 判断是否需要扩容（resize）或者初始化（懒加载）\n\t\t* 通过hash找到桶，没有冲突直接放入；\n\t\t* 有hash冲突，a.判断是否和第一个Node的key相同，相同则覆盖value；b.判断是否是红黑树，插入value相同key覆盖 c.判断是否需要转红黑树，需要则红黑树插入，否则插入链表末尾，相同key覆盖value，\n\t\t* 插入value后判断是否需要扩容\n\t* get 根据hash值找到桶，从桶中找key对应的value，没有返回null\n\t* resize 1.8不会进行重新hash，而是看hash值新增的那个bit位是1还是0，0位置不变，1的话位置是原位置+扩容前容量 索引中的位置，由于hash值新增的那个bit为可以认为是随机的，所以可以将原来桶中的链表或者红黑树均匀的拆分成两个链表或者红黑树\n* 线程不安全问题\n\t* 1.7 可能丢失key，还会出现循环链表，当get一个不存在的key出现死循环\n\t* 1.8 由于table中size变量没有加volatile关键字，多线程++size时可能覆盖以前的记录\n\t* 线程不安全主要是由于resize方法导致，1.7先rehash转移数据在改数组的引用，而且转移数据后链表会反转多线程并发修改引用会造成循环链表的现象；1.8先改数组的引用再转移数据，并且转移数据不会修改链表的结构，理论上不会造成循环引用，但当多线程并发操作会出现数据丢失的现象\n* concurrentHashMap\n* 1.7 引入segment的概念，将整个table划分成若干个segment，对segment加锁减小锁的粒度提高吞吐量，get的时候先通过hash找到segment，再找到对应的table中的位置\n* 1.8 对Node加锁进一步减小了锁的粒度提高吞吐量，加入多线程扩容的逻辑加速扩容的过程，put操作时发现正在扩容可以帮助扩容，而不是阻塞起来傻等\n\t* 扩容的逻辑很复杂，整理一下大概的逻辑吧，首先将CAS操作将table扩容，根据原来table的大小将扩容工作拆成多个任务，每个任务最少迁移16个桶，当线程完成扩容任务会继续领取下一个任务进行扩容\n\t* 多线程领取任务开始扩容，安装索引从大到小的顺序开始，扩容过程中get操作，会get到ForwardNode，转发到新的table中查找value；扩容过程中put操作，如果当前扩容的线程数量小于最大限制的数量就加入扩容的队列中，否则阻塞\n\t* put 使用synchronized关键字对Node加锁；当Node中的链表大于8，如果当前容量没有超过64先进行扩容，否则才转红黑树；扩容过程中红黑树节点小于6个转链表\n\n","source":"_posts/初识Guava Cache.md","raw":"title: 初识Guava Cache\nauthor: YyWang\ndate: 2020-05-11 19:37:37\ntags: Java\ncategories: Java\n---\n\n#### 背景\n随着系统的膨胀，数量越来越大，统计报表的相关SQL会非常慢，代表的SQL是这样，需要统计两张表中不重复的ip，大概是2000w两级，只能两张表分别distinct，最后union的时候再distinct一下，没想到更好的办法，只能加缓存了\n\n* 考虑过使用Redis，这是常规的做法，可是要缓存的数据很少，结构简单，访问量不大通常是管理员来查看统计一下产品的使用情况，使用Redis逻辑复杂，还要考虑缓存击穿，缓存雪崩的情况，还依赖于Redis的可用性，所以决定舍弃该方案，使用Guava Cache来做缓存，并在时间间隔内进行缓存数据的更新\n\t* Guava Cache虽然提供缓存的过期时间，但是只有在过期之后的一次get才会进行缓存的更新，而且如果获取缓存的时间很长会造成阻塞，这样缓存的意义就没了；\n\t* 如果设置成异步刷新缓存，可以解决阻塞的问题，但是得到的时上一个时间周期的数据，缓存的实时性不能保证；\n\t* 最终采用开启定时的线程，在每个时间周期内异步刷新缓存数据，最坏的情况是得到上一个时间周期的数据，但是可以解决上一条中多次点击才会刷新的点，这里还有一个风险点，如果多个服务器在同一时间启动，就会在相同的时间间隔去请求数据库计算数据并更新，可能造成数据库CPU忙碌状态，我的环境是4台服务器，并发的去请求数据库是没问题的，而且通常都是滚动更新，所以不会出现这个问题，综合评估后采用该方案\n* 实现\n\t* 在Spring容器启动完毕的时候（这里有个坑，因为spring容器没有启动完成是不能与数据库建立连接的，所以在spring容器启动过程中就加载缓存是不行的），开启线程统计数据（要查从库避免锁表）\n\t* 再通过定时任务异步去刷新数据\n\n#### Guava Cache\n* 编码过程中那个通常缓存的实现是定义一个全局变量，多个线程都可以访问到，并可以对该变量进行修改；当然需要用到线程安全的数据结构，比如ConcurrentHashMap，但是缓存的更新删除，这些逻辑的自己实现，而我理解的Guava Cache就是封装了这些逻辑并提供出API的一个工具\n* 缓存过期的设置方式\n* 设置缓存的大小，超过阈值的删除（这里指的是缓存的数量，key的数量）\n* 设置缓存的时间，超过时间的删除\n\t* 不是定时去判断的，而是get的时候会判断是否超时，超时就重新加载，这样如果刷新key的用时很长的话会阻塞；Guava Cache也提供了异步刷新key的方式，这样如果对缓存更新实时性要求高的话，在缓存刷新后重新get才能获得最新的缓存值；或者用一个定时任务异步刷新key\n* 设置弱引用，让垃圾收集器来回收\n* 显式的删除key\n* 可以添加key被删除的监听器\n\n使用了类似jdk1.7中ConcurrentHashMap的Segment的结构，降低锁的粒度提高并发的吞吐量；再通过两次hash找到value的位置\n\n#### 相关知识\n\n* 强引用\n\t* 通过 new 关键字产生，不会被JVM回收；如果是局部变量，引用保存在线程栈中，方法结束引用被依赖的数量为0，将会被JVM回收掉；如果是全局变量，引用将一直会存在，可以将引用设置为null被JVM回收\n* 软引用\n\t* 内存充足时不会被回收，当内存空间不足会被回收\n* 弱引用\n\t* JVM进行垃圾回收的时候就会被回收掉，如果长时间不进行垃圾回收就会一直存在\n* 虚引用\n\t* 必须与引用队列一起使用，在JVM进行垃圾回收之前，虚引用会被加入到引用队列中\n* 引用队列\n\t*\t可以和软引用，弱引用，虚引用联合使用，在JVM进行垃圾回收之前，要被回收的引用会被加入到队列中，用来查看JVM垃圾回收情况 \n\n#### ConcurrentHashMap\n\n* HashMap\n* jdk1.7 数组+链表的结构 当有hash冲突的时候链表会很长，查询一个节点效率很低，时间复杂度为O(N)\n* jdk1.8 数组+红黑树的结构 链表中节点大于8时会转成红黑树，查询时间复杂度为O(logN)\n\t* put \n\t\t* 判断是否需要扩容（resize）或者初始化（懒加载）\n\t\t* 通过hash找到桶，没有冲突直接放入；\n\t\t* 有hash冲突，a.判断是否和第一个Node的key相同，相同则覆盖value；b.判断是否是红黑树，插入value相同key覆盖 c.判断是否需要转红黑树，需要则红黑树插入，否则插入链表末尾，相同key覆盖value，\n\t\t* 插入value后判断是否需要扩容\n\t* get 根据hash值找到桶，从桶中找key对应的value，没有返回null\n\t* resize 1.8不会进行重新hash，而是看hash值新增的那个bit位是1还是0，0位置不变，1的话位置是原位置+扩容前容量 索引中的位置，由于hash值新增的那个bit为可以认为是随机的，所以可以将原来桶中的链表或者红黑树均匀的拆分成两个链表或者红黑树\n* 线程不安全问题\n\t* 1.7 可能丢失key，还会出现循环链表，当get一个不存在的key出现死循环\n\t* 1.8 由于table中size变量没有加volatile关键字，多线程++size时可能覆盖以前的记录\n\t* 线程不安全主要是由于resize方法导致，1.7先rehash转移数据在改数组的引用，而且转移数据后链表会反转多线程并发修改引用会造成循环链表的现象；1.8先改数组的引用再转移数据，并且转移数据不会修改链表的结构，理论上不会造成循环引用，但当多线程并发操作会出现数据丢失的现象\n* concurrentHashMap\n* 1.7 引入segment的概念，将整个table划分成若干个segment，对segment加锁减小锁的粒度提高吞吐量，get的时候先通过hash找到segment，再找到对应的table中的位置\n* 1.8 对Node加锁进一步减小了锁的粒度提高吞吐量，加入多线程扩容的逻辑加速扩容的过程，put操作时发现正在扩容可以帮助扩容，而不是阻塞起来傻等\n\t* 扩容的逻辑很复杂，整理一下大概的逻辑吧，首先将CAS操作将table扩容，根据原来table的大小将扩容工作拆成多个任务，每个任务最少迁移16个桶，当线程完成扩容任务会继续领取下一个任务进行扩容\n\t* 多线程领取任务开始扩容，安装索引从大到小的顺序开始，扩容过程中get操作，会get到ForwardNode，转发到新的table中查找value；扩容过程中put操作，如果当前扩容的线程数量小于最大限制的数量就加入扩容的队列中，否则阻塞\n\t* put 使用synchronized关键字对Node加锁；当Node中的链表大于8，如果当前容量没有超过64先进行扩容，否则才转红黑树；扩容过程中红黑树节点小于6个转链表\n\n","slug":"初识Guava Cache","published":1,"updated":"2021-07-13T12:27:08.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj7n003181fy3jx6b2u8","content":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>随着系统的膨胀，数量越来越大，统计报表的相关SQL会非常慢，代表的SQL是这样，需要统计两张表中不重复的ip，大概是2000w两级，只能两张表分别distinct，最后union的时候再distinct一下，没想到更好的办法，只能加缓存了</p>\n<ul>\n<li>考虑过使用Redis，这是常规的做法，可是要缓存的数据很少，结构简单，访问量不大通常是管理员来查看统计一下产品的使用情况，使用Redis逻辑复杂，还要考虑缓存击穿，缓存雪崩的情况，还依赖于Redis的可用性，所以决定舍弃该方案，使用Guava Cache来做缓存，并在时间间隔内进行缓存数据的更新<ul>\n<li>Guava Cache虽然提供缓存的过期时间，但是只有在过期之后的一次get才会进行缓存的更新，而且如果获取缓存的时间很长会造成阻塞，这样缓存的意义就没了；</li>\n<li>如果设置成异步刷新缓存，可以解决阻塞的问题，但是得到的时上一个时间周期的数据，缓存的实时性不能保证；</li>\n<li>最终采用开启定时的线程，在每个时间周期内异步刷新缓存数据，最坏的情况是得到上一个时间周期的数据，但是可以解决上一条中多次点击才会刷新的点，这里还有一个风险点，如果多个服务器在同一时间启动，就会在相同的时间间隔去请求数据库计算数据并更新，可能造成数据库CPU忙碌状态，我的环境是4台服务器，并发的去请求数据库是没问题的，而且通常都是滚动更新，所以不会出现这个问题，综合评估后采用该方案</li>\n</ul>\n</li>\n<li>实现<ul>\n<li>在Spring容器启动完毕的时候（这里有个坑，因为spring容器没有启动完成是不能与数据库建立连接的，所以在spring容器启动过程中就加载缓存是不行的），开启线程统计数据（要查从库避免锁表）</li>\n<li>再通过定时任务异步去刷新数据</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Guava-Cache\"><a href=\"#Guava-Cache\" class=\"headerlink\" title=\"Guava Cache\"></a>Guava Cache</h4><ul>\n<li>编码过程中那个通常缓存的实现是定义一个全局变量，多个线程都可以访问到，并可以对该变量进行修改；当然需要用到线程安全的数据结构，比如ConcurrentHashMap，但是缓存的更新删除，这些逻辑的自己实现，而我理解的Guava Cache就是封装了这些逻辑并提供出API的一个工具</li>\n<li>缓存过期的设置方式</li>\n<li>设置缓存的大小，超过阈值的删除（这里指的是缓存的数量，key的数量）</li>\n<li>设置缓存的时间，超过时间的删除<ul>\n<li>不是定时去判断的，而是get的时候会判断是否超时，超时就重新加载，这样如果刷新key的用时很长的话会阻塞；Guava Cache也提供了异步刷新key的方式，这样如果对缓存更新实时性要求高的话，在缓存刷新后重新get才能获得最新的缓存值；或者用一个定时任务异步刷新key</li>\n</ul>\n</li>\n<li>设置弱引用，让垃圾收集器来回收</li>\n<li>显式的删除key</li>\n<li>可以添加key被删除的监听器</li>\n</ul>\n<p>使用了类似jdk1.7中ConcurrentHashMap的Segment的结构，降低锁的粒度提高并发的吞吐量；再通过两次hash找到value的位置</p>\n<h4 id=\"相关知识\"><a href=\"#相关知识\" class=\"headerlink\" title=\"相关知识\"></a>相关知识</h4><ul>\n<li>强引用<ul>\n<li>通过 new 关键字产生，不会被JVM回收；如果是局部变量，引用保存在线程栈中，方法结束引用被依赖的数量为0，将会被JVM回收掉；如果是全局变量，引用将一直会存在，可以将引用设置为null被JVM回收</li>\n</ul>\n</li>\n<li>软引用<ul>\n<li>内存充足时不会被回收，当内存空间不足会被回收</li>\n</ul>\n</li>\n<li>弱引用<ul>\n<li>JVM进行垃圾回收的时候就会被回收掉，如果长时间不进行垃圾回收就会一直存在</li>\n</ul>\n</li>\n<li>虚引用<ul>\n<li>必须与引用队列一起使用，在JVM进行垃圾回收之前，虚引用会被加入到引用队列中</li>\n</ul>\n</li>\n<li>引用队列<ul>\n<li>可以和软引用，弱引用，虚引用联合使用，在JVM进行垃圾回收之前，要被回收的引用会被加入到队列中，用来查看JVM垃圾回收情况 </li>\n</ul>\n</li>\n</ul>\n<h4 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a>ConcurrentHashMap</h4><ul>\n<li>HashMap</li>\n<li>jdk1.7 数组+链表的结构 当有hash冲突的时候链表会很长，查询一个节点效率很低，时间复杂度为O(N)</li>\n<li>jdk1.8 数组+红黑树的结构 链表中节点大于8时会转成红黑树，查询时间复杂度为O(logN)<ul>\n<li>put <ul>\n<li>判断是否需要扩容（resize）或者初始化（懒加载）</li>\n<li>通过hash找到桶，没有冲突直接放入；</li>\n<li>有hash冲突，a.判断是否和第一个Node的key相同，相同则覆盖value；b.判断是否是红黑树，插入value相同key覆盖 c.判断是否需要转红黑树，需要则红黑树插入，否则插入链表末尾，相同key覆盖value，</li>\n<li>插入value后判断是否需要扩容</li>\n</ul>\n</li>\n<li>get 根据hash值找到桶，从桶中找key对应的value，没有返回null</li>\n<li>resize 1.8不会进行重新hash，而是看hash值新增的那个bit位是1还是0，0位置不变，1的话位置是原位置+扩容前容量 索引中的位置，由于hash值新增的那个bit为可以认为是随机的，所以可以将原来桶中的链表或者红黑树均匀的拆分成两个链表或者红黑树</li>\n</ul>\n</li>\n<li>线程不安全问题<ul>\n<li>1.7 可能丢失key，还会出现循环链表，当get一个不存在的key出现死循环</li>\n<li>1.8 由于table中size变量没有加volatile关键字，多线程++size时可能覆盖以前的记录</li>\n<li>线程不安全主要是由于resize方法导致，1.7先rehash转移数据在改数组的引用，而且转移数据后链表会反转多线程并发修改引用会造成循环链表的现象；1.8先改数组的引用再转移数据，并且转移数据不会修改链表的结构，理论上不会造成循环引用，但当多线程并发操作会出现数据丢失的现象</li>\n</ul>\n</li>\n<li>concurrentHashMap</li>\n<li>1.7 引入segment的概念，将整个table划分成若干个segment，对segment加锁减小锁的粒度提高吞吐量，get的时候先通过hash找到segment，再找到对应的table中的位置</li>\n<li>1.8 对Node加锁进一步减小了锁的粒度提高吞吐量，加入多线程扩容的逻辑加速扩容的过程，put操作时发现正在扩容可以帮助扩容，而不是阻塞起来傻等<ul>\n<li>扩容的逻辑很复杂，整理一下大概的逻辑吧，首先将CAS操作将table扩容，根据原来table的大小将扩容工作拆成多个任务，每个任务最少迁移16个桶，当线程完成扩容任务会继续领取下一个任务进行扩容</li>\n<li>多线程领取任务开始扩容，安装索引从大到小的顺序开始，扩容过程中get操作，会get到ForwardNode，转发到新的table中查找value；扩容过程中put操作，如果当前扩容的线程数量小于最大限制的数量就加入扩容的队列中，否则阻塞</li>\n<li>put 使用synchronized关键字对Node加锁；当Node中的链表大于8，如果当前容量没有超过64先进行扩容，否则才转红黑树；扩容过程中红黑树节点小于6个转链表</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>随着系统的膨胀，数量越来越大，统计报表的相关SQL会非常慢，代表的SQL是这样，需要统计两张表中不重复的ip，大概是2000w两级，只能两张表分别distinct，最后union的时候再distinct一下，没想到更好的办法，只能加缓存了</p>\n<ul>\n<li>考虑过使用Redis，这是常规的做法，可是要缓存的数据很少，结构简单，访问量不大通常是管理员来查看统计一下产品的使用情况，使用Redis逻辑复杂，还要考虑缓存击穿，缓存雪崩的情况，还依赖于Redis的可用性，所以决定舍弃该方案，使用Guava Cache来做缓存，并在时间间隔内进行缓存数据的更新<ul>\n<li>Guava Cache虽然提供缓存的过期时间，但是只有在过期之后的一次get才会进行缓存的更新，而且如果获取缓存的时间很长会造成阻塞，这样缓存的意义就没了；</li>\n<li>如果设置成异步刷新缓存，可以解决阻塞的问题，但是得到的时上一个时间周期的数据，缓存的实时性不能保证；</li>\n<li>最终采用开启定时的线程，在每个时间周期内异步刷新缓存数据，最坏的情况是得到上一个时间周期的数据，但是可以解决上一条中多次点击才会刷新的点，这里还有一个风险点，如果多个服务器在同一时间启动，就会在相同的时间间隔去请求数据库计算数据并更新，可能造成数据库CPU忙碌状态，我的环境是4台服务器，并发的去请求数据库是没问题的，而且通常都是滚动更新，所以不会出现这个问题，综合评估后采用该方案</li>\n</ul>\n</li>\n<li>实现<ul>\n<li>在Spring容器启动完毕的时候（这里有个坑，因为spring容器没有启动完成是不能与数据库建立连接的，所以在spring容器启动过程中就加载缓存是不行的），开启线程统计数据（要查从库避免锁表）</li>\n<li>再通过定时任务异步去刷新数据</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Guava-Cache\"><a href=\"#Guava-Cache\" class=\"headerlink\" title=\"Guava Cache\"></a>Guava Cache</h4><ul>\n<li>编码过程中那个通常缓存的实现是定义一个全局变量，多个线程都可以访问到，并可以对该变量进行修改；当然需要用到线程安全的数据结构，比如ConcurrentHashMap，但是缓存的更新删除，这些逻辑的自己实现，而我理解的Guava Cache就是封装了这些逻辑并提供出API的一个工具</li>\n<li>缓存过期的设置方式</li>\n<li>设置缓存的大小，超过阈值的删除（这里指的是缓存的数量，key的数量）</li>\n<li>设置缓存的时间，超过时间的删除<ul>\n<li>不是定时去判断的，而是get的时候会判断是否超时，超时就重新加载，这样如果刷新key的用时很长的话会阻塞；Guava Cache也提供了异步刷新key的方式，这样如果对缓存更新实时性要求高的话，在缓存刷新后重新get才能获得最新的缓存值；或者用一个定时任务异步刷新key</li>\n</ul>\n</li>\n<li>设置弱引用，让垃圾收集器来回收</li>\n<li>显式的删除key</li>\n<li>可以添加key被删除的监听器</li>\n</ul>\n<p>使用了类似jdk1.7中ConcurrentHashMap的Segment的结构，降低锁的粒度提高并发的吞吐量；再通过两次hash找到value的位置</p>\n<h4 id=\"相关知识\"><a href=\"#相关知识\" class=\"headerlink\" title=\"相关知识\"></a>相关知识</h4><ul>\n<li>强引用<ul>\n<li>通过 new 关键字产生，不会被JVM回收；如果是局部变量，引用保存在线程栈中，方法结束引用被依赖的数量为0，将会被JVM回收掉；如果是全局变量，引用将一直会存在，可以将引用设置为null被JVM回收</li>\n</ul>\n</li>\n<li>软引用<ul>\n<li>内存充足时不会被回收，当内存空间不足会被回收</li>\n</ul>\n</li>\n<li>弱引用<ul>\n<li>JVM进行垃圾回收的时候就会被回收掉，如果长时间不进行垃圾回收就会一直存在</li>\n</ul>\n</li>\n<li>虚引用<ul>\n<li>必须与引用队列一起使用，在JVM进行垃圾回收之前，虚引用会被加入到引用队列中</li>\n</ul>\n</li>\n<li>引用队列<ul>\n<li>可以和软引用，弱引用，虚引用联合使用，在JVM进行垃圾回收之前，要被回收的引用会被加入到队列中，用来查看JVM垃圾回收情况 </li>\n</ul>\n</li>\n</ul>\n<h4 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a>ConcurrentHashMap</h4><ul>\n<li>HashMap</li>\n<li>jdk1.7 数组+链表的结构 当有hash冲突的时候链表会很长，查询一个节点效率很低，时间复杂度为O(N)</li>\n<li>jdk1.8 数组+红黑树的结构 链表中节点大于8时会转成红黑树，查询时间复杂度为O(logN)<ul>\n<li>put <ul>\n<li>判断是否需要扩容（resize）或者初始化（懒加载）</li>\n<li>通过hash找到桶，没有冲突直接放入；</li>\n<li>有hash冲突，a.判断是否和第一个Node的key相同，相同则覆盖value；b.判断是否是红黑树，插入value相同key覆盖 c.判断是否需要转红黑树，需要则红黑树插入，否则插入链表末尾，相同key覆盖value，</li>\n<li>插入value后判断是否需要扩容</li>\n</ul>\n</li>\n<li>get 根据hash值找到桶，从桶中找key对应的value，没有返回null</li>\n<li>resize 1.8不会进行重新hash，而是看hash值新增的那个bit位是1还是0，0位置不变，1的话位置是原位置+扩容前容量 索引中的位置，由于hash值新增的那个bit为可以认为是随机的，所以可以将原来桶中的链表或者红黑树均匀的拆分成两个链表或者红黑树</li>\n</ul>\n</li>\n<li>线程不安全问题<ul>\n<li>1.7 可能丢失key，还会出现循环链表，当get一个不存在的key出现死循环</li>\n<li>1.8 由于table中size变量没有加volatile关键字，多线程++size时可能覆盖以前的记录</li>\n<li>线程不安全主要是由于resize方法导致，1.7先rehash转移数据在改数组的引用，而且转移数据后链表会反转多线程并发修改引用会造成循环链表的现象；1.8先改数组的引用再转移数据，并且转移数据不会修改链表的结构，理论上不会造成循环引用，但当多线程并发操作会出现数据丢失的现象</li>\n</ul>\n</li>\n<li>concurrentHashMap</li>\n<li>1.7 引入segment的概念，将整个table划分成若干个segment，对segment加锁减小锁的粒度提高吞吐量，get的时候先通过hash找到segment，再找到对应的table中的位置</li>\n<li>1.8 对Node加锁进一步减小了锁的粒度提高吞吐量，加入多线程扩容的逻辑加速扩容的过程，put操作时发现正在扩容可以帮助扩容，而不是阻塞起来傻等<ul>\n<li>扩容的逻辑很复杂，整理一下大概的逻辑吧，首先将CAS操作将table扩容，根据原来table的大小将扩容工作拆成多个任务，每个任务最少迁移16个桶，当线程完成扩容任务会继续领取下一个任务进行扩容</li>\n<li>多线程领取任务开始扩容，安装索引从大到小的顺序开始，扩容过程中get操作，会get到ForwardNode，转发到新的table中查找value；扩容过程中put操作，如果当前扩容的线程数量小于最大限制的数量就加入扩容的队列中，否则阻塞</li>\n<li>put 使用synchronized关键字对Node加锁；当Node中的链表大于8，如果当前容量没有超过64先进行扩容，否则才转红黑树；扩容过程中红黑树节点小于6个转链表</li>\n</ul>\n</li>\n</ul>\n"},{"title":"分布式锁的套路-watchdog实现","author":"YyWang","date":"2020-10-19T13:38:46.000Z","_content":"\n开门见山，分布式锁用来保证分布式环境下业务逻辑的原子性以及互斥，原理就是锁的原理，多个系统一同去竞争同一个资源（类比单机环境下多个线程竞争同一块内存），获得资源的系统可以认为是加锁成功，否则加锁失败；下面总结一个简单可用的分布式锁的实现\n\n### 业务场景\n日常开发中，一定会有定时任务操作一些数据的需求，而且这个定时任务还必须要高可用，所以就必须要在分布式环境下运行，但是又不能多个系统一起运行，所以就需要用到分布式锁，能够保证一个系统去运行定时任务，在这个系统出现异常了，其他的系统能够顶上来完成剩下的任务，类似于watchdog的功能\n\n总结了一个流程图如下\n\n![分布式锁](/images/分布式锁.png)\n\n如图所示这个套路，简单无脑，定时任务的时候lock一下，成功了就继续执行，失败了就return，下一个周期再lock；把过期时间设置的比定时任务周期稍微长一些，也就是说当一个系统获取锁成功后，如果没有意外情况后面的周期还是这个系统运行（类比于jvm中的偏向锁，不同的时这个会一直偏不会锁升级），当系统发送异常情况，其他的系统就会lock成功，继续后面的任务，可以完成一个简单高可用的定时任务\n\n### 实现\n上面讲过，分布式锁的原理就是能够保证互斥，在一个所有系统都能访问到的地方去做文章，基于这点就有很多种实现，比如数据库这样提供存储的工具(mysql、redis、zk、etcd等等)，理论上所有数据库都可以用来实现分布式锁甚至文件都可以，就看自己的需求了；通常的话使用数据库、redis和zk的比较多\n\n#### mysql\nmysql的话是通过数据库的唯一索引保证原子性，首先要创建一个表用于存锁的相关信息，需要一些必填字段\n\n* lockName - 唯一索引，锁的名称\n* modifyTime - 修改时间\n* owerIp - 获取锁的Ip\n* lockTime - 锁的有效时间\n\n```\npublic boolean lock(lockName, lockTime){\n    // 获取当前的锁\n\tLock currentLock = lockDao.findLockByLockName(lockName);\n\t// 当前没有加锁\n\tif (currentLock == null) {\n\t    return tryLock(lockName, maxLockTime);//加锁\n\t}\n\t//  锁过期了并且成功释放锁 -> 重新加锁，释放锁异常返回false\n    if (currentTimeMillis-currentLock.getModifyTime().TimeMills > currentLock.getMaxLockTime()) {\n        return unlock(lockName) ? tryLock(lockName, maxLockTime) : false;\n    }\n    // 锁没过期且自己占有锁且锁没过期 续租\n    if (currentLock.getOwnerIP().equals(NetUtils.getLocalHost())) {\n        renewLock(currentLock);\n        return true;\n    }\n    return false;\n}\n\npublic void renewLock(Lock currentLock) {\n    try{\n        currentLock.setModifyTime(new Date());\n        lockDao.update(currentLock);\n    }catch(Exception e){\n        // 续租失败，但锁没过期，仍然有效\n    }\n}\n\npublic boolean tryLock(String lockName, long maxLockTime) {\n    try{\n        lockDao.save(new Lock(lockName, NetUtils.getLocalHost(), maxLockTime));\n        return true;\n    }catch (Exception e){\n        return false;\n    }\n}\n\n\npublic boolean unlock(String lockName) {\n    try {\n        lockDao.deleteLockByLockName(lockName);\n        // 可能存在其他线程把当前线程的锁释放掉，这里可以根据线程的持有者进行释放锁的操作\n        // 在我的场景下可以保证定时任务一定会在锁的有效时间内执行完成，故不考虑这种情况\n        return true;\n    }catch (Exception e) {\n        return false;\n    }\n}\n```\n\n#### redis\n\nredis相较于mysql而言吞吐量有了显著的提高，并且也提供了一系列原子操作的api，而且还有过期时间的api不需要，可以很简单的实现分布式锁\n\n```\npublic boolean lock(lockName, lockTime){\n    // 获取当前的锁\n\tString value = redis.get(lockName);\n\t// 当前没有加锁\n\tif (value == null) {\n\t    return tryLock(lockName, maxLockTime);//加锁\n\t}\n    // redis自己会清理过期的key, 锁没过期且自己占有锁且锁没过期 续租\n    if (value.equals(NetUtils.getLocalHost())) {\n        renewLock(lockName, period);\n        return true;\n    }\n    return false;\n}\n\npublic void renewLock(Strng lockName, long period) {\n    try{\n        // period为定时任务的周期时间，因为lockTime要比period大，每次续期lockTime后锁的过期时间会越来越大\n        redis.expire(lockName, redis.ttl(lockName)+period);\n    }catch(Exception e){\n        // 续租失败，但锁没过期，仍然有效\n    }\n}\n\npublic boolean tryLock(String lockName, long maxLockTime) {\n    try{\n        return redis.setNx(lockName, NetUtils.getLocalHost(), maxLockTime));\n    }catch (Exception e){\n        return false;\n    }\n}\n\n\npublic boolean unlock(String lockName) {\n    try {\n        lockDao.deleteLockByLockName(lockName);\n        return true;\n    }catch (Exception e) {\n        return false;\n    }\n}\n```\n\n上面给了两种方式的简单实现，实际过程中还需要考虑异常情况的细节，除此以外还有很多种实现的方式只是列举了两种，套用流程图上的套路，实现一个简单的watchdog的功能","source":"_posts/分布式锁的套路-watchdog实现.md","raw":"title: 分布式锁的套路-watchdog实现\nauthor: YyWang\ntags: Java\ncategories: Java\ndate: 2020-10-19 21:38:46 \n---\n\n开门见山，分布式锁用来保证分布式环境下业务逻辑的原子性以及互斥，原理就是锁的原理，多个系统一同去竞争同一个资源（类比单机环境下多个线程竞争同一块内存），获得资源的系统可以认为是加锁成功，否则加锁失败；下面总结一个简单可用的分布式锁的实现\n\n### 业务场景\n日常开发中，一定会有定时任务操作一些数据的需求，而且这个定时任务还必须要高可用，所以就必须要在分布式环境下运行，但是又不能多个系统一起运行，所以就需要用到分布式锁，能够保证一个系统去运行定时任务，在这个系统出现异常了，其他的系统能够顶上来完成剩下的任务，类似于watchdog的功能\n\n总结了一个流程图如下\n\n![分布式锁](/images/分布式锁.png)\n\n如图所示这个套路，简单无脑，定时任务的时候lock一下，成功了就继续执行，失败了就return，下一个周期再lock；把过期时间设置的比定时任务周期稍微长一些，也就是说当一个系统获取锁成功后，如果没有意外情况后面的周期还是这个系统运行（类比于jvm中的偏向锁，不同的时这个会一直偏不会锁升级），当系统发送异常情况，其他的系统就会lock成功，继续后面的任务，可以完成一个简单高可用的定时任务\n\n### 实现\n上面讲过，分布式锁的原理就是能够保证互斥，在一个所有系统都能访问到的地方去做文章，基于这点就有很多种实现，比如数据库这样提供存储的工具(mysql、redis、zk、etcd等等)，理论上所有数据库都可以用来实现分布式锁甚至文件都可以，就看自己的需求了；通常的话使用数据库、redis和zk的比较多\n\n#### mysql\nmysql的话是通过数据库的唯一索引保证原子性，首先要创建一个表用于存锁的相关信息，需要一些必填字段\n\n* lockName - 唯一索引，锁的名称\n* modifyTime - 修改时间\n* owerIp - 获取锁的Ip\n* lockTime - 锁的有效时间\n\n```\npublic boolean lock(lockName, lockTime){\n    // 获取当前的锁\n\tLock currentLock = lockDao.findLockByLockName(lockName);\n\t// 当前没有加锁\n\tif (currentLock == null) {\n\t    return tryLock(lockName, maxLockTime);//加锁\n\t}\n\t//  锁过期了并且成功释放锁 -> 重新加锁，释放锁异常返回false\n    if (currentTimeMillis-currentLock.getModifyTime().TimeMills > currentLock.getMaxLockTime()) {\n        return unlock(lockName) ? tryLock(lockName, maxLockTime) : false;\n    }\n    // 锁没过期且自己占有锁且锁没过期 续租\n    if (currentLock.getOwnerIP().equals(NetUtils.getLocalHost())) {\n        renewLock(currentLock);\n        return true;\n    }\n    return false;\n}\n\npublic void renewLock(Lock currentLock) {\n    try{\n        currentLock.setModifyTime(new Date());\n        lockDao.update(currentLock);\n    }catch(Exception e){\n        // 续租失败，但锁没过期，仍然有效\n    }\n}\n\npublic boolean tryLock(String lockName, long maxLockTime) {\n    try{\n        lockDao.save(new Lock(lockName, NetUtils.getLocalHost(), maxLockTime));\n        return true;\n    }catch (Exception e){\n        return false;\n    }\n}\n\n\npublic boolean unlock(String lockName) {\n    try {\n        lockDao.deleteLockByLockName(lockName);\n        // 可能存在其他线程把当前线程的锁释放掉，这里可以根据线程的持有者进行释放锁的操作\n        // 在我的场景下可以保证定时任务一定会在锁的有效时间内执行完成，故不考虑这种情况\n        return true;\n    }catch (Exception e) {\n        return false;\n    }\n}\n```\n\n#### redis\n\nredis相较于mysql而言吞吐量有了显著的提高，并且也提供了一系列原子操作的api，而且还有过期时间的api不需要，可以很简单的实现分布式锁\n\n```\npublic boolean lock(lockName, lockTime){\n    // 获取当前的锁\n\tString value = redis.get(lockName);\n\t// 当前没有加锁\n\tif (value == null) {\n\t    return tryLock(lockName, maxLockTime);//加锁\n\t}\n    // redis自己会清理过期的key, 锁没过期且自己占有锁且锁没过期 续租\n    if (value.equals(NetUtils.getLocalHost())) {\n        renewLock(lockName, period);\n        return true;\n    }\n    return false;\n}\n\npublic void renewLock(Strng lockName, long period) {\n    try{\n        // period为定时任务的周期时间，因为lockTime要比period大，每次续期lockTime后锁的过期时间会越来越大\n        redis.expire(lockName, redis.ttl(lockName)+period);\n    }catch(Exception e){\n        // 续租失败，但锁没过期，仍然有效\n    }\n}\n\npublic boolean tryLock(String lockName, long maxLockTime) {\n    try{\n        return redis.setNx(lockName, NetUtils.getLocalHost(), maxLockTime));\n    }catch (Exception e){\n        return false;\n    }\n}\n\n\npublic boolean unlock(String lockName) {\n    try {\n        lockDao.deleteLockByLockName(lockName);\n        return true;\n    }catch (Exception e) {\n        return false;\n    }\n}\n```\n\n上面给了两种方式的简单实现，实际过程中还需要考虑异常情况的细节，除此以外还有很多种实现的方式只是列举了两种，套用流程图上的套路，实现一个简单的watchdog的功能","slug":"分布式锁的套路-watchdog实现","published":1,"updated":"2021-07-13T12:27:08.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj7p003481fysu65nzap","content":"<p>开门见山，分布式锁用来保证分布式环境下业务逻辑的原子性以及互斥，原理就是锁的原理，多个系统一同去竞争同一个资源（类比单机环境下多个线程竞争同一块内存），获得资源的系统可以认为是加锁成功，否则加锁失败；下面总结一个简单可用的分布式锁的实现</p>\n<h3 id=\"业务场景\"><a href=\"#业务场景\" class=\"headerlink\" title=\"业务场景\"></a>业务场景</h3><p>日常开发中，一定会有定时任务操作一些数据的需求，而且这个定时任务还必须要高可用，所以就必须要在分布式环境下运行，但是又不能多个系统一起运行，所以就需要用到分布式锁，能够保证一个系统去运行定时任务，在这个系统出现异常了，其他的系统能够顶上来完成剩下的任务，类似于watchdog的功能</p>\n<p>总结了一个流程图如下</p>\n<p><img src=\"/images/分布式锁.png\" alt=\"分布式锁\"></p>\n<p>如图所示这个套路，简单无脑，定时任务的时候lock一下，成功了就继续执行，失败了就return，下一个周期再lock；把过期时间设置的比定时任务周期稍微长一些，也就是说当一个系统获取锁成功后，如果没有意外情况后面的周期还是这个系统运行（类比于jvm中的偏向锁，不同的时这个会一直偏不会锁升级），当系统发送异常情况，其他的系统就会lock成功，继续后面的任务，可以完成一个简单高可用的定时任务</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>上面讲过，分布式锁的原理就是能够保证互斥，在一个所有系统都能访问到的地方去做文章，基于这点就有很多种实现，比如数据库这样提供存储的工具(mysql、redis、zk、etcd等等)，理论上所有数据库都可以用来实现分布式锁甚至文件都可以，就看自己的需求了；通常的话使用数据库、redis和zk的比较多</p>\n<h4 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h4><p>mysql的话是通过数据库的唯一索引保证原子性，首先要创建一个表用于存锁的相关信息，需要一些必填字段</p>\n<ul>\n<li>lockName - 唯一索引，锁的名称</li>\n<li>modifyTime - 修改时间</li>\n<li>owerIp - 获取锁的Ip</li>\n<li>lockTime - 锁的有效时间</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean lock(lockName, lockTime)&#123;</span><br><span class=\"line\">    // 获取当前的锁</span><br><span class=\"line\">\tLock currentLock = lockDao.findLockByLockName(lockName);</span><br><span class=\"line\">\t// 当前没有加锁</span><br><span class=\"line\">\tif (currentLock == null) &#123;</span><br><span class=\"line\">\t    return tryLock(lockName, maxLockTime);//加锁</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//  锁过期了并且成功释放锁 -&gt; 重新加锁，释放锁异常返回false</span><br><span class=\"line\">    if (currentTimeMillis-currentLock.getModifyTime().TimeMills &gt; currentLock.getMaxLockTime()) &#123;</span><br><span class=\"line\">        return unlock(lockName) ? tryLock(lockName, maxLockTime) : false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 锁没过期且自己占有锁且锁没过期 续租</span><br><span class=\"line\">    if (currentLock.getOwnerIP().equals(NetUtils.getLocalHost())) &#123;</span><br><span class=\"line\">        renewLock(currentLock);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void renewLock(Lock currentLock) &#123;</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">        currentLock.setModifyTime(new Date());</span><br><span class=\"line\">        lockDao.update(currentLock);</span><br><span class=\"line\">    &#125;catch(Exception e)&#123;</span><br><span class=\"line\">        // 续租失败，但锁没过期，仍然有效</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public boolean tryLock(String lockName, long maxLockTime) &#123;</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">        lockDao.save(new Lock(lockName, NetUtils.getLocalHost(), maxLockTime));</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;catch (Exception e)&#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public boolean unlock(String lockName) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        lockDao.deleteLockByLockName(lockName);</span><br><span class=\"line\">        // 可能存在其他线程把当前线程的锁释放掉，这里可以根据线程的持有者进行释放锁的操作</span><br><span class=\"line\">        // 在我的场景下可以保证定时任务一定会在锁的有效时间内执行完成，故不考虑这种情况</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;catch (Exception e) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h4><p>redis相较于mysql而言吞吐量有了显著的提高，并且也提供了一系列原子操作的api，而且还有过期时间的api不需要，可以很简单的实现分布式锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean lock(lockName, lockTime)&#123;</span><br><span class=\"line\">    // 获取当前的锁</span><br><span class=\"line\">\tString value = redis.get(lockName);</span><br><span class=\"line\">\t// 当前没有加锁</span><br><span class=\"line\">\tif (value == null) &#123;</span><br><span class=\"line\">\t    return tryLock(lockName, maxLockTime);//加锁</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    // redis自己会清理过期的key, 锁没过期且自己占有锁且锁没过期 续租</span><br><span class=\"line\">    if (value.equals(NetUtils.getLocalHost())) &#123;</span><br><span class=\"line\">        renewLock(lockName, period);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void renewLock(Strng lockName, long period) &#123;</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">        // period为定时任务的周期时间，因为lockTime要比period大，每次续期lockTime后锁的过期时间会越来越大</span><br><span class=\"line\">        redis.expire(lockName, redis.ttl(lockName)+period);</span><br><span class=\"line\">    &#125;catch(Exception e)&#123;</span><br><span class=\"line\">        // 续租失败，但锁没过期，仍然有效</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public boolean tryLock(String lockName, long maxLockTime) &#123;</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">        return redis.setNx(lockName, NetUtils.getLocalHost(), maxLockTime));</span><br><span class=\"line\">    &#125;catch (Exception e)&#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public boolean unlock(String lockName) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        lockDao.deleteLockByLockName(lockName);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;catch (Exception e) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面给了两种方式的简单实现，实际过程中还需要考虑异常情况的细节，除此以外还有很多种实现的方式只是列举了两种，套用流程图上的套路，实现一个简单的watchdog的功能</p>\n","site":{"data":{}},"excerpt":"","more":"<p>开门见山，分布式锁用来保证分布式环境下业务逻辑的原子性以及互斥，原理就是锁的原理，多个系统一同去竞争同一个资源（类比单机环境下多个线程竞争同一块内存），获得资源的系统可以认为是加锁成功，否则加锁失败；下面总结一个简单可用的分布式锁的实现</p>\n<h3 id=\"业务场景\"><a href=\"#业务场景\" class=\"headerlink\" title=\"业务场景\"></a>业务场景</h3><p>日常开发中，一定会有定时任务操作一些数据的需求，而且这个定时任务还必须要高可用，所以就必须要在分布式环境下运行，但是又不能多个系统一起运行，所以就需要用到分布式锁，能够保证一个系统去运行定时任务，在这个系统出现异常了，其他的系统能够顶上来完成剩下的任务，类似于watchdog的功能</p>\n<p>总结了一个流程图如下</p>\n<p><img src=\"/images/分布式锁.png\" alt=\"分布式锁\"></p>\n<p>如图所示这个套路，简单无脑，定时任务的时候lock一下，成功了就继续执行，失败了就return，下一个周期再lock；把过期时间设置的比定时任务周期稍微长一些，也就是说当一个系统获取锁成功后，如果没有意外情况后面的周期还是这个系统运行（类比于jvm中的偏向锁，不同的时这个会一直偏不会锁升级），当系统发送异常情况，其他的系统就会lock成功，继续后面的任务，可以完成一个简单高可用的定时任务</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>上面讲过，分布式锁的原理就是能够保证互斥，在一个所有系统都能访问到的地方去做文章，基于这点就有很多种实现，比如数据库这样提供存储的工具(mysql、redis、zk、etcd等等)，理论上所有数据库都可以用来实现分布式锁甚至文件都可以，就看自己的需求了；通常的话使用数据库、redis和zk的比较多</p>\n<h4 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h4><p>mysql的话是通过数据库的唯一索引保证原子性，首先要创建一个表用于存锁的相关信息，需要一些必填字段</p>\n<ul>\n<li>lockName - 唯一索引，锁的名称</li>\n<li>modifyTime - 修改时间</li>\n<li>owerIp - 获取锁的Ip</li>\n<li>lockTime - 锁的有效时间</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean lock(lockName, lockTime)&#123;</span><br><span class=\"line\">    // 获取当前的锁</span><br><span class=\"line\">\tLock currentLock = lockDao.findLockByLockName(lockName);</span><br><span class=\"line\">\t// 当前没有加锁</span><br><span class=\"line\">\tif (currentLock == null) &#123;</span><br><span class=\"line\">\t    return tryLock(lockName, maxLockTime);//加锁</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//  锁过期了并且成功释放锁 -&gt; 重新加锁，释放锁异常返回false</span><br><span class=\"line\">    if (currentTimeMillis-currentLock.getModifyTime().TimeMills &gt; currentLock.getMaxLockTime()) &#123;</span><br><span class=\"line\">        return unlock(lockName) ? tryLock(lockName, maxLockTime) : false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 锁没过期且自己占有锁且锁没过期 续租</span><br><span class=\"line\">    if (currentLock.getOwnerIP().equals(NetUtils.getLocalHost())) &#123;</span><br><span class=\"line\">        renewLock(currentLock);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void renewLock(Lock currentLock) &#123;</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">        currentLock.setModifyTime(new Date());</span><br><span class=\"line\">        lockDao.update(currentLock);</span><br><span class=\"line\">    &#125;catch(Exception e)&#123;</span><br><span class=\"line\">        // 续租失败，但锁没过期，仍然有效</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public boolean tryLock(String lockName, long maxLockTime) &#123;</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">        lockDao.save(new Lock(lockName, NetUtils.getLocalHost(), maxLockTime));</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;catch (Exception e)&#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public boolean unlock(String lockName) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        lockDao.deleteLockByLockName(lockName);</span><br><span class=\"line\">        // 可能存在其他线程把当前线程的锁释放掉，这里可以根据线程的持有者进行释放锁的操作</span><br><span class=\"line\">        // 在我的场景下可以保证定时任务一定会在锁的有效时间内执行完成，故不考虑这种情况</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;catch (Exception e) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h4><p>redis相较于mysql而言吞吐量有了显著的提高，并且也提供了一系列原子操作的api，而且还有过期时间的api不需要，可以很简单的实现分布式锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean lock(lockName, lockTime)&#123;</span><br><span class=\"line\">    // 获取当前的锁</span><br><span class=\"line\">\tString value = redis.get(lockName);</span><br><span class=\"line\">\t// 当前没有加锁</span><br><span class=\"line\">\tif (value == null) &#123;</span><br><span class=\"line\">\t    return tryLock(lockName, maxLockTime);//加锁</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    // redis自己会清理过期的key, 锁没过期且自己占有锁且锁没过期 续租</span><br><span class=\"line\">    if (value.equals(NetUtils.getLocalHost())) &#123;</span><br><span class=\"line\">        renewLock(lockName, period);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void renewLock(Strng lockName, long period) &#123;</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">        // period为定时任务的周期时间，因为lockTime要比period大，每次续期lockTime后锁的过期时间会越来越大</span><br><span class=\"line\">        redis.expire(lockName, redis.ttl(lockName)+period);</span><br><span class=\"line\">    &#125;catch(Exception e)&#123;</span><br><span class=\"line\">        // 续租失败，但锁没过期，仍然有效</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public boolean tryLock(String lockName, long maxLockTime) &#123;</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">        return redis.setNx(lockName, NetUtils.getLocalHost(), maxLockTime));</span><br><span class=\"line\">    &#125;catch (Exception e)&#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public boolean unlock(String lockName) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        lockDao.deleteLockByLockName(lockName);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;catch (Exception e) &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面给了两种方式的简单实现，实际过程中还需要考虑异常情况的细节，除此以外还有很多种实现的方式只是列举了两种，套用流程图上的套路，实现一个简单的watchdog的功能</p>\n"},{"title":"回调与监听器模式","author":"YyWang","date":"2019-11-22T10:15:48.000Z","catagories":"设计模式","_content":"监听器模式是基于Java回调机制的，首先了解一下回调\n\n### 回调\n\n类似于多线程中new Thread(){run()} 这样，其实run方法就是回调方法，jdk并不关注你怎么去实现run方法，将其以接口的方式暴露出来，让你去填空；就好像你的同事和你配合写代码，挖了一个坑让你填，哈哈，这么比喻有些不妥，其实是为了解耦，不想让你的代码侵入进去，直接看类图\n\n#### 类图\n\n\n![upload successful](/images/pasted-21.png)\n\n回调就包含两个部分，分别是调用者和回调接口，实现也很简单，调用者中维护回调接口的对象并增加set方法，调用者中直接使用接口中的方法，具体实现在调用set方法时填写即可，我可能没有说清楚，直接上代码\n\n#### 实现\n\n回调接口 Callback\n\n```\npublic interface Callback {\n    void doSomething();\n}\n```\n\n调用者 Caller\n\n```\npublic class Caller {\n\t// 维护一个回调接口\n    private Callback callback;\n\n    public void setCallback(Callback callback) {\n        this.callback = callback;\n    }\n\n    public void call() {\n        System.out.println(\"do something before\");\n        callback.doSomething();// 使用回调接口中的方法，不需要在这里关系实现\n        System.out.println(\"do something behind\");\n    }\n}\n```\n\n测试\n\n```\npublic static void main(String[] args) {\n    Caller caller = new Caller();\n    // 具体实现在set方法中填写\n    caller.setCallback(new Callback() {\n        @Override\n        public void doSomething() {\n            System.out.println(\"do something in callback\");\n        }\n    });\n\n    caller.call();\n}\n```\n\n### 监听器模式\n\n监听器模式是监听感兴趣的事件，事件发生做出相应的操作；是回调的一种拓展，是在包括监听器接口，事件源和事件对象三个部分，先看类图\n\n#### 类图\n\n![upload successful](/images/pasted-22.png)\n\n相较于回调，监听器接口相当于回调方法接口，事件源相当于调用者，监听器模式是在此基础上多了事件对象，并传给接口的方法中，我的理解是事件对象是对事件的一个封装，感兴趣的事件可能有多个，可以针对不同事件（不同的event对象）做不同的操作，这些操作也被封装在不同event对象中\n\n#### 实现\n\n监听器接口\n\n```\npublic interface EventListener {\n    void doSomething(Event event);\n}\n```\n\n事件源\n\n```\npublic class EventSource {\n    // 维护监听器对象\n    private EventListener listener;\n\n    public void setListener(EventListener listener) {\n        this.listener = listener;\n    }\n\t\n    public void eventHappend(Event event) {\n        System.out.println(\"do something before\");\n        listener.doSomething(event);// 不关心方法具体实现，并传入event对象参数\n        System.out.println(\"do something behind\");\n    }\n\n}\n```\n\n事件对象\n\n```\npublic class Event {\n    // 事件类型\n    private String eventInfo;\n\n    public Event(String eventInfo){\n        this.eventInfo = eventInfo;\n    }\n\n    public String getEventInfo() {\n        return eventInfo;\n    }\n\t// 对于事件的操作\n    void doSomething() {\n        System.out.println(\"do something in event object\");\n    }\n}\n```\n\n测试\n\n```\npublic static void main(String[] args) {\n    EventSource eventSource = new EventSource();\n    eventSource.setListener(new EventListener() {\n        @Override\n        public void doSomething(Event event) {\n            event.doSomething();// 不管事件是什么直接执行方法\n            // 有感兴趣的事件做对应的操作\n            if (\"event interested\".equals(event.getEventInfo())) {\n                System.out.println(\"interesting event happened\");\n            }\n        }\n    });\n\n    eventSource.eventHappend(new Event(\"event interested\"));\n}\n```\n\n感觉事件对象还没有理解到位，针对不同的事件做不同的操作，可以设置不同的监听器，在不同的监听器中做对应的操作，相当于回调不用封装时间对象；也可以封装不同的监听事件作为参数传入，唯一的监听器中，针对不同的事件对象再做不同的操作。\n","source":"_posts/回调与监听器模式.md","raw":"title: 回调与监听器模式\nauthor: YyWang\ndate: 2019-11-22 18:15:48\ntags: 设计模式\ncatagories: 设计模式\n---\n监听器模式是基于Java回调机制的，首先了解一下回调\n\n### 回调\n\n类似于多线程中new Thread(){run()} 这样，其实run方法就是回调方法，jdk并不关注你怎么去实现run方法，将其以接口的方式暴露出来，让你去填空；就好像你的同事和你配合写代码，挖了一个坑让你填，哈哈，这么比喻有些不妥，其实是为了解耦，不想让你的代码侵入进去，直接看类图\n\n#### 类图\n\n\n![upload successful](/images/pasted-21.png)\n\n回调就包含两个部分，分别是调用者和回调接口，实现也很简单，调用者中维护回调接口的对象并增加set方法，调用者中直接使用接口中的方法，具体实现在调用set方法时填写即可，我可能没有说清楚，直接上代码\n\n#### 实现\n\n回调接口 Callback\n\n```\npublic interface Callback {\n    void doSomething();\n}\n```\n\n调用者 Caller\n\n```\npublic class Caller {\n\t// 维护一个回调接口\n    private Callback callback;\n\n    public void setCallback(Callback callback) {\n        this.callback = callback;\n    }\n\n    public void call() {\n        System.out.println(\"do something before\");\n        callback.doSomething();// 使用回调接口中的方法，不需要在这里关系实现\n        System.out.println(\"do something behind\");\n    }\n}\n```\n\n测试\n\n```\npublic static void main(String[] args) {\n    Caller caller = new Caller();\n    // 具体实现在set方法中填写\n    caller.setCallback(new Callback() {\n        @Override\n        public void doSomething() {\n            System.out.println(\"do something in callback\");\n        }\n    });\n\n    caller.call();\n}\n```\n\n### 监听器模式\n\n监听器模式是监听感兴趣的事件，事件发生做出相应的操作；是回调的一种拓展，是在包括监听器接口，事件源和事件对象三个部分，先看类图\n\n#### 类图\n\n![upload successful](/images/pasted-22.png)\n\n相较于回调，监听器接口相当于回调方法接口，事件源相当于调用者，监听器模式是在此基础上多了事件对象，并传给接口的方法中，我的理解是事件对象是对事件的一个封装，感兴趣的事件可能有多个，可以针对不同事件（不同的event对象）做不同的操作，这些操作也被封装在不同event对象中\n\n#### 实现\n\n监听器接口\n\n```\npublic interface EventListener {\n    void doSomething(Event event);\n}\n```\n\n事件源\n\n```\npublic class EventSource {\n    // 维护监听器对象\n    private EventListener listener;\n\n    public void setListener(EventListener listener) {\n        this.listener = listener;\n    }\n\t\n    public void eventHappend(Event event) {\n        System.out.println(\"do something before\");\n        listener.doSomething(event);// 不关心方法具体实现，并传入event对象参数\n        System.out.println(\"do something behind\");\n    }\n\n}\n```\n\n事件对象\n\n```\npublic class Event {\n    // 事件类型\n    private String eventInfo;\n\n    public Event(String eventInfo){\n        this.eventInfo = eventInfo;\n    }\n\n    public String getEventInfo() {\n        return eventInfo;\n    }\n\t// 对于事件的操作\n    void doSomething() {\n        System.out.println(\"do something in event object\");\n    }\n}\n```\n\n测试\n\n```\npublic static void main(String[] args) {\n    EventSource eventSource = new EventSource();\n    eventSource.setListener(new EventListener() {\n        @Override\n        public void doSomething(Event event) {\n            event.doSomething();// 不管事件是什么直接执行方法\n            // 有感兴趣的事件做对应的操作\n            if (\"event interested\".equals(event.getEventInfo())) {\n                System.out.println(\"interesting event happened\");\n            }\n        }\n    });\n\n    eventSource.eventHappend(new Event(\"event interested\"));\n}\n```\n\n感觉事件对象还没有理解到位，针对不同的事件做不同的操作，可以设置不同的监听器，在不同的监听器中做对应的操作，相当于回调不用封装时间对象；也可以封装不同的监听事件作为参数传入，唯一的监听器中，针对不同的事件对象再做不同的操作。\n","slug":"回调与监听器模式","published":1,"updated":"2021-07-13T12:27:08.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj7q003781fystay40km","content":"<p>监听器模式是基于Java回调机制的，首先了解一下回调</p>\n<h3 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h3><p>类似于多线程中new Thread(){run()} 这样，其实run方法就是回调方法，jdk并不关注你怎么去实现run方法，将其以接口的方式暴露出来，让你去填空；就好像你的同事和你配合写代码，挖了一个坑让你填，哈哈，这么比喻有些不妥，其实是为了解耦，不想让你的代码侵入进去，直接看类图</p>\n<h4 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h4><p><img src=\"/images/pasted-21.png\" alt=\"upload successful\"></p>\n<p>回调就包含两个部分，分别是调用者和回调接口，实现也很简单，调用者中维护回调接口的对象并增加set方法，调用者中直接使用接口中的方法，具体实现在调用set方法时填写即可，我可能没有说清楚，直接上代码</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>回调接口 Callback</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Callback &#123;</span><br><span class=\"line\">    void doSomething();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用者 Caller</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Caller &#123;</span><br><span class=\"line\">\t// 维护一个回调接口</span><br><span class=\"line\">    private Callback callback;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setCallback(Callback callback) &#123;</span><br><span class=\"line\">        this.callback = callback;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void call() &#123;</span><br><span class=\"line\">        System.out.println(&quot;do something before&quot;);</span><br><span class=\"line\">        callback.doSomething();// 使用回调接口中的方法，不需要在这里关系实现</span><br><span class=\"line\">        System.out.println(&quot;do something behind&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    Caller caller = new Caller();</span><br><span class=\"line\">    // 具体实现在set方法中填写</span><br><span class=\"line\">    caller.setCallback(new Callback() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void doSomething() &#123;</span><br><span class=\"line\">            System.out.println(&quot;do something in callback&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    caller.call();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"监听器模式\"><a href=\"#监听器模式\" class=\"headerlink\" title=\"监听器模式\"></a>监听器模式</h3><p>监听器模式是监听感兴趣的事件，事件发生做出相应的操作；是回调的一种拓展，是在包括监听器接口，事件源和事件对象三个部分，先看类图</p>\n<h4 id=\"类图-1\"><a href=\"#类图-1\" class=\"headerlink\" title=\"类图\"></a>类图</h4><p><img src=\"/images/pasted-22.png\" alt=\"upload successful\"></p>\n<p>相较于回调，监听器接口相当于回调方法接口，事件源相当于调用者，监听器模式是在此基础上多了事件对象，并传给接口的方法中，我的理解是事件对象是对事件的一个封装，感兴趣的事件可能有多个，可以针对不同事件（不同的event对象）做不同的操作，这些操作也被封装在不同event对象中</p>\n<h4 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>监听器接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface EventListener &#123;</span><br><span class=\"line\">    void doSomething(Event event);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事件源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class EventSource &#123;</span><br><span class=\"line\">    // 维护监听器对象</span><br><span class=\"line\">    private EventListener listener;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setListener(EventListener listener) &#123;</span><br><span class=\"line\">        this.listener = listener;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    public void eventHappend(Event event) &#123;</span><br><span class=\"line\">        System.out.println(&quot;do something before&quot;);</span><br><span class=\"line\">        listener.doSomething(event);// 不关心方法具体实现，并传入event对象参数</span><br><span class=\"line\">        System.out.println(&quot;do something behind&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事件对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Event &#123;</span><br><span class=\"line\">    // 事件类型</span><br><span class=\"line\">    private String eventInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Event(String eventInfo)&#123;</span><br><span class=\"line\">        this.eventInfo = eventInfo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getEventInfo() &#123;</span><br><span class=\"line\">        return eventInfo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t// 对于事件的操作</span><br><span class=\"line\">    void doSomething() &#123;</span><br><span class=\"line\">        System.out.println(&quot;do something in event object&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    EventSource eventSource = new EventSource();</span><br><span class=\"line\">    eventSource.setListener(new EventListener() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void doSomething(Event event) &#123;</span><br><span class=\"line\">            event.doSomething();// 不管事件是什么直接执行方法</span><br><span class=\"line\">            // 有感兴趣的事件做对应的操作</span><br><span class=\"line\">            if (&quot;event interested&quot;.equals(event.getEventInfo())) &#123;</span><br><span class=\"line\">                System.out.println(&quot;interesting event happened&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    eventSource.eventHappend(new Event(&quot;event interested&quot;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>感觉事件对象还没有理解到位，针对不同的事件做不同的操作，可以设置不同的监听器，在不同的监听器中做对应的操作，相当于回调不用封装时间对象；也可以封装不同的监听事件作为参数传入，唯一的监听器中，针对不同的事件对象再做不同的操作。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>监听器模式是基于Java回调机制的，首先了解一下回调</p>\n<h3 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h3><p>类似于多线程中new Thread(){run()} 这样，其实run方法就是回调方法，jdk并不关注你怎么去实现run方法，将其以接口的方式暴露出来，让你去填空；就好像你的同事和你配合写代码，挖了一个坑让你填，哈哈，这么比喻有些不妥，其实是为了解耦，不想让你的代码侵入进去，直接看类图</p>\n<h4 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h4><p><img src=\"/images/pasted-21.png\" alt=\"upload successful\"></p>\n<p>回调就包含两个部分，分别是调用者和回调接口，实现也很简单，调用者中维护回调接口的对象并增加set方法，调用者中直接使用接口中的方法，具体实现在调用set方法时填写即可，我可能没有说清楚，直接上代码</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>回调接口 Callback</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Callback &#123;</span><br><span class=\"line\">    void doSomething();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用者 Caller</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Caller &#123;</span><br><span class=\"line\">\t// 维护一个回调接口</span><br><span class=\"line\">    private Callback callback;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setCallback(Callback callback) &#123;</span><br><span class=\"line\">        this.callback = callback;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void call() &#123;</span><br><span class=\"line\">        System.out.println(&quot;do something before&quot;);</span><br><span class=\"line\">        callback.doSomething();// 使用回调接口中的方法，不需要在这里关系实现</span><br><span class=\"line\">        System.out.println(&quot;do something behind&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    Caller caller = new Caller();</span><br><span class=\"line\">    // 具体实现在set方法中填写</span><br><span class=\"line\">    caller.setCallback(new Callback() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void doSomething() &#123;</span><br><span class=\"line\">            System.out.println(&quot;do something in callback&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    caller.call();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"监听器模式\"><a href=\"#监听器模式\" class=\"headerlink\" title=\"监听器模式\"></a>监听器模式</h3><p>监听器模式是监听感兴趣的事件，事件发生做出相应的操作；是回调的一种拓展，是在包括监听器接口，事件源和事件对象三个部分，先看类图</p>\n<h4 id=\"类图-1\"><a href=\"#类图-1\" class=\"headerlink\" title=\"类图\"></a>类图</h4><p><img src=\"/images/pasted-22.png\" alt=\"upload successful\"></p>\n<p>相较于回调，监听器接口相当于回调方法接口，事件源相当于调用者，监听器模式是在此基础上多了事件对象，并传给接口的方法中，我的理解是事件对象是对事件的一个封装，感兴趣的事件可能有多个，可以针对不同事件（不同的event对象）做不同的操作，这些操作也被封装在不同event对象中</p>\n<h4 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>监听器接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface EventListener &#123;</span><br><span class=\"line\">    void doSomething(Event event);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事件源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class EventSource &#123;</span><br><span class=\"line\">    // 维护监听器对象</span><br><span class=\"line\">    private EventListener listener;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setListener(EventListener listener) &#123;</span><br><span class=\"line\">        this.listener = listener;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    public void eventHappend(Event event) &#123;</span><br><span class=\"line\">        System.out.println(&quot;do something before&quot;);</span><br><span class=\"line\">        listener.doSomething(event);// 不关心方法具体实现，并传入event对象参数</span><br><span class=\"line\">        System.out.println(&quot;do something behind&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事件对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Event &#123;</span><br><span class=\"line\">    // 事件类型</span><br><span class=\"line\">    private String eventInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Event(String eventInfo)&#123;</span><br><span class=\"line\">        this.eventInfo = eventInfo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getEventInfo() &#123;</span><br><span class=\"line\">        return eventInfo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t// 对于事件的操作</span><br><span class=\"line\">    void doSomething() &#123;</span><br><span class=\"line\">        System.out.println(&quot;do something in event object&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    EventSource eventSource = new EventSource();</span><br><span class=\"line\">    eventSource.setListener(new EventListener() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void doSomething(Event event) &#123;</span><br><span class=\"line\">            event.doSomething();// 不管事件是什么直接执行方法</span><br><span class=\"line\">            // 有感兴趣的事件做对应的操作</span><br><span class=\"line\">            if (&quot;event interested&quot;.equals(event.getEventInfo())) &#123;</span><br><span class=\"line\">                System.out.println(&quot;interesting event happened&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    eventSource.eventHappend(new Event(&quot;event interested&quot;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>感觉事件对象还没有理解到位，针对不同的事件做不同的操作，可以设置不同的监听器，在不同的监听器中做对应的操作，相当于回调不用封装时间对象；也可以封装不同的监听事件作为参数传入，唯一的监听器中，针对不同的事件对象再做不同的操作。</p>\n"},{"title":"将Hexo博客迁移到docker中（总）","author":"YyWang","date":"2020-02-13T02:20:45.000Z","_content":"博客已经运行了大半年了，马上就要到期了，我得着手把搭建的博客备份一下了，续费很贵的话我得找一个便宜的用（我就是一个抠门怪哈哈），最简单的就是做系统的镜像，这也太low了吧。当下流行的是容器技术，决定把先把博客迁移到docker中，如果要换服务器的话直接备份docker就好了呀。\n\n难点：搭建博客的时间过去很久，没有记录，完全忘了如何搭建，不知道都需要迁移哪些文件而且我还搞了很多花里胡哨的东西，这些东西也需要保留\n\n这个就麻烦了，相当于重新搭建Hexo的博客了，没办法谁让我之前没有记录总要还的嘛\n\n迁移步骤分为两个阶段：\n\n#### 第一阶段 重新搭建Hexo博客系统\n\n* 入门docker\n* 在docker容器中重新搭建Hexo博客系统并记录步骤（启动容器进行端口映射 8088:80，在公网验证）\n* 根据记录的步骤编写Dockerfile，生成镜像（启动容器进行端口映射 8088:80 在公网验证）\n\n见系列文章 *将Hexo博客迁移到docker（一）*\n\n#### 第二阶段 迁移博客 \n\n* 总结需要的文件\n* 拷贝文件到容器中\n* 修改Dockerfile\n* 在公网验证\n* 验证成功后，将宿主NGINX端口映射到docker容器中\n\n最终将容器打包成tar做备份，或者将镜像提交到仓库中直接拉取即可，非常完美\n\n见系列文章 *将Hexo博客迁移到docker（二）*\n\n#### 究极解决方案\n\n见系列文章 *将Hexo博客迁移到docker（究极解决方案）*\n\n#### 展望与未来\n\n未来可以搞到k8s上面，通过Deployment让hexo和nginx高可用，后续怎么设计一下，持续更新中\n\n","source":"_posts/将Hexo博客迁移到docker（总）.md","raw":"title: 将Hexo博客迁移到docker中（总）\nauthor: YyWang\ndate: 2020-02-13 10:20:45\ntags: 容器\ncategories: 容器\n---\n博客已经运行了大半年了，马上就要到期了，我得着手把搭建的博客备份一下了，续费很贵的话我得找一个便宜的用（我就是一个抠门怪哈哈），最简单的就是做系统的镜像，这也太low了吧。当下流行的是容器技术，决定把先把博客迁移到docker中，如果要换服务器的话直接备份docker就好了呀。\n\n难点：搭建博客的时间过去很久，没有记录，完全忘了如何搭建，不知道都需要迁移哪些文件而且我还搞了很多花里胡哨的东西，这些东西也需要保留\n\n这个就麻烦了，相当于重新搭建Hexo的博客了，没办法谁让我之前没有记录总要还的嘛\n\n迁移步骤分为两个阶段：\n\n#### 第一阶段 重新搭建Hexo博客系统\n\n* 入门docker\n* 在docker容器中重新搭建Hexo博客系统并记录步骤（启动容器进行端口映射 8088:80，在公网验证）\n* 根据记录的步骤编写Dockerfile，生成镜像（启动容器进行端口映射 8088:80 在公网验证）\n\n见系列文章 *将Hexo博客迁移到docker（一）*\n\n#### 第二阶段 迁移博客 \n\n* 总结需要的文件\n* 拷贝文件到容器中\n* 修改Dockerfile\n* 在公网验证\n* 验证成功后，将宿主NGINX端口映射到docker容器中\n\n最终将容器打包成tar做备份，或者将镜像提交到仓库中直接拉取即可，非常完美\n\n见系列文章 *将Hexo博客迁移到docker（二）*\n\n#### 究极解决方案\n\n见系列文章 *将Hexo博客迁移到docker（究极解决方案）*\n\n#### 展望与未来\n\n未来可以搞到k8s上面，通过Deployment让hexo和nginx高可用，后续怎么设计一下，持续更新中\n\n","slug":"将Hexo博客迁移到docker（总）","published":1,"updated":"2021-07-13T12:27:08.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj7s003b81fy0bt14q7i","content":"<p>博客已经运行了大半年了，马上就要到期了，我得着手把搭建的博客备份一下了，续费很贵的话我得找一个便宜的用（我就是一个抠门怪哈哈），最简单的就是做系统的镜像，这也太low了吧。当下流行的是容器技术，决定把先把博客迁移到docker中，如果要换服务器的话直接备份docker就好了呀。</p>\n<p>难点：搭建博客的时间过去很久，没有记录，完全忘了如何搭建，不知道都需要迁移哪些文件而且我还搞了很多花里胡哨的东西，这些东西也需要保留</p>\n<p>这个就麻烦了，相当于重新搭建Hexo的博客了，没办法谁让我之前没有记录总要还的嘛</p>\n<p>迁移步骤分为两个阶段：</p>\n<h4 id=\"第一阶段-重新搭建Hexo博客系统\"><a href=\"#第一阶段-重新搭建Hexo博客系统\" class=\"headerlink\" title=\"第一阶段 重新搭建Hexo博客系统\"></a>第一阶段 重新搭建Hexo博客系统</h4><ul>\n<li>入门docker</li>\n<li>在docker容器中重新搭建Hexo博客系统并记录步骤（启动容器进行端口映射 8088:80，在公网验证）</li>\n<li>根据记录的步骤编写Dockerfile，生成镜像（启动容器进行端口映射 8088:80 在公网验证）</li>\n</ul>\n<p>见系列文章 <em>将Hexo博客迁移到docker（一）</em></p>\n<h4 id=\"第二阶段-迁移博客\"><a href=\"#第二阶段-迁移博客\" class=\"headerlink\" title=\"第二阶段 迁移博客\"></a>第二阶段 迁移博客</h4><ul>\n<li>总结需要的文件</li>\n<li>拷贝文件到容器中</li>\n<li>修改Dockerfile</li>\n<li>在公网验证</li>\n<li>验证成功后，将宿主NGINX端口映射到docker容器中</li>\n</ul>\n<p>最终将容器打包成tar做备份，或者将镜像提交到仓库中直接拉取即可，非常完美</p>\n<p>见系列文章 <em>将Hexo博客迁移到docker（二）</em></p>\n<h4 id=\"究极解决方案\"><a href=\"#究极解决方案\" class=\"headerlink\" title=\"究极解决方案\"></a>究极解决方案</h4><p>见系列文章 <em>将Hexo博客迁移到docker（究极解决方案）</em></p>\n<h4 id=\"展望与未来\"><a href=\"#展望与未来\" class=\"headerlink\" title=\"展望与未来\"></a>展望与未来</h4><p>未来可以搞到k8s上面，通过Deployment让hexo和nginx高可用，后续怎么设计一下，持续更新中</p>\n","site":{"data":{}},"excerpt":"","more":"<p>博客已经运行了大半年了，马上就要到期了，我得着手把搭建的博客备份一下了，续费很贵的话我得找一个便宜的用（我就是一个抠门怪哈哈），最简单的就是做系统的镜像，这也太low了吧。当下流行的是容器技术，决定把先把博客迁移到docker中，如果要换服务器的话直接备份docker就好了呀。</p>\n<p>难点：搭建博客的时间过去很久，没有记录，完全忘了如何搭建，不知道都需要迁移哪些文件而且我还搞了很多花里胡哨的东西，这些东西也需要保留</p>\n<p>这个就麻烦了，相当于重新搭建Hexo的博客了，没办法谁让我之前没有记录总要还的嘛</p>\n<p>迁移步骤分为两个阶段：</p>\n<h4 id=\"第一阶段-重新搭建Hexo博客系统\"><a href=\"#第一阶段-重新搭建Hexo博客系统\" class=\"headerlink\" title=\"第一阶段 重新搭建Hexo博客系统\"></a>第一阶段 重新搭建Hexo博客系统</h4><ul>\n<li>入门docker</li>\n<li>在docker容器中重新搭建Hexo博客系统并记录步骤（启动容器进行端口映射 8088:80，在公网验证）</li>\n<li>根据记录的步骤编写Dockerfile，生成镜像（启动容器进行端口映射 8088:80 在公网验证）</li>\n</ul>\n<p>见系列文章 <em>将Hexo博客迁移到docker（一）</em></p>\n<h4 id=\"第二阶段-迁移博客\"><a href=\"#第二阶段-迁移博客\" class=\"headerlink\" title=\"第二阶段 迁移博客\"></a>第二阶段 迁移博客</h4><ul>\n<li>总结需要的文件</li>\n<li>拷贝文件到容器中</li>\n<li>修改Dockerfile</li>\n<li>在公网验证</li>\n<li>验证成功后，将宿主NGINX端口映射到docker容器中</li>\n</ul>\n<p>最终将容器打包成tar做备份，或者将镜像提交到仓库中直接拉取即可，非常完美</p>\n<p>见系列文章 <em>将Hexo博客迁移到docker（二）</em></p>\n<h4 id=\"究极解决方案\"><a href=\"#究极解决方案\" class=\"headerlink\" title=\"究极解决方案\"></a>究极解决方案</h4><p>见系列文章 <em>将Hexo博客迁移到docker（究极解决方案）</em></p>\n<h4 id=\"展望与未来\"><a href=\"#展望与未来\" class=\"headerlink\" title=\"展望与未来\"></a>展望与未来</h4><p>未来可以搞到k8s上面，通过Deployment让hexo和nginx高可用，后续怎么设计一下，持续更新中</p>\n"},{"title":"将Hexo博客迁移到docker（一）","author":"YyWang","date":"2020-02-13T02:21:32.000Z","_content":"本篇是迁移工作的第一阶段\n\n#### docker入门\n\n移步到[这里](http://yywang.top/2020/02/12/Docker%E5%85%A5%E9%97%A8/)\n\n#### 在docker容器中重新搭建Hexo博客系统并记录步骤\n\n拉取centos镜像 -> 启动容器 -> 进入容器bash -> 搭建博客\n\n```\n# 拉取镜像\ndocker pull centos:7\n# 启动容器\ndocker run -di --name=centos7 centos:7\n# 进入命令行\ndocker exec -it centos7 /bin/bash\n\n# 搭建hexo博客\n\n# 安装node.js\n\n# 安装wget\nyum install -y wget\n# 新建目录 \nmkdir /usr/local/nodejs\n# 下载tar\nwget https://nodejs.org/dist/v12.15.0/node-v12.15.0-linux-x64.tar.xz\n# 解压\nxz -d node-v12.15.0-linux-x64.tar.xz\n# 部署bin文件\nln -s /usr/local/nodejs/node_12.15.0/bin/node /usr/local/bin/node\nln -s /usr/local/nodejs/node_12.15.0/bin/npm /usr/local/bin/npm\n\n# 安装hexo\nnpm install -g hexo-cli\n# 安装git\nyum install git-core\n# 配置环境变量\nln -s /usr/local/nodejs/node_12.15.0/bin/hexo /usr/local/bin/hexo\n# 创建网站文件夹\nmkdir myblog\ncd myblog\n# 初始化hexo\nhexo init\nhexo generate\n\n# 安装NGINX\n\n# 安装依赖\nyum install -y gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel\n# 下载NGINX\nwget https://nginx.org/download/nginx-1.16.1.tar.gz\n# 解压\ntar -zxf nginx-1.16.1.tar.gz\ncd nginx-1.16.1\n# 编译安装\n./configure \nmake && make install\n# 配置NGINX\nvim /usr/local/nginx/conf/nginx.conf\n# 启动NGINX\ncd /usr/local/nginx/sbin\n./nginx\n```\n\n其中nginx.conf为\n\n```\n\t# http中server模块做修改即可\n\tserver {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  _;\n        root         /usr/local/myblog/public/;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n```\n完成上述步骤后开始验证\n\n```\n# 将容器保存为镜像\ndocker commit centos7 mycentos:7.1\n# 启动新的容器\ndocker run -di --name=centos7.1 -p 8088:80 mycentos:7.1 \n# 进入容器启动NGINX（从镜像启动容器并没有把NGINX启动）\ndocker extc -it centos7.1 /bin/bash\n# 浏览器中访问 http://${ip}:8088 验证\n```\n\n#### 编写dockerfile\n\n根据上述的步骤一步步编写Dockerfile；然后进行 build -> 报错 -> 进入容器查看错误（我太菜了不能看日志直接修改Dockerfile） -> 修改Dockerfile -> build -> ... 直到成功 最终Dockerfile如下\n\n```\nFROM centos:7\nMAINTAINER yywang sbsbjs@qq.com\n\n# 安装依赖\nRUN yum update -y && yum install -y wget git-core vim* gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel \\\n\n# 安装nodejs\n\n# 新建目录 \nWORKDIR /usr/local\n# 下载tar\nRUN wget https://nodejs.org/dist/v12.15.0/node-v12.15.0-linux-x64.tar.xz \\\n# 解压\n&& tar -xvf node-v12.15.0-linux-x64.tar.xz \\\n&& mv node-v12.15.0-linux-x64 node_12.15.0 \\\n&& mkdir /usr/local/nodejs \\\n&& mv node_12.15.0 /usr/local/nodejs/ \\\n&& rm -rf node-v12.15.0-linux-x64.tar.xz \\\n# 部署bin文件\n&& ln -s /usr/local/nodejs/node_12.15.0/bin/node /usr/local/bin/node \\\n&& ln -s /usr/local/nodejs/node_12.15.0/bin/npm /usr/local/bin/npm \\\n\n# 安装hexo\n&& npm install -g hexo-cli \\\n\n# 配置环境变量\n&& ln -s /usr/local/nodejs/node_12.15.0/bin/hexo /usr/local/bin/hexo \\\n# 创建网站文件夹\n&& mkdir /usr/local/myblog \\\n&& cd /usr/local/myblog \\\n# 初始化hexo\n&& hexo init \\\n&& hexo generat \\\n\n# 安装NGINX依赖\n&& cd /usr/local \\\n# 下载NGINX\n&& wget https://nginx.org/download/nginx-1.16.1.tar.gz \\\n# 解压\n&& tar -zxf nginx-1.16.1.tar.gz \\\n&& cd /usr/local/nginx-1.16.1 \\\n# 编译安装\n&& ./configure \\\n&& make && make install \\\n&& rm -rf /usr/local/nginx-1.16.1 \\\n&& rm -rf /usr/local/nginx-1.16.1.tar.gz \n```\n\n最后~ 验证\n\n```\n# 构建镜像\ndocker build -t mycentos:7.2\n# 启动容器\ndocker run -di --name=centos7.2 -p 8088:80 mycentos:7.2\n# 进入容器修改nginx.conf并启动NGINXß\ndocker extc -it centos7.1 /bin/bash\n# 浏览器中访问 http://${ip}:8088 验证\n```\n\n","source":"_posts/将Hexo博客迁移到docker（一）.md","raw":"title: 将Hexo博客迁移到docker（一）\nauthor: YyWang\ndate: 2020-02-13 10:21:32\ntags: 容器\ncategories: 容器\n---\n本篇是迁移工作的第一阶段\n\n#### docker入门\n\n移步到[这里](http://yywang.top/2020/02/12/Docker%E5%85%A5%E9%97%A8/)\n\n#### 在docker容器中重新搭建Hexo博客系统并记录步骤\n\n拉取centos镜像 -> 启动容器 -> 进入容器bash -> 搭建博客\n\n```\n# 拉取镜像\ndocker pull centos:7\n# 启动容器\ndocker run -di --name=centos7 centos:7\n# 进入命令行\ndocker exec -it centos7 /bin/bash\n\n# 搭建hexo博客\n\n# 安装node.js\n\n# 安装wget\nyum install -y wget\n# 新建目录 \nmkdir /usr/local/nodejs\n# 下载tar\nwget https://nodejs.org/dist/v12.15.0/node-v12.15.0-linux-x64.tar.xz\n# 解压\nxz -d node-v12.15.0-linux-x64.tar.xz\n# 部署bin文件\nln -s /usr/local/nodejs/node_12.15.0/bin/node /usr/local/bin/node\nln -s /usr/local/nodejs/node_12.15.0/bin/npm /usr/local/bin/npm\n\n# 安装hexo\nnpm install -g hexo-cli\n# 安装git\nyum install git-core\n# 配置环境变量\nln -s /usr/local/nodejs/node_12.15.0/bin/hexo /usr/local/bin/hexo\n# 创建网站文件夹\nmkdir myblog\ncd myblog\n# 初始化hexo\nhexo init\nhexo generate\n\n# 安装NGINX\n\n# 安装依赖\nyum install -y gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel\n# 下载NGINX\nwget https://nginx.org/download/nginx-1.16.1.tar.gz\n# 解压\ntar -zxf nginx-1.16.1.tar.gz\ncd nginx-1.16.1\n# 编译安装\n./configure \nmake && make install\n# 配置NGINX\nvim /usr/local/nginx/conf/nginx.conf\n# 启动NGINX\ncd /usr/local/nginx/sbin\n./nginx\n```\n\n其中nginx.conf为\n\n```\n\t# http中server模块做修改即可\n\tserver {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  _;\n        root         /usr/local/myblog/public/;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n```\n完成上述步骤后开始验证\n\n```\n# 将容器保存为镜像\ndocker commit centos7 mycentos:7.1\n# 启动新的容器\ndocker run -di --name=centos7.1 -p 8088:80 mycentos:7.1 \n# 进入容器启动NGINX（从镜像启动容器并没有把NGINX启动）\ndocker extc -it centos7.1 /bin/bash\n# 浏览器中访问 http://${ip}:8088 验证\n```\n\n#### 编写dockerfile\n\n根据上述的步骤一步步编写Dockerfile；然后进行 build -> 报错 -> 进入容器查看错误（我太菜了不能看日志直接修改Dockerfile） -> 修改Dockerfile -> build -> ... 直到成功 最终Dockerfile如下\n\n```\nFROM centos:7\nMAINTAINER yywang sbsbjs@qq.com\n\n# 安装依赖\nRUN yum update -y && yum install -y wget git-core vim* gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel \\\n\n# 安装nodejs\n\n# 新建目录 \nWORKDIR /usr/local\n# 下载tar\nRUN wget https://nodejs.org/dist/v12.15.0/node-v12.15.0-linux-x64.tar.xz \\\n# 解压\n&& tar -xvf node-v12.15.0-linux-x64.tar.xz \\\n&& mv node-v12.15.0-linux-x64 node_12.15.0 \\\n&& mkdir /usr/local/nodejs \\\n&& mv node_12.15.0 /usr/local/nodejs/ \\\n&& rm -rf node-v12.15.0-linux-x64.tar.xz \\\n# 部署bin文件\n&& ln -s /usr/local/nodejs/node_12.15.0/bin/node /usr/local/bin/node \\\n&& ln -s /usr/local/nodejs/node_12.15.0/bin/npm /usr/local/bin/npm \\\n\n# 安装hexo\n&& npm install -g hexo-cli \\\n\n# 配置环境变量\n&& ln -s /usr/local/nodejs/node_12.15.0/bin/hexo /usr/local/bin/hexo \\\n# 创建网站文件夹\n&& mkdir /usr/local/myblog \\\n&& cd /usr/local/myblog \\\n# 初始化hexo\n&& hexo init \\\n&& hexo generat \\\n\n# 安装NGINX依赖\n&& cd /usr/local \\\n# 下载NGINX\n&& wget https://nginx.org/download/nginx-1.16.1.tar.gz \\\n# 解压\n&& tar -zxf nginx-1.16.1.tar.gz \\\n&& cd /usr/local/nginx-1.16.1 \\\n# 编译安装\n&& ./configure \\\n&& make && make install \\\n&& rm -rf /usr/local/nginx-1.16.1 \\\n&& rm -rf /usr/local/nginx-1.16.1.tar.gz \n```\n\n最后~ 验证\n\n```\n# 构建镜像\ndocker build -t mycentos:7.2\n# 启动容器\ndocker run -di --name=centos7.2 -p 8088:80 mycentos:7.2\n# 进入容器修改nginx.conf并启动NGINXß\ndocker extc -it centos7.1 /bin/bash\n# 浏览器中访问 http://${ip}:8088 验证\n```\n\n","slug":"将Hexo博客迁移到docker（一）","published":1,"updated":"2021-07-13T12:27:08.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj7t003f81fyezleeojp","content":"<p>本篇是迁移工作的第一阶段</p>\n<h4 id=\"docker入门\"><a href=\"#docker入门\" class=\"headerlink\" title=\"docker入门\"></a>docker入门</h4><p>移步到<a href=\"http://yywang.top/2020/02/12/Docker%E5%85%A5%E9%97%A8/\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h4 id=\"在docker容器中重新搭建Hexo博客系统并记录步骤\"><a href=\"#在docker容器中重新搭建Hexo博客系统并记录步骤\" class=\"headerlink\" title=\"在docker容器中重新搭建Hexo博客系统并记录步骤\"></a>在docker容器中重新搭建Hexo博客系统并记录步骤</h4><p>拉取centos镜像 -&gt; 启动容器 -&gt; 进入容器bash -&gt; 搭建博客</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 拉取镜像</span><br><span class=\"line\">docker pull centos:7</span><br><span class=\"line\"># 启动容器</span><br><span class=\"line\">docker run -di --name=centos7 centos:7</span><br><span class=\"line\"># 进入命令行</span><br><span class=\"line\">docker exec -it centos7 /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"># 搭建hexo博客</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装node.js</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装wget</span><br><span class=\"line\">yum install -y wget</span><br><span class=\"line\"># 新建目录 </span><br><span class=\"line\">mkdir /usr/local/nodejs</span><br><span class=\"line\"># 下载tar</span><br><span class=\"line\">wget https://nodejs.org/dist/v12.15.0/node-v12.15.0-linux-x64.tar.xz</span><br><span class=\"line\"># 解压</span><br><span class=\"line\">xz -d node-v12.15.0-linux-x64.tar.xz</span><br><span class=\"line\"># 部署bin文件</span><br><span class=\"line\">ln -s /usr/local/nodejs/node_12.15.0/bin/node /usr/local/bin/node</span><br><span class=\"line\">ln -s /usr/local/nodejs/node_12.15.0/bin/npm /usr/local/bin/npm</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装hexo</span><br><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\"># 安装git</span><br><span class=\"line\">yum install git-core</span><br><span class=\"line\"># 配置环境变量</span><br><span class=\"line\">ln -s /usr/local/nodejs/node_12.15.0/bin/hexo /usr/local/bin/hexo</span><br><span class=\"line\"># 创建网站文件夹</span><br><span class=\"line\">mkdir myblog</span><br><span class=\"line\">cd myblog</span><br><span class=\"line\"># 初始化hexo</span><br><span class=\"line\">hexo init</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装NGINX</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装依赖</span><br><span class=\"line\">yum install -y gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br><span class=\"line\"># 下载NGINX</span><br><span class=\"line\">wget https://nginx.org/download/nginx-1.16.1.tar.gz</span><br><span class=\"line\"># 解压</span><br><span class=\"line\">tar -zxf nginx-1.16.1.tar.gz</span><br><span class=\"line\">cd nginx-1.16.1</span><br><span class=\"line\"># 编译安装</span><br><span class=\"line\">./configure </span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"># 配置NGINX</span><br><span class=\"line\">vim /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\"># 启动NGINX</span><br><span class=\"line\">cd /usr/local/nginx/sbin</span><br><span class=\"line\">./nginx</span><br></pre></td></tr></table></figure>\n<p>其中nginx.conf为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># http中server模块做修改即可</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">       listen       80 default_server;</span><br><span class=\"line\">       listen       [::]:80 default_server;</span><br><span class=\"line\">       server_name  _;</span><br><span class=\"line\">       root         /usr/local/myblog/public/;</span><br><span class=\"line\"></span><br><span class=\"line\">       # Load configuration files for the default server block.</span><br><span class=\"line\">       include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">       location / &#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       error_page 404 /404.html;</span><br><span class=\"line\">           location = /40x.html &#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">           location = /50x.html &#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>完成上述步骤后开始验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将容器保存为镜像</span><br><span class=\"line\">docker commit centos7 mycentos:7.1</span><br><span class=\"line\"># 启动新的容器</span><br><span class=\"line\">docker run -di --name=centos7.1 -p 8088:80 mycentos:7.1 </span><br><span class=\"line\"># 进入容器启动NGINX（从镜像启动容器并没有把NGINX启动）</span><br><span class=\"line\">docker extc -it centos7.1 /bin/bash</span><br><span class=\"line\"># 浏览器中访问 http://$&#123;ip&#125;:8088 验证</span><br></pre></td></tr></table></figure>\n<h4 id=\"编写dockerfile\"><a href=\"#编写dockerfile\" class=\"headerlink\" title=\"编写dockerfile\"></a>编写dockerfile</h4><p>根据上述的步骤一步步编写Dockerfile；然后进行 build -&gt; 报错 -&gt; 进入容器查看错误（我太菜了不能看日志直接修改Dockerfile） -&gt; 修改Dockerfile -&gt; build -&gt; … 直到成功 最终Dockerfile如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos:7</span><br><span class=\"line\">MAINTAINER yywang sbsbjs@qq.com</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装依赖</span><br><span class=\"line\">RUN yum update -y &amp;&amp; yum install -y wget git-core vim* gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel \\</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装nodejs</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建目录 </span><br><span class=\"line\">WORKDIR /usr/local</span><br><span class=\"line\"># 下载tar</span><br><span class=\"line\">RUN wget https://nodejs.org/dist/v12.15.0/node-v12.15.0-linux-x64.tar.xz \\</span><br><span class=\"line\"># 解压</span><br><span class=\"line\">&amp;&amp; tar -xvf node-v12.15.0-linux-x64.tar.xz \\</span><br><span class=\"line\">&amp;&amp; mv node-v12.15.0-linux-x64 node_12.15.0 \\</span><br><span class=\"line\">&amp;&amp; mkdir /usr/local/nodejs \\</span><br><span class=\"line\">&amp;&amp; mv node_12.15.0 /usr/local/nodejs/ \\</span><br><span class=\"line\">&amp;&amp; rm -rf node-v12.15.0-linux-x64.tar.xz \\</span><br><span class=\"line\"># 部署bin文件</span><br><span class=\"line\">&amp;&amp; ln -s /usr/local/nodejs/node_12.15.0/bin/node /usr/local/bin/node \\</span><br><span class=\"line\">&amp;&amp; ln -s /usr/local/nodejs/node_12.15.0/bin/npm /usr/local/bin/npm \\</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装hexo</span><br><span class=\"line\">&amp;&amp; npm install -g hexo-cli \\</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置环境变量</span><br><span class=\"line\">&amp;&amp; ln -s /usr/local/nodejs/node_12.15.0/bin/hexo /usr/local/bin/hexo \\</span><br><span class=\"line\"># 创建网站文件夹</span><br><span class=\"line\">&amp;&amp; mkdir /usr/local/myblog \\</span><br><span class=\"line\">&amp;&amp; cd /usr/local/myblog \\</span><br><span class=\"line\"># 初始化hexo</span><br><span class=\"line\">&amp;&amp; hexo init \\</span><br><span class=\"line\">&amp;&amp; hexo generat \\</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装NGINX依赖</span><br><span class=\"line\">&amp;&amp; cd /usr/local \\</span><br><span class=\"line\"># 下载NGINX</span><br><span class=\"line\">&amp;&amp; wget https://nginx.org/download/nginx-1.16.1.tar.gz \\</span><br><span class=\"line\"># 解压</span><br><span class=\"line\">&amp;&amp; tar -zxf nginx-1.16.1.tar.gz \\</span><br><span class=\"line\">&amp;&amp; cd /usr/local/nginx-1.16.1 \\</span><br><span class=\"line\"># 编译安装</span><br><span class=\"line\">&amp;&amp; ./configure \\</span><br><span class=\"line\">&amp;&amp; make &amp;&amp; make install \\</span><br><span class=\"line\">&amp;&amp; rm -rf /usr/local/nginx-1.16.1 \\</span><br><span class=\"line\">&amp;&amp; rm -rf /usr/local/nginx-1.16.1.tar.gz</span><br></pre></td></tr></table></figure>\n<p>最后~ 验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 构建镜像</span><br><span class=\"line\">docker build -t mycentos:7.2</span><br><span class=\"line\"># 启动容器</span><br><span class=\"line\">docker run -di --name=centos7.2 -p 8088:80 mycentos:7.2</span><br><span class=\"line\"># 进入容器修改nginx.conf并启动NGINXß</span><br><span class=\"line\">docker extc -it centos7.1 /bin/bash</span><br><span class=\"line\"># 浏览器中访问 http://$&#123;ip&#125;:8088 验证</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>本篇是迁移工作的第一阶段</p>\n<h4 id=\"docker入门\"><a href=\"#docker入门\" class=\"headerlink\" title=\"docker入门\"></a>docker入门</h4><p>移步到<a href=\"http://yywang.top/2020/02/12/Docker%E5%85%A5%E9%97%A8/\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h4 id=\"在docker容器中重新搭建Hexo博客系统并记录步骤\"><a href=\"#在docker容器中重新搭建Hexo博客系统并记录步骤\" class=\"headerlink\" title=\"在docker容器中重新搭建Hexo博客系统并记录步骤\"></a>在docker容器中重新搭建Hexo博客系统并记录步骤</h4><p>拉取centos镜像 -&gt; 启动容器 -&gt; 进入容器bash -&gt; 搭建博客</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 拉取镜像</span><br><span class=\"line\">docker pull centos:7</span><br><span class=\"line\"># 启动容器</span><br><span class=\"line\">docker run -di --name=centos7 centos:7</span><br><span class=\"line\"># 进入命令行</span><br><span class=\"line\">docker exec -it centos7 /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"># 搭建hexo博客</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装node.js</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装wget</span><br><span class=\"line\">yum install -y wget</span><br><span class=\"line\"># 新建目录 </span><br><span class=\"line\">mkdir /usr/local/nodejs</span><br><span class=\"line\"># 下载tar</span><br><span class=\"line\">wget https://nodejs.org/dist/v12.15.0/node-v12.15.0-linux-x64.tar.xz</span><br><span class=\"line\"># 解压</span><br><span class=\"line\">xz -d node-v12.15.0-linux-x64.tar.xz</span><br><span class=\"line\"># 部署bin文件</span><br><span class=\"line\">ln -s /usr/local/nodejs/node_12.15.0/bin/node /usr/local/bin/node</span><br><span class=\"line\">ln -s /usr/local/nodejs/node_12.15.0/bin/npm /usr/local/bin/npm</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装hexo</span><br><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\"># 安装git</span><br><span class=\"line\">yum install git-core</span><br><span class=\"line\"># 配置环境变量</span><br><span class=\"line\">ln -s /usr/local/nodejs/node_12.15.0/bin/hexo /usr/local/bin/hexo</span><br><span class=\"line\"># 创建网站文件夹</span><br><span class=\"line\">mkdir myblog</span><br><span class=\"line\">cd myblog</span><br><span class=\"line\"># 初始化hexo</span><br><span class=\"line\">hexo init</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装NGINX</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装依赖</span><br><span class=\"line\">yum install -y gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br><span class=\"line\"># 下载NGINX</span><br><span class=\"line\">wget https://nginx.org/download/nginx-1.16.1.tar.gz</span><br><span class=\"line\"># 解压</span><br><span class=\"line\">tar -zxf nginx-1.16.1.tar.gz</span><br><span class=\"line\">cd nginx-1.16.1</span><br><span class=\"line\"># 编译安装</span><br><span class=\"line\">./configure </span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"># 配置NGINX</span><br><span class=\"line\">vim /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\"># 启动NGINX</span><br><span class=\"line\">cd /usr/local/nginx/sbin</span><br><span class=\"line\">./nginx</span><br></pre></td></tr></table></figure>\n<p>其中nginx.conf为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># http中server模块做修改即可</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">       listen       80 default_server;</span><br><span class=\"line\">       listen       [::]:80 default_server;</span><br><span class=\"line\">       server_name  _;</span><br><span class=\"line\">       root         /usr/local/myblog/public/;</span><br><span class=\"line\"></span><br><span class=\"line\">       # Load configuration files for the default server block.</span><br><span class=\"line\">       include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">       location / &#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       error_page 404 /404.html;</span><br><span class=\"line\">           location = /40x.html &#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">           location = /50x.html &#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>完成上述步骤后开始验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将容器保存为镜像</span><br><span class=\"line\">docker commit centos7 mycentos:7.1</span><br><span class=\"line\"># 启动新的容器</span><br><span class=\"line\">docker run -di --name=centos7.1 -p 8088:80 mycentos:7.1 </span><br><span class=\"line\"># 进入容器启动NGINX（从镜像启动容器并没有把NGINX启动）</span><br><span class=\"line\">docker extc -it centos7.1 /bin/bash</span><br><span class=\"line\"># 浏览器中访问 http://$&#123;ip&#125;:8088 验证</span><br></pre></td></tr></table></figure>\n<h4 id=\"编写dockerfile\"><a href=\"#编写dockerfile\" class=\"headerlink\" title=\"编写dockerfile\"></a>编写dockerfile</h4><p>根据上述的步骤一步步编写Dockerfile；然后进行 build -&gt; 报错 -&gt; 进入容器查看错误（我太菜了不能看日志直接修改Dockerfile） -&gt; 修改Dockerfile -&gt; build -&gt; … 直到成功 最终Dockerfile如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos:7</span><br><span class=\"line\">MAINTAINER yywang sbsbjs@qq.com</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装依赖</span><br><span class=\"line\">RUN yum update -y &amp;&amp; yum install -y wget git-core vim* gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel \\</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装nodejs</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建目录 </span><br><span class=\"line\">WORKDIR /usr/local</span><br><span class=\"line\"># 下载tar</span><br><span class=\"line\">RUN wget https://nodejs.org/dist/v12.15.0/node-v12.15.0-linux-x64.tar.xz \\</span><br><span class=\"line\"># 解压</span><br><span class=\"line\">&amp;&amp; tar -xvf node-v12.15.0-linux-x64.tar.xz \\</span><br><span class=\"line\">&amp;&amp; mv node-v12.15.0-linux-x64 node_12.15.0 \\</span><br><span class=\"line\">&amp;&amp; mkdir /usr/local/nodejs \\</span><br><span class=\"line\">&amp;&amp; mv node_12.15.0 /usr/local/nodejs/ \\</span><br><span class=\"line\">&amp;&amp; rm -rf node-v12.15.0-linux-x64.tar.xz \\</span><br><span class=\"line\"># 部署bin文件</span><br><span class=\"line\">&amp;&amp; ln -s /usr/local/nodejs/node_12.15.0/bin/node /usr/local/bin/node \\</span><br><span class=\"line\">&amp;&amp; ln -s /usr/local/nodejs/node_12.15.0/bin/npm /usr/local/bin/npm \\</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装hexo</span><br><span class=\"line\">&amp;&amp; npm install -g hexo-cli \\</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置环境变量</span><br><span class=\"line\">&amp;&amp; ln -s /usr/local/nodejs/node_12.15.0/bin/hexo /usr/local/bin/hexo \\</span><br><span class=\"line\"># 创建网站文件夹</span><br><span class=\"line\">&amp;&amp; mkdir /usr/local/myblog \\</span><br><span class=\"line\">&amp;&amp; cd /usr/local/myblog \\</span><br><span class=\"line\"># 初始化hexo</span><br><span class=\"line\">&amp;&amp; hexo init \\</span><br><span class=\"line\">&amp;&amp; hexo generat \\</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装NGINX依赖</span><br><span class=\"line\">&amp;&amp; cd /usr/local \\</span><br><span class=\"line\"># 下载NGINX</span><br><span class=\"line\">&amp;&amp; wget https://nginx.org/download/nginx-1.16.1.tar.gz \\</span><br><span class=\"line\"># 解压</span><br><span class=\"line\">&amp;&amp; tar -zxf nginx-1.16.1.tar.gz \\</span><br><span class=\"line\">&amp;&amp; cd /usr/local/nginx-1.16.1 \\</span><br><span class=\"line\"># 编译安装</span><br><span class=\"line\">&amp;&amp; ./configure \\</span><br><span class=\"line\">&amp;&amp; make &amp;&amp; make install \\</span><br><span class=\"line\">&amp;&amp; rm -rf /usr/local/nginx-1.16.1 \\</span><br><span class=\"line\">&amp;&amp; rm -rf /usr/local/nginx-1.16.1.tar.gz</span><br></pre></td></tr></table></figure>\n<p>最后~ 验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 构建镜像</span><br><span class=\"line\">docker build -t mycentos:7.2</span><br><span class=\"line\"># 启动容器</span><br><span class=\"line\">docker run -di --name=centos7.2 -p 8088:80 mycentos:7.2</span><br><span class=\"line\"># 进入容器修改nginx.conf并启动NGINXß</span><br><span class=\"line\">docker extc -it centos7.1 /bin/bash</span><br><span class=\"line\"># 浏览器中访问 http://$&#123;ip&#125;:8088 验证</span><br></pre></td></tr></table></figure>\n"},{"title":"将Hexo博客迁移到docker（二）","author":"YyWang","date":"2020-02-14T13:33:34.000Z","_content":"本篇将进行迁移的第二阶段，主要步骤为\n\n* 在git上备份博客中的文件\n* 进入docker容器中还原\n* 验证\n* 修改Dockerfile\n* 验证\n\n#### 在git上备份博客中的文件\n\nhexo d 是将静态文件发布到git上，内容是 public 文件夹中的文件，hexo g 命令会重新生成静态文件；那么其他文件就是我要转移的文件了，将其他文件备份到git仓库中的新分支中 （.gitignore 里给出存放不需要备份的文件，至于为什么后面慢慢了解，本篇重点不在这） [参考这里](https://www.jianshu.com/p/153490a029a5)\n\n```\n# 在github上新建分支 hexo-backup\ngit clone ${git path}\n# 备份文件\ncp rf ${username}.github.io/* myblog\n# 除了 .git 以外的文件都删除\ncd ${username}.github.io\nmv .git ../\nrm -rf * \nmv ../.git .\n# 复制刚刚备份的文件过来\ncp rf ../myblog/* ./\n# 准备gitignore 文件内容下面附\nvim .gitignore\n# 删除主题文件中的.git\nrm -rf /themes/next/.git                        \n\n# 更新分支\ngit add .\ngit commit -m '初次提交'\ngit push origin hexo\n# 删除所有文件 后提交分支\nrm -rf *\ngit add .\ngit commit -m '删除文件'\ngit push origin hexo\n```\n\n```\n# .gitignore 文件内容\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/\n```\n到这里已经将自己博客下面的文件都提交到git的hexo分支中了\n\n#### 进入docker容器中还原\n\n```\ncd /usr/local\ngit clone ${git path}\ncd /usr/local/${username}.github.io\ngit checkout hexo\n# 由于我已经有myblog的文件夹了这离要删除一下\nrm -rf /usr/local/myblog\nmv /usr/local/${username}.github.io /usr/local/myblog\n# 安装package.json中的依赖\n# 修改下载源，安装更快\nnpm config set registry https://registry.npm.taobao.org\nnpm install hexo --save\nnpm install hexo-admin --save\nnpm install hexo-deployer-git --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-baidu-sitemap --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-feed --save\nnpm install hexo-generator-index --save\nnpm install hexo-generator-search --save\nnpm install hexo-generator-searchdb --save\nnpm install hexo-generator-sitemap --save\nnpm install hexo-generator-tag --save\nnpm install hexo-helper-live2d --save\nnpm install hexo-renderer-ejs --save\nnpm install hexo-renderer-marked --save\nnpm install hexo-renderer-stylus --save\nnpm install hexo-server --save\nnpm install hexo-tag-cloud --save\nnpm install hexo-wordcoun --save\n\n# 重新生成静态文件\ncd /usr/local/myblog\nhexo clean\nhexo g\nhexo d\n```\n#### 验证\n\n在浏览器中访问 http://${ip}:8088 效果相同即为成功\n\n#### 修改Dockerfile\n\n因为要相册相关要用到python3，镜像中自带的时python2，所以要安装一下python3，在第二阶段的Dockerfile基础上增加下面操作\n\n```\n# 安装依赖\nRUN yum update -y && yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make \\\n# 备份原始的python\n&& mv /usr/bin/python /usr/bin/python.bak \\ \n# 下载解压\n&& cd /usr/local \\\n&& wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz \\\n&& tar -xvJf  Python-3.6.2.tar.xz \\\n# 编译安装\n&& cd Python-3.6.2 \\\n&& ./configure prefix=/usr/local/python3 \\\n&& make && make install \\\n&& rm -rf /usr/local/Python-3.6.2.tar.xz \\\n# 添加软链\n&& ln -s /usr/local/python3/bin/python3 /usr/bin/python3 \\\n&& ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 \\\n# 安装依赖\n&& pip3 install Pillow \\\n\n# 迁移博客 由于clone速度极其慢，改用本地先clone好复制过去\n&& rm -rf /usr/local/myblog\nCOPY myblog /usr/local/myblog/\n\n# 安装package.json中的依赖\n# 修改下载源，安装更快\nRUN npm config set registry https://registry.npm.taobao.org \\\n&& npm install hexo --save \\\n&& npm install hexo-admin --save \\\n&& npm install hexo-deployer-git --save \\\n&& npm install hexo-generator-archive --save \\\n&& npm install hexo-generator-baidu-sitemap --save \\\n&& npm install hexo-generator-category --save \\\n&& npm install hexo-generator-feed --save \\\n&& npm install hexo-generator-index --save \\\n&& npm install hexo-generator-search --save \\\n&& npm install hexo-generator-searchdb --save \\\n&& npm install hexo-generator-sitemap --save \\\n&& npm install hexo-generator-tag --save \\\n&& npm install hexo-helper-live2d --save \\\n&& npm install hexo-renderer-ejs --save \\\n&& npm install hexo-renderer-marked --save \\\n&& npm install hexo-renderer-stylus --save \\\n&& npm install hexo-server --save \\\n&& npm install hexo-tag-cloud --save \\\n&& npm install hexo-wordcount --save \\\n\n# 重新生成静态文件\n&& cd /usr/local/myblog \\\n&& hexo clean \\\n&& hexo g\n\n```\n\n#### 验证\n\n启动docker容器 绑定端口映射 8088:80 浏览器访问 http://${ip}:8088 查看效果无误，完成\n\n\n**最后总结一下需要迁移的步骤**\n\n- git push origin hexo推送博客所有文件\n- 编辑Dockerfile\n- 在Dokerfile目录下git clone 博客文件 再切换hexo分支 重命名为myblog\n- 在Dockerfile目录下编辑nginx.conf文件\n- 使用Dockerfile生成镜像\n- 启动容器 绑定端口 \n- 进入容器启动nginx\n- 使用Dockerfile生成镜像\n- 启动容器 绑定端口\n\n是不是迁移起来非常简单，可以将生成的镜像备份成tar包，在任意的服务器上安装docker后，还原镜像启动容器即可\n\n\n*相册相关*\n\n我的相册是参考[这里](https://malizhi.cn/HexoAlbum/)弄得；我将它移至博客文件的hexo分支，一起备份起来，要上传新的文件运行目录中的tool.py脚本，将照片裁剪后上传至github仓库，这时照片就有了URL，在博客中就可以看到了\n\n*发布博客相关*\n\n* docker容器中的 /usr/local/source/_posts/ 目录下的文件名为乱码，下面方法可以解决，但是我这里没有成功，通过tab补全是正常的ls和ll看就有问题\n\n```\nyum -y install convmv\n\nconvmv -f GBK -t UTF-8 --notest -r /usr/local/source/_posts/\n```\n\n所有我觉得在宿主机建立文件映射，然后进入docker中hexo g -d更新\n\n* hexo d 会失败，这里要重新生成sshkey\n\n```\nssh-keygen -t rsa -C \"${email}\"\n# 拷贝sshkey到github中\n# 配置\ngit config --global user.name \"${username}\"\ngit config --global user.email \"${email}\"  \n```\n\n","source":"_posts/将Hexo博客迁移到docker（二）.md","raw":"title: 将Hexo博客迁移到docker（二）\nauthor: YyWang\ntags: 容器\ncategories: 容器\ndate: 2020-02-14 21:33:34\n---\n本篇将进行迁移的第二阶段，主要步骤为\n\n* 在git上备份博客中的文件\n* 进入docker容器中还原\n* 验证\n* 修改Dockerfile\n* 验证\n\n#### 在git上备份博客中的文件\n\nhexo d 是将静态文件发布到git上，内容是 public 文件夹中的文件，hexo g 命令会重新生成静态文件；那么其他文件就是我要转移的文件了，将其他文件备份到git仓库中的新分支中 （.gitignore 里给出存放不需要备份的文件，至于为什么后面慢慢了解，本篇重点不在这） [参考这里](https://www.jianshu.com/p/153490a029a5)\n\n```\n# 在github上新建分支 hexo-backup\ngit clone ${git path}\n# 备份文件\ncp rf ${username}.github.io/* myblog\n# 除了 .git 以外的文件都删除\ncd ${username}.github.io\nmv .git ../\nrm -rf * \nmv ../.git .\n# 复制刚刚备份的文件过来\ncp rf ../myblog/* ./\n# 准备gitignore 文件内容下面附\nvim .gitignore\n# 删除主题文件中的.git\nrm -rf /themes/next/.git                        \n\n# 更新分支\ngit add .\ngit commit -m '初次提交'\ngit push origin hexo\n# 删除所有文件 后提交分支\nrm -rf *\ngit add .\ngit commit -m '删除文件'\ngit push origin hexo\n```\n\n```\n# .gitignore 文件内容\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/\n```\n到这里已经将自己博客下面的文件都提交到git的hexo分支中了\n\n#### 进入docker容器中还原\n\n```\ncd /usr/local\ngit clone ${git path}\ncd /usr/local/${username}.github.io\ngit checkout hexo\n# 由于我已经有myblog的文件夹了这离要删除一下\nrm -rf /usr/local/myblog\nmv /usr/local/${username}.github.io /usr/local/myblog\n# 安装package.json中的依赖\n# 修改下载源，安装更快\nnpm config set registry https://registry.npm.taobao.org\nnpm install hexo --save\nnpm install hexo-admin --save\nnpm install hexo-deployer-git --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-baidu-sitemap --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-feed --save\nnpm install hexo-generator-index --save\nnpm install hexo-generator-search --save\nnpm install hexo-generator-searchdb --save\nnpm install hexo-generator-sitemap --save\nnpm install hexo-generator-tag --save\nnpm install hexo-helper-live2d --save\nnpm install hexo-renderer-ejs --save\nnpm install hexo-renderer-marked --save\nnpm install hexo-renderer-stylus --save\nnpm install hexo-server --save\nnpm install hexo-tag-cloud --save\nnpm install hexo-wordcoun --save\n\n# 重新生成静态文件\ncd /usr/local/myblog\nhexo clean\nhexo g\nhexo d\n```\n#### 验证\n\n在浏览器中访问 http://${ip}:8088 效果相同即为成功\n\n#### 修改Dockerfile\n\n因为要相册相关要用到python3，镜像中自带的时python2，所以要安装一下python3，在第二阶段的Dockerfile基础上增加下面操作\n\n```\n# 安装依赖\nRUN yum update -y && yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make \\\n# 备份原始的python\n&& mv /usr/bin/python /usr/bin/python.bak \\ \n# 下载解压\n&& cd /usr/local \\\n&& wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz \\\n&& tar -xvJf  Python-3.6.2.tar.xz \\\n# 编译安装\n&& cd Python-3.6.2 \\\n&& ./configure prefix=/usr/local/python3 \\\n&& make && make install \\\n&& rm -rf /usr/local/Python-3.6.2.tar.xz \\\n# 添加软链\n&& ln -s /usr/local/python3/bin/python3 /usr/bin/python3 \\\n&& ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 \\\n# 安装依赖\n&& pip3 install Pillow \\\n\n# 迁移博客 由于clone速度极其慢，改用本地先clone好复制过去\n&& rm -rf /usr/local/myblog\nCOPY myblog /usr/local/myblog/\n\n# 安装package.json中的依赖\n# 修改下载源，安装更快\nRUN npm config set registry https://registry.npm.taobao.org \\\n&& npm install hexo --save \\\n&& npm install hexo-admin --save \\\n&& npm install hexo-deployer-git --save \\\n&& npm install hexo-generator-archive --save \\\n&& npm install hexo-generator-baidu-sitemap --save \\\n&& npm install hexo-generator-category --save \\\n&& npm install hexo-generator-feed --save \\\n&& npm install hexo-generator-index --save \\\n&& npm install hexo-generator-search --save \\\n&& npm install hexo-generator-searchdb --save \\\n&& npm install hexo-generator-sitemap --save \\\n&& npm install hexo-generator-tag --save \\\n&& npm install hexo-helper-live2d --save \\\n&& npm install hexo-renderer-ejs --save \\\n&& npm install hexo-renderer-marked --save \\\n&& npm install hexo-renderer-stylus --save \\\n&& npm install hexo-server --save \\\n&& npm install hexo-tag-cloud --save \\\n&& npm install hexo-wordcount --save \\\n\n# 重新生成静态文件\n&& cd /usr/local/myblog \\\n&& hexo clean \\\n&& hexo g\n\n```\n\n#### 验证\n\n启动docker容器 绑定端口映射 8088:80 浏览器访问 http://${ip}:8088 查看效果无误，完成\n\n\n**最后总结一下需要迁移的步骤**\n\n- git push origin hexo推送博客所有文件\n- 编辑Dockerfile\n- 在Dokerfile目录下git clone 博客文件 再切换hexo分支 重命名为myblog\n- 在Dockerfile目录下编辑nginx.conf文件\n- 使用Dockerfile生成镜像\n- 启动容器 绑定端口 \n- 进入容器启动nginx\n- 使用Dockerfile生成镜像\n- 启动容器 绑定端口\n\n是不是迁移起来非常简单，可以将生成的镜像备份成tar包，在任意的服务器上安装docker后，还原镜像启动容器即可\n\n\n*相册相关*\n\n我的相册是参考[这里](https://malizhi.cn/HexoAlbum/)弄得；我将它移至博客文件的hexo分支，一起备份起来，要上传新的文件运行目录中的tool.py脚本，将照片裁剪后上传至github仓库，这时照片就有了URL，在博客中就可以看到了\n\n*发布博客相关*\n\n* docker容器中的 /usr/local/source/_posts/ 目录下的文件名为乱码，下面方法可以解决，但是我这里没有成功，通过tab补全是正常的ls和ll看就有问题\n\n```\nyum -y install convmv\n\nconvmv -f GBK -t UTF-8 --notest -r /usr/local/source/_posts/\n```\n\n所有我觉得在宿主机建立文件映射，然后进入docker中hexo g -d更新\n\n* hexo d 会失败，这里要重新生成sshkey\n\n```\nssh-keygen -t rsa -C \"${email}\"\n# 拷贝sshkey到github中\n# 配置\ngit config --global user.name \"${username}\"\ngit config --global user.email \"${email}\"  \n```\n\n","slug":"将Hexo博客迁移到docker（二）","published":1,"updated":"2021-07-13T12:27:08.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj7u003i81fyu6qbfv2g","content":"<p>本篇将进行迁移的第二阶段，主要步骤为</p>\n<ul>\n<li>在git上备份博客中的文件</li>\n<li>进入docker容器中还原</li>\n<li>验证</li>\n<li>修改Dockerfile</li>\n<li>验证</li>\n</ul>\n<h4 id=\"在git上备份博客中的文件\"><a href=\"#在git上备份博客中的文件\" class=\"headerlink\" title=\"在git上备份博客中的文件\"></a>在git上备份博客中的文件</h4><p>hexo d 是将静态文件发布到git上，内容是 public 文件夹中的文件，hexo g 命令会重新生成静态文件；那么其他文件就是我要转移的文件了，将其他文件备份到git仓库中的新分支中 （.gitignore 里给出存放不需要备份的文件，至于为什么后面慢慢了解，本篇重点不在这） <a href=\"https://www.jianshu.com/p/153490a029a5\" target=\"_blank\" rel=\"noopener\">参考这里</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在github上新建分支 hexo-backup</span><br><span class=\"line\">git clone $&#123;git path&#125;</span><br><span class=\"line\"># 备份文件</span><br><span class=\"line\">cp rf $&#123;username&#125;.github.io/* myblog</span><br><span class=\"line\"># 除了 .git 以外的文件都删除</span><br><span class=\"line\">cd $&#123;username&#125;.github.io</span><br><span class=\"line\">mv .git ../</span><br><span class=\"line\">rm -rf * </span><br><span class=\"line\">mv ../.git .</span><br><span class=\"line\"># 复制刚刚备份的文件过来</span><br><span class=\"line\">cp rf ../myblog/* ./</span><br><span class=\"line\"># 准备gitignore 文件内容下面附</span><br><span class=\"line\">vim .gitignore</span><br><span class=\"line\"># 删除主题文件中的.git</span><br><span class=\"line\">rm -rf /themes/next/.git                        </span><br><span class=\"line\"></span><br><span class=\"line\"># 更新分支</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &apos;初次提交&apos;</span><br><span class=\"line\">git push origin hexo</span><br><span class=\"line\"># 删除所有文件 后提交分支</span><br><span class=\"line\">rm -rf *</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &apos;删除文件&apos;</span><br><span class=\"line\">git push origin hexo</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># .gitignore 文件内容</span><br><span class=\"line\">.DS_Store</span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\">db.json</span><br><span class=\"line\">*.log</span><br><span class=\"line\">node_modules/</span><br><span class=\"line\">public/</span><br><span class=\"line\">.deploy*/</span><br></pre></td></tr></table></figure>\n<p>到这里已经将自己博客下面的文件都提交到git的hexo分支中了</p>\n<h4 id=\"进入docker容器中还原\"><a href=\"#进入docker容器中还原\" class=\"headerlink\" title=\"进入docker容器中还原\"></a>进入docker容器中还原</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local</span><br><span class=\"line\">git clone $&#123;git path&#125;</span><br><span class=\"line\">cd /usr/local/$&#123;username&#125;.github.io</span><br><span class=\"line\">git checkout hexo</span><br><span class=\"line\"># 由于我已经有myblog的文件夹了这离要删除一下</span><br><span class=\"line\">rm -rf /usr/local/myblog</span><br><span class=\"line\">mv /usr/local/$&#123;username&#125;.github.io /usr/local/myblog</span><br><span class=\"line\"># 安装package.json中的依赖</span><br><span class=\"line\"># 修改下载源，安装更快</span><br><span class=\"line\">npm config set registry https://registry.npm.taobao.org</span><br><span class=\"line\">npm install hexo --save</span><br><span class=\"line\">npm install hexo-admin --save</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">npm install hexo-generator-archive --save</span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save</span><br><span class=\"line\">npm install hexo-generator-category --save</span><br><span class=\"line\">npm install hexo-generator-feed --save</span><br><span class=\"line\">npm install hexo-generator-index --save</span><br><span class=\"line\">npm install hexo-generator-search --save</span><br><span class=\"line\">npm install hexo-generator-searchdb --save</span><br><span class=\"line\">npm install hexo-generator-sitemap --save</span><br><span class=\"line\">npm install hexo-generator-tag --save</span><br><span class=\"line\">npm install hexo-helper-live2d --save</span><br><span class=\"line\">npm install hexo-renderer-ejs --save</span><br><span class=\"line\">npm install hexo-renderer-marked --save</span><br><span class=\"line\">npm install hexo-renderer-stylus --save</span><br><span class=\"line\">npm install hexo-server --save</span><br><span class=\"line\">npm install hexo-tag-cloud --save</span><br><span class=\"line\">npm install hexo-wordcoun --save</span><br><span class=\"line\"></span><br><span class=\"line\"># 重新生成静态文件</span><br><span class=\"line\">cd /usr/local/myblog</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h4><p>在浏览器中访问 http://${ip}:8088 效果相同即为成功</p>\n<h4 id=\"修改Dockerfile\"><a href=\"#修改Dockerfile\" class=\"headerlink\" title=\"修改Dockerfile\"></a>修改Dockerfile</h4><p>因为要相册相关要用到python3，镜像中自带的时python2，所以要安装一下python3，在第二阶段的Dockerfile基础上增加下面操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装依赖</span><br><span class=\"line\">RUN yum update -y &amp;&amp; yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make \\</span><br><span class=\"line\"># 备份原始的python</span><br><span class=\"line\">&amp;&amp; mv /usr/bin/python /usr/bin/python.bak \\ </span><br><span class=\"line\"># 下载解压</span><br><span class=\"line\">&amp;&amp; cd /usr/local \\</span><br><span class=\"line\">&amp;&amp; wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz \\</span><br><span class=\"line\">&amp;&amp; tar -xvJf  Python-3.6.2.tar.xz \\</span><br><span class=\"line\"># 编译安装</span><br><span class=\"line\">&amp;&amp; cd Python-3.6.2 \\</span><br><span class=\"line\">&amp;&amp; ./configure prefix=/usr/local/python3 \\</span><br><span class=\"line\">&amp;&amp; make &amp;&amp; make install \\</span><br><span class=\"line\">&amp;&amp; rm -rf /usr/local/Python-3.6.2.tar.xz \\</span><br><span class=\"line\"># 添加软链</span><br><span class=\"line\">&amp;&amp; ln -s /usr/local/python3/bin/python3 /usr/bin/python3 \\</span><br><span class=\"line\">&amp;&amp; ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 \\</span><br><span class=\"line\"># 安装依赖</span><br><span class=\"line\">&amp;&amp; pip3 install Pillow \\</span><br><span class=\"line\"></span><br><span class=\"line\"># 迁移博客 由于clone速度极其慢，改用本地先clone好复制过去</span><br><span class=\"line\">&amp;&amp; rm -rf /usr/local/myblog</span><br><span class=\"line\">COPY myblog /usr/local/myblog/</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装package.json中的依赖</span><br><span class=\"line\"># 修改下载源，安装更快</span><br><span class=\"line\">RUN npm config set registry https://registry.npm.taobao.org \\</span><br><span class=\"line\">&amp;&amp; npm install hexo --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-admin --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-deployer-git --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-archive --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-baidu-sitemap --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-category --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-feed --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-index --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-search --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-searchdb --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-sitemap --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-tag --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-helper-live2d --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-renderer-ejs --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-renderer-marked --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-renderer-stylus --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-server --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-tag-cloud --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-wordcount --save \\</span><br><span class=\"line\"></span><br><span class=\"line\"># 重新生成静态文件</span><br><span class=\"line\">&amp;&amp; cd /usr/local/myblog \\</span><br><span class=\"line\">&amp;&amp; hexo clean \\</span><br><span class=\"line\">&amp;&amp; hexo g</span><br></pre></td></tr></table></figure>\n<h4 id=\"验证-1\"><a href=\"#验证-1\" class=\"headerlink\" title=\"验证\"></a>验证</h4><p>启动docker容器 绑定端口映射 8088:80 浏览器访问 http://${ip}:8088 查看效果无误，完成</p>\n<p><strong>最后总结一下需要迁移的步骤</strong></p>\n<ul>\n<li>git push origin hexo推送博客所有文件</li>\n<li>编辑Dockerfile</li>\n<li>在Dokerfile目录下git clone 博客文件 再切换hexo分支 重命名为myblog</li>\n<li>在Dockerfile目录下编辑nginx.conf文件</li>\n<li>使用Dockerfile生成镜像</li>\n<li>启动容器 绑定端口 </li>\n<li>进入容器启动nginx</li>\n<li>使用Dockerfile生成镜像</li>\n<li>启动容器 绑定端口</li>\n</ul>\n<p>是不是迁移起来非常简单，可以将生成的镜像备份成tar包，在任意的服务器上安装docker后，还原镜像启动容器即可</p>\n<p><em>相册相关</em></p>\n<p>我的相册是参考<a href=\"https://malizhi.cn/HexoAlbum/\" target=\"_blank\" rel=\"noopener\">这里</a>弄得；我将它移至博客文件的hexo分支，一起备份起来，要上传新的文件运行目录中的tool.py脚本，将照片裁剪后上传至github仓库，这时照片就有了URL，在博客中就可以看到了</p>\n<p><em>发布博客相关</em></p>\n<ul>\n<li>docker容器中的 /usr/local/source/_posts/ 目录下的文件名为乱码，下面方法可以解决，但是我这里没有成功，通过tab补全是正常的ls和ll看就有问题</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install convmv</span><br><span class=\"line\"></span><br><span class=\"line\">convmv -f GBK -t UTF-8 --notest -r /usr/local/source/_posts/</span><br></pre></td></tr></table></figure>\n<p>所有我觉得在宿主机建立文件映射，然后进入docker中hexo g -d更新</p>\n<ul>\n<li>hexo d 会失败，这里要重新生成sshkey</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;$&#123;email&#125;&quot;</span><br><span class=\"line\"># 拷贝sshkey到github中</span><br><span class=\"line\"># 配置</span><br><span class=\"line\">git config --global user.name &quot;$&#123;username&#125;&quot;</span><br><span class=\"line\">git config --global user.email &quot;$&#123;email&#125;&quot;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>本篇将进行迁移的第二阶段，主要步骤为</p>\n<ul>\n<li>在git上备份博客中的文件</li>\n<li>进入docker容器中还原</li>\n<li>验证</li>\n<li>修改Dockerfile</li>\n<li>验证</li>\n</ul>\n<h4 id=\"在git上备份博客中的文件\"><a href=\"#在git上备份博客中的文件\" class=\"headerlink\" title=\"在git上备份博客中的文件\"></a>在git上备份博客中的文件</h4><p>hexo d 是将静态文件发布到git上，内容是 public 文件夹中的文件，hexo g 命令会重新生成静态文件；那么其他文件就是我要转移的文件了，将其他文件备份到git仓库中的新分支中 （.gitignore 里给出存放不需要备份的文件，至于为什么后面慢慢了解，本篇重点不在这） <a href=\"https://www.jianshu.com/p/153490a029a5\" target=\"_blank\" rel=\"noopener\">参考这里</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在github上新建分支 hexo-backup</span><br><span class=\"line\">git clone $&#123;git path&#125;</span><br><span class=\"line\"># 备份文件</span><br><span class=\"line\">cp rf $&#123;username&#125;.github.io/* myblog</span><br><span class=\"line\"># 除了 .git 以外的文件都删除</span><br><span class=\"line\">cd $&#123;username&#125;.github.io</span><br><span class=\"line\">mv .git ../</span><br><span class=\"line\">rm -rf * </span><br><span class=\"line\">mv ../.git .</span><br><span class=\"line\"># 复制刚刚备份的文件过来</span><br><span class=\"line\">cp rf ../myblog/* ./</span><br><span class=\"line\"># 准备gitignore 文件内容下面附</span><br><span class=\"line\">vim .gitignore</span><br><span class=\"line\"># 删除主题文件中的.git</span><br><span class=\"line\">rm -rf /themes/next/.git                        </span><br><span class=\"line\"></span><br><span class=\"line\"># 更新分支</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &apos;初次提交&apos;</span><br><span class=\"line\">git push origin hexo</span><br><span class=\"line\"># 删除所有文件 后提交分支</span><br><span class=\"line\">rm -rf *</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &apos;删除文件&apos;</span><br><span class=\"line\">git push origin hexo</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># .gitignore 文件内容</span><br><span class=\"line\">.DS_Store</span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\">db.json</span><br><span class=\"line\">*.log</span><br><span class=\"line\">node_modules/</span><br><span class=\"line\">public/</span><br><span class=\"line\">.deploy*/</span><br></pre></td></tr></table></figure>\n<p>到这里已经将自己博客下面的文件都提交到git的hexo分支中了</p>\n<h4 id=\"进入docker容器中还原\"><a href=\"#进入docker容器中还原\" class=\"headerlink\" title=\"进入docker容器中还原\"></a>进入docker容器中还原</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local</span><br><span class=\"line\">git clone $&#123;git path&#125;</span><br><span class=\"line\">cd /usr/local/$&#123;username&#125;.github.io</span><br><span class=\"line\">git checkout hexo</span><br><span class=\"line\"># 由于我已经有myblog的文件夹了这离要删除一下</span><br><span class=\"line\">rm -rf /usr/local/myblog</span><br><span class=\"line\">mv /usr/local/$&#123;username&#125;.github.io /usr/local/myblog</span><br><span class=\"line\"># 安装package.json中的依赖</span><br><span class=\"line\"># 修改下载源，安装更快</span><br><span class=\"line\">npm config set registry https://registry.npm.taobao.org</span><br><span class=\"line\">npm install hexo --save</span><br><span class=\"line\">npm install hexo-admin --save</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">npm install hexo-generator-archive --save</span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save</span><br><span class=\"line\">npm install hexo-generator-category --save</span><br><span class=\"line\">npm install hexo-generator-feed --save</span><br><span class=\"line\">npm install hexo-generator-index --save</span><br><span class=\"line\">npm install hexo-generator-search --save</span><br><span class=\"line\">npm install hexo-generator-searchdb --save</span><br><span class=\"line\">npm install hexo-generator-sitemap --save</span><br><span class=\"line\">npm install hexo-generator-tag --save</span><br><span class=\"line\">npm install hexo-helper-live2d --save</span><br><span class=\"line\">npm install hexo-renderer-ejs --save</span><br><span class=\"line\">npm install hexo-renderer-marked --save</span><br><span class=\"line\">npm install hexo-renderer-stylus --save</span><br><span class=\"line\">npm install hexo-server --save</span><br><span class=\"line\">npm install hexo-tag-cloud --save</span><br><span class=\"line\">npm install hexo-wordcoun --save</span><br><span class=\"line\"></span><br><span class=\"line\"># 重新生成静态文件</span><br><span class=\"line\">cd /usr/local/myblog</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h4><p>在浏览器中访问 http://${ip}:8088 效果相同即为成功</p>\n<h4 id=\"修改Dockerfile\"><a href=\"#修改Dockerfile\" class=\"headerlink\" title=\"修改Dockerfile\"></a>修改Dockerfile</h4><p>因为要相册相关要用到python3，镜像中自带的时python2，所以要安装一下python3，在第二阶段的Dockerfile基础上增加下面操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装依赖</span><br><span class=\"line\">RUN yum update -y &amp;&amp; yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make \\</span><br><span class=\"line\"># 备份原始的python</span><br><span class=\"line\">&amp;&amp; mv /usr/bin/python /usr/bin/python.bak \\ </span><br><span class=\"line\"># 下载解压</span><br><span class=\"line\">&amp;&amp; cd /usr/local \\</span><br><span class=\"line\">&amp;&amp; wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz \\</span><br><span class=\"line\">&amp;&amp; tar -xvJf  Python-3.6.2.tar.xz \\</span><br><span class=\"line\"># 编译安装</span><br><span class=\"line\">&amp;&amp; cd Python-3.6.2 \\</span><br><span class=\"line\">&amp;&amp; ./configure prefix=/usr/local/python3 \\</span><br><span class=\"line\">&amp;&amp; make &amp;&amp; make install \\</span><br><span class=\"line\">&amp;&amp; rm -rf /usr/local/Python-3.6.2.tar.xz \\</span><br><span class=\"line\"># 添加软链</span><br><span class=\"line\">&amp;&amp; ln -s /usr/local/python3/bin/python3 /usr/bin/python3 \\</span><br><span class=\"line\">&amp;&amp; ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 \\</span><br><span class=\"line\"># 安装依赖</span><br><span class=\"line\">&amp;&amp; pip3 install Pillow \\</span><br><span class=\"line\"></span><br><span class=\"line\"># 迁移博客 由于clone速度极其慢，改用本地先clone好复制过去</span><br><span class=\"line\">&amp;&amp; rm -rf /usr/local/myblog</span><br><span class=\"line\">COPY myblog /usr/local/myblog/</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装package.json中的依赖</span><br><span class=\"line\"># 修改下载源，安装更快</span><br><span class=\"line\">RUN npm config set registry https://registry.npm.taobao.org \\</span><br><span class=\"line\">&amp;&amp; npm install hexo --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-admin --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-deployer-git --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-archive --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-baidu-sitemap --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-category --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-feed --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-index --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-search --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-searchdb --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-sitemap --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-tag --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-helper-live2d --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-renderer-ejs --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-renderer-marked --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-renderer-stylus --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-server --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-tag-cloud --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-wordcount --save \\</span><br><span class=\"line\"></span><br><span class=\"line\"># 重新生成静态文件</span><br><span class=\"line\">&amp;&amp; cd /usr/local/myblog \\</span><br><span class=\"line\">&amp;&amp; hexo clean \\</span><br><span class=\"line\">&amp;&amp; hexo g</span><br></pre></td></tr></table></figure>\n<h4 id=\"验证-1\"><a href=\"#验证-1\" class=\"headerlink\" title=\"验证\"></a>验证</h4><p>启动docker容器 绑定端口映射 8088:80 浏览器访问 http://${ip}:8088 查看效果无误，完成</p>\n<p><strong>最后总结一下需要迁移的步骤</strong></p>\n<ul>\n<li>git push origin hexo推送博客所有文件</li>\n<li>编辑Dockerfile</li>\n<li>在Dokerfile目录下git clone 博客文件 再切换hexo分支 重命名为myblog</li>\n<li>在Dockerfile目录下编辑nginx.conf文件</li>\n<li>使用Dockerfile生成镜像</li>\n<li>启动容器 绑定端口 </li>\n<li>进入容器启动nginx</li>\n<li>使用Dockerfile生成镜像</li>\n<li>启动容器 绑定端口</li>\n</ul>\n<p>是不是迁移起来非常简单，可以将生成的镜像备份成tar包，在任意的服务器上安装docker后，还原镜像启动容器即可</p>\n<p><em>相册相关</em></p>\n<p>我的相册是参考<a href=\"https://malizhi.cn/HexoAlbum/\" target=\"_blank\" rel=\"noopener\">这里</a>弄得；我将它移至博客文件的hexo分支，一起备份起来，要上传新的文件运行目录中的tool.py脚本，将照片裁剪后上传至github仓库，这时照片就有了URL，在博客中就可以看到了</p>\n<p><em>发布博客相关</em></p>\n<ul>\n<li>docker容器中的 /usr/local/source/_posts/ 目录下的文件名为乱码，下面方法可以解决，但是我这里没有成功，通过tab补全是正常的ls和ll看就有问题</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install convmv</span><br><span class=\"line\"></span><br><span class=\"line\">convmv -f GBK -t UTF-8 --notest -r /usr/local/source/_posts/</span><br></pre></td></tr></table></figure>\n<p>所有我觉得在宿主机建立文件映射，然后进入docker中hexo g -d更新</p>\n<ul>\n<li>hexo d 会失败，这里要重新生成sshkey</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;$&#123;email&#125;&quot;</span><br><span class=\"line\"># 拷贝sshkey到github中</span><br><span class=\"line\"># 配置</span><br><span class=\"line\">git config --global user.name &quot;$&#123;username&#125;&quot;</span><br><span class=\"line\">git config --global user.email &quot;$&#123;email&#125;&quot;</span><br></pre></td></tr></table></figure>\n"},{"title":"将Hexo博客迁移到docker中（究极解决方案）","author":"YyWang","date":"2020-04-19T00:47:36.000Z","_content":"\n前两个阶段是两个月前的试验版本，只是在本机上用docker模拟并没有真正做迁移，然而在真正迁移的过程中，虽然可以完整迁移，但是体验不友好，我改进了迁移方案，首先总结一下缺点吧\n\n* 启动容器后需要进入容器中，启动nginx做转发\n* 如果不使用也需要进入容器中启动hexo，且不能退出否则hexo也会跟着退出\n\t* 后台启动需要依赖pm2这个工具\n\t* 后台启动hexo和nginx会不会有资源争抢的问题，这个应该没有纯属给自己加戏\n* 修改文章后即使做了文件挂载也需要进入容器中重新生成静态文件\n\n图解一下，原来的方案和现在的方案\n\n![upload successful](/images/pasted-33.png)\n\n可以看到原来是塞到一个docker容器中的，中间的图是现在的架构，将nginx和hexo拆分，分别放入docker中，nginx的docker转发请求到hexo的docker，hexo的docker需要运行hexo s；未来如果我有新的网站可以重新部署一个容器通过nginx做转发，比如，不同域名转发到不同的容器，或者我再搞一个WordPress版本的docker，还可以做金丝雀发布，ab测试。哈哈\n\n下面开始动手\n\n#### 先从nginx开始\n\n```\n# 直接拉取nginx镜像\ndocker pull nginx\n# 修改配置文件运行 把配置文件做目录挂载 绑定80端口\ndocker run -di nginx --name nginx -v /usr/local/temp/nginx.conf:/etc/conf/nginx/nginx.conf -p 80:80 nginx\n# 之后配置有变化修改 nginx.conf 后 docker restart 即可\n\n```\n\n#### hexo\n\n与之前的版本不同的是，我要在容器启动的时候就把hexo运行起来，每次修改文件后docker restart就能重新生成静态文件并启动hexo\n\n坑点\n\n* 刚开始我再dockerfile中添加命令 CMD['hexo','s']\n* 编译好的镜像run了之后并没有启动，查看状态run了之后就退出了\n* 我的第一反应是不是要后台启动才可以，随即有尝试使用 pm2 后台启动，修改命令CMD['pm2','start','run.js']\n* 还是不行呢，冷静下来发现不管是hexo还是pm2都是nodejs中的命令，而dockerfile中运行的应该是sh脚本\n* 于是转换思路 dockerfile中启动shell脚本，脚本中运行hexo 修改命令 CMD [\"/usr/local/myblog/buildbak/run.sh\"]\n* 还有一个小坑，运行起来会报没有权限的错误 再添加命令赋权 重新build就完成了 chmod 777 /usr/local/myblog/buildbak/run.sh\n\nrun.sh 很简单，每次clean后重新生成静态文件再启动hexo，这样每次新增或者修改博客的时候restart就好了\n\n```\n#!/bin/sh\ncd /usr/local/myblog;\nhexo clean;\nhexo g;\nhexo s\n```\n\n完整dockerfile\n\n```\nFROM centos:7\nMAINTAINER yywang sbsbjs@qq.com\n\n# 安装依赖\nRUN yum update -y && yum install -y wget git-core vim* gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel \\\n\n# 安装nodejs\n\n# 新建目录 \nWORKDIR /usr/local\n# 下载tar\nRUN wget https://nodejs.org/dist/v12.15.0/node-v12.15.0-linux-x64.tar.xz \\\n# 解压\n&& tar -xvf node-v12.15.0-linux-x64.tar.xz \\\n&& mv node-v12.15.0-linux-x64 node_12.15.0 \\\n&& mkdir /usr/local/nodejs \\\n&& mv node_12.15.0 /usr/local/nodejs/ \\\n&& rm -rf node-v12.15.0-linux-x64.tar.xz \\\n# 部署bin文件\n&& ln -s /usr/local/nodejs/node_12.15.0/bin/node /usr/local/bin/node \\\n&& ln -s /usr/local/nodejs/node_12.15.0/bin/npm /usr/local/bin/npm \\\n# 修改npm源\n&& npm config set registry https://registry.npm.taobao.org \\\n# 安装hexo\n&& npm install -g hexo-cli \\\n\n# 配置环境变量\n&& ln -s /usr/local/nodejs/node_12.15.0/bin/hexo /usr/local/bin/hexo \\\n# 创建网站文件夹\n&& mkdir /usr/local/myblog \\\n&& cd /usr/local/myblog \\\n# 初始化hexo\n&& hexo init \\\n&& hexo generat \\\n\n# 安装依赖\nRUN yum update -y && yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make \\\n# 备份原始的python\n&& mv /usr/bin/python /usr/bin/python.bak \\\n# 下载解压\n&& cd /usr/local \\\n&& wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz \\\n&& tar -xvJf  Python-3.6.2.tar.xz \\\n# 编译安装\n&& cd Python-3.6.2 \\\n&& ./configure prefix=/usr/local/python3 \\\n&& make && make install \\\n&& rm -rf /usr/local/Python-3.6.2.tar.xz \\\n# 添加软链\n&& ln -s /usr/local/python3/bin/python3 /usr/bin/python3 \\\n&& ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 \\\n# 安装依赖\n&& pip3 install Pillow \\\n# 迁移博客 由于clone速度极其慢，而且还需要添加git秘钥，改用本地先clone好复制过去\n&& rm -rf /usr/local/myblog\nCOPY myblog /usr/local/myblog/\n\n# 安装package.json中的依赖\n# 修改下载源，安装更快\nRUN npm install hexo --save \\\n&& npm install hexo-admin --save \\\n&& npm install hexo-deployer-git --save \\\n&& npm install hexo-generator-archive --save \\\n&& npm install hexo-generator-baidu-sitemap --save \\\n&& npm install hexo-generator-category --save \\\n&& npm install hexo-generator-feed --save \\\n&& npm install hexo-generator-index --save \\\n&& npm install hexo-generator-search --save \\\n&& npm install hexo-generator-searchdb --save \\\n&& npm install hexo-generator-sitemap --save \\\n&& npm install hexo-generator-tag --save \\\n&& npm install hexo-helper-live2d --save \\\n&& npm install hexo-renderer-ejs --save \\\n&& npm install hexo-renderer-marked --save \\\n&& npm install hexo-renderer-stylus --save \\\n&& npm install hexo-server --save \\\n&& npm install hexo-tag-cloud --save \\\n&& npm install hexo-wordcount --save \\\n\n# 重新生成静态文件\n&& cd /usr/local/myblog \\\n&& hexo clean \\\n&& hexo g \\\n&& chmod 777 /usr/local/myblog/buildbak/run.sh\n# 环境搭建完成，启动脚本\nCMD [\"/usr/local/myblog/buildbak/run.sh\"]\n```\n\nbuild好镜像后，运行容器\n\n```\ndocker run -di -v /usr/local/temp/myblog/source/_posts/:/usr/local/myblog/source/_posts/ -v /usr/local/temp/myblog/source/images/:/usr/local/myblog/source/images/ --name myblog -p 22000:4000 myblog:final\n```\n\n启动起来后查询dockerip\n\n```\ndocker inspect --format='{{.NetworkSettings.IPAddress}}' myblog\n```\n\n修改nginx.conf 将请求转发到docker的4000端口，重启nginx容器，完美结束，最后把阿里云上的域名的规则修改为新的服务器的ip，成了\n\n每次修改或者新增文件，重启hexo容器就可以了，最后别忘了提交文件到github中做备份 \n\n后续\n\n* 将Dockerfile nginx.conf run.sh 复制到myblog中，提交到github中做备份\n* 将最终的镜像上传至阿里云\n* 如果容器没有变化迁移环境的话直接，从阿里云拉取镜像运行即可\n* 如果内容变化就要先提交最新状态到github中，在新的环境中clone仓库，重新build镜像运行即可\n","source":"_posts/将Hexo博客迁移到docker（究极解决方案）.md","raw":"title: 将Hexo博客迁移到docker中（究极解决方案）\nauthor: YyWang\ndate: 2020-04-19 08:47:36\ntags: 容器\ncategories: 容器\n---\n\n前两个阶段是两个月前的试验版本，只是在本机上用docker模拟并没有真正做迁移，然而在真正迁移的过程中，虽然可以完整迁移，但是体验不友好，我改进了迁移方案，首先总结一下缺点吧\n\n* 启动容器后需要进入容器中，启动nginx做转发\n* 如果不使用也需要进入容器中启动hexo，且不能退出否则hexo也会跟着退出\n\t* 后台启动需要依赖pm2这个工具\n\t* 后台启动hexo和nginx会不会有资源争抢的问题，这个应该没有纯属给自己加戏\n* 修改文章后即使做了文件挂载也需要进入容器中重新生成静态文件\n\n图解一下，原来的方案和现在的方案\n\n![upload successful](/images/pasted-33.png)\n\n可以看到原来是塞到一个docker容器中的，中间的图是现在的架构，将nginx和hexo拆分，分别放入docker中，nginx的docker转发请求到hexo的docker，hexo的docker需要运行hexo s；未来如果我有新的网站可以重新部署一个容器通过nginx做转发，比如，不同域名转发到不同的容器，或者我再搞一个WordPress版本的docker，还可以做金丝雀发布，ab测试。哈哈\n\n下面开始动手\n\n#### 先从nginx开始\n\n```\n# 直接拉取nginx镜像\ndocker pull nginx\n# 修改配置文件运行 把配置文件做目录挂载 绑定80端口\ndocker run -di nginx --name nginx -v /usr/local/temp/nginx.conf:/etc/conf/nginx/nginx.conf -p 80:80 nginx\n# 之后配置有变化修改 nginx.conf 后 docker restart 即可\n\n```\n\n#### hexo\n\n与之前的版本不同的是，我要在容器启动的时候就把hexo运行起来，每次修改文件后docker restart就能重新生成静态文件并启动hexo\n\n坑点\n\n* 刚开始我再dockerfile中添加命令 CMD['hexo','s']\n* 编译好的镜像run了之后并没有启动，查看状态run了之后就退出了\n* 我的第一反应是不是要后台启动才可以，随即有尝试使用 pm2 后台启动，修改命令CMD['pm2','start','run.js']\n* 还是不行呢，冷静下来发现不管是hexo还是pm2都是nodejs中的命令，而dockerfile中运行的应该是sh脚本\n* 于是转换思路 dockerfile中启动shell脚本，脚本中运行hexo 修改命令 CMD [\"/usr/local/myblog/buildbak/run.sh\"]\n* 还有一个小坑，运行起来会报没有权限的错误 再添加命令赋权 重新build就完成了 chmod 777 /usr/local/myblog/buildbak/run.sh\n\nrun.sh 很简单，每次clean后重新生成静态文件再启动hexo，这样每次新增或者修改博客的时候restart就好了\n\n```\n#!/bin/sh\ncd /usr/local/myblog;\nhexo clean;\nhexo g;\nhexo s\n```\n\n完整dockerfile\n\n```\nFROM centos:7\nMAINTAINER yywang sbsbjs@qq.com\n\n# 安装依赖\nRUN yum update -y && yum install -y wget git-core vim* gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel \\\n\n# 安装nodejs\n\n# 新建目录 \nWORKDIR /usr/local\n# 下载tar\nRUN wget https://nodejs.org/dist/v12.15.0/node-v12.15.0-linux-x64.tar.xz \\\n# 解压\n&& tar -xvf node-v12.15.0-linux-x64.tar.xz \\\n&& mv node-v12.15.0-linux-x64 node_12.15.0 \\\n&& mkdir /usr/local/nodejs \\\n&& mv node_12.15.0 /usr/local/nodejs/ \\\n&& rm -rf node-v12.15.0-linux-x64.tar.xz \\\n# 部署bin文件\n&& ln -s /usr/local/nodejs/node_12.15.0/bin/node /usr/local/bin/node \\\n&& ln -s /usr/local/nodejs/node_12.15.0/bin/npm /usr/local/bin/npm \\\n# 修改npm源\n&& npm config set registry https://registry.npm.taobao.org \\\n# 安装hexo\n&& npm install -g hexo-cli \\\n\n# 配置环境变量\n&& ln -s /usr/local/nodejs/node_12.15.0/bin/hexo /usr/local/bin/hexo \\\n# 创建网站文件夹\n&& mkdir /usr/local/myblog \\\n&& cd /usr/local/myblog \\\n# 初始化hexo\n&& hexo init \\\n&& hexo generat \\\n\n# 安装依赖\nRUN yum update -y && yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make \\\n# 备份原始的python\n&& mv /usr/bin/python /usr/bin/python.bak \\\n# 下载解压\n&& cd /usr/local \\\n&& wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz \\\n&& tar -xvJf  Python-3.6.2.tar.xz \\\n# 编译安装\n&& cd Python-3.6.2 \\\n&& ./configure prefix=/usr/local/python3 \\\n&& make && make install \\\n&& rm -rf /usr/local/Python-3.6.2.tar.xz \\\n# 添加软链\n&& ln -s /usr/local/python3/bin/python3 /usr/bin/python3 \\\n&& ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 \\\n# 安装依赖\n&& pip3 install Pillow \\\n# 迁移博客 由于clone速度极其慢，而且还需要添加git秘钥，改用本地先clone好复制过去\n&& rm -rf /usr/local/myblog\nCOPY myblog /usr/local/myblog/\n\n# 安装package.json中的依赖\n# 修改下载源，安装更快\nRUN npm install hexo --save \\\n&& npm install hexo-admin --save \\\n&& npm install hexo-deployer-git --save \\\n&& npm install hexo-generator-archive --save \\\n&& npm install hexo-generator-baidu-sitemap --save \\\n&& npm install hexo-generator-category --save \\\n&& npm install hexo-generator-feed --save \\\n&& npm install hexo-generator-index --save \\\n&& npm install hexo-generator-search --save \\\n&& npm install hexo-generator-searchdb --save \\\n&& npm install hexo-generator-sitemap --save \\\n&& npm install hexo-generator-tag --save \\\n&& npm install hexo-helper-live2d --save \\\n&& npm install hexo-renderer-ejs --save \\\n&& npm install hexo-renderer-marked --save \\\n&& npm install hexo-renderer-stylus --save \\\n&& npm install hexo-server --save \\\n&& npm install hexo-tag-cloud --save \\\n&& npm install hexo-wordcount --save \\\n\n# 重新生成静态文件\n&& cd /usr/local/myblog \\\n&& hexo clean \\\n&& hexo g \\\n&& chmod 777 /usr/local/myblog/buildbak/run.sh\n# 环境搭建完成，启动脚本\nCMD [\"/usr/local/myblog/buildbak/run.sh\"]\n```\n\nbuild好镜像后，运行容器\n\n```\ndocker run -di -v /usr/local/temp/myblog/source/_posts/:/usr/local/myblog/source/_posts/ -v /usr/local/temp/myblog/source/images/:/usr/local/myblog/source/images/ --name myblog -p 22000:4000 myblog:final\n```\n\n启动起来后查询dockerip\n\n```\ndocker inspect --format='{{.NetworkSettings.IPAddress}}' myblog\n```\n\n修改nginx.conf 将请求转发到docker的4000端口，重启nginx容器，完美结束，最后把阿里云上的域名的规则修改为新的服务器的ip，成了\n\n每次修改或者新增文件，重启hexo容器就可以了，最后别忘了提交文件到github中做备份 \n\n后续\n\n* 将Dockerfile nginx.conf run.sh 复制到myblog中，提交到github中做备份\n* 将最终的镜像上传至阿里云\n* 如果容器没有变化迁移环境的话直接，从阿里云拉取镜像运行即可\n* 如果内容变化就要先提交最新状态到github中，在新的环境中clone仓库，重新build镜像运行即可\n","slug":"将Hexo博客迁移到docker（究极解决方案）","published":1,"updated":"2021-07-13T12:27:08.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj7v003m81fy9ltxblmi","content":"<p>前两个阶段是两个月前的试验版本，只是在本机上用docker模拟并没有真正做迁移，然而在真正迁移的过程中，虽然可以完整迁移，但是体验不友好，我改进了迁移方案，首先总结一下缺点吧</p>\n<ul>\n<li>启动容器后需要进入容器中，启动nginx做转发</li>\n<li>如果不使用也需要进入容器中启动hexo，且不能退出否则hexo也会跟着退出<ul>\n<li>后台启动需要依赖pm2这个工具</li>\n<li>后台启动hexo和nginx会不会有资源争抢的问题，这个应该没有纯属给自己加戏</li>\n</ul>\n</li>\n<li>修改文章后即使做了文件挂载也需要进入容器中重新生成静态文件</li>\n</ul>\n<p>图解一下，原来的方案和现在的方案</p>\n<p><img src=\"/images/pasted-33.png\" alt=\"upload successful\"></p>\n<p>可以看到原来是塞到一个docker容器中的，中间的图是现在的架构，将nginx和hexo拆分，分别放入docker中，nginx的docker转发请求到hexo的docker，hexo的docker需要运行hexo s；未来如果我有新的网站可以重新部署一个容器通过nginx做转发，比如，不同域名转发到不同的容器，或者我再搞一个WordPress版本的docker，还可以做金丝雀发布，ab测试。哈哈</p>\n<p>下面开始动手</p>\n<h4 id=\"先从nginx开始\"><a href=\"#先从nginx开始\" class=\"headerlink\" title=\"先从nginx开始\"></a>先从nginx开始</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 直接拉取nginx镜像</span><br><span class=\"line\">docker pull nginx</span><br><span class=\"line\"># 修改配置文件运行 把配置文件做目录挂载 绑定80端口</span><br><span class=\"line\">docker run -di nginx --name nginx -v /usr/local/temp/nginx.conf:/etc/conf/nginx/nginx.conf -p 80:80 nginx</span><br><span class=\"line\"># 之后配置有变化修改 nginx.conf 后 docker restart 即可</span><br></pre></td></tr></table></figure>\n<h4 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h4><p>与之前的版本不同的是，我要在容器启动的时候就把hexo运行起来，每次修改文件后docker restart就能重新生成静态文件并启动hexo</p>\n<p>坑点</p>\n<ul>\n<li>刚开始我再dockerfile中添加命令 CMD[‘hexo’,’s’]</li>\n<li>编译好的镜像run了之后并没有启动，查看状态run了之后就退出了</li>\n<li>我的第一反应是不是要后台启动才可以，随即有尝试使用 pm2 后台启动，修改命令CMD[‘pm2’,’start’,’run.js’]</li>\n<li>还是不行呢，冷静下来发现不管是hexo还是pm2都是nodejs中的命令，而dockerfile中运行的应该是sh脚本</li>\n<li>于是转换思路 dockerfile中启动shell脚本，脚本中运行hexo 修改命令 CMD [“/usr/local/myblog/buildbak/run.sh”]</li>\n<li>还有一个小坑，运行起来会报没有权限的错误 再添加命令赋权 重新build就完成了 chmod 777 /usr/local/myblog/buildbak/run.sh</li>\n</ul>\n<p>run.sh 很简单，每次clean后重新生成静态文件再启动hexo，这样每次新增或者修改博客的时候restart就好了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">cd /usr/local/myblog;</span><br><span class=\"line\">hexo clean;</span><br><span class=\"line\">hexo g;</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>完整dockerfile</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos:7</span><br><span class=\"line\">MAINTAINER yywang sbsbjs@qq.com</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装依赖</span><br><span class=\"line\">RUN yum update -y &amp;&amp; yum install -y wget git-core vim* gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel \\</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装nodejs</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建目录 </span><br><span class=\"line\">WORKDIR /usr/local</span><br><span class=\"line\"># 下载tar</span><br><span class=\"line\">RUN wget https://nodejs.org/dist/v12.15.0/node-v12.15.0-linux-x64.tar.xz \\</span><br><span class=\"line\"># 解压</span><br><span class=\"line\">&amp;&amp; tar -xvf node-v12.15.0-linux-x64.tar.xz \\</span><br><span class=\"line\">&amp;&amp; mv node-v12.15.0-linux-x64 node_12.15.0 \\</span><br><span class=\"line\">&amp;&amp; mkdir /usr/local/nodejs \\</span><br><span class=\"line\">&amp;&amp; mv node_12.15.0 /usr/local/nodejs/ \\</span><br><span class=\"line\">&amp;&amp; rm -rf node-v12.15.0-linux-x64.tar.xz \\</span><br><span class=\"line\"># 部署bin文件</span><br><span class=\"line\">&amp;&amp; ln -s /usr/local/nodejs/node_12.15.0/bin/node /usr/local/bin/node \\</span><br><span class=\"line\">&amp;&amp; ln -s /usr/local/nodejs/node_12.15.0/bin/npm /usr/local/bin/npm \\</span><br><span class=\"line\"># 修改npm源</span><br><span class=\"line\">&amp;&amp; npm config set registry https://registry.npm.taobao.org \\</span><br><span class=\"line\"># 安装hexo</span><br><span class=\"line\">&amp;&amp; npm install -g hexo-cli \\</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置环境变量</span><br><span class=\"line\">&amp;&amp; ln -s /usr/local/nodejs/node_12.15.0/bin/hexo /usr/local/bin/hexo \\</span><br><span class=\"line\"># 创建网站文件夹</span><br><span class=\"line\">&amp;&amp; mkdir /usr/local/myblog \\</span><br><span class=\"line\">&amp;&amp; cd /usr/local/myblog \\</span><br><span class=\"line\"># 初始化hexo</span><br><span class=\"line\">&amp;&amp; hexo init \\</span><br><span class=\"line\">&amp;&amp; hexo generat \\</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装依赖</span><br><span class=\"line\">RUN yum update -y &amp;&amp; yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make \\</span><br><span class=\"line\"># 备份原始的python</span><br><span class=\"line\">&amp;&amp; mv /usr/bin/python /usr/bin/python.bak \\</span><br><span class=\"line\"># 下载解压</span><br><span class=\"line\">&amp;&amp; cd /usr/local \\</span><br><span class=\"line\">&amp;&amp; wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz \\</span><br><span class=\"line\">&amp;&amp; tar -xvJf  Python-3.6.2.tar.xz \\</span><br><span class=\"line\"># 编译安装</span><br><span class=\"line\">&amp;&amp; cd Python-3.6.2 \\</span><br><span class=\"line\">&amp;&amp; ./configure prefix=/usr/local/python3 \\</span><br><span class=\"line\">&amp;&amp; make &amp;&amp; make install \\</span><br><span class=\"line\">&amp;&amp; rm -rf /usr/local/Python-3.6.2.tar.xz \\</span><br><span class=\"line\"># 添加软链</span><br><span class=\"line\">&amp;&amp; ln -s /usr/local/python3/bin/python3 /usr/bin/python3 \\</span><br><span class=\"line\">&amp;&amp; ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 \\</span><br><span class=\"line\"># 安装依赖</span><br><span class=\"line\">&amp;&amp; pip3 install Pillow \\</span><br><span class=\"line\"># 迁移博客 由于clone速度极其慢，而且还需要添加git秘钥，改用本地先clone好复制过去</span><br><span class=\"line\">&amp;&amp; rm -rf /usr/local/myblog</span><br><span class=\"line\">COPY myblog /usr/local/myblog/</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装package.json中的依赖</span><br><span class=\"line\"># 修改下载源，安装更快</span><br><span class=\"line\">RUN npm install hexo --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-admin --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-deployer-git --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-archive --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-baidu-sitemap --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-category --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-feed --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-index --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-search --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-searchdb --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-sitemap --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-tag --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-helper-live2d --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-renderer-ejs --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-renderer-marked --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-renderer-stylus --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-server --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-tag-cloud --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-wordcount --save \\</span><br><span class=\"line\"></span><br><span class=\"line\"># 重新生成静态文件</span><br><span class=\"line\">&amp;&amp; cd /usr/local/myblog \\</span><br><span class=\"line\">&amp;&amp; hexo clean \\</span><br><span class=\"line\">&amp;&amp; hexo g \\</span><br><span class=\"line\">&amp;&amp; chmod 777 /usr/local/myblog/buildbak/run.sh</span><br><span class=\"line\"># 环境搭建完成，启动脚本</span><br><span class=\"line\">CMD [&quot;/usr/local/myblog/buildbak/run.sh&quot;]</span><br></pre></td></tr></table></figure>\n<p>build好镜像后，运行容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -di -v /usr/local/temp/myblog/source/_posts/:/usr/local/myblog/source/_posts/ -v /usr/local/temp/myblog/source/images/:/usr/local/myblog/source/images/ --name myblog -p 22000:4000 myblog:final</span><br></pre></td></tr></table></figure>\n<p>启动起来后查询dockerip</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect --format=&apos;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&apos; myblog</span><br></pre></td></tr></table></figure>\n<p>修改nginx.conf 将请求转发到docker的4000端口，重启nginx容器，完美结束，最后把阿里云上的域名的规则修改为新的服务器的ip，成了</p>\n<p>每次修改或者新增文件，重启hexo容器就可以了，最后别忘了提交文件到github中做备份 </p>\n<p>后续</p>\n<ul>\n<li>将Dockerfile nginx.conf run.sh 复制到myblog中，提交到github中做备份</li>\n<li>将最终的镜像上传至阿里云</li>\n<li>如果容器没有变化迁移环境的话直接，从阿里云拉取镜像运行即可</li>\n<li>如果内容变化就要先提交最新状态到github中，在新的环境中clone仓库，重新build镜像运行即可</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>前两个阶段是两个月前的试验版本，只是在本机上用docker模拟并没有真正做迁移，然而在真正迁移的过程中，虽然可以完整迁移，但是体验不友好，我改进了迁移方案，首先总结一下缺点吧</p>\n<ul>\n<li>启动容器后需要进入容器中，启动nginx做转发</li>\n<li>如果不使用也需要进入容器中启动hexo，且不能退出否则hexo也会跟着退出<ul>\n<li>后台启动需要依赖pm2这个工具</li>\n<li>后台启动hexo和nginx会不会有资源争抢的问题，这个应该没有纯属给自己加戏</li>\n</ul>\n</li>\n<li>修改文章后即使做了文件挂载也需要进入容器中重新生成静态文件</li>\n</ul>\n<p>图解一下，原来的方案和现在的方案</p>\n<p><img src=\"/images/pasted-33.png\" alt=\"upload successful\"></p>\n<p>可以看到原来是塞到一个docker容器中的，中间的图是现在的架构，将nginx和hexo拆分，分别放入docker中，nginx的docker转发请求到hexo的docker，hexo的docker需要运行hexo s；未来如果我有新的网站可以重新部署一个容器通过nginx做转发，比如，不同域名转发到不同的容器，或者我再搞一个WordPress版本的docker，还可以做金丝雀发布，ab测试。哈哈</p>\n<p>下面开始动手</p>\n<h4 id=\"先从nginx开始\"><a href=\"#先从nginx开始\" class=\"headerlink\" title=\"先从nginx开始\"></a>先从nginx开始</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 直接拉取nginx镜像</span><br><span class=\"line\">docker pull nginx</span><br><span class=\"line\"># 修改配置文件运行 把配置文件做目录挂载 绑定80端口</span><br><span class=\"line\">docker run -di nginx --name nginx -v /usr/local/temp/nginx.conf:/etc/conf/nginx/nginx.conf -p 80:80 nginx</span><br><span class=\"line\"># 之后配置有变化修改 nginx.conf 后 docker restart 即可</span><br></pre></td></tr></table></figure>\n<h4 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h4><p>与之前的版本不同的是，我要在容器启动的时候就把hexo运行起来，每次修改文件后docker restart就能重新生成静态文件并启动hexo</p>\n<p>坑点</p>\n<ul>\n<li>刚开始我再dockerfile中添加命令 CMD[‘hexo’,’s’]</li>\n<li>编译好的镜像run了之后并没有启动，查看状态run了之后就退出了</li>\n<li>我的第一反应是不是要后台启动才可以，随即有尝试使用 pm2 后台启动，修改命令CMD[‘pm2’,’start’,’run.js’]</li>\n<li>还是不行呢，冷静下来发现不管是hexo还是pm2都是nodejs中的命令，而dockerfile中运行的应该是sh脚本</li>\n<li>于是转换思路 dockerfile中启动shell脚本，脚本中运行hexo 修改命令 CMD [“/usr/local/myblog/buildbak/run.sh”]</li>\n<li>还有一个小坑，运行起来会报没有权限的错误 再添加命令赋权 重新build就完成了 chmod 777 /usr/local/myblog/buildbak/run.sh</li>\n</ul>\n<p>run.sh 很简单，每次clean后重新生成静态文件再启动hexo，这样每次新增或者修改博客的时候restart就好了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">cd /usr/local/myblog;</span><br><span class=\"line\">hexo clean;</span><br><span class=\"line\">hexo g;</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>完整dockerfile</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos:7</span><br><span class=\"line\">MAINTAINER yywang sbsbjs@qq.com</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装依赖</span><br><span class=\"line\">RUN yum update -y &amp;&amp; yum install -y wget git-core vim* gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel \\</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装nodejs</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建目录 </span><br><span class=\"line\">WORKDIR /usr/local</span><br><span class=\"line\"># 下载tar</span><br><span class=\"line\">RUN wget https://nodejs.org/dist/v12.15.0/node-v12.15.0-linux-x64.tar.xz \\</span><br><span class=\"line\"># 解压</span><br><span class=\"line\">&amp;&amp; tar -xvf node-v12.15.0-linux-x64.tar.xz \\</span><br><span class=\"line\">&amp;&amp; mv node-v12.15.0-linux-x64 node_12.15.0 \\</span><br><span class=\"line\">&amp;&amp; mkdir /usr/local/nodejs \\</span><br><span class=\"line\">&amp;&amp; mv node_12.15.0 /usr/local/nodejs/ \\</span><br><span class=\"line\">&amp;&amp; rm -rf node-v12.15.0-linux-x64.tar.xz \\</span><br><span class=\"line\"># 部署bin文件</span><br><span class=\"line\">&amp;&amp; ln -s /usr/local/nodejs/node_12.15.0/bin/node /usr/local/bin/node \\</span><br><span class=\"line\">&amp;&amp; ln -s /usr/local/nodejs/node_12.15.0/bin/npm /usr/local/bin/npm \\</span><br><span class=\"line\"># 修改npm源</span><br><span class=\"line\">&amp;&amp; npm config set registry https://registry.npm.taobao.org \\</span><br><span class=\"line\"># 安装hexo</span><br><span class=\"line\">&amp;&amp; npm install -g hexo-cli \\</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置环境变量</span><br><span class=\"line\">&amp;&amp; ln -s /usr/local/nodejs/node_12.15.0/bin/hexo /usr/local/bin/hexo \\</span><br><span class=\"line\"># 创建网站文件夹</span><br><span class=\"line\">&amp;&amp; mkdir /usr/local/myblog \\</span><br><span class=\"line\">&amp;&amp; cd /usr/local/myblog \\</span><br><span class=\"line\"># 初始化hexo</span><br><span class=\"line\">&amp;&amp; hexo init \\</span><br><span class=\"line\">&amp;&amp; hexo generat \\</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装依赖</span><br><span class=\"line\">RUN yum update -y &amp;&amp; yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make \\</span><br><span class=\"line\"># 备份原始的python</span><br><span class=\"line\">&amp;&amp; mv /usr/bin/python /usr/bin/python.bak \\</span><br><span class=\"line\"># 下载解压</span><br><span class=\"line\">&amp;&amp; cd /usr/local \\</span><br><span class=\"line\">&amp;&amp; wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz \\</span><br><span class=\"line\">&amp;&amp; tar -xvJf  Python-3.6.2.tar.xz \\</span><br><span class=\"line\"># 编译安装</span><br><span class=\"line\">&amp;&amp; cd Python-3.6.2 \\</span><br><span class=\"line\">&amp;&amp; ./configure prefix=/usr/local/python3 \\</span><br><span class=\"line\">&amp;&amp; make &amp;&amp; make install \\</span><br><span class=\"line\">&amp;&amp; rm -rf /usr/local/Python-3.6.2.tar.xz \\</span><br><span class=\"line\"># 添加软链</span><br><span class=\"line\">&amp;&amp; ln -s /usr/local/python3/bin/python3 /usr/bin/python3 \\</span><br><span class=\"line\">&amp;&amp; ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 \\</span><br><span class=\"line\"># 安装依赖</span><br><span class=\"line\">&amp;&amp; pip3 install Pillow \\</span><br><span class=\"line\"># 迁移博客 由于clone速度极其慢，而且还需要添加git秘钥，改用本地先clone好复制过去</span><br><span class=\"line\">&amp;&amp; rm -rf /usr/local/myblog</span><br><span class=\"line\">COPY myblog /usr/local/myblog/</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装package.json中的依赖</span><br><span class=\"line\"># 修改下载源，安装更快</span><br><span class=\"line\">RUN npm install hexo --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-admin --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-deployer-git --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-archive --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-baidu-sitemap --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-category --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-feed --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-index --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-search --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-searchdb --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-sitemap --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-generator-tag --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-helper-live2d --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-renderer-ejs --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-renderer-marked --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-renderer-stylus --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-server --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-tag-cloud --save \\</span><br><span class=\"line\">&amp;&amp; npm install hexo-wordcount --save \\</span><br><span class=\"line\"></span><br><span class=\"line\"># 重新生成静态文件</span><br><span class=\"line\">&amp;&amp; cd /usr/local/myblog \\</span><br><span class=\"line\">&amp;&amp; hexo clean \\</span><br><span class=\"line\">&amp;&amp; hexo g \\</span><br><span class=\"line\">&amp;&amp; chmod 777 /usr/local/myblog/buildbak/run.sh</span><br><span class=\"line\"># 环境搭建完成，启动脚本</span><br><span class=\"line\">CMD [&quot;/usr/local/myblog/buildbak/run.sh&quot;]</span><br></pre></td></tr></table></figure>\n<p>build好镜像后，运行容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -di -v /usr/local/temp/myblog/source/_posts/:/usr/local/myblog/source/_posts/ -v /usr/local/temp/myblog/source/images/:/usr/local/myblog/source/images/ --name myblog -p 22000:4000 myblog:final</span><br></pre></td></tr></table></figure>\n<p>启动起来后查询dockerip</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect --format=&apos;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&apos; myblog</span><br></pre></td></tr></table></figure>\n<p>修改nginx.conf 将请求转发到docker的4000端口，重启nginx容器，完美结束，最后把阿里云上的域名的规则修改为新的服务器的ip，成了</p>\n<p>每次修改或者新增文件，重启hexo容器就可以了，最后别忘了提交文件到github中做备份 </p>\n<p>后续</p>\n<ul>\n<li>将Dockerfile nginx.conf run.sh 复制到myblog中，提交到github中做备份</li>\n<li>将最终的镜像上传至阿里云</li>\n<li>如果容器没有变化迁移环境的话直接，从阿里云拉取镜像运行即可</li>\n<li>如果内容变化就要先提交最新状态到github中，在新的环境中clone仓库，重新build镜像运行即可</li>\n</ul>\n"},{"title":"org.apache.tomcat.util.bcel.classfile.ClassFormatException","author":"YyWang","catagories":"exception","date":"2019-07-11T03:41:21.000Z","_content":"#### org.apache.tomcat.util.bcel.classfile.ClassFormatException \n\n- \n![upload successful](/images/pasted-4.png)\n- 原因：jdk版本不兼容\n- 原环境 jkd8+tomcat7+spring4  \n- 解决：tomcat7换tomcat8","source":"_posts/异常.md","raw":"title: org.apache.tomcat.util.bcel.classfile.ClassFormatException\nauthor: YyWang\ntags: exception\ncatagories: exception\ndate: 2019-07-11 11:41:21\n---\n#### org.apache.tomcat.util.bcel.classfile.ClassFormatException \n\n- \n![upload successful](/images/pasted-4.png)\n- 原因：jdk版本不兼容\n- 原环境 jkd8+tomcat7+spring4  \n- 解决：tomcat7换tomcat8","slug":"异常","published":1,"updated":"2021-07-13T12:27:08.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj7w003p81fyeg9a3wn0","content":"<h4 id=\"org-apache-tomcat-util-bcel-classfile-ClassFormatException\"><a href=\"#org-apache-tomcat-util-bcel-classfile-ClassFormatException\" class=\"headerlink\" title=\"org.apache.tomcat.util.bcel.classfile.ClassFormatException\"></a>org.apache.tomcat.util.bcel.classfile.ClassFormatException</h4><ul>\n<li><img src=\"/images/pasted-4.png\" alt=\"upload successful\"></li>\n<li>原因：jdk版本不兼容</li>\n<li>原环境 jkd8+tomcat7+spring4  </li>\n<li>解决：tomcat7换tomcat8</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"org-apache-tomcat-util-bcel-classfile-ClassFormatException\"><a href=\"#org-apache-tomcat-util-bcel-classfile-ClassFormatException\" class=\"headerlink\" title=\"org.apache.tomcat.util.bcel.classfile.ClassFormatException\"></a>org.apache.tomcat.util.bcel.classfile.ClassFormatException</h4><ul>\n<li><img src=\"/images/pasted-4.png\" alt=\"upload successful\"></li>\n<li>原因：jdk版本不兼容</li>\n<li>原环境 jkd8+tomcat7+spring4  </li>\n<li>解决：tomcat7换tomcat8</li>\n</ul>\n"},{"title":"我又来入门k8s了","author":"YyWang","date":"2020-06-30T14:49:30.000Z","_content":"\n### 引言\n之前分析过Docker容器技术，在容器技术很快的被广大使用之后，对于业务复杂的公司来说往往需要非常多的容器，而每次都需要docker run或者restart的话也是非常麻烦的而且人操作的话还容易出错，这就需要一个容器管理的一个组件，比如docker swarm、mesos和k8s，最终k8s脱颖而出称为大多数人的选择，而且k8s还被称为PaaS平台的操作系统，那么k8s能做什么呢？\n\nPod，是k8s提出的概念，是k8s的最小调度单位，Pod中可以有一个容器或者多个容器\n\n* Pod调度；k8s采用声明式API的方式，用户只需编写yaml文件描述所期望的Pod状态(比如2个容器，4c8g)，k8s根据所期望的Pod状态进行部署和维护\n* 健康检查自动恢复；监控集群中Pod的状态发现异常Pod进行迁移或重启\n* 动态扩缩容；检查Pod负载高时动态扩容进行负载均衡；反之减少容器节省资源\n* 负载均衡\n\n类似于Pod的运维系统，有了这些功能完全可以将自己的系统托管给k8s，可以减轻运维人员的工作\n\n### 架构\nmaster+slave的架构，master节点负责系统逻辑的处理，调度，slave节点来干活，与spark集群的模式是一样的\n\n* master节点组件\n\t* etcd：分布式kv数据库，用于保存数据(yaml文件)和集群的状态，其他组件都通过api server向etcd读写数据，理解为用来保存状态的数据层；etcd还是高可用的分布式数据库可以保证master的高可用\n\t* api server：提供api服务，负责各个模块之间的通信，不同组件之间交互都需要经过api server，理解为数据总线\n\t* controller manager：负责维护集群的状态，确保集群的状态与etcd中的状态保持一致，理解为MVC中的Controller层；例如健康检查，slave节点中的kubectl会向master节点(通过api server)定期报告节点中Pod的状态，相当于slave向master发心跳，心跳状态会保存在etcd中，master节点中的controller manager会定期从etcd中获取slave的状态，针对这些状态与etcd中保存的期望状态比对进行下一步操作，通过api server通知scheduler组件创建一个调度任务发送给slave节点\n\t* scheduler：负责调度，将pod调度到合适的node中；创建pod资源的时候，通过etcd中的状态调度到合适的slave节点中，更新或者删除也是这样\n* slave组件\n\t* kubelet：可以理解为通过实现了一些接口来对slave节点进行管控操作；负责与master通信，通过CRI(Container Runtime Interface)操作容器运行时(container runtime)，相当于是slave节点中的控制器，理解为通过CRI\"发送指令\"到容器运行时，对当前节点中pod做CRUD操作；还负责配置当前slave节点的网络和存储，通过调用网络插件和存储插件为容器配置网络（CNI Container Networking Interface）和持久化存储（CSI Container Storage Interface）；\n\t* kube-proxy：用于service的服务发现和负载均衡，通过iptable机制；service是相同服务的的多个pod集合，相当于一个VIP职责，不需要关心具体服务的ip只需访问服务的域名，由kube-proxy来转发到具体的pod\n\t* container runtime：真正对pod做CRUD操作的组件，相当于kubelet的slave\n\n![k8s](/images/k8s.png)\n\n如上图在slave节点中kubelet扮演控制器的角色来操作通过进行时对Pod进行操作，而kube-proxy是将访问pod的流量转发到相应的pod中，一个pod在启动之前k8s会在pod中先启动一个初始容器为这个容器添加Namespace，network，Volume这些设置，再将后启动的容器添加到初始容器的Namespace中去，这个初始容器用来进行进程隔离，与Pod具有相同的生命周期，通常Pod中容器的访问，日志收集等操作都会由这个容器来完成，也就是sidecar容器；访问某个pod的时候首先会经过iptables的规则转发到Pod的sidecar容器里，再由sidecar容器转发到目标应用容器中，sidecar可以天然用来做微服务中的流量控制，服务治理，灰度发布等功能\n\n工作原理\n\n* 用户提交了yaml文件给apiserver\n* apiserver会将数据保存到etcd中，再通知scheduler有容器需要被调度\n* scheduler根据配置选择合适的node，返回给apiserver\n* apiserver将结果同步到etcd中，再通知对应node中的kubectl\n* kubectl收到通知后调用container runtime来真正去启动这个配置的容器，调用storage plugin配置存储，调用network plugin配置网络\n\n### API\n* Pod；Pod是k8s的最小调度单位，Pod中可以有一个容器或者多个容器；前面分析过docker是通过Namespace和Cgroup技术来进行进程的隔离，是基于单进程模型并不具备管理多进程的能力，（参考[这里](https://zhuanlan.zhihu.com/p/83482791)大概是是无法回收僵尸进程和孤儿进程的资源的意思因为回收进程资源需要向父进程发送一个信号）；k8s通过将多个容器加入到同一个Namespace中并给头号进程赋予了管理多进程的能力，所以说相较于docker容器来说k8s的Pod概念更像是虚拟机一样，提供了传统虚拟机到容器环境的完美迁移方案\n* Deployment；对Pod的一个抽象，可以定义Pod的副本数量，版本，可以用Deployment来描述一个应用集群的状态\n* ReplicaSet；用来控制Pod的版本，Deployment不会之间控制Pod，而是通过ReplicaSet来间接控制Pod，一个Pod的版本对应一个RS（可以实现金丝雀发布，蓝绿发布）\n* StatefulSet；有状态的Pod进行编排；Pod之间有拓扑关系的拓扑状态或者存储状态；\n* DaemonSet；集群中运行一个DaemonPod，每个Node中有且只有一个，如果有新节点加入集群会自动创建；比如node中的各种插件（网络，存储，监控，日志）\n* Service；提供了一个或者多个Pod的访问地址，由于Pod的地址可能会变，通过域名可以做到不依赖于固定的ip地址访问Pod，相当于VIP，由kube-proxy+iptables来共同实现\n* Job；一次性任务，运行完成后退出\n* CronJob；定时任务，用于离线计算\n* 等等等等，只是了解到了这些，还有很多去查看官方文档吧\n\n\t","source":"_posts/我又来入门k8s了.md","raw":"title: 我又来入门k8s了\nauthor: YyWang\ntags: k8s\ncategories: Java\ndate: 2020-06-30 22:49:30\n---\n\n### 引言\n之前分析过Docker容器技术，在容器技术很快的被广大使用之后，对于业务复杂的公司来说往往需要非常多的容器，而每次都需要docker run或者restart的话也是非常麻烦的而且人操作的话还容易出错，这就需要一个容器管理的一个组件，比如docker swarm、mesos和k8s，最终k8s脱颖而出称为大多数人的选择，而且k8s还被称为PaaS平台的操作系统，那么k8s能做什么呢？\n\nPod，是k8s提出的概念，是k8s的最小调度单位，Pod中可以有一个容器或者多个容器\n\n* Pod调度；k8s采用声明式API的方式，用户只需编写yaml文件描述所期望的Pod状态(比如2个容器，4c8g)，k8s根据所期望的Pod状态进行部署和维护\n* 健康检查自动恢复；监控集群中Pod的状态发现异常Pod进行迁移或重启\n* 动态扩缩容；检查Pod负载高时动态扩容进行负载均衡；反之减少容器节省资源\n* 负载均衡\n\n类似于Pod的运维系统，有了这些功能完全可以将自己的系统托管给k8s，可以减轻运维人员的工作\n\n### 架构\nmaster+slave的架构，master节点负责系统逻辑的处理，调度，slave节点来干活，与spark集群的模式是一样的\n\n* master节点组件\n\t* etcd：分布式kv数据库，用于保存数据(yaml文件)和集群的状态，其他组件都通过api server向etcd读写数据，理解为用来保存状态的数据层；etcd还是高可用的分布式数据库可以保证master的高可用\n\t* api server：提供api服务，负责各个模块之间的通信，不同组件之间交互都需要经过api server，理解为数据总线\n\t* controller manager：负责维护集群的状态，确保集群的状态与etcd中的状态保持一致，理解为MVC中的Controller层；例如健康检查，slave节点中的kubectl会向master节点(通过api server)定期报告节点中Pod的状态，相当于slave向master发心跳，心跳状态会保存在etcd中，master节点中的controller manager会定期从etcd中获取slave的状态，针对这些状态与etcd中保存的期望状态比对进行下一步操作，通过api server通知scheduler组件创建一个调度任务发送给slave节点\n\t* scheduler：负责调度，将pod调度到合适的node中；创建pod资源的时候，通过etcd中的状态调度到合适的slave节点中，更新或者删除也是这样\n* slave组件\n\t* kubelet：可以理解为通过实现了一些接口来对slave节点进行管控操作；负责与master通信，通过CRI(Container Runtime Interface)操作容器运行时(container runtime)，相当于是slave节点中的控制器，理解为通过CRI\"发送指令\"到容器运行时，对当前节点中pod做CRUD操作；还负责配置当前slave节点的网络和存储，通过调用网络插件和存储插件为容器配置网络（CNI Container Networking Interface）和持久化存储（CSI Container Storage Interface）；\n\t* kube-proxy：用于service的服务发现和负载均衡，通过iptable机制；service是相同服务的的多个pod集合，相当于一个VIP职责，不需要关心具体服务的ip只需访问服务的域名，由kube-proxy来转发到具体的pod\n\t* container runtime：真正对pod做CRUD操作的组件，相当于kubelet的slave\n\n![k8s](/images/k8s.png)\n\n如上图在slave节点中kubelet扮演控制器的角色来操作通过进行时对Pod进行操作，而kube-proxy是将访问pod的流量转发到相应的pod中，一个pod在启动之前k8s会在pod中先启动一个初始容器为这个容器添加Namespace，network，Volume这些设置，再将后启动的容器添加到初始容器的Namespace中去，这个初始容器用来进行进程隔离，与Pod具有相同的生命周期，通常Pod中容器的访问，日志收集等操作都会由这个容器来完成，也就是sidecar容器；访问某个pod的时候首先会经过iptables的规则转发到Pod的sidecar容器里，再由sidecar容器转发到目标应用容器中，sidecar可以天然用来做微服务中的流量控制，服务治理，灰度发布等功能\n\n工作原理\n\n* 用户提交了yaml文件给apiserver\n* apiserver会将数据保存到etcd中，再通知scheduler有容器需要被调度\n* scheduler根据配置选择合适的node，返回给apiserver\n* apiserver将结果同步到etcd中，再通知对应node中的kubectl\n* kubectl收到通知后调用container runtime来真正去启动这个配置的容器，调用storage plugin配置存储，调用network plugin配置网络\n\n### API\n* Pod；Pod是k8s的最小调度单位，Pod中可以有一个容器或者多个容器；前面分析过docker是通过Namespace和Cgroup技术来进行进程的隔离，是基于单进程模型并不具备管理多进程的能力，（参考[这里](https://zhuanlan.zhihu.com/p/83482791)大概是是无法回收僵尸进程和孤儿进程的资源的意思因为回收进程资源需要向父进程发送一个信号）；k8s通过将多个容器加入到同一个Namespace中并给头号进程赋予了管理多进程的能力，所以说相较于docker容器来说k8s的Pod概念更像是虚拟机一样，提供了传统虚拟机到容器环境的完美迁移方案\n* Deployment；对Pod的一个抽象，可以定义Pod的副本数量，版本，可以用Deployment来描述一个应用集群的状态\n* ReplicaSet；用来控制Pod的版本，Deployment不会之间控制Pod，而是通过ReplicaSet来间接控制Pod，一个Pod的版本对应一个RS（可以实现金丝雀发布，蓝绿发布）\n* StatefulSet；有状态的Pod进行编排；Pod之间有拓扑关系的拓扑状态或者存储状态；\n* DaemonSet；集群中运行一个DaemonPod，每个Node中有且只有一个，如果有新节点加入集群会自动创建；比如node中的各种插件（网络，存储，监控，日志）\n* Service；提供了一个或者多个Pod的访问地址，由于Pod的地址可能会变，通过域名可以做到不依赖于固定的ip地址访问Pod，相当于VIP，由kube-proxy+iptables来共同实现\n* Job；一次性任务，运行完成后退出\n* CronJob；定时任务，用于离线计算\n* 等等等等，只是了解到了这些，还有很多去查看官方文档吧\n\n\t","slug":"我又来入门k8s了","published":1,"updated":"2021-07-13T12:27:08.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj7y003t81fypcahmbo6","content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>之前分析过Docker容器技术，在容器技术很快的被广大使用之后，对于业务复杂的公司来说往往需要非常多的容器，而每次都需要docker run或者restart的话也是非常麻烦的而且人操作的话还容易出错，这就需要一个容器管理的一个组件，比如docker swarm、mesos和k8s，最终k8s脱颖而出称为大多数人的选择，而且k8s还被称为PaaS平台的操作系统，那么k8s能做什么呢？</p>\n<p>Pod，是k8s提出的概念，是k8s的最小调度单位，Pod中可以有一个容器或者多个容器</p>\n<ul>\n<li>Pod调度；k8s采用声明式API的方式，用户只需编写yaml文件描述所期望的Pod状态(比如2个容器，4c8g)，k8s根据所期望的Pod状态进行部署和维护</li>\n<li>健康检查自动恢复；监控集群中Pod的状态发现异常Pod进行迁移或重启</li>\n<li>动态扩缩容；检查Pod负载高时动态扩容进行负载均衡；反之减少容器节省资源</li>\n<li>负载均衡</li>\n</ul>\n<p>类似于Pod的运维系统，有了这些功能完全可以将自己的系统托管给k8s，可以减轻运维人员的工作</p>\n<h3 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h3><p>master+slave的架构，master节点负责系统逻辑的处理，调度，slave节点来干活，与spark集群的模式是一样的</p>\n<ul>\n<li>master节点组件<ul>\n<li>etcd：分布式kv数据库，用于保存数据(yaml文件)和集群的状态，其他组件都通过api server向etcd读写数据，理解为用来保存状态的数据层；etcd还是高可用的分布式数据库可以保证master的高可用</li>\n<li>api server：提供api服务，负责各个模块之间的通信，不同组件之间交互都需要经过api server，理解为数据总线</li>\n<li>controller manager：负责维护集群的状态，确保集群的状态与etcd中的状态保持一致，理解为MVC中的Controller层；例如健康检查，slave节点中的kubectl会向master节点(通过api server)定期报告节点中Pod的状态，相当于slave向master发心跳，心跳状态会保存在etcd中，master节点中的controller manager会定期从etcd中获取slave的状态，针对这些状态与etcd中保存的期望状态比对进行下一步操作，通过api server通知scheduler组件创建一个调度任务发送给slave节点</li>\n<li>scheduler：负责调度，将pod调度到合适的node中；创建pod资源的时候，通过etcd中的状态调度到合适的slave节点中，更新或者删除也是这样</li>\n</ul>\n</li>\n<li>slave组件<ul>\n<li>kubelet：可以理解为通过实现了一些接口来对slave节点进行管控操作；负责与master通信，通过CRI(Container Runtime Interface)操作容器运行时(container runtime)，相当于是slave节点中的控制器，理解为通过CRI”发送指令”到容器运行时，对当前节点中pod做CRUD操作；还负责配置当前slave节点的网络和存储，通过调用网络插件和存储插件为容器配置网络（CNI Container Networking Interface）和持久化存储（CSI Container Storage Interface）；</li>\n<li>kube-proxy：用于service的服务发现和负载均衡，通过iptable机制；service是相同服务的的多个pod集合，相当于一个VIP职责，不需要关心具体服务的ip只需访问服务的域名，由kube-proxy来转发到具体的pod</li>\n<li>container runtime：真正对pod做CRUD操作的组件，相当于kubelet的slave</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/k8s.png\" alt=\"k8s\"></p>\n<p>如上图在slave节点中kubelet扮演控制器的角色来操作通过进行时对Pod进行操作，而kube-proxy是将访问pod的流量转发到相应的pod中，一个pod在启动之前k8s会在pod中先启动一个初始容器为这个容器添加Namespace，network，Volume这些设置，再将后启动的容器添加到初始容器的Namespace中去，这个初始容器用来进行进程隔离，与Pod具有相同的生命周期，通常Pod中容器的访问，日志收集等操作都会由这个容器来完成，也就是sidecar容器；访问某个pod的时候首先会经过iptables的规则转发到Pod的sidecar容器里，再由sidecar容器转发到目标应用容器中，sidecar可以天然用来做微服务中的流量控制，服务治理，灰度发布等功能</p>\n<p>工作原理</p>\n<ul>\n<li>用户提交了yaml文件给apiserver</li>\n<li>apiserver会将数据保存到etcd中，再通知scheduler有容器需要被调度</li>\n<li>scheduler根据配置选择合适的node，返回给apiserver</li>\n<li>apiserver将结果同步到etcd中，再通知对应node中的kubectl</li>\n<li>kubectl收到通知后调用container runtime来真正去启动这个配置的容器，调用storage plugin配置存储，调用network plugin配置网络</li>\n</ul>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><ul>\n<li>Pod；Pod是k8s的最小调度单位，Pod中可以有一个容器或者多个容器；前面分析过docker是通过Namespace和Cgroup技术来进行进程的隔离，是基于单进程模型并不具备管理多进程的能力，（参考<a href=\"https://zhuanlan.zhihu.com/p/83482791\" target=\"_blank\" rel=\"noopener\">这里</a>大概是是无法回收僵尸进程和孤儿进程的资源的意思因为回收进程资源需要向父进程发送一个信号）；k8s通过将多个容器加入到同一个Namespace中并给头号进程赋予了管理多进程的能力，所以说相较于docker容器来说k8s的Pod概念更像是虚拟机一样，提供了传统虚拟机到容器环境的完美迁移方案</li>\n<li>Deployment；对Pod的一个抽象，可以定义Pod的副本数量，版本，可以用Deployment来描述一个应用集群的状态</li>\n<li>ReplicaSet；用来控制Pod的版本，Deployment不会之间控制Pod，而是通过ReplicaSet来间接控制Pod，一个Pod的版本对应一个RS（可以实现金丝雀发布，蓝绿发布）</li>\n<li>StatefulSet；有状态的Pod进行编排；Pod之间有拓扑关系的拓扑状态或者存储状态；</li>\n<li>DaemonSet；集群中运行一个DaemonPod，每个Node中有且只有一个，如果有新节点加入集群会自动创建；比如node中的各种插件（网络，存储，监控，日志）</li>\n<li>Service；提供了一个或者多个Pod的访问地址，由于Pod的地址可能会变，通过域名可以做到不依赖于固定的ip地址访问Pod，相当于VIP，由kube-proxy+iptables来共同实现</li>\n<li>Job；一次性任务，运行完成后退出</li>\n<li>CronJob；定时任务，用于离线计算</li>\n<li>等等等等，只是了解到了这些，还有很多去查看官方文档吧</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>之前分析过Docker容器技术，在容器技术很快的被广大使用之后，对于业务复杂的公司来说往往需要非常多的容器，而每次都需要docker run或者restart的话也是非常麻烦的而且人操作的话还容易出错，这就需要一个容器管理的一个组件，比如docker swarm、mesos和k8s，最终k8s脱颖而出称为大多数人的选择，而且k8s还被称为PaaS平台的操作系统，那么k8s能做什么呢？</p>\n<p>Pod，是k8s提出的概念，是k8s的最小调度单位，Pod中可以有一个容器或者多个容器</p>\n<ul>\n<li>Pod调度；k8s采用声明式API的方式，用户只需编写yaml文件描述所期望的Pod状态(比如2个容器，4c8g)，k8s根据所期望的Pod状态进行部署和维护</li>\n<li>健康检查自动恢复；监控集群中Pod的状态发现异常Pod进行迁移或重启</li>\n<li>动态扩缩容；检查Pod负载高时动态扩容进行负载均衡；反之减少容器节省资源</li>\n<li>负载均衡</li>\n</ul>\n<p>类似于Pod的运维系统，有了这些功能完全可以将自己的系统托管给k8s，可以减轻运维人员的工作</p>\n<h3 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h3><p>master+slave的架构，master节点负责系统逻辑的处理，调度，slave节点来干活，与spark集群的模式是一样的</p>\n<ul>\n<li>master节点组件<ul>\n<li>etcd：分布式kv数据库，用于保存数据(yaml文件)和集群的状态，其他组件都通过api server向etcd读写数据，理解为用来保存状态的数据层；etcd还是高可用的分布式数据库可以保证master的高可用</li>\n<li>api server：提供api服务，负责各个模块之间的通信，不同组件之间交互都需要经过api server，理解为数据总线</li>\n<li>controller manager：负责维护集群的状态，确保集群的状态与etcd中的状态保持一致，理解为MVC中的Controller层；例如健康检查，slave节点中的kubectl会向master节点(通过api server)定期报告节点中Pod的状态，相当于slave向master发心跳，心跳状态会保存在etcd中，master节点中的controller manager会定期从etcd中获取slave的状态，针对这些状态与etcd中保存的期望状态比对进行下一步操作，通过api server通知scheduler组件创建一个调度任务发送给slave节点</li>\n<li>scheduler：负责调度，将pod调度到合适的node中；创建pod资源的时候，通过etcd中的状态调度到合适的slave节点中，更新或者删除也是这样</li>\n</ul>\n</li>\n<li>slave组件<ul>\n<li>kubelet：可以理解为通过实现了一些接口来对slave节点进行管控操作；负责与master通信，通过CRI(Container Runtime Interface)操作容器运行时(container runtime)，相当于是slave节点中的控制器，理解为通过CRI”发送指令”到容器运行时，对当前节点中pod做CRUD操作；还负责配置当前slave节点的网络和存储，通过调用网络插件和存储插件为容器配置网络（CNI Container Networking Interface）和持久化存储（CSI Container Storage Interface）；</li>\n<li>kube-proxy：用于service的服务发现和负载均衡，通过iptable机制；service是相同服务的的多个pod集合，相当于一个VIP职责，不需要关心具体服务的ip只需访问服务的域名，由kube-proxy来转发到具体的pod</li>\n<li>container runtime：真正对pod做CRUD操作的组件，相当于kubelet的slave</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/k8s.png\" alt=\"k8s\"></p>\n<p>如上图在slave节点中kubelet扮演控制器的角色来操作通过进行时对Pod进行操作，而kube-proxy是将访问pod的流量转发到相应的pod中，一个pod在启动之前k8s会在pod中先启动一个初始容器为这个容器添加Namespace，network，Volume这些设置，再将后启动的容器添加到初始容器的Namespace中去，这个初始容器用来进行进程隔离，与Pod具有相同的生命周期，通常Pod中容器的访问，日志收集等操作都会由这个容器来完成，也就是sidecar容器；访问某个pod的时候首先会经过iptables的规则转发到Pod的sidecar容器里，再由sidecar容器转发到目标应用容器中，sidecar可以天然用来做微服务中的流量控制，服务治理，灰度发布等功能</p>\n<p>工作原理</p>\n<ul>\n<li>用户提交了yaml文件给apiserver</li>\n<li>apiserver会将数据保存到etcd中，再通知scheduler有容器需要被调度</li>\n<li>scheduler根据配置选择合适的node，返回给apiserver</li>\n<li>apiserver将结果同步到etcd中，再通知对应node中的kubectl</li>\n<li>kubectl收到通知后调用container runtime来真正去启动这个配置的容器，调用storage plugin配置存储，调用network plugin配置网络</li>\n</ul>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><ul>\n<li>Pod；Pod是k8s的最小调度单位，Pod中可以有一个容器或者多个容器；前面分析过docker是通过Namespace和Cgroup技术来进行进程的隔离，是基于单进程模型并不具备管理多进程的能力，（参考<a href=\"https://zhuanlan.zhihu.com/p/83482791\" target=\"_blank\" rel=\"noopener\">这里</a>大概是是无法回收僵尸进程和孤儿进程的资源的意思因为回收进程资源需要向父进程发送一个信号）；k8s通过将多个容器加入到同一个Namespace中并给头号进程赋予了管理多进程的能力，所以说相较于docker容器来说k8s的Pod概念更像是虚拟机一样，提供了传统虚拟机到容器环境的完美迁移方案</li>\n<li>Deployment；对Pod的一个抽象，可以定义Pod的副本数量，版本，可以用Deployment来描述一个应用集群的状态</li>\n<li>ReplicaSet；用来控制Pod的版本，Deployment不会之间控制Pod，而是通过ReplicaSet来间接控制Pod，一个Pod的版本对应一个RS（可以实现金丝雀发布，蓝绿发布）</li>\n<li>StatefulSet；有状态的Pod进行编排；Pod之间有拓扑关系的拓扑状态或者存储状态；</li>\n<li>DaemonSet；集群中运行一个DaemonPod，每个Node中有且只有一个，如果有新节点加入集群会自动创建；比如node中的各种插件（网络，存储，监控，日志）</li>\n<li>Service；提供了一个或者多个Pod的访问地址，由于Pod的地址可能会变，通过域名可以做到不依赖于固定的ip地址访问Pod，相当于VIP，由kube-proxy+iptables来共同实现</li>\n<li>Job；一次性任务，运行完成后退出</li>\n<li>CronJob；定时任务，用于离线计算</li>\n<li>等等等等，只是了解到了这些，还有很多去查看官方文档吧</li>\n</ul>\n"},{"title":"捋一捋MySQL的锁","author":"YyWang","date":"2020-11-16T07:04:15.000Z","_content":"\n## 引言\n\n本文主要梳理MySQL的锁机制，主要是针对于Innodb引擎，目前网络上查的文章基本上都差不多，实际上是忽略了一些细节的，这些细节可能会成为今后搬砖过程中的恶魔，比如说插入意向锁，行锁之间的兼容关系这些，本文通过查阅资料加锁MySQL官网的说明再结合自己的理解梳理了一下MySQL的锁机制~\n\n## 锁的划分\n这里要有一个前提，就是MySQL对锁的划分是两种不同的维度，按照加锁的粒度和锁的类型，并不是固定的什么锁什么锁，就比如表锁和行锁里都有共享锁或者排他锁，同样，共享锁或排他锁中也都有行锁和表锁，是你中有我我中有你的关系，按照不同维度划分的结果，下面就来一一列举这些锁\n\n### 锁粒度\n以加锁的粒度为准可以分为，全局锁，表锁和行锁；\n\n* 全局锁；对整个数据库加锁，让整个数据库在只读状态，在数据库备份时使用（主库上备份，所有写操作将不能进行影响业务；从库上备份，备份期间不能有写操作，不能执行binlog，主从延迟增大）\n* 表锁，加锁的粒度为数据表\n\t* 自增锁 AUTO-INC Locks 是一种特殊的表锁，可以保证一个事务插入数据的id连续\n* 行锁，加锁的粒度为数据行\n\t* 记录锁 Record Locks；锁定当前数据行\n\t* 间隙锁 Gap Locks；锁定数据行的前后间隙\n\t\t* 插入意向锁 Insert Intention Locks；在插入操作之前会把插入的区域加入插入意向锁，不同区域的的锁互相兼容\n\t* 临键锁 Next-Key Locks；锁定数据行+前后的间隙\n\n### 锁类型\n\n* 共享锁（S）和 排他锁（X）；相当于，读锁和写锁，读可以共享锁，写只能独占资源；粒度可以有行锁和表锁，比如行级或者表级的S锁（或X锁）\n* 意向锁(意向共享锁IS，意向排他锁IX)，一个事务在给数据行加锁时会在数据所在的表加相同类型的意向锁(比如对数据行加X锁就会在该表加表级别的X意向锁)，表示该表有事务对数据行加了锁，意向锁直接是相互兼容的，但是与具体的表锁或者行锁有着互斥关系的，具体关系见下面分析\n\n## 锁之间的兼容关系\n\n||S|X|IS|IX|\n|---|---|---|---|---|\n|S|✅|❎|✅|❎|\n|X|❎|❎|❎|❎|\n|IS|✅|❎|✅|✅|\n|IX|❎|❎|✅|✅|\n\n**注:** 意向锁是表级别的锁，上面表格中与意向锁兼容和互斥关系指的是与表级别的S锁或者X锁，意向锁和行级别的锁是不冲突的；主要是为了防止一个事务在插入或者修改数据的时候另一个事务修改了表结构之间会冲突；插入或者修改数据是一般会加行锁或者间隙锁，同时在表上加IX锁(意向排他锁)，另一个事务要修改表结构是要给表加X锁，这时会和IX锁冲突等待IX锁释放\n\n这个只是我们熟知的锁之间的兼容关系，除此之外呢，MySQL中还有更加精确的锁之间的兼容关系，也就是在所有类型的行锁之间的兼容关系，([见参考文章3](https://www.iteye.com/blog/narcissusoyf-1637309))；这个关系是在X锁与X锁或者S锁与X锁不兼容的情况下再进行比对\n\n||G|I|R|N|\n|---|---|---|---|---|\n|G|✅|✅|✅|✅|\n|I|❎|✅|✅|❎|\n|R|✅|✅|❎|❎|\n|N|✅|✅|❎|❎|\n\n**注:**  G=Gap锁，I=Insert Intention锁，R=Record锁，N=Next-Key锁；\n\n上表中的行代表当前已经存在的锁，理解一下这张表就假设两个X锁排斥的前提下：\n\n* 第一列\n\t* 已经存在G锁，不允许再加I锁（加了间隙锁就不允许在间隙中插入操作了）\n\t* 已经存在G锁，还可以再加G锁、R锁和N锁（也就是说G锁之间是相互兼容的，R锁和G锁本身就不冲突当然兼容，N锁实质上就是G锁+R锁，G锁和R锁都兼容那么N锁一定兼容）\n* 第二列，已经存在I锁，剩下的所有类型锁都可以再加\n\t* 这里看到再加G锁也是兼容的即使加锁的间隙是一样的\n\t* 根据官方文档两个I锁如果插入不是同一个位置是相互兼容的，这样可以提高并发\n\t* 兼容R锁也很好理解，I锁是间隙，R锁是记录本身就不冲突\n\t* G锁和R锁都兼容了那么N锁一定兼容\n* 第三列，已经存在R锁，是可以加间隙锁的(G锁和I锁)，但如果包含记录的锁就不兼容(R锁和N锁)\n* 第四列，已经存在N锁，首先包含记录的锁(R锁和N锁)是不兼容的，I锁表明要插入数据也是不兼容的，G锁是兼容的\n\n总结：G锁与其他锁之间是相互兼容的，无论间隙是否相同，也无论当前是什么类型的锁，再加G锁也是兼容的；I锁是G锁的一种，是在插入之前表明插入操作的意向，如果当前存在G锁或者N锁，也就是加锁的区域相同就不能再加I锁，需要等待，其他情况与G锁相同都是兼容的；R锁和N锁就看加锁的数据是否冲突来判断锁是否兼容\n\n### 参考\n\n[秒懂InnoDB的锁](https://i6448038.github.io/2019/02/23/mysql-lock/)\n\n[InnoDB Locking](https://dev.mysql.com/doc/refman/5.6/en/innodb-locking.html)\n\n[从一个死锁看mysql innodb的锁机制](https://www.iteye.com/blog/narcissusoyf-1637309)","source":"_posts/捋一捋MySQL的锁.md","raw":"title: 捋一捋MySQL的锁\nauthor: YyWang\ntags: MySQL\ncategories: MySQL\ndate: 2020-11-16 15:04:15\n---\n\n## 引言\n\n本文主要梳理MySQL的锁机制，主要是针对于Innodb引擎，目前网络上查的文章基本上都差不多，实际上是忽略了一些细节的，这些细节可能会成为今后搬砖过程中的恶魔，比如说插入意向锁，行锁之间的兼容关系这些，本文通过查阅资料加锁MySQL官网的说明再结合自己的理解梳理了一下MySQL的锁机制~\n\n## 锁的划分\n这里要有一个前提，就是MySQL对锁的划分是两种不同的维度，按照加锁的粒度和锁的类型，并不是固定的什么锁什么锁，就比如表锁和行锁里都有共享锁或者排他锁，同样，共享锁或排他锁中也都有行锁和表锁，是你中有我我中有你的关系，按照不同维度划分的结果，下面就来一一列举这些锁\n\n### 锁粒度\n以加锁的粒度为准可以分为，全局锁，表锁和行锁；\n\n* 全局锁；对整个数据库加锁，让整个数据库在只读状态，在数据库备份时使用（主库上备份，所有写操作将不能进行影响业务；从库上备份，备份期间不能有写操作，不能执行binlog，主从延迟增大）\n* 表锁，加锁的粒度为数据表\n\t* 自增锁 AUTO-INC Locks 是一种特殊的表锁，可以保证一个事务插入数据的id连续\n* 行锁，加锁的粒度为数据行\n\t* 记录锁 Record Locks；锁定当前数据行\n\t* 间隙锁 Gap Locks；锁定数据行的前后间隙\n\t\t* 插入意向锁 Insert Intention Locks；在插入操作之前会把插入的区域加入插入意向锁，不同区域的的锁互相兼容\n\t* 临键锁 Next-Key Locks；锁定数据行+前后的间隙\n\n### 锁类型\n\n* 共享锁（S）和 排他锁（X）；相当于，读锁和写锁，读可以共享锁，写只能独占资源；粒度可以有行锁和表锁，比如行级或者表级的S锁（或X锁）\n* 意向锁(意向共享锁IS，意向排他锁IX)，一个事务在给数据行加锁时会在数据所在的表加相同类型的意向锁(比如对数据行加X锁就会在该表加表级别的X意向锁)，表示该表有事务对数据行加了锁，意向锁直接是相互兼容的，但是与具体的表锁或者行锁有着互斥关系的，具体关系见下面分析\n\n## 锁之间的兼容关系\n\n||S|X|IS|IX|\n|---|---|---|---|---|\n|S|✅|❎|✅|❎|\n|X|❎|❎|❎|❎|\n|IS|✅|❎|✅|✅|\n|IX|❎|❎|✅|✅|\n\n**注:** 意向锁是表级别的锁，上面表格中与意向锁兼容和互斥关系指的是与表级别的S锁或者X锁，意向锁和行级别的锁是不冲突的；主要是为了防止一个事务在插入或者修改数据的时候另一个事务修改了表结构之间会冲突；插入或者修改数据是一般会加行锁或者间隙锁，同时在表上加IX锁(意向排他锁)，另一个事务要修改表结构是要给表加X锁，这时会和IX锁冲突等待IX锁释放\n\n这个只是我们熟知的锁之间的兼容关系，除此之外呢，MySQL中还有更加精确的锁之间的兼容关系，也就是在所有类型的行锁之间的兼容关系，([见参考文章3](https://www.iteye.com/blog/narcissusoyf-1637309))；这个关系是在X锁与X锁或者S锁与X锁不兼容的情况下再进行比对\n\n||G|I|R|N|\n|---|---|---|---|---|\n|G|✅|✅|✅|✅|\n|I|❎|✅|✅|❎|\n|R|✅|✅|❎|❎|\n|N|✅|✅|❎|❎|\n\n**注:**  G=Gap锁，I=Insert Intention锁，R=Record锁，N=Next-Key锁；\n\n上表中的行代表当前已经存在的锁，理解一下这张表就假设两个X锁排斥的前提下：\n\n* 第一列\n\t* 已经存在G锁，不允许再加I锁（加了间隙锁就不允许在间隙中插入操作了）\n\t* 已经存在G锁，还可以再加G锁、R锁和N锁（也就是说G锁之间是相互兼容的，R锁和G锁本身就不冲突当然兼容，N锁实质上就是G锁+R锁，G锁和R锁都兼容那么N锁一定兼容）\n* 第二列，已经存在I锁，剩下的所有类型锁都可以再加\n\t* 这里看到再加G锁也是兼容的即使加锁的间隙是一样的\n\t* 根据官方文档两个I锁如果插入不是同一个位置是相互兼容的，这样可以提高并发\n\t* 兼容R锁也很好理解，I锁是间隙，R锁是记录本身就不冲突\n\t* G锁和R锁都兼容了那么N锁一定兼容\n* 第三列，已经存在R锁，是可以加间隙锁的(G锁和I锁)，但如果包含记录的锁就不兼容(R锁和N锁)\n* 第四列，已经存在N锁，首先包含记录的锁(R锁和N锁)是不兼容的，I锁表明要插入数据也是不兼容的，G锁是兼容的\n\n总结：G锁与其他锁之间是相互兼容的，无论间隙是否相同，也无论当前是什么类型的锁，再加G锁也是兼容的；I锁是G锁的一种，是在插入之前表明插入操作的意向，如果当前存在G锁或者N锁，也就是加锁的区域相同就不能再加I锁，需要等待，其他情况与G锁相同都是兼容的；R锁和N锁就看加锁的数据是否冲突来判断锁是否兼容\n\n### 参考\n\n[秒懂InnoDB的锁](https://i6448038.github.io/2019/02/23/mysql-lock/)\n\n[InnoDB Locking](https://dev.mysql.com/doc/refman/5.6/en/innodb-locking.html)\n\n[从一个死锁看mysql innodb的锁机制](https://www.iteye.com/blog/narcissusoyf-1637309)","slug":"捋一捋MySQL的锁","published":1,"updated":"2021-07-13T12:27:08.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj7z003w81fyr6bxa019","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>本文主要梳理MySQL的锁机制，主要是针对于Innodb引擎，目前网络上查的文章基本上都差不多，实际上是忽略了一些细节的，这些细节可能会成为今后搬砖过程中的恶魔，比如说插入意向锁，行锁之间的兼容关系这些，本文通过查阅资料加锁MySQL官网的说明再结合自己的理解梳理了一下MySQL的锁机制~</p>\n<h2 id=\"锁的划分\"><a href=\"#锁的划分\" class=\"headerlink\" title=\"锁的划分\"></a>锁的划分</h2><p>这里要有一个前提，就是MySQL对锁的划分是两种不同的维度，按照加锁的粒度和锁的类型，并不是固定的什么锁什么锁，就比如表锁和行锁里都有共享锁或者排他锁，同样，共享锁或排他锁中也都有行锁和表锁，是你中有我我中有你的关系，按照不同维度划分的结果，下面就来一一列举这些锁</p>\n<h3 id=\"锁粒度\"><a href=\"#锁粒度\" class=\"headerlink\" title=\"锁粒度\"></a>锁粒度</h3><p>以加锁的粒度为准可以分为，全局锁，表锁和行锁；</p>\n<ul>\n<li>全局锁；对整个数据库加锁，让整个数据库在只读状态，在数据库备份时使用（主库上备份，所有写操作将不能进行影响业务；从库上备份，备份期间不能有写操作，不能执行binlog，主从延迟增大）</li>\n<li>表锁，加锁的粒度为数据表<ul>\n<li>自增锁 AUTO-INC Locks 是一种特殊的表锁，可以保证一个事务插入数据的id连续</li>\n</ul>\n</li>\n<li>行锁，加锁的粒度为数据行<ul>\n<li>记录锁 Record Locks；锁定当前数据行</li>\n<li>间隙锁 Gap Locks；锁定数据行的前后间隙<ul>\n<li>插入意向锁 Insert Intention Locks；在插入操作之前会把插入的区域加入插入意向锁，不同区域的的锁互相兼容</li>\n</ul>\n</li>\n<li>临键锁 Next-Key Locks；锁定数据行+前后的间隙</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"锁类型\"><a href=\"#锁类型\" class=\"headerlink\" title=\"锁类型\"></a>锁类型</h3><ul>\n<li>共享锁（S）和 排他锁（X）；相当于，读锁和写锁，读可以共享锁，写只能独占资源；粒度可以有行锁和表锁，比如行级或者表级的S锁（或X锁）</li>\n<li>意向锁(意向共享锁IS，意向排他锁IX)，一个事务在给数据行加锁时会在数据所在的表加相同类型的意向锁(比如对数据行加X锁就会在该表加表级别的X意向锁)，表示该表有事务对数据行加了锁，意向锁直接是相互兼容的，但是与具体的表锁或者行锁有着互斥关系的，具体关系见下面分析</li>\n</ul>\n<h2 id=\"锁之间的兼容关系\"><a href=\"#锁之间的兼容关系\" class=\"headerlink\" title=\"锁之间的兼容关系\"></a>锁之间的兼容关系</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>S</th>\n<th>X</th>\n<th>IS</th>\n<th>IX</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>S</td>\n<td>✅</td>\n<td>❎</td>\n<td>✅</td>\n<td>❎</td>\n</tr>\n<tr>\n<td>X</td>\n<td>❎</td>\n<td>❎</td>\n<td>❎</td>\n<td>❎</td>\n</tr>\n<tr>\n<td>IS</td>\n<td>✅</td>\n<td>❎</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>IX</td>\n<td>❎</td>\n<td>❎</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注:</strong> 意向锁是表级别的锁，上面表格中与意向锁兼容和互斥关系指的是与表级别的S锁或者X锁，意向锁和行级别的锁是不冲突的；主要是为了防止一个事务在插入或者修改数据的时候另一个事务修改了表结构之间会冲突；插入或者修改数据是一般会加行锁或者间隙锁，同时在表上加IX锁(意向排他锁)，另一个事务要修改表结构是要给表加X锁，这时会和IX锁冲突等待IX锁释放</p>\n<p>这个只是我们熟知的锁之间的兼容关系，除此之外呢，MySQL中还有更加精确的锁之间的兼容关系，也就是在所有类型的行锁之间的兼容关系，(<a href=\"https://www.iteye.com/blog/narcissusoyf-1637309\" target=\"_blank\" rel=\"noopener\">见参考文章3</a>)；这个关系是在X锁与X锁或者S锁与X锁不兼容的情况下再进行比对</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>G</th>\n<th>I</th>\n<th>R</th>\n<th>N</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>G</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>I</td>\n<td>❎</td>\n<td>✅</td>\n<td>✅</td>\n<td>❎</td>\n</tr>\n<tr>\n<td>R</td>\n<td>✅</td>\n<td>✅</td>\n<td>❎</td>\n<td>❎</td>\n</tr>\n<tr>\n<td>N</td>\n<td>✅</td>\n<td>✅</td>\n<td>❎</td>\n<td>❎</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注:</strong>  G=Gap锁，I=Insert Intention锁，R=Record锁，N=Next-Key锁；</p>\n<p>上表中的行代表当前已经存在的锁，理解一下这张表就假设两个X锁排斥的前提下：</p>\n<ul>\n<li>第一列<ul>\n<li>已经存在G锁，不允许再加I锁（加了间隙锁就不允许在间隙中插入操作了）</li>\n<li>已经存在G锁，还可以再加G锁、R锁和N锁（也就是说G锁之间是相互兼容的，R锁和G锁本身就不冲突当然兼容，N锁实质上就是G锁+R锁，G锁和R锁都兼容那么N锁一定兼容）</li>\n</ul>\n</li>\n<li>第二列，已经存在I锁，剩下的所有类型锁都可以再加<ul>\n<li>这里看到再加G锁也是兼容的即使加锁的间隙是一样的</li>\n<li>根据官方文档两个I锁如果插入不是同一个位置是相互兼容的，这样可以提高并发</li>\n<li>兼容R锁也很好理解，I锁是间隙，R锁是记录本身就不冲突</li>\n<li>G锁和R锁都兼容了那么N锁一定兼容</li>\n</ul>\n</li>\n<li>第三列，已经存在R锁，是可以加间隙锁的(G锁和I锁)，但如果包含记录的锁就不兼容(R锁和N锁)</li>\n<li>第四列，已经存在N锁，首先包含记录的锁(R锁和N锁)是不兼容的，I锁表明要插入数据也是不兼容的，G锁是兼容的</li>\n</ul>\n<p>总结：G锁与其他锁之间是相互兼容的，无论间隙是否相同，也无论当前是什么类型的锁，再加G锁也是兼容的；I锁是G锁的一种，是在插入之前表明插入操作的意向，如果当前存在G锁或者N锁，也就是加锁的区域相同就不能再加I锁，需要等待，其他情况与G锁相同都是兼容的；R锁和N锁就看加锁的数据是否冲突来判断锁是否兼容</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://i6448038.github.io/2019/02/23/mysql-lock/\" target=\"_blank\" rel=\"noopener\">秒懂InnoDB的锁</a></p>\n<p><a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-locking.html\" target=\"_blank\" rel=\"noopener\">InnoDB Locking</a></p>\n<p><a href=\"https://www.iteye.com/blog/narcissusoyf-1637309\" target=\"_blank\" rel=\"noopener\">从一个死锁看mysql innodb的锁机制</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>本文主要梳理MySQL的锁机制，主要是针对于Innodb引擎，目前网络上查的文章基本上都差不多，实际上是忽略了一些细节的，这些细节可能会成为今后搬砖过程中的恶魔，比如说插入意向锁，行锁之间的兼容关系这些，本文通过查阅资料加锁MySQL官网的说明再结合自己的理解梳理了一下MySQL的锁机制~</p>\n<h2 id=\"锁的划分\"><a href=\"#锁的划分\" class=\"headerlink\" title=\"锁的划分\"></a>锁的划分</h2><p>这里要有一个前提，就是MySQL对锁的划分是两种不同的维度，按照加锁的粒度和锁的类型，并不是固定的什么锁什么锁，就比如表锁和行锁里都有共享锁或者排他锁，同样，共享锁或排他锁中也都有行锁和表锁，是你中有我我中有你的关系，按照不同维度划分的结果，下面就来一一列举这些锁</p>\n<h3 id=\"锁粒度\"><a href=\"#锁粒度\" class=\"headerlink\" title=\"锁粒度\"></a>锁粒度</h3><p>以加锁的粒度为准可以分为，全局锁，表锁和行锁；</p>\n<ul>\n<li>全局锁；对整个数据库加锁，让整个数据库在只读状态，在数据库备份时使用（主库上备份，所有写操作将不能进行影响业务；从库上备份，备份期间不能有写操作，不能执行binlog，主从延迟增大）</li>\n<li>表锁，加锁的粒度为数据表<ul>\n<li>自增锁 AUTO-INC Locks 是一种特殊的表锁，可以保证一个事务插入数据的id连续</li>\n</ul>\n</li>\n<li>行锁，加锁的粒度为数据行<ul>\n<li>记录锁 Record Locks；锁定当前数据行</li>\n<li>间隙锁 Gap Locks；锁定数据行的前后间隙<ul>\n<li>插入意向锁 Insert Intention Locks；在插入操作之前会把插入的区域加入插入意向锁，不同区域的的锁互相兼容</li>\n</ul>\n</li>\n<li>临键锁 Next-Key Locks；锁定数据行+前后的间隙</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"锁类型\"><a href=\"#锁类型\" class=\"headerlink\" title=\"锁类型\"></a>锁类型</h3><ul>\n<li>共享锁（S）和 排他锁（X）；相当于，读锁和写锁，读可以共享锁，写只能独占资源；粒度可以有行锁和表锁，比如行级或者表级的S锁（或X锁）</li>\n<li>意向锁(意向共享锁IS，意向排他锁IX)，一个事务在给数据行加锁时会在数据所在的表加相同类型的意向锁(比如对数据行加X锁就会在该表加表级别的X意向锁)，表示该表有事务对数据行加了锁，意向锁直接是相互兼容的，但是与具体的表锁或者行锁有着互斥关系的，具体关系见下面分析</li>\n</ul>\n<h2 id=\"锁之间的兼容关系\"><a href=\"#锁之间的兼容关系\" class=\"headerlink\" title=\"锁之间的兼容关系\"></a>锁之间的兼容关系</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>S</th>\n<th>X</th>\n<th>IS</th>\n<th>IX</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>S</td>\n<td>✅</td>\n<td>❎</td>\n<td>✅</td>\n<td>❎</td>\n</tr>\n<tr>\n<td>X</td>\n<td>❎</td>\n<td>❎</td>\n<td>❎</td>\n<td>❎</td>\n</tr>\n<tr>\n<td>IS</td>\n<td>✅</td>\n<td>❎</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>IX</td>\n<td>❎</td>\n<td>❎</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注:</strong> 意向锁是表级别的锁，上面表格中与意向锁兼容和互斥关系指的是与表级别的S锁或者X锁，意向锁和行级别的锁是不冲突的；主要是为了防止一个事务在插入或者修改数据的时候另一个事务修改了表结构之间会冲突；插入或者修改数据是一般会加行锁或者间隙锁，同时在表上加IX锁(意向排他锁)，另一个事务要修改表结构是要给表加X锁，这时会和IX锁冲突等待IX锁释放</p>\n<p>这个只是我们熟知的锁之间的兼容关系，除此之外呢，MySQL中还有更加精确的锁之间的兼容关系，也就是在所有类型的行锁之间的兼容关系，(<a href=\"https://www.iteye.com/blog/narcissusoyf-1637309\" target=\"_blank\" rel=\"noopener\">见参考文章3</a>)；这个关系是在X锁与X锁或者S锁与X锁不兼容的情况下再进行比对</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>G</th>\n<th>I</th>\n<th>R</th>\n<th>N</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>G</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>I</td>\n<td>❎</td>\n<td>✅</td>\n<td>✅</td>\n<td>❎</td>\n</tr>\n<tr>\n<td>R</td>\n<td>✅</td>\n<td>✅</td>\n<td>❎</td>\n<td>❎</td>\n</tr>\n<tr>\n<td>N</td>\n<td>✅</td>\n<td>✅</td>\n<td>❎</td>\n<td>❎</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注:</strong>  G=Gap锁，I=Insert Intention锁，R=Record锁，N=Next-Key锁；</p>\n<p>上表中的行代表当前已经存在的锁，理解一下这张表就假设两个X锁排斥的前提下：</p>\n<ul>\n<li>第一列<ul>\n<li>已经存在G锁，不允许再加I锁（加了间隙锁就不允许在间隙中插入操作了）</li>\n<li>已经存在G锁，还可以再加G锁、R锁和N锁（也就是说G锁之间是相互兼容的，R锁和G锁本身就不冲突当然兼容，N锁实质上就是G锁+R锁，G锁和R锁都兼容那么N锁一定兼容）</li>\n</ul>\n</li>\n<li>第二列，已经存在I锁，剩下的所有类型锁都可以再加<ul>\n<li>这里看到再加G锁也是兼容的即使加锁的间隙是一样的</li>\n<li>根据官方文档两个I锁如果插入不是同一个位置是相互兼容的，这样可以提高并发</li>\n<li>兼容R锁也很好理解，I锁是间隙，R锁是记录本身就不冲突</li>\n<li>G锁和R锁都兼容了那么N锁一定兼容</li>\n</ul>\n</li>\n<li>第三列，已经存在R锁，是可以加间隙锁的(G锁和I锁)，但如果包含记录的锁就不兼容(R锁和N锁)</li>\n<li>第四列，已经存在N锁，首先包含记录的锁(R锁和N锁)是不兼容的，I锁表明要插入数据也是不兼容的，G锁是兼容的</li>\n</ul>\n<p>总结：G锁与其他锁之间是相互兼容的，无论间隙是否相同，也无论当前是什么类型的锁，再加G锁也是兼容的；I锁是G锁的一种，是在插入之前表明插入操作的意向，如果当前存在G锁或者N锁，也就是加锁的区域相同就不能再加I锁，需要等待，其他情况与G锁相同都是兼容的；R锁和N锁就看加锁的数据是否冲突来判断锁是否兼容</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://i6448038.github.io/2019/02/23/mysql-lock/\" target=\"_blank\" rel=\"noopener\">秒懂InnoDB的锁</a></p>\n<p><a href=\"https://dev.mysql.com/doc/refman/5.6/en/innodb-locking.html\" target=\"_blank\" rel=\"noopener\">InnoDB Locking</a></p>\n<p><a href=\"https://www.iteye.com/blog/narcissusoyf-1637309\" target=\"_blank\" rel=\"noopener\">从一个死锁看mysql innodb的锁机制</a></p>\n"},{"title":"知识点复习","author":"YyWang","date":"2019-07-09T07:49:00.000Z","_content":"整理一些在看项目时候遇到的小的知识点，先写个大概，后续再做详细的补充\n#### HTTP和TCP\n\nHttp是在Tcp的基础之上的，也就是说Http的请求和相应是在建立Tcp链接之后发生的\n\n#### 幂等性\n\n一次或者多次请求同一个资源得到的结果是一样的，多次请求不会影响最终的结果。（增加去重的逻辑则无需满足幂等性）\n\n#### synchronized 关键字\n\n- 在方法中锁住的是该类的实例对象\n- 在静态方法中锁住的是类对象\n- 代码块中（this）锁住的是该类的实例对象\n- 代码块中（xxx.class）锁住的是类对象\n\n#### volatile\n\n保证线程数据可见\n\n#### transient 关键字\n\n不做序列化和反序列化操作\n\n#### synchronized在方法中声名为什么还用线程安全的数据结构来存放变量\n\n该变量可能在其他地方被调用，如果该变量只在synchronized关键字声名在方法中使用，则无需使用线程安全的数据结构。\n\n#### TPS （Transaction Per Second）\n\n服务器每秒处理的事务个数，一个事务是从向服务器发送请求开始，客户端接收到响应结束\n\n#### QPS  （Query Per Second）\n\n服务器每秒处理查询的次数，查询开始到返回结果结束\n#### Git克隆分支命令\n\ngit clone -b [分支名称] [git地址]\n\n#### Git提交代码到GitHub\n+ 创建仓库，在本地clone\n+ 本地在.git所在的目录打开git bansh\n+ 指定远程仓库\n\n *git remote add origin https://github.com/panniyuyu/frameworkdemo.git*\n \n   + 会提示 remote origin already exists\t\n   - 执行删除命令后再重新指定远程仓库\n   \n   *git remote rm origin*\n   \n+ 添加文件\n*git add * *\n+ 提交改动\n *git commit -m \"xxxx\"*\n+ 推到远程仓库\n *git push origin master*\n \n \n #### wait()方法\n + 会暂停当前线程，让出CPU时间，同时让出锁，等待notify()或者notifyAll()唤醒后重新获得锁执行\n \n *sleep()方法同样会暂停当前线程，让出CPU时间，与 wait()方法不同的是，sleep()方法不会释放锁，会阻塞当前的线程，且sleep()是Thread类中的方法, wait()是Object的方法*\n\n#### 守护线程\n+ Java中优先级低的线程，用来服务于用户线程的，当Java程序退出或者jvm退出时，守护线程自动退出，jvm运行时只需关注用户线程即可。\n\n *Jvm中的垃圾收集器可以理解为守护线程，当jvm退出时会自动退出*\n \n *使用 thread.setDaemon(true)设置，要在start()方法之前*\n\n#### Class的isAssignableFrom方法\n+ Class中的方法，如：a.isAssignableFrom(b) 在a是b的父类或接口，亦或是a、b是同一个类或者接口的情况下返回true，其他情况返回false\n\n#### Class的getFields和getDeclaredFields\n+ 都是获取类中的字段，getFields获取类中public的字段，getDeclaredFields获取类中所有声名的字段，不包含父类中的字段\n\n#### Field的getModifiers\n+ 获取字段的修饰符，返回值为int型对应不同的类型\n+ PUBLIC: 1\n+ PRIVATE: 2\n+ PROTECTED: 4\n+ STATIC: 8\n+ FINAL: 16\n+ SYNCHRONIZED: 32\n+ VOLATILE: 64\n+ TRANSIENT: 128\n+ NATIVE: 256\n+ INTERFACE: 512\n+ ABSTRACT: 1024\n+ STRICT: 2048\n\n#### Field的setAccessible(true)\n+ 字段被声名是私有的，在取值前必须设置accessible为true，不然会报错\n\n#### field的getGenericType和getType\n+ 都是获取字段的类型，getGenericType返回的是Type类型，getType返回的是Class类型\n+ 还有其他不同，暂时没有理解http://www.51gjie.com/java/793.html","source":"_posts/知识点复习.md","raw":"title: 知识点复习\nauthor: YyWang\ntags: []\ncategories: []\ndate: 2019-07-09 15:49:00\n---\n整理一些在看项目时候遇到的小的知识点，先写个大概，后续再做详细的补充\n#### HTTP和TCP\n\nHttp是在Tcp的基础之上的，也就是说Http的请求和相应是在建立Tcp链接之后发生的\n\n#### 幂等性\n\n一次或者多次请求同一个资源得到的结果是一样的，多次请求不会影响最终的结果。（增加去重的逻辑则无需满足幂等性）\n\n#### synchronized 关键字\n\n- 在方法中锁住的是该类的实例对象\n- 在静态方法中锁住的是类对象\n- 代码块中（this）锁住的是该类的实例对象\n- 代码块中（xxx.class）锁住的是类对象\n\n#### volatile\n\n保证线程数据可见\n\n#### transient 关键字\n\n不做序列化和反序列化操作\n\n#### synchronized在方法中声名为什么还用线程安全的数据结构来存放变量\n\n该变量可能在其他地方被调用，如果该变量只在synchronized关键字声名在方法中使用，则无需使用线程安全的数据结构。\n\n#### TPS （Transaction Per Second）\n\n服务器每秒处理的事务个数，一个事务是从向服务器发送请求开始，客户端接收到响应结束\n\n#### QPS  （Query Per Second）\n\n服务器每秒处理查询的次数，查询开始到返回结果结束\n#### Git克隆分支命令\n\ngit clone -b [分支名称] [git地址]\n\n#### Git提交代码到GitHub\n+ 创建仓库，在本地clone\n+ 本地在.git所在的目录打开git bansh\n+ 指定远程仓库\n\n *git remote add origin https://github.com/panniyuyu/frameworkdemo.git*\n \n   + 会提示 remote origin already exists\t\n   - 执行删除命令后再重新指定远程仓库\n   \n   *git remote rm origin*\n   \n+ 添加文件\n*git add * *\n+ 提交改动\n *git commit -m \"xxxx\"*\n+ 推到远程仓库\n *git push origin master*\n \n \n #### wait()方法\n + 会暂停当前线程，让出CPU时间，同时让出锁，等待notify()或者notifyAll()唤醒后重新获得锁执行\n \n *sleep()方法同样会暂停当前线程，让出CPU时间，与 wait()方法不同的是，sleep()方法不会释放锁，会阻塞当前的线程，且sleep()是Thread类中的方法, wait()是Object的方法*\n\n#### 守护线程\n+ Java中优先级低的线程，用来服务于用户线程的，当Java程序退出或者jvm退出时，守护线程自动退出，jvm运行时只需关注用户线程即可。\n\n *Jvm中的垃圾收集器可以理解为守护线程，当jvm退出时会自动退出*\n \n *使用 thread.setDaemon(true)设置，要在start()方法之前*\n\n#### Class的isAssignableFrom方法\n+ Class中的方法，如：a.isAssignableFrom(b) 在a是b的父类或接口，亦或是a、b是同一个类或者接口的情况下返回true，其他情况返回false\n\n#### Class的getFields和getDeclaredFields\n+ 都是获取类中的字段，getFields获取类中public的字段，getDeclaredFields获取类中所有声名的字段，不包含父类中的字段\n\n#### Field的getModifiers\n+ 获取字段的修饰符，返回值为int型对应不同的类型\n+ PUBLIC: 1\n+ PRIVATE: 2\n+ PROTECTED: 4\n+ STATIC: 8\n+ FINAL: 16\n+ SYNCHRONIZED: 32\n+ VOLATILE: 64\n+ TRANSIENT: 128\n+ NATIVE: 256\n+ INTERFACE: 512\n+ ABSTRACT: 1024\n+ STRICT: 2048\n\n#### Field的setAccessible(true)\n+ 字段被声名是私有的，在取值前必须设置accessible为true，不然会报错\n\n#### field的getGenericType和getType\n+ 都是获取字段的类型，getGenericType返回的是Type类型，getType返回的是Class类型\n+ 还有其他不同，暂时没有理解http://www.51gjie.com/java/793.html","slug":"知识点复习","published":1,"updated":"2021-07-13T12:27:08.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj80003z81fyoofno3h6","content":"<p>整理一些在看项目时候遇到的小的知识点，先写个大概，后续再做详细的补充</p>\n<h4 id=\"HTTP和TCP\"><a href=\"#HTTP和TCP\" class=\"headerlink\" title=\"HTTP和TCP\"></a>HTTP和TCP</h4><p>Http是在Tcp的基础之上的，也就是说Http的请求和相应是在建立Tcp链接之后发生的</p>\n<h4 id=\"幂等性\"><a href=\"#幂等性\" class=\"headerlink\" title=\"幂等性\"></a>幂等性</h4><p>一次或者多次请求同一个资源得到的结果是一样的，多次请求不会影响最终的结果。（增加去重的逻辑则无需满足幂等性）</p>\n<h4 id=\"synchronized-关键字\"><a href=\"#synchronized-关键字\" class=\"headerlink\" title=\"synchronized 关键字\"></a>synchronized 关键字</h4><ul>\n<li>在方法中锁住的是该类的实例对象</li>\n<li>在静态方法中锁住的是类对象</li>\n<li>代码块中（this）锁住的是该类的实例对象</li>\n<li>代码块中（xxx.class）锁住的是类对象</li>\n</ul>\n<h4 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h4><p>保证线程数据可见</p>\n<h4 id=\"transient-关键字\"><a href=\"#transient-关键字\" class=\"headerlink\" title=\"transient 关键字\"></a>transient 关键字</h4><p>不做序列化和反序列化操作</p>\n<h4 id=\"synchronized在方法中声名为什么还用线程安全的数据结构来存放变量\"><a href=\"#synchronized在方法中声名为什么还用线程安全的数据结构来存放变量\" class=\"headerlink\" title=\"synchronized在方法中声名为什么还用线程安全的数据结构来存放变量\"></a>synchronized在方法中声名为什么还用线程安全的数据结构来存放变量</h4><p>该变量可能在其他地方被调用，如果该变量只在synchronized关键字声名在方法中使用，则无需使用线程安全的数据结构。</p>\n<h4 id=\"TPS-（Transaction-Per-Second）\"><a href=\"#TPS-（Transaction-Per-Second）\" class=\"headerlink\" title=\"TPS （Transaction Per Second）\"></a>TPS （Transaction Per Second）</h4><p>服务器每秒处理的事务个数，一个事务是从向服务器发送请求开始，客户端接收到响应结束</p>\n<h4 id=\"QPS-（Query-Per-Second）\"><a href=\"#QPS-（Query-Per-Second）\" class=\"headerlink\" title=\"QPS  （Query Per Second）\"></a>QPS  （Query Per Second）</h4><p>服务器每秒处理查询的次数，查询开始到返回结果结束</p>\n<h4 id=\"Git克隆分支命令\"><a href=\"#Git克隆分支命令\" class=\"headerlink\" title=\"Git克隆分支命令\"></a>Git克隆分支命令</h4><p>git clone -b [分支名称] [git地址]</p>\n<h4 id=\"Git提交代码到GitHub\"><a href=\"#Git提交代码到GitHub\" class=\"headerlink\" title=\"Git提交代码到GitHub\"></a>Git提交代码到GitHub</h4><ul>\n<li>创建仓库，在本地clone</li>\n<li>本地在.git所在的目录打开git bansh</li>\n<li><p>指定远程仓库</p>\n<p><em>git remote add origin <a href=\"https://github.com/panniyuyu/frameworkdemo.git\" target=\"_blank\" rel=\"noopener\">https://github.com/panniyuyu/frameworkdemo.git</a></em></p>\n<ul>\n<li>会提示 remote origin already exists    </li>\n</ul>\n<ul>\n<li><p>执行删除命令后再重新指定远程仓库</p>\n<p><em>git remote rm origin</em></p>\n</li>\n</ul>\n</li>\n<li><p>添加文件<br><em>git add </em> *</p>\n</li>\n<li>提交改动<br><em>git commit -m “xxxx”</em></li>\n<li>推到远程仓库<br><em>git push origin master</em></li>\n</ul>\n<h4 id=\"wait-方法\"><a href=\"#wait-方法\" class=\"headerlink\" title=\"wait()方法\"></a>wait()方法</h4><ul>\n<li><p>会暂停当前线程，让出CPU时间，同时让出锁，等待notify()或者notifyAll()唤醒后重新获得锁执行</p>\n<p><em>sleep()方法同样会暂停当前线程，让出CPU时间，与 wait()方法不同的是，sleep()方法不会释放锁，会阻塞当前的线程，且sleep()是Thread类中的方法, wait()是Object的方法</em></p>\n</li>\n</ul>\n<h4 id=\"守护线程\"><a href=\"#守护线程\" class=\"headerlink\" title=\"守护线程\"></a>守护线程</h4><ul>\n<li><p>Java中优先级低的线程，用来服务于用户线程的，当Java程序退出或者jvm退出时，守护线程自动退出，jvm运行时只需关注用户线程即可。</p>\n<p><em>Jvm中的垃圾收集器可以理解为守护线程，当jvm退出时会自动退出</em></p>\n<p><em>使用 thread.setDaemon(true)设置，要在start()方法之前</em></p>\n</li>\n</ul>\n<h4 id=\"Class的isAssignableFrom方法\"><a href=\"#Class的isAssignableFrom方法\" class=\"headerlink\" title=\"Class的isAssignableFrom方法\"></a>Class的isAssignableFrom方法</h4><ul>\n<li>Class中的方法，如：a.isAssignableFrom(b) 在a是b的父类或接口，亦或是a、b是同一个类或者接口的情况下返回true，其他情况返回false</li>\n</ul>\n<h4 id=\"Class的getFields和getDeclaredFields\"><a href=\"#Class的getFields和getDeclaredFields\" class=\"headerlink\" title=\"Class的getFields和getDeclaredFields\"></a>Class的getFields和getDeclaredFields</h4><ul>\n<li>都是获取类中的字段，getFields获取类中public的字段，getDeclaredFields获取类中所有声名的字段，不包含父类中的字段</li>\n</ul>\n<h4 id=\"Field的getModifiers\"><a href=\"#Field的getModifiers\" class=\"headerlink\" title=\"Field的getModifiers\"></a>Field的getModifiers</h4><ul>\n<li>获取字段的修饰符，返回值为int型对应不同的类型</li>\n<li>PUBLIC: 1</li>\n<li>PRIVATE: 2</li>\n<li>PROTECTED: 4</li>\n<li>STATIC: 8</li>\n<li>FINAL: 16</li>\n<li>SYNCHRONIZED: 32</li>\n<li>VOLATILE: 64</li>\n<li>TRANSIENT: 128</li>\n<li>NATIVE: 256</li>\n<li>INTERFACE: 512</li>\n<li>ABSTRACT: 1024</li>\n<li>STRICT: 2048</li>\n</ul>\n<h4 id=\"Field的setAccessible-true\"><a href=\"#Field的setAccessible-true\" class=\"headerlink\" title=\"Field的setAccessible(true)\"></a>Field的setAccessible(true)</h4><ul>\n<li>字段被声名是私有的，在取值前必须设置accessible为true，不然会报错</li>\n</ul>\n<h4 id=\"field的getGenericType和getType\"><a href=\"#field的getGenericType和getType\" class=\"headerlink\" title=\"field的getGenericType和getType\"></a>field的getGenericType和getType</h4><ul>\n<li>都是获取字段的类型，getGenericType返回的是Type类型，getType返回的是Class类型</li>\n<li>还有其他不同，暂时没有理解<a href=\"http://www.51gjie.com/java/793.html\" target=\"_blank\" rel=\"noopener\">http://www.51gjie.com/java/793.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>整理一些在看项目时候遇到的小的知识点，先写个大概，后续再做详细的补充</p>\n<h4 id=\"HTTP和TCP\"><a href=\"#HTTP和TCP\" class=\"headerlink\" title=\"HTTP和TCP\"></a>HTTP和TCP</h4><p>Http是在Tcp的基础之上的，也就是说Http的请求和相应是在建立Tcp链接之后发生的</p>\n<h4 id=\"幂等性\"><a href=\"#幂等性\" class=\"headerlink\" title=\"幂等性\"></a>幂等性</h4><p>一次或者多次请求同一个资源得到的结果是一样的，多次请求不会影响最终的结果。（增加去重的逻辑则无需满足幂等性）</p>\n<h4 id=\"synchronized-关键字\"><a href=\"#synchronized-关键字\" class=\"headerlink\" title=\"synchronized 关键字\"></a>synchronized 关键字</h4><ul>\n<li>在方法中锁住的是该类的实例对象</li>\n<li>在静态方法中锁住的是类对象</li>\n<li>代码块中（this）锁住的是该类的实例对象</li>\n<li>代码块中（xxx.class）锁住的是类对象</li>\n</ul>\n<h4 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h4><p>保证线程数据可见</p>\n<h4 id=\"transient-关键字\"><a href=\"#transient-关键字\" class=\"headerlink\" title=\"transient 关键字\"></a>transient 关键字</h4><p>不做序列化和反序列化操作</p>\n<h4 id=\"synchronized在方法中声名为什么还用线程安全的数据结构来存放变量\"><a href=\"#synchronized在方法中声名为什么还用线程安全的数据结构来存放变量\" class=\"headerlink\" title=\"synchronized在方法中声名为什么还用线程安全的数据结构来存放变量\"></a>synchronized在方法中声名为什么还用线程安全的数据结构来存放变量</h4><p>该变量可能在其他地方被调用，如果该变量只在synchronized关键字声名在方法中使用，则无需使用线程安全的数据结构。</p>\n<h4 id=\"TPS-（Transaction-Per-Second）\"><a href=\"#TPS-（Transaction-Per-Second）\" class=\"headerlink\" title=\"TPS （Transaction Per Second）\"></a>TPS （Transaction Per Second）</h4><p>服务器每秒处理的事务个数，一个事务是从向服务器发送请求开始，客户端接收到响应结束</p>\n<h4 id=\"QPS-（Query-Per-Second）\"><a href=\"#QPS-（Query-Per-Second）\" class=\"headerlink\" title=\"QPS  （Query Per Second）\"></a>QPS  （Query Per Second）</h4><p>服务器每秒处理查询的次数，查询开始到返回结果结束</p>\n<h4 id=\"Git克隆分支命令\"><a href=\"#Git克隆分支命令\" class=\"headerlink\" title=\"Git克隆分支命令\"></a>Git克隆分支命令</h4><p>git clone -b [分支名称] [git地址]</p>\n<h4 id=\"Git提交代码到GitHub\"><a href=\"#Git提交代码到GitHub\" class=\"headerlink\" title=\"Git提交代码到GitHub\"></a>Git提交代码到GitHub</h4><ul>\n<li>创建仓库，在本地clone</li>\n<li>本地在.git所在的目录打开git bansh</li>\n<li><p>指定远程仓库</p>\n<p><em>git remote add origin <a href=\"https://github.com/panniyuyu/frameworkdemo.git\" target=\"_blank\" rel=\"noopener\">https://github.com/panniyuyu/frameworkdemo.git</a></em></p>\n<ul>\n<li>会提示 remote origin already exists    </li>\n</ul>\n<ul>\n<li><p>执行删除命令后再重新指定远程仓库</p>\n<p><em>git remote rm origin</em></p>\n</li>\n</ul>\n</li>\n<li><p>添加文件<br><em>git add </em> *</p>\n</li>\n<li>提交改动<br><em>git commit -m “xxxx”</em></li>\n<li>推到远程仓库<br><em>git push origin master</em></li>\n</ul>\n<h4 id=\"wait-方法\"><a href=\"#wait-方法\" class=\"headerlink\" title=\"wait()方法\"></a>wait()方法</h4><ul>\n<li><p>会暂停当前线程，让出CPU时间，同时让出锁，等待notify()或者notifyAll()唤醒后重新获得锁执行</p>\n<p><em>sleep()方法同样会暂停当前线程，让出CPU时间，与 wait()方法不同的是，sleep()方法不会释放锁，会阻塞当前的线程，且sleep()是Thread类中的方法, wait()是Object的方法</em></p>\n</li>\n</ul>\n<h4 id=\"守护线程\"><a href=\"#守护线程\" class=\"headerlink\" title=\"守护线程\"></a>守护线程</h4><ul>\n<li><p>Java中优先级低的线程，用来服务于用户线程的，当Java程序退出或者jvm退出时，守护线程自动退出，jvm运行时只需关注用户线程即可。</p>\n<p><em>Jvm中的垃圾收集器可以理解为守护线程，当jvm退出时会自动退出</em></p>\n<p><em>使用 thread.setDaemon(true)设置，要在start()方法之前</em></p>\n</li>\n</ul>\n<h4 id=\"Class的isAssignableFrom方法\"><a href=\"#Class的isAssignableFrom方法\" class=\"headerlink\" title=\"Class的isAssignableFrom方法\"></a>Class的isAssignableFrom方法</h4><ul>\n<li>Class中的方法，如：a.isAssignableFrom(b) 在a是b的父类或接口，亦或是a、b是同一个类或者接口的情况下返回true，其他情况返回false</li>\n</ul>\n<h4 id=\"Class的getFields和getDeclaredFields\"><a href=\"#Class的getFields和getDeclaredFields\" class=\"headerlink\" title=\"Class的getFields和getDeclaredFields\"></a>Class的getFields和getDeclaredFields</h4><ul>\n<li>都是获取类中的字段，getFields获取类中public的字段，getDeclaredFields获取类中所有声名的字段，不包含父类中的字段</li>\n</ul>\n<h4 id=\"Field的getModifiers\"><a href=\"#Field的getModifiers\" class=\"headerlink\" title=\"Field的getModifiers\"></a>Field的getModifiers</h4><ul>\n<li>获取字段的修饰符，返回值为int型对应不同的类型</li>\n<li>PUBLIC: 1</li>\n<li>PRIVATE: 2</li>\n<li>PROTECTED: 4</li>\n<li>STATIC: 8</li>\n<li>FINAL: 16</li>\n<li>SYNCHRONIZED: 32</li>\n<li>VOLATILE: 64</li>\n<li>TRANSIENT: 128</li>\n<li>NATIVE: 256</li>\n<li>INTERFACE: 512</li>\n<li>ABSTRACT: 1024</li>\n<li>STRICT: 2048</li>\n</ul>\n<h4 id=\"Field的setAccessible-true\"><a href=\"#Field的setAccessible-true\" class=\"headerlink\" title=\"Field的setAccessible(true)\"></a>Field的setAccessible(true)</h4><ul>\n<li>字段被声名是私有的，在取值前必须设置accessible为true，不然会报错</li>\n</ul>\n<h4 id=\"field的getGenericType和getType\"><a href=\"#field的getGenericType和getType\" class=\"headerlink\" title=\"field的getGenericType和getType\"></a>field的getGenericType和getType</h4><ul>\n<li>都是获取字段的类型，getGenericType返回的是Type类型，getType返回的是Class类型</li>\n<li>还有其他不同，暂时没有理解<a href=\"http://www.51gjie.com/java/793.html\" target=\"_blank\" rel=\"noopener\">http://www.51gjie.com/java/793.html</a></li>\n</ul>\n"},{"title":"第一篇博客","author":"YyWang","date":"2019-05-11T09:26:16.000Z","_content":"\n时光匆匆，三年的研究生生涯马上就要结束。这是我毕业论文致谢里的第一句话，虽然很老套但是非常应景，在毕业之前的这段时间没有那么多的事情，突然想到做一个自己的博客，把自己的学习和生活记录下来，不用每次遇到问题的时候再去问度娘，而且很多都是重复的问题，虽然自己也在做笔记但很少回头看，打算以前的笔记不再管了，当初为了图省事写的非常简单有些已经想不起来是做什么的了，现在想想非常懊悔，这个坏毛病一定要改。今日在我的博客搭建完成之际，开始将今后所学习的技术记录在此，沉淀下去，和大家做交流，同时，在此也将记录我的生活，有趣的所见所闻什么的，朋友圈发的频繁遭人厌。    \n马上就要入职了，心里知道要回归到工程中了，不然入职后的压力会很大，但是也不知道自己工作内容是什么，浏览了一些博客发现需要学习的东西实在是太多了无从下手，而且就我自己而言没有在工程中应用过的技术即使理解了最后也会忘掉，所以学习的情绪很down，想找一些有趣的东西搞一下，于是本站诞生了。\nemmm......第一篇博客就到这了，自己小学语文水平只能写到这了，给自己加油！\n","source":"_posts/第一篇博客.md","raw":"---\ntitle: 第一篇博客\ntags: 生活杂谈\nauthor: YyWang\ncategories: 生活杂谈\ndate: 2019-05-11 17:26:16\n---\n\n时光匆匆，三年的研究生生涯马上就要结束。这是我毕业论文致谢里的第一句话，虽然很老套但是非常应景，在毕业之前的这段时间没有那么多的事情，突然想到做一个自己的博客，把自己的学习和生活记录下来，不用每次遇到问题的时候再去问度娘，而且很多都是重复的问题，虽然自己也在做笔记但很少回头看，打算以前的笔记不再管了，当初为了图省事写的非常简单有些已经想不起来是做什么的了，现在想想非常懊悔，这个坏毛病一定要改。今日在我的博客搭建完成之际，开始将今后所学习的技术记录在此，沉淀下去，和大家做交流，同时，在此也将记录我的生活，有趣的所见所闻什么的，朋友圈发的频繁遭人厌。    \n马上就要入职了，心里知道要回归到工程中了，不然入职后的压力会很大，但是也不知道自己工作内容是什么，浏览了一些博客发现需要学习的东西实在是太多了无从下手，而且就我自己而言没有在工程中应用过的技术即使理解了最后也会忘掉，所以学习的情绪很down，想找一些有趣的东西搞一下，于是本站诞生了。\nemmm......第一篇博客就到这了，自己小学语文水平只能写到这了，给自己加油！\n","slug":"第一篇博客","published":1,"updated":"2021-07-13T12:27:08.595Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj82004381fywyuoua87","content":"<p>时光匆匆，三年的研究生生涯马上就要结束。这是我毕业论文致谢里的第一句话，虽然很老套但是非常应景，在毕业之前的这段时间没有那么多的事情，突然想到做一个自己的博客，把自己的学习和生活记录下来，不用每次遇到问题的时候再去问度娘，而且很多都是重复的问题，虽然自己也在做笔记但很少回头看，打算以前的笔记不再管了，当初为了图省事写的非常简单有些已经想不起来是做什么的了，现在想想非常懊悔，这个坏毛病一定要改。今日在我的博客搭建完成之际，开始将今后所学习的技术记录在此，沉淀下去，和大家做交流，同时，在此也将记录我的生活，有趣的所见所闻什么的，朋友圈发的频繁遭人厌。<br>马上就要入职了，心里知道要回归到工程中了，不然入职后的压力会很大，但是也不知道自己工作内容是什么，浏览了一些博客发现需要学习的东西实在是太多了无从下手，而且就我自己而言没有在工程中应用过的技术即使理解了最后也会忘掉，所以学习的情绪很down，想找一些有趣的东西搞一下，于是本站诞生了。<br>emmm……第一篇博客就到这了，自己小学语文水平只能写到这了，给自己加油！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>时光匆匆，三年的研究生生涯马上就要结束。这是我毕业论文致谢里的第一句话，虽然很老套但是非常应景，在毕业之前的这段时间没有那么多的事情，突然想到做一个自己的博客，把自己的学习和生活记录下来，不用每次遇到问题的时候再去问度娘，而且很多都是重复的问题，虽然自己也在做笔记但很少回头看，打算以前的笔记不再管了，当初为了图省事写的非常简单有些已经想不起来是做什么的了，现在想想非常懊悔，这个坏毛病一定要改。今日在我的博客搭建完成之际，开始将今后所学习的技术记录在此，沉淀下去，和大家做交流，同时，在此也将记录我的生活，有趣的所见所闻什么的，朋友圈发的频繁遭人厌。<br>马上就要入职了，心里知道要回归到工程中了，不然入职后的压力会很大，但是也不知道自己工作内容是什么，浏览了一些博客发现需要学习的东西实在是太多了无从下手，而且就我自己而言没有在工程中应用过的技术即使理解了最后也会忘掉，所以学习的情绪很down，想找一些有趣的东西搞一下，于是本站诞生了。<br>emmm……第一篇博客就到这了，自己小学语文水平只能写到这了，给自己加油！</p>\n"},{"title":"揭秘京东微服务框架的负载均衡算法","author":"YyWang","date":"2020-03-27T14:38:43.000Z","_content":"\n在京东广泛使用的微服务框架是JSF(Jingdong Service Framework)，中文名叫杰夫，今天给大家分享一下JSF的负载均衡算法。先串一下服务调用的过程，consumer在向provider发起远程调用之前会从注册中心拿到自己订阅的provider列表，然后和列表中的provider建立连接缓存起来，当发起调用的时候会从缓存的provider中选择一个进行调用，从多个provider选择一个进行调用，那么具体选择哪一个就用到了负载均衡算法，下面分别介绍一下JSF中的负载均衡算法：\n\n### 随机\n\n* 无权重或权重相等则从provider列表中随机选择一个发起调用；\n* 有权重，假定总的权重值为x，随机生成[0-x)的偏移量，然后遍历减去provider列表的权重，当偏移量为负是选择当前的provider发起调用\n\n附伪代码\n\n```\n// ...初始化总权重值totalWeight和权重是否相同sameWeight,length为providerList长度\n\nif (totalWeight > 0 && !sameWeight) {\n    offset = random.nextInt(totalWeight);// 偏移量\n    for (item : providerList) {\n        offset -= item.getWeight(i);\n        if (offset < 0) {\n            return item\n        }\n    }\n} else {// 没有权重或权重相同随机选择\n    return providerList.get(random.nextInt(length));\n}\n```\n\n算法复杂度分析： 有权重值或无权重值都需要先初始化总权重值及权重值是否相等的变量复杂度为O(n)；没有权重值随机选择一个发起调用复杂度为O(1)；有权重值且权重值不同通过偏移量随机选择的复杂度为O(n)；**无权重时的复杂度为O(n)，有权重时总的复杂度为2O(n)**\n\n\n### 轮询\n\n* 无权重，方法级别的轮询，方法的调用次数和provider列表数量取余的结果为选择的provider\n* 有权重，在无权重的基础上，将调用次数和providerList中最大权重值取余，在List中筛选权重值大于余数的provider，最后调用次数和筛选结果长度取余的结果就是最终选择的provider\n\t* 取余的操作是让结果在[0-被取余数)之间循环，第一次和最大权重取余，是让权重从小到大循环起来；第二次在筛选的结果中取余，就是在权重值大于第一次余数的结果中循环选择\n\t* eg：第一次取余的结果大，筛选出来的List就相对较小，且List都是权重较大的provider，第二次取余是在权重较大的provider中进行轮询选择；反之，第一次取余的结果小，筛选出来的List相对较大，第二次取余是在相对较大的List中进行轮询选择；这样在轮询的基础上保证权重值大的provider的节点有更多次机会被轮询到\n\n验证一下这个算法：假设有3个Provider A、B、C，他们的权重分别为3、3、4，进行10次调用试一下，每一行的结果分别为 调用次数、%最大权重、筛选出List长度、调用次数%List长度、最后选择\n\n* 0    0    3    0    A\n* 1    1    3    1    B\n* 2    2    3    2    C\n* 3    3    1    -\t    C\n* 4    0    3    1    B\n* 5    1    3    2    C\n* 6    2    3    0    A\n* 7    3    1    -    C\n* 8    0    3    2    B\n* 9    1    3    0    A\n\n可以看到结果10次调用，基本是轮询的状态，而且权重为4的C节点被调用4次\n\n附伪代码\n\n```\n// key = className+alias+method\n// 初始化最小和最大权重 minWeight maxWeight\nif (maxWeight > 0 && minWeight < maxWeight) {\n    currentWeight = count % maxWeight;\n    subList = getSubList(providerList);// 选择权重大于当前权重的子集\n    return subList.get(count%subList.size());\n} else {\n    // 无权重或权重相等\n    count = getAndIncrement(key);// 通过key获取调用次数并自增1\n    return providerList.get(count%length);\n} \n\n```\n\n算法复杂度分析：初始化最小和最大权重复杂度为O(n)，无权重或权重相同直接取余选择即可复杂度O(1)；有权重时需要筛选大于当前权重的自己复杂度为O(n)，对子集轮询算账复杂度为O(1)；**无权重轮询的复杂度为O(n)，有权重轮询的复杂度为2O(n)**\n\n### 最少活跃优先\n\n每次选择最少活跃的provider发起调用，当最少活跃的节点多时，在最少活跃的节点中使用随机算法，有权重随机或者无权重随机选择；\n\n* 最少活跃可以理解为最少并发数，并发数少的节点表示节点处理请求的速度快，性能强\n\n* 最少活跃数以最近100次连接中的失败数量为准，如果为0表示最近没有失败连接，直接返回真实的并发数；如果大于0，限制最大值为90，在[0,100)中产生随机数，当随机数比失败连接数大时返回真实的并发数，否自返回最大值；也就是说节点中最近100次连接有失败的记录，该节点则有一定几率不会被选中调用，且失败的连接数越多，不被选中的几率越大\n\t* 当节点快速抛异常会被认为是处理请求速度快的节点，所以最大失败值限制90，provider抛异常最低有10%选中的概率，等provider恢复并不再抛异常了恢复正常\n\n附伪代码\n\n```\n// 初始化 最小活跃数leastActive、最小活跃数的数量leastCount等\n\nif (leastCount == 1) {\n    // 最少活跃数的provider列表只有1个直接返回\n} else  {\n\t // 采用随机算法\n}\n```\n算法复杂度分析：初始化工作复杂度O(n)，最少活跃数量为1直接返回O(1)，否则使用随机算法；**最少活跃优先算法，无权重情况下2O(n)，有权重情况下3O(n)**\n\n### 一致性hash\n\n* 以方法维度定义了选择器，保存映射关系，以interfaceName+methodName为key，自定义的选择器为value；\n* 当首次对一个方法发起调用或者providerList发生变化时，初始化选择器\n\t* 每个节点创建128个虚拟节点，以 ip+port+index 为key得到128个hash值，保存虚拟节点的映射关系（要有序）\n* 如果当前方法存在选择器且providerList没变，用方法的第一个参数得到hash值，从虚拟节点的映射中get，命中直接返回，不命中选择第一个大于该hash值的节点，没有则选择虚拟节点中的第一个\n\nhash算法：通过对一个key使用MD5算法得到一个摘要，这个摘要是byte[16]类型，将数组按照索引 0-3 4-7 8-11 12-15 分成4段，每一个段有4个byte，组成一个32位的hash值，一个摘要可以生成4个hash值\n\n附伪代码\n\n```\nselector = selectorMap.get(key);\nif (selector == null || selector.hash() != hashCode){\n    // 首次调用或者providerList发生变化\n    selectorMap.put(key, new Selector());\n} \nreturn selecotr.select();\n\n\nclass Selector{\n\n    Selector(){\n        // 初始化选择器\n        for(item : providerList) {\n            for (0 : 31) {\n                digest = md5.digist(key);// byte[16]类型，4个hash值\n                for (0 : 3) {\n                    virtualNodes.put(hash(digest,index));// hash()就是将摘要分段返回index个段作为hash值\n                }\n            }\n        }\n    }\n    \n    public Provider select(){\n        digest = md5.digest(arg[0]);// 方法的第一个参数作为key生成摘要\n        hashCode = hash(digest,0);// 将摘要的第一个端最为hash值\n        provider = virtualNodes.get(hashCode)\n        if (provider == null) {\n            // 选择大于hashCode的第一个key对应的节点，没有就选择第一个key的节点\n        }\n        return provider;\n    }\n}\n```\n\n算法复杂度分析：**在最坏的情况下，每次选择都要初始化选择器的复杂度为128O(n)，当provider列表不变时只需进行1次初始化，后续的选择操作复杂度为O(1)**\n\n### 本地优先随机算法\n\n判断provider列表中是否存在本地ip，有则发起调用，没有就使用随机算法\n\n算法复杂度分析：**最坏的情况下每次都找不到本地ip则比随机算法多O(n)的复杂度，如果能找到本地ip的复杂度为O(n)**\n\n总结：\n\n* 随机算法和轮询算法，适用于节点差异不大的情景，节点有差异需要设置权重值\n\t* 优点，简单高效\n\t* 缺点，需要找到最合适的权重值\n* 最少活跃优先算法，适用节点之间有差异的情景\n\t* 优点，无权重值下，可以均衡节点之间的差异，不用去设置权重值\n\t* 缺点，算法复杂度较高\n* 一致性hash 适用于节点中有缓存数据的情景，相同的请求总是选择同样的节点\n\t* 缺点，算法复杂度较高\n* 本地IP调用优先 适用于本地同时提供服务的情景\n\n**综上，理论上，本地有自己要调用的服务配置本地IP调用优先，其他情况使用随机或者轮询都可以，默认随机算法不用管就好了**\n","source":"_posts/揭秘京东微服务框架的负载均衡算法.md","raw":"title: 揭秘京东微服务框架的负载均衡算法\nauthor: YyWang\ntags: 微服务\ncategories: 微服务\ndate: 2020-03-27 22:38:43\n---\n\n在京东广泛使用的微服务框架是JSF(Jingdong Service Framework)，中文名叫杰夫，今天给大家分享一下JSF的负载均衡算法。先串一下服务调用的过程，consumer在向provider发起远程调用之前会从注册中心拿到自己订阅的provider列表，然后和列表中的provider建立连接缓存起来，当发起调用的时候会从缓存的provider中选择一个进行调用，从多个provider选择一个进行调用，那么具体选择哪一个就用到了负载均衡算法，下面分别介绍一下JSF中的负载均衡算法：\n\n### 随机\n\n* 无权重或权重相等则从provider列表中随机选择一个发起调用；\n* 有权重，假定总的权重值为x，随机生成[0-x)的偏移量，然后遍历减去provider列表的权重，当偏移量为负是选择当前的provider发起调用\n\n附伪代码\n\n```\n// ...初始化总权重值totalWeight和权重是否相同sameWeight,length为providerList长度\n\nif (totalWeight > 0 && !sameWeight) {\n    offset = random.nextInt(totalWeight);// 偏移量\n    for (item : providerList) {\n        offset -= item.getWeight(i);\n        if (offset < 0) {\n            return item\n        }\n    }\n} else {// 没有权重或权重相同随机选择\n    return providerList.get(random.nextInt(length));\n}\n```\n\n算法复杂度分析： 有权重值或无权重值都需要先初始化总权重值及权重值是否相等的变量复杂度为O(n)；没有权重值随机选择一个发起调用复杂度为O(1)；有权重值且权重值不同通过偏移量随机选择的复杂度为O(n)；**无权重时的复杂度为O(n)，有权重时总的复杂度为2O(n)**\n\n\n### 轮询\n\n* 无权重，方法级别的轮询，方法的调用次数和provider列表数量取余的结果为选择的provider\n* 有权重，在无权重的基础上，将调用次数和providerList中最大权重值取余，在List中筛选权重值大于余数的provider，最后调用次数和筛选结果长度取余的结果就是最终选择的provider\n\t* 取余的操作是让结果在[0-被取余数)之间循环，第一次和最大权重取余，是让权重从小到大循环起来；第二次在筛选的结果中取余，就是在权重值大于第一次余数的结果中循环选择\n\t* eg：第一次取余的结果大，筛选出来的List就相对较小，且List都是权重较大的provider，第二次取余是在权重较大的provider中进行轮询选择；反之，第一次取余的结果小，筛选出来的List相对较大，第二次取余是在相对较大的List中进行轮询选择；这样在轮询的基础上保证权重值大的provider的节点有更多次机会被轮询到\n\n验证一下这个算法：假设有3个Provider A、B、C，他们的权重分别为3、3、4，进行10次调用试一下，每一行的结果分别为 调用次数、%最大权重、筛选出List长度、调用次数%List长度、最后选择\n\n* 0    0    3    0    A\n* 1    1    3    1    B\n* 2    2    3    2    C\n* 3    3    1    -\t    C\n* 4    0    3    1    B\n* 5    1    3    2    C\n* 6    2    3    0    A\n* 7    3    1    -    C\n* 8    0    3    2    B\n* 9    1    3    0    A\n\n可以看到结果10次调用，基本是轮询的状态，而且权重为4的C节点被调用4次\n\n附伪代码\n\n```\n// key = className+alias+method\n// 初始化最小和最大权重 minWeight maxWeight\nif (maxWeight > 0 && minWeight < maxWeight) {\n    currentWeight = count % maxWeight;\n    subList = getSubList(providerList);// 选择权重大于当前权重的子集\n    return subList.get(count%subList.size());\n} else {\n    // 无权重或权重相等\n    count = getAndIncrement(key);// 通过key获取调用次数并自增1\n    return providerList.get(count%length);\n} \n\n```\n\n算法复杂度分析：初始化最小和最大权重复杂度为O(n)，无权重或权重相同直接取余选择即可复杂度O(1)；有权重时需要筛选大于当前权重的自己复杂度为O(n)，对子集轮询算账复杂度为O(1)；**无权重轮询的复杂度为O(n)，有权重轮询的复杂度为2O(n)**\n\n### 最少活跃优先\n\n每次选择最少活跃的provider发起调用，当最少活跃的节点多时，在最少活跃的节点中使用随机算法，有权重随机或者无权重随机选择；\n\n* 最少活跃可以理解为最少并发数，并发数少的节点表示节点处理请求的速度快，性能强\n\n* 最少活跃数以最近100次连接中的失败数量为准，如果为0表示最近没有失败连接，直接返回真实的并发数；如果大于0，限制最大值为90，在[0,100)中产生随机数，当随机数比失败连接数大时返回真实的并发数，否自返回最大值；也就是说节点中最近100次连接有失败的记录，该节点则有一定几率不会被选中调用，且失败的连接数越多，不被选中的几率越大\n\t* 当节点快速抛异常会被认为是处理请求速度快的节点，所以最大失败值限制90，provider抛异常最低有10%选中的概率，等provider恢复并不再抛异常了恢复正常\n\n附伪代码\n\n```\n// 初始化 最小活跃数leastActive、最小活跃数的数量leastCount等\n\nif (leastCount == 1) {\n    // 最少活跃数的provider列表只有1个直接返回\n} else  {\n\t // 采用随机算法\n}\n```\n算法复杂度分析：初始化工作复杂度O(n)，最少活跃数量为1直接返回O(1)，否则使用随机算法；**最少活跃优先算法，无权重情况下2O(n)，有权重情况下3O(n)**\n\n### 一致性hash\n\n* 以方法维度定义了选择器，保存映射关系，以interfaceName+methodName为key，自定义的选择器为value；\n* 当首次对一个方法发起调用或者providerList发生变化时，初始化选择器\n\t* 每个节点创建128个虚拟节点，以 ip+port+index 为key得到128个hash值，保存虚拟节点的映射关系（要有序）\n* 如果当前方法存在选择器且providerList没变，用方法的第一个参数得到hash值，从虚拟节点的映射中get，命中直接返回，不命中选择第一个大于该hash值的节点，没有则选择虚拟节点中的第一个\n\nhash算法：通过对一个key使用MD5算法得到一个摘要，这个摘要是byte[16]类型，将数组按照索引 0-3 4-7 8-11 12-15 分成4段，每一个段有4个byte，组成一个32位的hash值，一个摘要可以生成4个hash值\n\n附伪代码\n\n```\nselector = selectorMap.get(key);\nif (selector == null || selector.hash() != hashCode){\n    // 首次调用或者providerList发生变化\n    selectorMap.put(key, new Selector());\n} \nreturn selecotr.select();\n\n\nclass Selector{\n\n    Selector(){\n        // 初始化选择器\n        for(item : providerList) {\n            for (0 : 31) {\n                digest = md5.digist(key);// byte[16]类型，4个hash值\n                for (0 : 3) {\n                    virtualNodes.put(hash(digest,index));// hash()就是将摘要分段返回index个段作为hash值\n                }\n            }\n        }\n    }\n    \n    public Provider select(){\n        digest = md5.digest(arg[0]);// 方法的第一个参数作为key生成摘要\n        hashCode = hash(digest,0);// 将摘要的第一个端最为hash值\n        provider = virtualNodes.get(hashCode)\n        if (provider == null) {\n            // 选择大于hashCode的第一个key对应的节点，没有就选择第一个key的节点\n        }\n        return provider;\n    }\n}\n```\n\n算法复杂度分析：**在最坏的情况下，每次选择都要初始化选择器的复杂度为128O(n)，当provider列表不变时只需进行1次初始化，后续的选择操作复杂度为O(1)**\n\n### 本地优先随机算法\n\n判断provider列表中是否存在本地ip，有则发起调用，没有就使用随机算法\n\n算法复杂度分析：**最坏的情况下每次都找不到本地ip则比随机算法多O(n)的复杂度，如果能找到本地ip的复杂度为O(n)**\n\n总结：\n\n* 随机算法和轮询算法，适用于节点差异不大的情景，节点有差异需要设置权重值\n\t* 优点，简单高效\n\t* 缺点，需要找到最合适的权重值\n* 最少活跃优先算法，适用节点之间有差异的情景\n\t* 优点，无权重值下，可以均衡节点之间的差异，不用去设置权重值\n\t* 缺点，算法复杂度较高\n* 一致性hash 适用于节点中有缓存数据的情景，相同的请求总是选择同样的节点\n\t* 缺点，算法复杂度较高\n* 本地IP调用优先 适用于本地同时提供服务的情景\n\n**综上，理论上，本地有自己要调用的服务配置本地IP调用优先，其他情况使用随机或者轮询都可以，默认随机算法不用管就好了**\n","slug":"揭秘京东微服务框架的负载均衡算法","published":1,"updated":"2021-07-13T12:27:08.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj83004681fy02rtw6o7","content":"<p>在京东广泛使用的微服务框架是JSF(Jingdong Service Framework)，中文名叫杰夫，今天给大家分享一下JSF的负载均衡算法。先串一下服务调用的过程，consumer在向provider发起远程调用之前会从注册中心拿到自己订阅的provider列表，然后和列表中的provider建立连接缓存起来，当发起调用的时候会从缓存的provider中选择一个进行调用，从多个provider选择一个进行调用，那么具体选择哪一个就用到了负载均衡算法，下面分别介绍一下JSF中的负载均衡算法：</p>\n<h3 id=\"随机\"><a href=\"#随机\" class=\"headerlink\" title=\"随机\"></a>随机</h3><ul>\n<li>无权重或权重相等则从provider列表中随机选择一个发起调用；</li>\n<li>有权重，假定总的权重值为x，随机生成[0-x)的偏移量，然后遍历减去provider列表的权重，当偏移量为负是选择当前的provider发起调用</li>\n</ul>\n<p>附伪代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ...初始化总权重值totalWeight和权重是否相同sameWeight,length为providerList长度</span><br><span class=\"line\"></span><br><span class=\"line\">if (totalWeight &gt; 0 &amp;&amp; !sameWeight) &#123;</span><br><span class=\"line\">    offset = random.nextInt(totalWeight);// 偏移量</span><br><span class=\"line\">    for (item : providerList) &#123;</span><br><span class=\"line\">        offset -= item.getWeight(i);</span><br><span class=\"line\">        if (offset &lt; 0) &#123;</span><br><span class=\"line\">            return item</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; else &#123;// 没有权重或权重相同随机选择</span><br><span class=\"line\">    return providerList.get(random.nextInt(length));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>算法复杂度分析： 有权重值或无权重值都需要先初始化总权重值及权重值是否相等的变量复杂度为O(n)；没有权重值随机选择一个发起调用复杂度为O(1)；有权重值且权重值不同通过偏移量随机选择的复杂度为O(n)；<strong>无权重时的复杂度为O(n)，有权重时总的复杂度为2O(n)</strong></p>\n<h3 id=\"轮询\"><a href=\"#轮询\" class=\"headerlink\" title=\"轮询\"></a>轮询</h3><ul>\n<li>无权重，方法级别的轮询，方法的调用次数和provider列表数量取余的结果为选择的provider</li>\n<li>有权重，在无权重的基础上，将调用次数和providerList中最大权重值取余，在List中筛选权重值大于余数的provider，最后调用次数和筛选结果长度取余的结果就是最终选择的provider<ul>\n<li>取余的操作是让结果在[0-被取余数)之间循环，第一次和最大权重取余，是让权重从小到大循环起来；第二次在筛选的结果中取余，就是在权重值大于第一次余数的结果中循环选择</li>\n<li>eg：第一次取余的结果大，筛选出来的List就相对较小，且List都是权重较大的provider，第二次取余是在权重较大的provider中进行轮询选择；反之，第一次取余的结果小，筛选出来的List相对较大，第二次取余是在相对较大的List中进行轮询选择；这样在轮询的基础上保证权重值大的provider的节点有更多次机会被轮询到</li>\n</ul>\n</li>\n</ul>\n<p>验证一下这个算法：假设有3个Provider A、B、C，他们的权重分别为3、3、4，进行10次调用试一下，每一行的结果分别为 调用次数、%最大权重、筛选出List长度、调用次数%List长度、最后选择</p>\n<ul>\n<li>0    0    3    0    A</li>\n<li>1    1    3    1    B</li>\n<li>2    2    3    2    C</li>\n<li>3    3    1    -        C</li>\n<li>4    0    3    1    B</li>\n<li>5    1    3    2    C</li>\n<li>6    2    3    0    A</li>\n<li>7    3    1    -    C</li>\n<li>8    0    3    2    B</li>\n<li>9    1    3    0    A</li>\n</ul>\n<p>可以看到结果10次调用，基本是轮询的状态，而且权重为4的C节点被调用4次</p>\n<p>附伪代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// key = className+alias+method</span><br><span class=\"line\">// 初始化最小和最大权重 minWeight maxWeight</span><br><span class=\"line\">if (maxWeight &gt; 0 &amp;&amp; minWeight &lt; maxWeight) &#123;</span><br><span class=\"line\">    currentWeight = count % maxWeight;</span><br><span class=\"line\">    subList = getSubList(providerList);// 选择权重大于当前权重的子集</span><br><span class=\"line\">    return subList.get(count%subList.size());</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    // 无权重或权重相等</span><br><span class=\"line\">    count = getAndIncrement(key);// 通过key获取调用次数并自增1</span><br><span class=\"line\">    return providerList.get(count%length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>算法复杂度分析：初始化最小和最大权重复杂度为O(n)，无权重或权重相同直接取余选择即可复杂度O(1)；有权重时需要筛选大于当前权重的自己复杂度为O(n)，对子集轮询算账复杂度为O(1)；<strong>无权重轮询的复杂度为O(n)，有权重轮询的复杂度为2O(n)</strong></p>\n<h3 id=\"最少活跃优先\"><a href=\"#最少活跃优先\" class=\"headerlink\" title=\"最少活跃优先\"></a>最少活跃优先</h3><p>每次选择最少活跃的provider发起调用，当最少活跃的节点多时，在最少活跃的节点中使用随机算法，有权重随机或者无权重随机选择；</p>\n<ul>\n<li><p>最少活跃可以理解为最少并发数，并发数少的节点表示节点处理请求的速度快，性能强</p>\n</li>\n<li><p>最少活跃数以最近100次连接中的失败数量为准，如果为0表示最近没有失败连接，直接返回真实的并发数；如果大于0，限制最大值为90，在[0,100)中产生随机数，当随机数比失败连接数大时返回真实的并发数，否自返回最大值；也就是说节点中最近100次连接有失败的记录，该节点则有一定几率不会被选中调用，且失败的连接数越多，不被选中的几率越大</p>\n<ul>\n<li>当节点快速抛异常会被认为是处理请求速度快的节点，所以最大失败值限制90，provider抛异常最低有10%选中的概率，等provider恢复并不再抛异常了恢复正常</li>\n</ul>\n</li>\n</ul>\n<p>附伪代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 初始化 最小活跃数leastActive、最小活跃数的数量leastCount等</span><br><span class=\"line\"></span><br><span class=\"line\">if (leastCount == 1) &#123;</span><br><span class=\"line\">    // 最少活跃数的provider列表只有1个直接返回</span><br><span class=\"line\">&#125; else  &#123;</span><br><span class=\"line\">\t // 采用随机算法</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>算法复杂度分析：初始化工作复杂度O(n)，最少活跃数量为1直接返回O(1)，否则使用随机算法；<strong>最少活跃优先算法，无权重情况下2O(n)，有权重情况下3O(n)</strong></p>\n<h3 id=\"一致性hash\"><a href=\"#一致性hash\" class=\"headerlink\" title=\"一致性hash\"></a>一致性hash</h3><ul>\n<li>以方法维度定义了选择器，保存映射关系，以interfaceName+methodName为key，自定义的选择器为value；</li>\n<li>当首次对一个方法发起调用或者providerList发生变化时，初始化选择器<ul>\n<li>每个节点创建128个虚拟节点，以 ip+port+index 为key得到128个hash值，保存虚拟节点的映射关系（要有序）</li>\n</ul>\n</li>\n<li>如果当前方法存在选择器且providerList没变，用方法的第一个参数得到hash值，从虚拟节点的映射中get，命中直接返回，不命中选择第一个大于该hash值的节点，没有则选择虚拟节点中的第一个</li>\n</ul>\n<p>hash算法：通过对一个key使用MD5算法得到一个摘要，这个摘要是byte[16]类型，将数组按照索引 0-3 4-7 8-11 12-15 分成4段，每一个段有4个byte，组成一个32位的hash值，一个摘要可以生成4个hash值</p>\n<p>附伪代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selector = selectorMap.get(key);</span><br><span class=\"line\">if (selector == null || selector.hash() != hashCode)&#123;</span><br><span class=\"line\">    // 首次调用或者providerList发生变化</span><br><span class=\"line\">    selectorMap.put(key, new Selector());</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">return selecotr.select();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Selector&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Selector()&#123;</span><br><span class=\"line\">        // 初始化选择器</span><br><span class=\"line\">        for(item : providerList) &#123;</span><br><span class=\"line\">            for (0 : 31) &#123;</span><br><span class=\"line\">                digest = md5.digist(key);// byte[16]类型，4个hash值</span><br><span class=\"line\">                for (0 : 3) &#123;</span><br><span class=\"line\">                    virtualNodes.put(hash(digest,index));// hash()就是将摘要分段返回index个段作为hash值</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public Provider select()&#123;</span><br><span class=\"line\">        digest = md5.digest(arg[0]);// 方法的第一个参数作为key生成摘要</span><br><span class=\"line\">        hashCode = hash(digest,0);// 将摘要的第一个端最为hash值</span><br><span class=\"line\">        provider = virtualNodes.get(hashCode)</span><br><span class=\"line\">        if (provider == null) &#123;</span><br><span class=\"line\">            // 选择大于hashCode的第一个key对应的节点，没有就选择第一个key的节点</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return provider;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>算法复杂度分析：<strong>在最坏的情况下，每次选择都要初始化选择器的复杂度为128O(n)，当provider列表不变时只需进行1次初始化，后续的选择操作复杂度为O(1)</strong></p>\n<h3 id=\"本地优先随机算法\"><a href=\"#本地优先随机算法\" class=\"headerlink\" title=\"本地优先随机算法\"></a>本地优先随机算法</h3><p>判断provider列表中是否存在本地ip，有则发起调用，没有就使用随机算法</p>\n<p>算法复杂度分析：<strong>最坏的情况下每次都找不到本地ip则比随机算法多O(n)的复杂度，如果能找到本地ip的复杂度为O(n)</strong></p>\n<p>总结：</p>\n<ul>\n<li>随机算法和轮询算法，适用于节点差异不大的情景，节点有差异需要设置权重值<ul>\n<li>优点，简单高效</li>\n<li>缺点，需要找到最合适的权重值</li>\n</ul>\n</li>\n<li>最少活跃优先算法，适用节点之间有差异的情景<ul>\n<li>优点，无权重值下，可以均衡节点之间的差异，不用去设置权重值</li>\n<li>缺点，算法复杂度较高</li>\n</ul>\n</li>\n<li>一致性hash 适用于节点中有缓存数据的情景，相同的请求总是选择同样的节点<ul>\n<li>缺点，算法复杂度较高</li>\n</ul>\n</li>\n<li>本地IP调用优先 适用于本地同时提供服务的情景</li>\n</ul>\n<p><strong>综上，理论上，本地有自己要调用的服务配置本地IP调用优先，其他情况使用随机或者轮询都可以，默认随机算法不用管就好了</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在京东广泛使用的微服务框架是JSF(Jingdong Service Framework)，中文名叫杰夫，今天给大家分享一下JSF的负载均衡算法。先串一下服务调用的过程，consumer在向provider发起远程调用之前会从注册中心拿到自己订阅的provider列表，然后和列表中的provider建立连接缓存起来，当发起调用的时候会从缓存的provider中选择一个进行调用，从多个provider选择一个进行调用，那么具体选择哪一个就用到了负载均衡算法，下面分别介绍一下JSF中的负载均衡算法：</p>\n<h3 id=\"随机\"><a href=\"#随机\" class=\"headerlink\" title=\"随机\"></a>随机</h3><ul>\n<li>无权重或权重相等则从provider列表中随机选择一个发起调用；</li>\n<li>有权重，假定总的权重值为x，随机生成[0-x)的偏移量，然后遍历减去provider列表的权重，当偏移量为负是选择当前的provider发起调用</li>\n</ul>\n<p>附伪代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ...初始化总权重值totalWeight和权重是否相同sameWeight,length为providerList长度</span><br><span class=\"line\"></span><br><span class=\"line\">if (totalWeight &gt; 0 &amp;&amp; !sameWeight) &#123;</span><br><span class=\"line\">    offset = random.nextInt(totalWeight);// 偏移量</span><br><span class=\"line\">    for (item : providerList) &#123;</span><br><span class=\"line\">        offset -= item.getWeight(i);</span><br><span class=\"line\">        if (offset &lt; 0) &#123;</span><br><span class=\"line\">            return item</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; else &#123;// 没有权重或权重相同随机选择</span><br><span class=\"line\">    return providerList.get(random.nextInt(length));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>算法复杂度分析： 有权重值或无权重值都需要先初始化总权重值及权重值是否相等的变量复杂度为O(n)；没有权重值随机选择一个发起调用复杂度为O(1)；有权重值且权重值不同通过偏移量随机选择的复杂度为O(n)；<strong>无权重时的复杂度为O(n)，有权重时总的复杂度为2O(n)</strong></p>\n<h3 id=\"轮询\"><a href=\"#轮询\" class=\"headerlink\" title=\"轮询\"></a>轮询</h3><ul>\n<li>无权重，方法级别的轮询，方法的调用次数和provider列表数量取余的结果为选择的provider</li>\n<li>有权重，在无权重的基础上，将调用次数和providerList中最大权重值取余，在List中筛选权重值大于余数的provider，最后调用次数和筛选结果长度取余的结果就是最终选择的provider<ul>\n<li>取余的操作是让结果在[0-被取余数)之间循环，第一次和最大权重取余，是让权重从小到大循环起来；第二次在筛选的结果中取余，就是在权重值大于第一次余数的结果中循环选择</li>\n<li>eg：第一次取余的结果大，筛选出来的List就相对较小，且List都是权重较大的provider，第二次取余是在权重较大的provider中进行轮询选择；反之，第一次取余的结果小，筛选出来的List相对较大，第二次取余是在相对较大的List中进行轮询选择；这样在轮询的基础上保证权重值大的provider的节点有更多次机会被轮询到</li>\n</ul>\n</li>\n</ul>\n<p>验证一下这个算法：假设有3个Provider A、B、C，他们的权重分别为3、3、4，进行10次调用试一下，每一行的结果分别为 调用次数、%最大权重、筛选出List长度、调用次数%List长度、最后选择</p>\n<ul>\n<li>0    0    3    0    A</li>\n<li>1    1    3    1    B</li>\n<li>2    2    3    2    C</li>\n<li>3    3    1    -        C</li>\n<li>4    0    3    1    B</li>\n<li>5    1    3    2    C</li>\n<li>6    2    3    0    A</li>\n<li>7    3    1    -    C</li>\n<li>8    0    3    2    B</li>\n<li>9    1    3    0    A</li>\n</ul>\n<p>可以看到结果10次调用，基本是轮询的状态，而且权重为4的C节点被调用4次</p>\n<p>附伪代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// key = className+alias+method</span><br><span class=\"line\">// 初始化最小和最大权重 minWeight maxWeight</span><br><span class=\"line\">if (maxWeight &gt; 0 &amp;&amp; minWeight &lt; maxWeight) &#123;</span><br><span class=\"line\">    currentWeight = count % maxWeight;</span><br><span class=\"line\">    subList = getSubList(providerList);// 选择权重大于当前权重的子集</span><br><span class=\"line\">    return subList.get(count%subList.size());</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    // 无权重或权重相等</span><br><span class=\"line\">    count = getAndIncrement(key);// 通过key获取调用次数并自增1</span><br><span class=\"line\">    return providerList.get(count%length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>算法复杂度分析：初始化最小和最大权重复杂度为O(n)，无权重或权重相同直接取余选择即可复杂度O(1)；有权重时需要筛选大于当前权重的自己复杂度为O(n)，对子集轮询算账复杂度为O(1)；<strong>无权重轮询的复杂度为O(n)，有权重轮询的复杂度为2O(n)</strong></p>\n<h3 id=\"最少活跃优先\"><a href=\"#最少活跃优先\" class=\"headerlink\" title=\"最少活跃优先\"></a>最少活跃优先</h3><p>每次选择最少活跃的provider发起调用，当最少活跃的节点多时，在最少活跃的节点中使用随机算法，有权重随机或者无权重随机选择；</p>\n<ul>\n<li><p>最少活跃可以理解为最少并发数，并发数少的节点表示节点处理请求的速度快，性能强</p>\n</li>\n<li><p>最少活跃数以最近100次连接中的失败数量为准，如果为0表示最近没有失败连接，直接返回真实的并发数；如果大于0，限制最大值为90，在[0,100)中产生随机数，当随机数比失败连接数大时返回真实的并发数，否自返回最大值；也就是说节点中最近100次连接有失败的记录，该节点则有一定几率不会被选中调用，且失败的连接数越多，不被选中的几率越大</p>\n<ul>\n<li>当节点快速抛异常会被认为是处理请求速度快的节点，所以最大失败值限制90，provider抛异常最低有10%选中的概率，等provider恢复并不再抛异常了恢复正常</li>\n</ul>\n</li>\n</ul>\n<p>附伪代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 初始化 最小活跃数leastActive、最小活跃数的数量leastCount等</span><br><span class=\"line\"></span><br><span class=\"line\">if (leastCount == 1) &#123;</span><br><span class=\"line\">    // 最少活跃数的provider列表只有1个直接返回</span><br><span class=\"line\">&#125; else  &#123;</span><br><span class=\"line\">\t // 采用随机算法</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>算法复杂度分析：初始化工作复杂度O(n)，最少活跃数量为1直接返回O(1)，否则使用随机算法；<strong>最少活跃优先算法，无权重情况下2O(n)，有权重情况下3O(n)</strong></p>\n<h3 id=\"一致性hash\"><a href=\"#一致性hash\" class=\"headerlink\" title=\"一致性hash\"></a>一致性hash</h3><ul>\n<li>以方法维度定义了选择器，保存映射关系，以interfaceName+methodName为key，自定义的选择器为value；</li>\n<li>当首次对一个方法发起调用或者providerList发生变化时，初始化选择器<ul>\n<li>每个节点创建128个虚拟节点，以 ip+port+index 为key得到128个hash值，保存虚拟节点的映射关系（要有序）</li>\n</ul>\n</li>\n<li>如果当前方法存在选择器且providerList没变，用方法的第一个参数得到hash值，从虚拟节点的映射中get，命中直接返回，不命中选择第一个大于该hash值的节点，没有则选择虚拟节点中的第一个</li>\n</ul>\n<p>hash算法：通过对一个key使用MD5算法得到一个摘要，这个摘要是byte[16]类型，将数组按照索引 0-3 4-7 8-11 12-15 分成4段，每一个段有4个byte，组成一个32位的hash值，一个摘要可以生成4个hash值</p>\n<p>附伪代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selector = selectorMap.get(key);</span><br><span class=\"line\">if (selector == null || selector.hash() != hashCode)&#123;</span><br><span class=\"line\">    // 首次调用或者providerList发生变化</span><br><span class=\"line\">    selectorMap.put(key, new Selector());</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">return selecotr.select();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Selector&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Selector()&#123;</span><br><span class=\"line\">        // 初始化选择器</span><br><span class=\"line\">        for(item : providerList) &#123;</span><br><span class=\"line\">            for (0 : 31) &#123;</span><br><span class=\"line\">                digest = md5.digist(key);// byte[16]类型，4个hash值</span><br><span class=\"line\">                for (0 : 3) &#123;</span><br><span class=\"line\">                    virtualNodes.put(hash(digest,index));// hash()就是将摘要分段返回index个段作为hash值</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public Provider select()&#123;</span><br><span class=\"line\">        digest = md5.digest(arg[0]);// 方法的第一个参数作为key生成摘要</span><br><span class=\"line\">        hashCode = hash(digest,0);// 将摘要的第一个端最为hash值</span><br><span class=\"line\">        provider = virtualNodes.get(hashCode)</span><br><span class=\"line\">        if (provider == null) &#123;</span><br><span class=\"line\">            // 选择大于hashCode的第一个key对应的节点，没有就选择第一个key的节点</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return provider;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>算法复杂度分析：<strong>在最坏的情况下，每次选择都要初始化选择器的复杂度为128O(n)，当provider列表不变时只需进行1次初始化，后续的选择操作复杂度为O(1)</strong></p>\n<h3 id=\"本地优先随机算法\"><a href=\"#本地优先随机算法\" class=\"headerlink\" title=\"本地优先随机算法\"></a>本地优先随机算法</h3><p>判断provider列表中是否存在本地ip，有则发起调用，没有就使用随机算法</p>\n<p>算法复杂度分析：<strong>最坏的情况下每次都找不到本地ip则比随机算法多O(n)的复杂度，如果能找到本地ip的复杂度为O(n)</strong></p>\n<p>总结：</p>\n<ul>\n<li>随机算法和轮询算法，适用于节点差异不大的情景，节点有差异需要设置权重值<ul>\n<li>优点，简单高效</li>\n<li>缺点，需要找到最合适的权重值</li>\n</ul>\n</li>\n<li>最少活跃优先算法，适用节点之间有差异的情景<ul>\n<li>优点，无权重值下，可以均衡节点之间的差异，不用去设置权重值</li>\n<li>缺点，算法复杂度较高</li>\n</ul>\n</li>\n<li>一致性hash 适用于节点中有缓存数据的情景，相同的请求总是选择同样的节点<ul>\n<li>缺点，算法复杂度较高</li>\n</ul>\n</li>\n<li>本地IP调用优先 适用于本地同时提供服务的情景</li>\n</ul>\n<p><strong>综上，理论上，本地有自己要调用的服务配置本地IP调用优先，其他情况使用随机或者轮询都可以，默认随机算法不用管就好了</strong></p>\n"},{"title":"蓦然回首servlet","author":"YyWang","date":"2020-06-11T09:16:07.000Z","_content":"\n听到Servlet我既熟悉又陌生，我第一次接触还是在2013年，当时对于课程设计水平的我来说仅仅有个感性的认识，后来接触了ssh之后好像已经疏远了servlet，我只在写业务逻辑一直到现在，我对于servlet的印象还停留在声明，在web.xml中配置，写mapping这些，说明spring的解耦是真的强👍，让我对servlet的认识止步榆次，今天就回首看看这位“老朋友”，就大概梳理一下吧\n\n* Servlet是一个接口，服务器用来处理Http的请求的，接口中主要service方法用来处理http请求，init和destroy方法表示servlet初始化和销毁是调用，总结一句话来说，servlet是一种规范，是服务器处理Http请求的规范。\n\n* Tomcat就是实现servlet规范(接口)的一个🌰，Tomcat中实现了servlet容器用来管理servlet，当收到Http请求后将请求封装成request对象，并根据请求的信息找到对应servlet(web.xml)，将请求交给对应的servlet处理，并将处理结果的response对象转化成Http的协议返回给浏览器\n\n![upload successful](/images/servlet.png)\n\n0. 叫容器的就可以理解为字面意思，用来存放一类东西；web容器里存储web应用，Servlet容器里存储Servlet，Spring容器存放bean等等等等\n1. Tomcat就是一个web容器，其中包含多个web应用，每个应用在Tomcat启动时都会初始化一个servlet容器，用来保存应用下的servlet；Tomcat启动后会监听在8080端口，等待接收请求的到来，在收到请求后根据请求信息首先到想要访问的目标web应用中的web.xml文件里找到目标Servlet，并将Http请求封装成request对象交给Servlet处理（容器中如果没有相应的servlet就会先初始化--懒加载）\n2. servlet处理请求是调用的service方法，在SSM中我们通常会在web.xml中配置springMVC的DispatcherServlet用来处理所有请求(servletMapping为*)，这个servlet根据请求对象，将这个request封装成Spring框架中的request对象，从SpringMVC中找到对应Controller处理\n\t* a. 当初始化这个servlet会触发初始化SpringMVC容器，SpringMVC容器会初始化Spring容器，并将Spring容器设置为自己的父容器，这时候就是熟悉的Spring容器的加载\n\t* b. 这里SpringMVC容器里管理的时ControllerBean，Spring容器中管理端的是ServiceBean和DAOBean这些，（这些bean是创建顺序我还没研究，挖坑→_→）由于是父子关系SpringMVC可以访问Spring容器中的bean，反过来就不可以\n3. 这步就是熟悉的Controller层调用Spring容器中的Service逻辑，在调用DAO层逻辑持久化，将结果response返回给SpringMVC\n4. SpringMVC将response对象转为servlet规范里的response对象返回给servlet\n5. Servlet将response转化为Http的响应交给Web容器Tomcat，最终由Tomcat返回给浏览器","source":"_posts/蓦然回首servlet.md","raw":"title: 蓦然回首servlet\nauthor: YyWang\ntags: Java\ncategories: Java\ndate: 2020-06-11 17:16:07\n---\n\n听到Servlet我既熟悉又陌生，我第一次接触还是在2013年，当时对于课程设计水平的我来说仅仅有个感性的认识，后来接触了ssh之后好像已经疏远了servlet，我只在写业务逻辑一直到现在，我对于servlet的印象还停留在声明，在web.xml中配置，写mapping这些，说明spring的解耦是真的强👍，让我对servlet的认识止步榆次，今天就回首看看这位“老朋友”，就大概梳理一下吧\n\n* Servlet是一个接口，服务器用来处理Http的请求的，接口中主要service方法用来处理http请求，init和destroy方法表示servlet初始化和销毁是调用，总结一句话来说，servlet是一种规范，是服务器处理Http请求的规范。\n\n* Tomcat就是实现servlet规范(接口)的一个🌰，Tomcat中实现了servlet容器用来管理servlet，当收到Http请求后将请求封装成request对象，并根据请求的信息找到对应servlet(web.xml)，将请求交给对应的servlet处理，并将处理结果的response对象转化成Http的协议返回给浏览器\n\n![upload successful](/images/servlet.png)\n\n0. 叫容器的就可以理解为字面意思，用来存放一类东西；web容器里存储web应用，Servlet容器里存储Servlet，Spring容器存放bean等等等等\n1. Tomcat就是一个web容器，其中包含多个web应用，每个应用在Tomcat启动时都会初始化一个servlet容器，用来保存应用下的servlet；Tomcat启动后会监听在8080端口，等待接收请求的到来，在收到请求后根据请求信息首先到想要访问的目标web应用中的web.xml文件里找到目标Servlet，并将Http请求封装成request对象交给Servlet处理（容器中如果没有相应的servlet就会先初始化--懒加载）\n2. servlet处理请求是调用的service方法，在SSM中我们通常会在web.xml中配置springMVC的DispatcherServlet用来处理所有请求(servletMapping为*)，这个servlet根据请求对象，将这个request封装成Spring框架中的request对象，从SpringMVC中找到对应Controller处理\n\t* a. 当初始化这个servlet会触发初始化SpringMVC容器，SpringMVC容器会初始化Spring容器，并将Spring容器设置为自己的父容器，这时候就是熟悉的Spring容器的加载\n\t* b. 这里SpringMVC容器里管理的时ControllerBean，Spring容器中管理端的是ServiceBean和DAOBean这些，（这些bean是创建顺序我还没研究，挖坑→_→）由于是父子关系SpringMVC可以访问Spring容器中的bean，反过来就不可以\n3. 这步就是熟悉的Controller层调用Spring容器中的Service逻辑，在调用DAO层逻辑持久化，将结果response返回给SpringMVC\n4. SpringMVC将response对象转为servlet规范里的response对象返回给servlet\n5. Servlet将response转化为Http的响应交给Web容器Tomcat，最终由Tomcat返回给浏览器","slug":"蓦然回首servlet","published":1,"updated":"2021-07-13T12:27:08.596Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj84004a81fymww06v13","content":"<p>听到Servlet我既熟悉又陌生，我第一次接触还是在2013年，当时对于课程设计水平的我来说仅仅有个感性的认识，后来接触了ssh之后好像已经疏远了servlet，我只在写业务逻辑一直到现在，我对于servlet的印象还停留在声明，在web.xml中配置，写mapping这些，说明spring的解耦是真的强👍，让我对servlet的认识止步榆次，今天就回首看看这位“老朋友”，就大概梳理一下吧</p>\n<ul>\n<li><p>Servlet是一个接口，服务器用来处理Http的请求的，接口中主要service方法用来处理http请求，init和destroy方法表示servlet初始化和销毁是调用，总结一句话来说，servlet是一种规范，是服务器处理Http请求的规范。</p>\n</li>\n<li><p>Tomcat就是实现servlet规范(接口)的一个🌰，Tomcat中实现了servlet容器用来管理servlet，当收到Http请求后将请求封装成request对象，并根据请求的信息找到对应servlet(web.xml)，将请求交给对应的servlet处理，并将处理结果的response对象转化成Http的协议返回给浏览器</p>\n</li>\n</ul>\n<p><img src=\"/images/servlet.png\" alt=\"upload successful\"></p>\n<ol start=\"0\">\n<li>叫容器的就可以理解为字面意思，用来存放一类东西；web容器里存储web应用，Servlet容器里存储Servlet，Spring容器存放bean等等等等</li>\n<li>Tomcat就是一个web容器，其中包含多个web应用，每个应用在Tomcat启动时都会初始化一个servlet容器，用来保存应用下的servlet；Tomcat启动后会监听在8080端口，等待接收请求的到来，在收到请求后根据请求信息首先到想要访问的目标web应用中的web.xml文件里找到目标Servlet，并将Http请求封装成request对象交给Servlet处理（容器中如果没有相应的servlet就会先初始化–懒加载）</li>\n<li>servlet处理请求是调用的service方法，在SSM中我们通常会在web.xml中配置springMVC的DispatcherServlet用来处理所有请求(servletMapping为*)，这个servlet根据请求对象，将这个request封装成Spring框架中的request对象，从SpringMVC中找到对应Controller处理<ul>\n<li>a. 当初始化这个servlet会触发初始化SpringMVC容器，SpringMVC容器会初始化Spring容器，并将Spring容器设置为自己的父容器，这时候就是熟悉的Spring容器的加载</li>\n<li>b. 这里SpringMVC容器里管理的时ControllerBean，Spring容器中管理端的是ServiceBean和DAOBean这些，（这些bean是创建顺序我还没研究，挖坑→_→）由于是父子关系SpringMVC可以访问Spring容器中的bean，反过来就不可以</li>\n</ul>\n</li>\n<li>这步就是熟悉的Controller层调用Spring容器中的Service逻辑，在调用DAO层逻辑持久化，将结果response返回给SpringMVC</li>\n<li>SpringMVC将response对象转为servlet规范里的response对象返回给servlet</li>\n<li>Servlet将response转化为Http的响应交给Web容器Tomcat，最终由Tomcat返回给浏览器</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>听到Servlet我既熟悉又陌生，我第一次接触还是在2013年，当时对于课程设计水平的我来说仅仅有个感性的认识，后来接触了ssh之后好像已经疏远了servlet，我只在写业务逻辑一直到现在，我对于servlet的印象还停留在声明，在web.xml中配置，写mapping这些，说明spring的解耦是真的强👍，让我对servlet的认识止步榆次，今天就回首看看这位“老朋友”，就大概梳理一下吧</p>\n<ul>\n<li><p>Servlet是一个接口，服务器用来处理Http的请求的，接口中主要service方法用来处理http请求，init和destroy方法表示servlet初始化和销毁是调用，总结一句话来说，servlet是一种规范，是服务器处理Http请求的规范。</p>\n</li>\n<li><p>Tomcat就是实现servlet规范(接口)的一个🌰，Tomcat中实现了servlet容器用来管理servlet，当收到Http请求后将请求封装成request对象，并根据请求的信息找到对应servlet(web.xml)，将请求交给对应的servlet处理，并将处理结果的response对象转化成Http的协议返回给浏览器</p>\n</li>\n</ul>\n<p><img src=\"/images/servlet.png\" alt=\"upload successful\"></p>\n<ol start=\"0\">\n<li>叫容器的就可以理解为字面意思，用来存放一类东西；web容器里存储web应用，Servlet容器里存储Servlet，Spring容器存放bean等等等等</li>\n<li>Tomcat就是一个web容器，其中包含多个web应用，每个应用在Tomcat启动时都会初始化一个servlet容器，用来保存应用下的servlet；Tomcat启动后会监听在8080端口，等待接收请求的到来，在收到请求后根据请求信息首先到想要访问的目标web应用中的web.xml文件里找到目标Servlet，并将Http请求封装成request对象交给Servlet处理（容器中如果没有相应的servlet就会先初始化–懒加载）</li>\n<li>servlet处理请求是调用的service方法，在SSM中我们通常会在web.xml中配置springMVC的DispatcherServlet用来处理所有请求(servletMapping为*)，这个servlet根据请求对象，将这个request封装成Spring框架中的request对象，从SpringMVC中找到对应Controller处理<ul>\n<li>a. 当初始化这个servlet会触发初始化SpringMVC容器，SpringMVC容器会初始化Spring容器，并将Spring容器设置为自己的父容器，这时候就是熟悉的Spring容器的加载</li>\n<li>b. 这里SpringMVC容器里管理的时ControllerBean，Spring容器中管理端的是ServiceBean和DAOBean这些，（这些bean是创建顺序我还没研究，挖坑→_→）由于是父子关系SpringMVC可以访问Spring容器中的bean，反过来就不可以</li>\n</ul>\n</li>\n<li>这步就是熟悉的Controller层调用Spring容器中的Service逻辑，在调用DAO层逻辑持久化，将结果response返回给SpringMVC</li>\n<li>SpringMVC将response对象转为servlet规范里的response对象返回给servlet</li>\n<li>Servlet将response转化为Http的响应交给Web容器Tomcat，最终由Tomcat返回给浏览器</li>\n</ol>\n"},{"title":"踩坑记录","author":"YyWang","date":"2019-11-06T05:52:26.000Z","catagories":"MyBatis","_content":"#### 在xml文件中if条件判断字符串相等时要用双引号而不是单引号\n * 错误栗子： \n \n ```\n <if test=\"params.appName != null and params.appName != '' and params.appName != '*'\">\n ```\n * 正确栗子： \n \n ```\n <if test='params.appName != null and params.appName != \"\" and params.appName != \"*\"'>\n ```\n * MyBatis会将'*'转化为数字，并且会报NumberFormatException\n \n * 原因百度了一下大概是这样，MyBatis使用OGNL表达式来解析，在OGNL表达式中单引号和其中的字符会被解析成一个字符，java对于没有引号的等式/不等式认为是数字类型并进行转化\n","source":"_posts/踩坑记录.md","raw":"title: 踩坑记录\nauthor: YyWang\ndate: 2019-11-06 13:52:26\ntags: MyBatis\ncatagories: MyBatis\n---\n#### 在xml文件中if条件判断字符串相等时要用双引号而不是单引号\n * 错误栗子： \n \n ```\n <if test=\"params.appName != null and params.appName != '' and params.appName != '*'\">\n ```\n * 正确栗子： \n \n ```\n <if test='params.appName != null and params.appName != \"\" and params.appName != \"*\"'>\n ```\n * MyBatis会将'*'转化为数字，并且会报NumberFormatException\n \n * 原因百度了一下大概是这样，MyBatis使用OGNL表达式来解析，在OGNL表达式中单引号和其中的字符会被解析成一个字符，java对于没有引号的等式/不等式认为是数字类型并进行转化\n","slug":"踩坑记录","published":1,"updated":"2021-07-13T12:27:08.596Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj85004d81fybm9j1vkl","content":"<h4 id=\"在xml文件中if条件判断字符串相等时要用双引号而不是单引号\"><a href=\"#在xml文件中if条件判断字符串相等时要用双引号而不是单引号\" class=\"headerlink\" title=\"在xml文件中if条件判断字符串相等时要用双引号而不是单引号\"></a>在xml文件中if条件判断字符串相等时要用双引号而不是单引号</h4><ul>\n<li><p>错误栗子： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;if test=&quot;params.appName != null and params.appName != &apos;&apos; and params.appName != &apos;*&apos;&quot;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>正确栗子： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;if test=&apos;params.appName != null and params.appName != &quot;&quot; and params.appName != &quot;*&quot;&apos;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MyBatis会将’*’转化为数字，并且会报NumberFormatException</p>\n</li>\n<li><p>原因百度了一下大概是这样，MyBatis使用OGNL表达式来解析，在OGNL表达式中单引号和其中的字符会被解析成一个字符，java对于没有引号的等式/不等式认为是数字类型并进行转化</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"在xml文件中if条件判断字符串相等时要用双引号而不是单引号\"><a href=\"#在xml文件中if条件判断字符串相等时要用双引号而不是单引号\" class=\"headerlink\" title=\"在xml文件中if条件判断字符串相等时要用双引号而不是单引号\"></a>在xml文件中if条件判断字符串相等时要用双引号而不是单引号</h4><ul>\n<li><p>错误栗子： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;if test=&quot;params.appName != null and params.appName != &apos;&apos; and params.appName != &apos;*&apos;&quot;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>正确栗子： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;if test=&apos;params.appName != null and params.appName != &quot;&quot; and params.appName != &quot;*&quot;&apos;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MyBatis会将’*’转化为数字，并且会报NumberFormatException</p>\n</li>\n<li><p>原因百度了一下大概是这样，MyBatis使用OGNL表达式来解析，在OGNL表达式中单引号和其中的字符会被解析成一个字符，java对于没有引号的等式/不等式认为是数字类型并进行转化</p>\n</li>\n</ul>\n"},{"title":"观察者模式","author":"YyWang","date":"2019-09-19T11:43:41.000Z","_content":"### 观察者模式\n\n包含观察者和被观察者两个部分，原理也很简单，被观察者类中维护观察者对象的集合，当感兴趣的事件发生，遍历观察者的集合回调观察者对象中的相应方法（update）即可\n\n被观察者除了维护观察者的集合外，还有对该集合的增（注册）、删（取消）及通知等操作\n\n#### 实现\n##### 观察者\n```\npublic interface Observer {\n    update(String msg);\n}\n```\n```\npublic class ObserverImpl implements Observer {\n\tprivate String name = \"\";\n\tObserver(String name){\n\t\tthis.name = name;\n\t}\n\t@override\n\tpublic void update(String msg){\n\t\t// 感兴趣的事件发生\n\t\tSystem.out.println(msg);\n\t}\n}\n```\n\n##### 被观察者\n```\npublic interface Observed{\n\tregisterObserver(Observer observer);\n\tremoveObserver(Observer observer);\n\tnotify(Observer observer);\n\tnotifyAll();\n}\n```\n```\npublic class ObservedImpl implements Observed{\n    private static List<Observer> list = new ArrayList<>();\n    \n    @Override\n    public void registerObserver(Observer observer){\n        list.add(observer);\n    }\n    \n    @Override\n    public void removeObserver(Observer observer){\n        list.remove(Observer);\n    }\n    \n    @Override\n    public void notify(Observer observer){\n        list.stream().filter(n -> n.equals(observer)).update(\"notify\");\n    }\n    \n    @Override\n    public void notifyAll(){\n        list.stream().map(n -> n.update(\"notifyAll\"));\n    }\n}\n```\n\n##### 测试\n```\nObserved o = new ObservedImpl();\nObserver o1 = new ObserverImpl(\"o1\");\nObserver o2 = new ObserverImpl(\"o2\");\no.registerObserver(o1);\no.registerObserver(o2);\no.notifyAll();\n```\n\n#### Observer 和 Observable \njdk中提供了观察者模式的API，java.util包下的Observer接口和Observable类，原理是一样的，这里只是进行的封装\n\n上源码\n##### Observer\n```\npublic interface Observer {\n    void update(Observable o, Object arg);\n}\n```\n和上面观察者的部分一样，实现一个回调方法，当感兴趣的事件发生回调该方法\n\n使用时，实现Observer接口，重写update方法即可，当感兴趣的事件发生会回调update方法，这里会写增加的业务逻辑\n\n##### Observable\n```\npublic class Observable {\n    private boolean changed = false;\n    private Vector<Observer> obs;\n    \n    public Observable() {\n        obs = new Vector<>();\n    }\n\n    public synchronized void addObserver(Observer o) {\n        if (o == null)\n            throw new NullPointerException();\n        if (!obs.contains(o)) {\n            obs.addElement(o);\n        }\n    }\n\n    public synchronized void deleteObserver(Observer o) {\n        obs.removeElement(o);\n    }\n\n    public void notifyObservers() {\n        notifyObservers(null);\n    }\n\n    public void notifyObservers(Object arg) {\n        Object[] arrLocal;\n\n        synchronized (this) {\n            if (!changed)\n                return;\n            arrLocal = obs.toArray();\n            clearChanged();\n        }\n\n        for (int i = arrLocal.length-1; i>=0; i--)\n            ((Observer)arrLocal[i]).update(this, arg);\n    }\n\n    public synchronized void deleteObservers() {\n        obs.removeAllElements();\n    }\n\n    protected synchronized void setChanged() {\n        changed = true;\n    }\n\n    protected synchronized void clearChanged() {\n        changed = false;\n    }\n\n    public synchronized boolean hasChanged() {\n        return changed;\n    }\n     \n    public synchronized int countObservers() {\n        return obs.size();\n    }\n}\n```\n\n* 同样，这里维护一个观察者的集合Vector，这里考虑了线程安全的问题，说明这种方式实现的观察者模式是线程安全的\n* 除此之外还有一个bool类型的变量changed表示被观察者是否发生改变（也就是感兴趣的事件是否发生），通过该标志来通知观察者对象\n* 同样，该类里有针对观察者集合的增、删、通知的操作，还多了对changed标志修改的操作；除此之外所有方法都有synchronized关键字，进一步说明了这种方式的观察者模式是线程安全的\n* 使用时，在要被观察的类中继承Observable类，再添加实现了Observer接口的观察者对象，调用setChanged()方法改变changed标志后通过调用notify()方法进行通知\n","source":"_posts/观察者模式.md","raw":"title: 观察者模式\nauthor: YyWang\ndate: 2019-09-19 19:43:41\ntags: 设计模式\ncategories: 设计模式\n---\n### 观察者模式\n\n包含观察者和被观察者两个部分，原理也很简单，被观察者类中维护观察者对象的集合，当感兴趣的事件发生，遍历观察者的集合回调观察者对象中的相应方法（update）即可\n\n被观察者除了维护观察者的集合外，还有对该集合的增（注册）、删（取消）及通知等操作\n\n#### 实现\n##### 观察者\n```\npublic interface Observer {\n    update(String msg);\n}\n```\n```\npublic class ObserverImpl implements Observer {\n\tprivate String name = \"\";\n\tObserver(String name){\n\t\tthis.name = name;\n\t}\n\t@override\n\tpublic void update(String msg){\n\t\t// 感兴趣的事件发生\n\t\tSystem.out.println(msg);\n\t}\n}\n```\n\n##### 被观察者\n```\npublic interface Observed{\n\tregisterObserver(Observer observer);\n\tremoveObserver(Observer observer);\n\tnotify(Observer observer);\n\tnotifyAll();\n}\n```\n```\npublic class ObservedImpl implements Observed{\n    private static List<Observer> list = new ArrayList<>();\n    \n    @Override\n    public void registerObserver(Observer observer){\n        list.add(observer);\n    }\n    \n    @Override\n    public void removeObserver(Observer observer){\n        list.remove(Observer);\n    }\n    \n    @Override\n    public void notify(Observer observer){\n        list.stream().filter(n -> n.equals(observer)).update(\"notify\");\n    }\n    \n    @Override\n    public void notifyAll(){\n        list.stream().map(n -> n.update(\"notifyAll\"));\n    }\n}\n```\n\n##### 测试\n```\nObserved o = new ObservedImpl();\nObserver o1 = new ObserverImpl(\"o1\");\nObserver o2 = new ObserverImpl(\"o2\");\no.registerObserver(o1);\no.registerObserver(o2);\no.notifyAll();\n```\n\n#### Observer 和 Observable \njdk中提供了观察者模式的API，java.util包下的Observer接口和Observable类，原理是一样的，这里只是进行的封装\n\n上源码\n##### Observer\n```\npublic interface Observer {\n    void update(Observable o, Object arg);\n}\n```\n和上面观察者的部分一样，实现一个回调方法，当感兴趣的事件发生回调该方法\n\n使用时，实现Observer接口，重写update方法即可，当感兴趣的事件发生会回调update方法，这里会写增加的业务逻辑\n\n##### Observable\n```\npublic class Observable {\n    private boolean changed = false;\n    private Vector<Observer> obs;\n    \n    public Observable() {\n        obs = new Vector<>();\n    }\n\n    public synchronized void addObserver(Observer o) {\n        if (o == null)\n            throw new NullPointerException();\n        if (!obs.contains(o)) {\n            obs.addElement(o);\n        }\n    }\n\n    public synchronized void deleteObserver(Observer o) {\n        obs.removeElement(o);\n    }\n\n    public void notifyObservers() {\n        notifyObservers(null);\n    }\n\n    public void notifyObservers(Object arg) {\n        Object[] arrLocal;\n\n        synchronized (this) {\n            if (!changed)\n                return;\n            arrLocal = obs.toArray();\n            clearChanged();\n        }\n\n        for (int i = arrLocal.length-1; i>=0; i--)\n            ((Observer)arrLocal[i]).update(this, arg);\n    }\n\n    public synchronized void deleteObservers() {\n        obs.removeAllElements();\n    }\n\n    protected synchronized void setChanged() {\n        changed = true;\n    }\n\n    protected synchronized void clearChanged() {\n        changed = false;\n    }\n\n    public synchronized boolean hasChanged() {\n        return changed;\n    }\n     \n    public synchronized int countObservers() {\n        return obs.size();\n    }\n}\n```\n\n* 同样，这里维护一个观察者的集合Vector，这里考虑了线程安全的问题，说明这种方式实现的观察者模式是线程安全的\n* 除此之外还有一个bool类型的变量changed表示被观察者是否发生改变（也就是感兴趣的事件是否发生），通过该标志来通知观察者对象\n* 同样，该类里有针对观察者集合的增、删、通知的操作，还多了对changed标志修改的操作；除此之外所有方法都有synchronized关键字，进一步说明了这种方式的观察者模式是线程安全的\n* 使用时，在要被观察的类中继承Observable类，再添加实现了Observer接口的观察者对象，调用setChanged()方法改变changed标志后通过调用notify()方法进行通知\n","slug":"观察者模式","published":1,"updated":"2021-07-13T12:27:08.596Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj85004h81fy8vefxjl0","content":"<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><p>包含观察者和被观察者两个部分，原理也很简单，被观察者类中维护观察者对象的集合，当感兴趣的事件发生，遍历观察者的集合回调观察者对象中的相应方法（update）即可</p>\n<p>被观察者除了维护观察者的集合外，还有对该集合的增（注册）、删（取消）及通知等操作</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><h5 id=\"观察者\"><a href=\"#观察者\" class=\"headerlink\" title=\"观察者\"></a>观察者</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Observer &#123;</span><br><span class=\"line\">    update(String msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ObserverImpl implements Observer &#123;</span><br><span class=\"line\">\tprivate String name = &quot;&quot;;</span><br><span class=\"line\">\tObserver(String name)&#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@override</span><br><span class=\"line\">\tpublic void update(String msg)&#123;</span><br><span class=\"line\">\t\t// 感兴趣的事件发生</span><br><span class=\"line\">\t\tSystem.out.println(msg);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"被观察者\"><a href=\"#被观察者\" class=\"headerlink\" title=\"被观察者\"></a>被观察者</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Observed&#123;</span><br><span class=\"line\">\tregisterObserver(Observer observer);</span><br><span class=\"line\">\tremoveObserver(Observer observer);</span><br><span class=\"line\">\tnotify(Observer observer);</span><br><span class=\"line\">\tnotifyAll();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ObservedImpl implements Observed&#123;</span><br><span class=\"line\">    private static List&lt;Observer&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void registerObserver(Observer observer)&#123;</span><br><span class=\"line\">        list.add(observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void removeObserver(Observer observer)&#123;</span><br><span class=\"line\">        list.remove(Observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void notify(Observer observer)&#123;</span><br><span class=\"line\">        list.stream().filter(n -&gt; n.equals(observer)).update(&quot;notify&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void notifyAll()&#123;</span><br><span class=\"line\">        list.stream().map(n -&gt; n.update(&quot;notifyAll&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observed o = new ObservedImpl();</span><br><span class=\"line\">Observer o1 = new ObserverImpl(&quot;o1&quot;);</span><br><span class=\"line\">Observer o2 = new ObserverImpl(&quot;o2&quot;);</span><br><span class=\"line\">o.registerObserver(o1);</span><br><span class=\"line\">o.registerObserver(o2);</span><br><span class=\"line\">o.notifyAll();</span><br></pre></td></tr></table></figure>\n<h4 id=\"Observer-和-Observable\"><a href=\"#Observer-和-Observable\" class=\"headerlink\" title=\"Observer 和 Observable\"></a>Observer 和 Observable</h4><p>jdk中提供了观察者模式的API，java.util包下的Observer接口和Observable类，原理是一样的，这里只是进行的封装</p>\n<p>上源码</p>\n<h5 id=\"Observer\"><a href=\"#Observer\" class=\"headerlink\" title=\"Observer\"></a>Observer</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Observer &#123;</span><br><span class=\"line\">    void update(Observable o, Object arg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>和上面观察者的部分一样，实现一个回调方法，当感兴趣的事件发生回调该方法</p>\n<p>使用时，实现Observer接口，重写update方法即可，当感兴趣的事件发生会回调update方法，这里会写增加的业务逻辑</p>\n<h5 id=\"Observable\"><a href=\"#Observable\" class=\"headerlink\" title=\"Observable\"></a>Observable</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Observable &#123;</span><br><span class=\"line\">    private boolean changed = false;</span><br><span class=\"line\">    private Vector&lt;Observer&gt; obs;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public Observable() &#123;</span><br><span class=\"line\">        obs = new Vector&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public synchronized void addObserver(Observer o) &#123;</span><br><span class=\"line\">        if (o == null)</span><br><span class=\"line\">            throw new NullPointerException();</span><br><span class=\"line\">        if (!obs.contains(o)) &#123;</span><br><span class=\"line\">            obs.addElement(o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public synchronized void deleteObserver(Observer o) &#123;</span><br><span class=\"line\">        obs.removeElement(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void notifyObservers() &#123;</span><br><span class=\"line\">        notifyObservers(null);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void notifyObservers(Object arg) &#123;</span><br><span class=\"line\">        Object[] arrLocal;</span><br><span class=\"line\"></span><br><span class=\"line\">        synchronized (this) &#123;</span><br><span class=\"line\">            if (!changed)</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            arrLocal = obs.toArray();</span><br><span class=\"line\">            clearChanged();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i = arrLocal.length-1; i&gt;=0; i--)</span><br><span class=\"line\">            ((Observer)arrLocal[i]).update(this, arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public synchronized void deleteObservers() &#123;</span><br><span class=\"line\">        obs.removeAllElements();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected synchronized void setChanged() &#123;</span><br><span class=\"line\">        changed = true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected synchronized void clearChanged() &#123;</span><br><span class=\"line\">        changed = false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public synchronized boolean hasChanged() &#123;</span><br><span class=\"line\">        return changed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    public synchronized int countObservers() &#123;</span><br><span class=\"line\">        return obs.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>同样，这里维护一个观察者的集合Vector，这里考虑了线程安全的问题，说明这种方式实现的观察者模式是线程安全的</li>\n<li>除此之外还有一个bool类型的变量changed表示被观察者是否发生改变（也就是感兴趣的事件是否发生），通过该标志来通知观察者对象</li>\n<li>同样，该类里有针对观察者集合的增、删、通知的操作，还多了对changed标志修改的操作；除此之外所有方法都有synchronized关键字，进一步说明了这种方式的观察者模式是线程安全的</li>\n<li>使用时，在要被观察的类中继承Observable类，再添加实现了Observer接口的观察者对象，调用setChanged()方法改变changed标志后通过调用notify()方法进行通知</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><p>包含观察者和被观察者两个部分，原理也很简单，被观察者类中维护观察者对象的集合，当感兴趣的事件发生，遍历观察者的集合回调观察者对象中的相应方法（update）即可</p>\n<p>被观察者除了维护观察者的集合外，还有对该集合的增（注册）、删（取消）及通知等操作</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><h5 id=\"观察者\"><a href=\"#观察者\" class=\"headerlink\" title=\"观察者\"></a>观察者</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Observer &#123;</span><br><span class=\"line\">    update(String msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ObserverImpl implements Observer &#123;</span><br><span class=\"line\">\tprivate String name = &quot;&quot;;</span><br><span class=\"line\">\tObserver(String name)&#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@override</span><br><span class=\"line\">\tpublic void update(String msg)&#123;</span><br><span class=\"line\">\t\t// 感兴趣的事件发生</span><br><span class=\"line\">\t\tSystem.out.println(msg);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"被观察者\"><a href=\"#被观察者\" class=\"headerlink\" title=\"被观察者\"></a>被观察者</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Observed&#123;</span><br><span class=\"line\">\tregisterObserver(Observer observer);</span><br><span class=\"line\">\tremoveObserver(Observer observer);</span><br><span class=\"line\">\tnotify(Observer observer);</span><br><span class=\"line\">\tnotifyAll();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ObservedImpl implements Observed&#123;</span><br><span class=\"line\">    private static List&lt;Observer&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void registerObserver(Observer observer)&#123;</span><br><span class=\"line\">        list.add(observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void removeObserver(Observer observer)&#123;</span><br><span class=\"line\">        list.remove(Observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void notify(Observer observer)&#123;</span><br><span class=\"line\">        list.stream().filter(n -&gt; n.equals(observer)).update(&quot;notify&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void notifyAll()&#123;</span><br><span class=\"line\">        list.stream().map(n -&gt; n.update(&quot;notifyAll&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observed o = new ObservedImpl();</span><br><span class=\"line\">Observer o1 = new ObserverImpl(&quot;o1&quot;);</span><br><span class=\"line\">Observer o2 = new ObserverImpl(&quot;o2&quot;);</span><br><span class=\"line\">o.registerObserver(o1);</span><br><span class=\"line\">o.registerObserver(o2);</span><br><span class=\"line\">o.notifyAll();</span><br></pre></td></tr></table></figure>\n<h4 id=\"Observer-和-Observable\"><a href=\"#Observer-和-Observable\" class=\"headerlink\" title=\"Observer 和 Observable\"></a>Observer 和 Observable</h4><p>jdk中提供了观察者模式的API，java.util包下的Observer接口和Observable类，原理是一样的，这里只是进行的封装</p>\n<p>上源码</p>\n<h5 id=\"Observer\"><a href=\"#Observer\" class=\"headerlink\" title=\"Observer\"></a>Observer</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Observer &#123;</span><br><span class=\"line\">    void update(Observable o, Object arg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>和上面观察者的部分一样，实现一个回调方法，当感兴趣的事件发生回调该方法</p>\n<p>使用时，实现Observer接口，重写update方法即可，当感兴趣的事件发生会回调update方法，这里会写增加的业务逻辑</p>\n<h5 id=\"Observable\"><a href=\"#Observable\" class=\"headerlink\" title=\"Observable\"></a>Observable</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Observable &#123;</span><br><span class=\"line\">    private boolean changed = false;</span><br><span class=\"line\">    private Vector&lt;Observer&gt; obs;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public Observable() &#123;</span><br><span class=\"line\">        obs = new Vector&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public synchronized void addObserver(Observer o) &#123;</span><br><span class=\"line\">        if (o == null)</span><br><span class=\"line\">            throw new NullPointerException();</span><br><span class=\"line\">        if (!obs.contains(o)) &#123;</span><br><span class=\"line\">            obs.addElement(o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public synchronized void deleteObserver(Observer o) &#123;</span><br><span class=\"line\">        obs.removeElement(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void notifyObservers() &#123;</span><br><span class=\"line\">        notifyObservers(null);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void notifyObservers(Object arg) &#123;</span><br><span class=\"line\">        Object[] arrLocal;</span><br><span class=\"line\"></span><br><span class=\"line\">        synchronized (this) &#123;</span><br><span class=\"line\">            if (!changed)</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            arrLocal = obs.toArray();</span><br><span class=\"line\">            clearChanged();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i = arrLocal.length-1; i&gt;=0; i--)</span><br><span class=\"line\">            ((Observer)arrLocal[i]).update(this, arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public synchronized void deleteObservers() &#123;</span><br><span class=\"line\">        obs.removeAllElements();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected synchronized void setChanged() &#123;</span><br><span class=\"line\">        changed = true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected synchronized void clearChanged() &#123;</span><br><span class=\"line\">        changed = false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public synchronized boolean hasChanged() &#123;</span><br><span class=\"line\">        return changed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    public synchronized int countObservers() &#123;</span><br><span class=\"line\">        return obs.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>同样，这里维护一个观察者的集合Vector，这里考虑了线程安全的问题，说明这种方式实现的观察者模式是线程安全的</li>\n<li>除此之外还有一个bool类型的变量changed表示被观察者是否发生改变（也就是感兴趣的事件是否发生），通过该标志来通知观察者对象</li>\n<li>同样，该类里有针对观察者集合的增、删、通知的操作，还多了对changed标志修改的操作；除此之外所有方法都有synchronized关键字，进一步说明了这种方式的观察者模式是线程安全的</li>\n<li>使用时，在要被观察的类中继承Observable类，再添加实现了Observer接口的观察者对象，调用setChanged()方法改变changed标志后通过调用notify()方法进行通知</li>\n</ul>\n"},{"title":"缓存更新的套路 总结与感受","author":"YyWang","categaries":"Redis","date":"2019-08-21T06:51:35.000Z","_content":"**注：** 本文是阅读 [缓存更新的套路] (https://coolshell.cn/articles/17416.html) 一文的总结，本文是以经常用到的Redis+MySQL的角度解读\n\n### 经典方法 -- Cache Aside Pattern\n\n* 读操作：先从Redis中获取，没有命中则从MySQL中获取，最后更新到Redis中\n* 写操作：先写MySQL，成功后删除Redis中的数据\n\n为什么这样的方案会是经典方法呢？因为简单，有效，错误少\n\n* 场景1--写操作如果先删除Redis中的数据再操作数据库\n\t* 如果一个写操作和读操作并发执行，写操作删除了Redis中的数据还没来得及将数据更新到MySQL中，读操作没有在Redis中读取到数据，而从MySQL中读到旧的数据并更新到了Redis中，这样虽然MySQL中的数据是正确的，因为Redis的存在使得每次读取的数据都是脏数据。（这种情况只会发生在删除Redis数据后，写MySQL前这段时间，因为写MySQL时可以通过加悲观锁来避免问题）\n* 场景2--写操作后增加更新Redis数据\n  * 这样读和写的操作都会更新Redis数据看似更稳健了，其实不然，更新操作变多了脏数据也会变多，比如有两个写操作a和b，按照请求的时间来说最终的状态应该是b，极端情况下ab都完成了更新数据库的操作，在更新Redis的时候，b先完成了，随后a完成又将Redis数据改成了a的状态，这样还是会存在脏数据 ，虽然出现的概率不大相对于经典方法多了产生脏数据的可能性，所以不可取\n* 场景3--脏数据\n\t* 经典方法可以避免场景1和2的问题，但也不是万无一失的，当一个读操作在Redis中没有命中时，从MySQL中获取了数据，在更新Redis数据之前，有一个写操作完成，此时MySQL的数据已经变了，而读操作会把之前的数据写入Redis中，产生脏数据。而这样的场景发生的几率非常非常小，由于MySQL锁的限制，只能发生在读操作读取数据之后读操作更新Redis数据之前，并且这段时间有一个写操作完成，同样因为锁的存在写操作一般都比读操作会耗时，并且给Redis数据增加过期时间进一步减小脏数据的产生几率\n\n综上所述，虽然经典方法在场景3略有瑕疵，但依然经典可用，因为其简单，有效，错误少\n\n### Read/Write Through Pattern\n\n* 读操作：Redis命中直接返回；没有命中从MySQL中读取后更新到Redis中\n* 写操作：Redis中命中更新Redis,在同步的更新到MySQL；没有命中更新MySQL\n\n这种模式写操作主要依赖一个数据源（MySQL或者Redis），读数据时在Redis中没有命中会从MySQL中读取到Redis中，长时间运行后大部分数据都会在Redis中命中，写操作也会针对于Redis并由Redis同步的进行写入MySQL，相当于是强依赖于Redis，弱依赖甚至不依赖于MySQL，至于为什么未命中不直接写Redis还没想明白~\n\n### Write Behind Caching Pattern\n\n* 读操作：Redis命中直接返回；没有命中则从MySQL中获取数据返回\n* 写操作：无论Redis命中与否都先更新Redis，接着异步更新MySQL中的数据\n\n原文中也提到，这么做会极大的提高I/O，相当于只操作了Redis，是内存级别的读写，同时这么做也有缺点，就是在同步数据到MySQL时如果服务器宕机断电等事故将会永久性的数据丢失\n\n### 精彩评论\n\n摘取了一些大佬们的评论，很有启发\n\n* 一位名叫 ty 的大佬说：”Cache Aside Pattern模式，两个更新操作同时进来，也可能会有cache脏数据的问题啊\n顺序如下：\n第一个写数据库，第二个写数据库，第二个写cache，第一个写cache\n这样cache里是第一个数据，而数据库里是第二个“\n* --------这和我想的是一样的，哈哈\n\n---\n\n* 一位名叫 letsgowei 的大佬说：”在做更新操作时不可以更改数据库后直接更新缓存吗？这样最多也就一两次脏数据“\n* --------这位大佬的疑惑应该是为什么更新操作只是删除缓存或者把缓存设置为无效，而不是更新缓存呢？还有一位评论有同样的疑惑；这个问题我没有考虑到，觉得他们说的有道理直接更新也可以啊？\n* 一位名叫 longsen 的大佬做出了解答：”1. 读线程查key未在cache中；2.读线程从db读数据；3.写线程更改数据库；4.写线程看key未在cache中，无法更新cache；5.读线程将旧数据写入cache中。这种场景旧数据可能在cache存在很长时间“\n* --------大佬给出的解释是cache中没有key无法更新，I don't think so！至少在Redis的环境下是不存在的，key不存在直接set，key存在直接覆盖，Redis是有这样的命令的，所以这个回答我不同意，如果将写MySQL后将Redis中的key删除的操作，改成更新Redis的Key操作，这样一来就和我上面提到的场景2是一样的的了，读写都更新Redis增加了产生脏数据的概率，所以是不可取的\n\n---\n\n* 一位名叫 泪滴 的大佬说：”大神！你的这个更新顺序是建立在更新数据库，更新缓存都不会发生失败的情况下的，单独考虑并发问题得到的顺序！\n方案1：先更新数据库，再删除缓存，当出现并发问题概率很小(假设概率为R1)，会造成脏数据。当出现网络等问题导致删除缓存失败(假设概率为R2)，会导致之后的请求一直是脏数据。\n方案2：先删除缓存，再更新数据库，当出现并发问题概率较大(假设概率为R3)，会导致之后的请求一直是脏数据，当出现网络问题，删除缓存成功，更新数据库失败，只会引发一次cache miss，在业务上基本没啥影响。当然为了弥补，我们一般都会设置缓存的过期时间，来缩短出现脏数据的时间。现在问题的关键就是R1+R2和R3的大小问题了，如果大厂，网络基础设施啥的比较牛，当然R1+R2<R3选择方案1比较合适，对于广大小厂来说还真的可能R1+R2>R3那怎么选择，就比较清楚了。“\n* --------说实话，他的评论让我眼前一亮，他的分析具体到了应用场景上，而且确实有这样的情况出现，所以说没有最完美的设计只有最合适的设计，给这位大佬点赞\n\n---\n\n* 还有一些则是针对于原文中Write Behind Caching Pattern部分的流程图的疑问，例如缓存未命中为什么回写数据再更新数据，直接更新数据不就好了吗？写数据未命中为什么还有判断dirty的标志？等等，这些问题我也不懂，云里雾里的，不知道为什么这么设计，不就是异步更新MySQL吗，搞这么复杂是为什么，后来我冷静的分析一下，这篇文章是缓存更新的套路，当前部分是缓存异步更新MySQL的介绍，而流程图和异步半毛钱关系都没有，为什么？\n* --------因为我太垃圾了，文章中 xxPattern 指的是Linux内核中的缓存更新模式，作者是将这些模式应用到分布式环境下缓存更新中，所以说这部分的流程图是指Linux内核的缓存更新而不是分布式环境下的缓存更新，作者在文章中不止一次提到了基础很重要就体现出来了，而且作者也提到宏观的系统架构设计其实和计算机系统结构中微观的设计是相似的，所以想要设计好一个大型的分布式系统必须对计算机系统结构非常了解\n\n---\n\n综上所述--基础很重要\n\n以上是我拜读耗子哥的[《缓存更新的套路》](https://coolshell.cn/articles/17416.html)一文后的一些总结和思考，推荐大家读原文哦！\n","source":"_posts/缓存更新的套路-总结与感受.md","raw":"title: 缓存更新的套路 总结与感受\nauthor: YyWang\ntags: Redis\ncategaries: Redis\ndate: 2019-08-21 14:51:35\n---\n**注：** 本文是阅读 [缓存更新的套路] (https://coolshell.cn/articles/17416.html) 一文的总结，本文是以经常用到的Redis+MySQL的角度解读\n\n### 经典方法 -- Cache Aside Pattern\n\n* 读操作：先从Redis中获取，没有命中则从MySQL中获取，最后更新到Redis中\n* 写操作：先写MySQL，成功后删除Redis中的数据\n\n为什么这样的方案会是经典方法呢？因为简单，有效，错误少\n\n* 场景1--写操作如果先删除Redis中的数据再操作数据库\n\t* 如果一个写操作和读操作并发执行，写操作删除了Redis中的数据还没来得及将数据更新到MySQL中，读操作没有在Redis中读取到数据，而从MySQL中读到旧的数据并更新到了Redis中，这样虽然MySQL中的数据是正确的，因为Redis的存在使得每次读取的数据都是脏数据。（这种情况只会发生在删除Redis数据后，写MySQL前这段时间，因为写MySQL时可以通过加悲观锁来避免问题）\n* 场景2--写操作后增加更新Redis数据\n  * 这样读和写的操作都会更新Redis数据看似更稳健了，其实不然，更新操作变多了脏数据也会变多，比如有两个写操作a和b，按照请求的时间来说最终的状态应该是b，极端情况下ab都完成了更新数据库的操作，在更新Redis的时候，b先完成了，随后a完成又将Redis数据改成了a的状态，这样还是会存在脏数据 ，虽然出现的概率不大相对于经典方法多了产生脏数据的可能性，所以不可取\n* 场景3--脏数据\n\t* 经典方法可以避免场景1和2的问题，但也不是万无一失的，当一个读操作在Redis中没有命中时，从MySQL中获取了数据，在更新Redis数据之前，有一个写操作完成，此时MySQL的数据已经变了，而读操作会把之前的数据写入Redis中，产生脏数据。而这样的场景发生的几率非常非常小，由于MySQL锁的限制，只能发生在读操作读取数据之后读操作更新Redis数据之前，并且这段时间有一个写操作完成，同样因为锁的存在写操作一般都比读操作会耗时，并且给Redis数据增加过期时间进一步减小脏数据的产生几率\n\n综上所述，虽然经典方法在场景3略有瑕疵，但依然经典可用，因为其简单，有效，错误少\n\n### Read/Write Through Pattern\n\n* 读操作：Redis命中直接返回；没有命中从MySQL中读取后更新到Redis中\n* 写操作：Redis中命中更新Redis,在同步的更新到MySQL；没有命中更新MySQL\n\n这种模式写操作主要依赖一个数据源（MySQL或者Redis），读数据时在Redis中没有命中会从MySQL中读取到Redis中，长时间运行后大部分数据都会在Redis中命中，写操作也会针对于Redis并由Redis同步的进行写入MySQL，相当于是强依赖于Redis，弱依赖甚至不依赖于MySQL，至于为什么未命中不直接写Redis还没想明白~\n\n### Write Behind Caching Pattern\n\n* 读操作：Redis命中直接返回；没有命中则从MySQL中获取数据返回\n* 写操作：无论Redis命中与否都先更新Redis，接着异步更新MySQL中的数据\n\n原文中也提到，这么做会极大的提高I/O，相当于只操作了Redis，是内存级别的读写，同时这么做也有缺点，就是在同步数据到MySQL时如果服务器宕机断电等事故将会永久性的数据丢失\n\n### 精彩评论\n\n摘取了一些大佬们的评论，很有启发\n\n* 一位名叫 ty 的大佬说：”Cache Aside Pattern模式，两个更新操作同时进来，也可能会有cache脏数据的问题啊\n顺序如下：\n第一个写数据库，第二个写数据库，第二个写cache，第一个写cache\n这样cache里是第一个数据，而数据库里是第二个“\n* --------这和我想的是一样的，哈哈\n\n---\n\n* 一位名叫 letsgowei 的大佬说：”在做更新操作时不可以更改数据库后直接更新缓存吗？这样最多也就一两次脏数据“\n* --------这位大佬的疑惑应该是为什么更新操作只是删除缓存或者把缓存设置为无效，而不是更新缓存呢？还有一位评论有同样的疑惑；这个问题我没有考虑到，觉得他们说的有道理直接更新也可以啊？\n* 一位名叫 longsen 的大佬做出了解答：”1. 读线程查key未在cache中；2.读线程从db读数据；3.写线程更改数据库；4.写线程看key未在cache中，无法更新cache；5.读线程将旧数据写入cache中。这种场景旧数据可能在cache存在很长时间“\n* --------大佬给出的解释是cache中没有key无法更新，I don't think so！至少在Redis的环境下是不存在的，key不存在直接set，key存在直接覆盖，Redis是有这样的命令的，所以这个回答我不同意，如果将写MySQL后将Redis中的key删除的操作，改成更新Redis的Key操作，这样一来就和我上面提到的场景2是一样的的了，读写都更新Redis增加了产生脏数据的概率，所以是不可取的\n\n---\n\n* 一位名叫 泪滴 的大佬说：”大神！你的这个更新顺序是建立在更新数据库，更新缓存都不会发生失败的情况下的，单独考虑并发问题得到的顺序！\n方案1：先更新数据库，再删除缓存，当出现并发问题概率很小(假设概率为R1)，会造成脏数据。当出现网络等问题导致删除缓存失败(假设概率为R2)，会导致之后的请求一直是脏数据。\n方案2：先删除缓存，再更新数据库，当出现并发问题概率较大(假设概率为R3)，会导致之后的请求一直是脏数据，当出现网络问题，删除缓存成功，更新数据库失败，只会引发一次cache miss，在业务上基本没啥影响。当然为了弥补，我们一般都会设置缓存的过期时间，来缩短出现脏数据的时间。现在问题的关键就是R1+R2和R3的大小问题了，如果大厂，网络基础设施啥的比较牛，当然R1+R2<R3选择方案1比较合适，对于广大小厂来说还真的可能R1+R2>R3那怎么选择，就比较清楚了。“\n* --------说实话，他的评论让我眼前一亮，他的分析具体到了应用场景上，而且确实有这样的情况出现，所以说没有最完美的设计只有最合适的设计，给这位大佬点赞\n\n---\n\n* 还有一些则是针对于原文中Write Behind Caching Pattern部分的流程图的疑问，例如缓存未命中为什么回写数据再更新数据，直接更新数据不就好了吗？写数据未命中为什么还有判断dirty的标志？等等，这些问题我也不懂，云里雾里的，不知道为什么这么设计，不就是异步更新MySQL吗，搞这么复杂是为什么，后来我冷静的分析一下，这篇文章是缓存更新的套路，当前部分是缓存异步更新MySQL的介绍，而流程图和异步半毛钱关系都没有，为什么？\n* --------因为我太垃圾了，文章中 xxPattern 指的是Linux内核中的缓存更新模式，作者是将这些模式应用到分布式环境下缓存更新中，所以说这部分的流程图是指Linux内核的缓存更新而不是分布式环境下的缓存更新，作者在文章中不止一次提到了基础很重要就体现出来了，而且作者也提到宏观的系统架构设计其实和计算机系统结构中微观的设计是相似的，所以想要设计好一个大型的分布式系统必须对计算机系统结构非常了解\n\n---\n\n综上所述--基础很重要\n\n以上是我拜读耗子哥的[《缓存更新的套路》](https://coolshell.cn/articles/17416.html)一文后的一些总结和思考，推荐大家读原文哦！\n","slug":"缓存更新的套路-总结与感受","published":1,"updated":"2021-07-13T12:27:08.595Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj86004j81fy5eqwe5q2","content":"<p><strong>注：</strong> 本文是阅读 [缓存更新的套路] (<a href=\"https://coolshell.cn/articles/17416.html\" target=\"_blank\" rel=\"noopener\">https://coolshell.cn/articles/17416.html</a>) 一文的总结，本文是以经常用到的Redis+MySQL的角度解读</p>\n<h3 id=\"经典方法-–-Cache-Aside-Pattern\"><a href=\"#经典方法-–-Cache-Aside-Pattern\" class=\"headerlink\" title=\"经典方法 – Cache Aside Pattern\"></a>经典方法 – Cache Aside Pattern</h3><ul>\n<li>读操作：先从Redis中获取，没有命中则从MySQL中获取，最后更新到Redis中</li>\n<li>写操作：先写MySQL，成功后删除Redis中的数据</li>\n</ul>\n<p>为什么这样的方案会是经典方法呢？因为简单，有效，错误少</p>\n<ul>\n<li>场景1–写操作如果先删除Redis中的数据再操作数据库<ul>\n<li>如果一个写操作和读操作并发执行，写操作删除了Redis中的数据还没来得及将数据更新到MySQL中，读操作没有在Redis中读取到数据，而从MySQL中读到旧的数据并更新到了Redis中，这样虽然MySQL中的数据是正确的，因为Redis的存在使得每次读取的数据都是脏数据。（这种情况只会发生在删除Redis数据后，写MySQL前这段时间，因为写MySQL时可以通过加悲观锁来避免问题）</li>\n</ul>\n</li>\n<li>场景2–写操作后增加更新Redis数据<ul>\n<li>这样读和写的操作都会更新Redis数据看似更稳健了，其实不然，更新操作变多了脏数据也会变多，比如有两个写操作a和b，按照请求的时间来说最终的状态应该是b，极端情况下ab都完成了更新数据库的操作，在更新Redis的时候，b先完成了，随后a完成又将Redis数据改成了a的状态，这样还是会存在脏数据 ，虽然出现的概率不大相对于经典方法多了产生脏数据的可能性，所以不可取</li>\n</ul>\n</li>\n<li>场景3–脏数据<ul>\n<li>经典方法可以避免场景1和2的问题，但也不是万无一失的，当一个读操作在Redis中没有命中时，从MySQL中获取了数据，在更新Redis数据之前，有一个写操作完成，此时MySQL的数据已经变了，而读操作会把之前的数据写入Redis中，产生脏数据。而这样的场景发生的几率非常非常小，由于MySQL锁的限制，只能发生在读操作读取数据之后读操作更新Redis数据之前，并且这段时间有一个写操作完成，同样因为锁的存在写操作一般都比读操作会耗时，并且给Redis数据增加过期时间进一步减小脏数据的产生几率</li>\n</ul>\n</li>\n</ul>\n<p>综上所述，虽然经典方法在场景3略有瑕疵，但依然经典可用，因为其简单，有效，错误少</p>\n<h3 id=\"Read-Write-Through-Pattern\"><a href=\"#Read-Write-Through-Pattern\" class=\"headerlink\" title=\"Read/Write Through Pattern\"></a>Read/Write Through Pattern</h3><ul>\n<li>读操作：Redis命中直接返回；没有命中从MySQL中读取后更新到Redis中</li>\n<li>写操作：Redis中命中更新Redis,在同步的更新到MySQL；没有命中更新MySQL</li>\n</ul>\n<p>这种模式写操作主要依赖一个数据源（MySQL或者Redis），读数据时在Redis中没有命中会从MySQL中读取到Redis中，长时间运行后大部分数据都会在Redis中命中，写操作也会针对于Redis并由Redis同步的进行写入MySQL，相当于是强依赖于Redis，弱依赖甚至不依赖于MySQL，至于为什么未命中不直接写Redis还没想明白~</p>\n<h3 id=\"Write-Behind-Caching-Pattern\"><a href=\"#Write-Behind-Caching-Pattern\" class=\"headerlink\" title=\"Write Behind Caching Pattern\"></a>Write Behind Caching Pattern</h3><ul>\n<li>读操作：Redis命中直接返回；没有命中则从MySQL中获取数据返回</li>\n<li>写操作：无论Redis命中与否都先更新Redis，接着异步更新MySQL中的数据</li>\n</ul>\n<p>原文中也提到，这么做会极大的提高I/O，相当于只操作了Redis，是内存级别的读写，同时这么做也有缺点，就是在同步数据到MySQL时如果服务器宕机断电等事故将会永久性的数据丢失</p>\n<h3 id=\"精彩评论\"><a href=\"#精彩评论\" class=\"headerlink\" title=\"精彩评论\"></a>精彩评论</h3><p>摘取了一些大佬们的评论，很有启发</p>\n<ul>\n<li>一位名叫 ty 的大佬说：”Cache Aside Pattern模式，两个更新操作同时进来，也可能会有cache脏数据的问题啊<br>顺序如下：<br>第一个写数据库，第二个写数据库，第二个写cache，第一个写cache<br>这样cache里是第一个数据，而数据库里是第二个“</li>\n<li>——–这和我想的是一样的，哈哈</li>\n</ul>\n<hr>\n<ul>\n<li>一位名叫 letsgowei 的大佬说：”在做更新操作时不可以更改数据库后直接更新缓存吗？这样最多也就一两次脏数据“</li>\n<li>——–这位大佬的疑惑应该是为什么更新操作只是删除缓存或者把缓存设置为无效，而不是更新缓存呢？还有一位评论有同样的疑惑；这个问题我没有考虑到，觉得他们说的有道理直接更新也可以啊？</li>\n<li>一位名叫 longsen 的大佬做出了解答：”1. 读线程查key未在cache中；2.读线程从db读数据；3.写线程更改数据库；4.写线程看key未在cache中，无法更新cache；5.读线程将旧数据写入cache中。这种场景旧数据可能在cache存在很长时间“</li>\n<li>——–大佬给出的解释是cache中没有key无法更新，I don’t think so！至少在Redis的环境下是不存在的，key不存在直接set，key存在直接覆盖，Redis是有这样的命令的，所以这个回答我不同意，如果将写MySQL后将Redis中的key删除的操作，改成更新Redis的Key操作，这样一来就和我上面提到的场景2是一样的的了，读写都更新Redis增加了产生脏数据的概率，所以是不可取的</li>\n</ul>\n<hr>\n<ul>\n<li>一位名叫 泪滴 的大佬说：”大神！你的这个更新顺序是建立在更新数据库，更新缓存都不会发生失败的情况下的，单独考虑并发问题得到的顺序！<br>方案1：先更新数据库，再删除缓存，当出现并发问题概率很小(假设概率为R1)，会造成脏数据。当出现网络等问题导致删除缓存失败(假设概率为R2)，会导致之后的请求一直是脏数据。<br>方案2：先删除缓存，再更新数据库，当出现并发问题概率较大(假设概率为R3)，会导致之后的请求一直是脏数据，当出现网络问题，删除缓存成功，更新数据库失败，只会引发一次cache miss，在业务上基本没啥影响。当然为了弥补，我们一般都会设置缓存的过期时间，来缩短出现脏数据的时间。现在问题的关键就是R1+R2和R3的大小问题了，如果大厂，网络基础设施啥的比较牛，当然R1+R2&lt;R3选择方案1比较合适，对于广大小厂来说还真的可能R1+R2&gt;R3那怎么选择，就比较清楚了。“</li>\n<li>——–说实话，他的评论让我眼前一亮，他的分析具体到了应用场景上，而且确实有这样的情况出现，所以说没有最完美的设计只有最合适的设计，给这位大佬点赞</li>\n</ul>\n<hr>\n<ul>\n<li>还有一些则是针对于原文中Write Behind Caching Pattern部分的流程图的疑问，例如缓存未命中为什么回写数据再更新数据，直接更新数据不就好了吗？写数据未命中为什么还有判断dirty的标志？等等，这些问题我也不懂，云里雾里的，不知道为什么这么设计，不就是异步更新MySQL吗，搞这么复杂是为什么，后来我冷静的分析一下，这篇文章是缓存更新的套路，当前部分是缓存异步更新MySQL的介绍，而流程图和异步半毛钱关系都没有，为什么？</li>\n<li>——–因为我太垃圾了，文章中 xxPattern 指的是Linux内核中的缓存更新模式，作者是将这些模式应用到分布式环境下缓存更新中，所以说这部分的流程图是指Linux内核的缓存更新而不是分布式环境下的缓存更新，作者在文章中不止一次提到了基础很重要就体现出来了，而且作者也提到宏观的系统架构设计其实和计算机系统结构中微观的设计是相似的，所以想要设计好一个大型的分布式系统必须对计算机系统结构非常了解</li>\n</ul>\n<hr>\n<p>综上所述–基础很重要</p>\n<p>以上是我拜读耗子哥的<a href=\"https://coolshell.cn/articles/17416.html\" target=\"_blank\" rel=\"noopener\">《缓存更新的套路》</a>一文后的一些总结和思考，推荐大家读原文哦！</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>注：</strong> 本文是阅读 [缓存更新的套路] (<a href=\"https://coolshell.cn/articles/17416.html\" target=\"_blank\" rel=\"noopener\">https://coolshell.cn/articles/17416.html</a>) 一文的总结，本文是以经常用到的Redis+MySQL的角度解读</p>\n<h3 id=\"经典方法-–-Cache-Aside-Pattern\"><a href=\"#经典方法-–-Cache-Aside-Pattern\" class=\"headerlink\" title=\"经典方法 – Cache Aside Pattern\"></a>经典方法 – Cache Aside Pattern</h3><ul>\n<li>读操作：先从Redis中获取，没有命中则从MySQL中获取，最后更新到Redis中</li>\n<li>写操作：先写MySQL，成功后删除Redis中的数据</li>\n</ul>\n<p>为什么这样的方案会是经典方法呢？因为简单，有效，错误少</p>\n<ul>\n<li>场景1–写操作如果先删除Redis中的数据再操作数据库<ul>\n<li>如果一个写操作和读操作并发执行，写操作删除了Redis中的数据还没来得及将数据更新到MySQL中，读操作没有在Redis中读取到数据，而从MySQL中读到旧的数据并更新到了Redis中，这样虽然MySQL中的数据是正确的，因为Redis的存在使得每次读取的数据都是脏数据。（这种情况只会发生在删除Redis数据后，写MySQL前这段时间，因为写MySQL时可以通过加悲观锁来避免问题）</li>\n</ul>\n</li>\n<li>场景2–写操作后增加更新Redis数据<ul>\n<li>这样读和写的操作都会更新Redis数据看似更稳健了，其实不然，更新操作变多了脏数据也会变多，比如有两个写操作a和b，按照请求的时间来说最终的状态应该是b，极端情况下ab都完成了更新数据库的操作，在更新Redis的时候，b先完成了，随后a完成又将Redis数据改成了a的状态，这样还是会存在脏数据 ，虽然出现的概率不大相对于经典方法多了产生脏数据的可能性，所以不可取</li>\n</ul>\n</li>\n<li>场景3–脏数据<ul>\n<li>经典方法可以避免场景1和2的问题，但也不是万无一失的，当一个读操作在Redis中没有命中时，从MySQL中获取了数据，在更新Redis数据之前，有一个写操作完成，此时MySQL的数据已经变了，而读操作会把之前的数据写入Redis中，产生脏数据。而这样的场景发生的几率非常非常小，由于MySQL锁的限制，只能发生在读操作读取数据之后读操作更新Redis数据之前，并且这段时间有一个写操作完成，同样因为锁的存在写操作一般都比读操作会耗时，并且给Redis数据增加过期时间进一步减小脏数据的产生几率</li>\n</ul>\n</li>\n</ul>\n<p>综上所述，虽然经典方法在场景3略有瑕疵，但依然经典可用，因为其简单，有效，错误少</p>\n<h3 id=\"Read-Write-Through-Pattern\"><a href=\"#Read-Write-Through-Pattern\" class=\"headerlink\" title=\"Read/Write Through Pattern\"></a>Read/Write Through Pattern</h3><ul>\n<li>读操作：Redis命中直接返回；没有命中从MySQL中读取后更新到Redis中</li>\n<li>写操作：Redis中命中更新Redis,在同步的更新到MySQL；没有命中更新MySQL</li>\n</ul>\n<p>这种模式写操作主要依赖一个数据源（MySQL或者Redis），读数据时在Redis中没有命中会从MySQL中读取到Redis中，长时间运行后大部分数据都会在Redis中命中，写操作也会针对于Redis并由Redis同步的进行写入MySQL，相当于是强依赖于Redis，弱依赖甚至不依赖于MySQL，至于为什么未命中不直接写Redis还没想明白~</p>\n<h3 id=\"Write-Behind-Caching-Pattern\"><a href=\"#Write-Behind-Caching-Pattern\" class=\"headerlink\" title=\"Write Behind Caching Pattern\"></a>Write Behind Caching Pattern</h3><ul>\n<li>读操作：Redis命中直接返回；没有命中则从MySQL中获取数据返回</li>\n<li>写操作：无论Redis命中与否都先更新Redis，接着异步更新MySQL中的数据</li>\n</ul>\n<p>原文中也提到，这么做会极大的提高I/O，相当于只操作了Redis，是内存级别的读写，同时这么做也有缺点，就是在同步数据到MySQL时如果服务器宕机断电等事故将会永久性的数据丢失</p>\n<h3 id=\"精彩评论\"><a href=\"#精彩评论\" class=\"headerlink\" title=\"精彩评论\"></a>精彩评论</h3><p>摘取了一些大佬们的评论，很有启发</p>\n<ul>\n<li>一位名叫 ty 的大佬说：”Cache Aside Pattern模式，两个更新操作同时进来，也可能会有cache脏数据的问题啊<br>顺序如下：<br>第一个写数据库，第二个写数据库，第二个写cache，第一个写cache<br>这样cache里是第一个数据，而数据库里是第二个“</li>\n<li>——–这和我想的是一样的，哈哈</li>\n</ul>\n<hr>\n<ul>\n<li>一位名叫 letsgowei 的大佬说：”在做更新操作时不可以更改数据库后直接更新缓存吗？这样最多也就一两次脏数据“</li>\n<li>——–这位大佬的疑惑应该是为什么更新操作只是删除缓存或者把缓存设置为无效，而不是更新缓存呢？还有一位评论有同样的疑惑；这个问题我没有考虑到，觉得他们说的有道理直接更新也可以啊？</li>\n<li>一位名叫 longsen 的大佬做出了解答：”1. 读线程查key未在cache中；2.读线程从db读数据；3.写线程更改数据库；4.写线程看key未在cache中，无法更新cache；5.读线程将旧数据写入cache中。这种场景旧数据可能在cache存在很长时间“</li>\n<li>——–大佬给出的解释是cache中没有key无法更新，I don’t think so！至少在Redis的环境下是不存在的，key不存在直接set，key存在直接覆盖，Redis是有这样的命令的，所以这个回答我不同意，如果将写MySQL后将Redis中的key删除的操作，改成更新Redis的Key操作，这样一来就和我上面提到的场景2是一样的的了，读写都更新Redis增加了产生脏数据的概率，所以是不可取的</li>\n</ul>\n<hr>\n<ul>\n<li>一位名叫 泪滴 的大佬说：”大神！你的这个更新顺序是建立在更新数据库，更新缓存都不会发生失败的情况下的，单独考虑并发问题得到的顺序！<br>方案1：先更新数据库，再删除缓存，当出现并发问题概率很小(假设概率为R1)，会造成脏数据。当出现网络等问题导致删除缓存失败(假设概率为R2)，会导致之后的请求一直是脏数据。<br>方案2：先删除缓存，再更新数据库，当出现并发问题概率较大(假设概率为R3)，会导致之后的请求一直是脏数据，当出现网络问题，删除缓存成功，更新数据库失败，只会引发一次cache miss，在业务上基本没啥影响。当然为了弥补，我们一般都会设置缓存的过期时间，来缩短出现脏数据的时间。现在问题的关键就是R1+R2和R3的大小问题了，如果大厂，网络基础设施啥的比较牛，当然R1+R2&lt;R3选择方案1比较合适，对于广大小厂来说还真的可能R1+R2&gt;R3那怎么选择，就比较清楚了。“</li>\n<li>——–说实话，他的评论让我眼前一亮，他的分析具体到了应用场景上，而且确实有这样的情况出现，所以说没有最完美的设计只有最合适的设计，给这位大佬点赞</li>\n</ul>\n<hr>\n<ul>\n<li>还有一些则是针对于原文中Write Behind Caching Pattern部分的流程图的疑问，例如缓存未命中为什么回写数据再更新数据，直接更新数据不就好了吗？写数据未命中为什么还有判断dirty的标志？等等，这些问题我也不懂，云里雾里的，不知道为什么这么设计，不就是异步更新MySQL吗，搞这么复杂是为什么，后来我冷静的分析一下，这篇文章是缓存更新的套路，当前部分是缓存异步更新MySQL的介绍，而流程图和异步半毛钱关系都没有，为什么？</li>\n<li>——–因为我太垃圾了，文章中 xxPattern 指的是Linux内核中的缓存更新模式，作者是将这些模式应用到分布式环境下缓存更新中，所以说这部分的流程图是指Linux内核的缓存更新而不是分布式环境下的缓存更新，作者在文章中不止一次提到了基础很重要就体现出来了，而且作者也提到宏观的系统架构设计其实和计算机系统结构中微观的设计是相似的，所以想要设计好一个大型的分布式系统必须对计算机系统结构非常了解</li>\n</ul>\n<hr>\n<p>综上所述–基础很重要</p>\n<p>以上是我拜读耗子哥的<a href=\"https://coolshell.cn/articles/17416.html\" target=\"_blank\" rel=\"noopener\">《缓存更新的套路》</a>一文后的一些总结和思考，推荐大家读原文哦！</p>\n"},{"title":"震惊!系统崩了竟然因为这个","author":"YyWang","date":"2020-05-28T09:16:07.000Z","_content":"\n菜鸟遇到线上问题，从第一次发现问题到问题解决用时2个月，也算是个记录吧，哈哈，本文记录下我解决问题的心路历程，也不是什么高级的问题，大神请绕路\n\n### 第一次问题 \n#### 背景\n4月27日10:40-11:40一个尾数164的容器CPU突然飙升疯狂收到报警的邮件和消息\n\n#### 应对措施\t\n* 查看后台日志有一个url在刷屏，条件反射的找到这个刷屏的人给他限流（因为之前有过类似的情况，用户通过程序发送url请求来获取数据，30秒之内精准限流，我也是老手了）\n* 继续观察监控，调用量下来了，CPU迟迟不降，没有办法重启了容器\n\n![upload successful](/images/dump问题1.png)\n\n#### 分析\n*  CPU不降一定是还在做计算工作\n*  排查被刷的url，是一个监控报表的url（由于系统只提供最大1小时的数据，临近618很多用户需要几天甚至几周的数据做分析，不得已通过程序来跑出自己所需的数据）\n*  代码走查，是通过调用es的服务，获取数据，再封装成前端需要的数据返回，逻辑上是没问题的\n\t* 获取数据：查的是es响应很快，2s之内就有数据\n\t* 前端页面一共3个图，不论查询多少时间间隔的数据都只有90个点，3个图共270个点，也就是后台封装270个对象\n* 整个过程也就封装对象是计算的过程需要CPU，难不成这个人用多个线程来跑这个url，这也太变态了吧\n* 验证：7个任务，每个任务循环访问500次，查看监控CPU还不到5%，平常2%左右\n\n#### 处理\n* 可以排除是获取监控数据这个URL的问题，当天回看日志没有发现其他异常，问了前辈之前也没出现过类似问题，而且手上还有需求就先搁置了；过了一周再排查的时候发现找不到历史日志了，因为刚刚迁移了环境历史日志没有打开，死无对证了。。。\n* 也算排查了一个系统的风险点吧，最终，开启系统的历史日志，重新配置报警的阈值，等下次再出问题时摘除负载均衡，保留现场再做排查\n\n### 第二次出现问题\n#### 背景\n5月26日19:15前后，同样还是收到尾数164的容器CPU飙升的告警邮件，本以为上次的问题是个灵异事件，没想到又出现了，有了上次的经验，这次就很从容，将负载均衡摘除安心排查问题，可是一会又收到了同机房尾数是182的容器的报警邮件，群里的用户也开始反馈系统无法访问了，我愣住了，脑子里都是在想最近有做什么上线吗，是哪里出了问题；在我发愣的时候，前辈已经开始扩容，紧急扩容了4个容器这才稳住局势，这我才回过神来，我还是年轻😂\n\n![upload successful](/images/dump问题2.png)\n\n#### 分析\n* 经过上面的处理，下面就开始分析问题了，首先还是看日志没有发现异常，于是和运维同学要了dump文件，运维同学说dump不用看了，容器的jvm内存只有1G？？？想到当时迁移系统时没改配置，使用的是默认的配置，修改了内存配置后解决问题，完事儿！那我写这篇文章也太水了吧，哈哈\n* 我要了dump文件，还是要看一下问题的，而且每次都是尾数164的容器出错，太诡异了\n* 使用JProFiler分析dump，可以看到百万数量级的引用4类，结合最大的对象来看，是一个超大的list，占用了80%的内存\n\n![upload successful](/images/dump问题3.png)\n![upload successful](/images/dump问题4.png)\n\n* 代码走查，list中的对象是事件的对象，用来同步数据用，类似消息队列，再结合日志来看，马上定位到了一个用户再操作实例的上线（更改实例中所有接口的状态，产生的事件是为了同步数据），并产生了300w+的事件，系统封装事件后终于把内存撑爆，进行FullGC，Stop The Word\n* 查看日志和用户操作的记录，我寻思对一个实例操作怎么会有这么多事件，不会是有死循环了吧；先排查了不是多线程的问题\n\n```\nfor (Server server : servers) {\n    // 外层循环生产事件\n    eventList.add(buildEvent(server));\n    for (IfaceAlias ifaceAlias : ifaceAliasList) {// 内层循环与外层循环的数据一样\n        if (condition) {\n            eventList.add(buildEvent(ifaceAlias));\n        }\n    }\n}\n// 伪代码，只是为了展示代码结构\n```\n\n* 上线的逻辑是这样\n\t* a.数据库中修改实例的状态（两个sql用时3s内）\n\t* b.封装要操作的事件\n\t* c.发送事件 （调用远程服务，远程服务没有接受到事件的日志，定位在b中出现问题）\n* 步骤b中，嵌套了两层循环来生产事件，逻辑如下（以前代码的逻辑，为什么这么做就不知道了，前辈的东西先不动），我查了线上的数据，这个实例中有282个接口，两层循环也就8w不到的事件啊\n  * 验证：将线上数据拷贝下来，本地测试，产生6000+的事件也不到8w啊？debug后才知道，两层嵌套循环符合条件的只有77个（业务问题不需要关心），77*77+外层循环生产的事件刚好6000+数量级，这和线上的百万数量级差好多哦，这多出来的是从哪来的呢\n  * 想了两天没有结果，忍不住了，我找到用户的联系方式直接问，原来操作了20多个实例，发现用户操作的日志超长了，后面的内容截断了，让我以为就操作了一个实例\n  * 验证：按照25个实例来算，每个实例两层循环需要重新计算外层循环x内存循环（25x77）x（25x77）结果证实300w+的数量级，破案\n\n### 总结\n\n主要问题还是迁移系统之后jvm设置的内存有问题，连带找出其他bug（以外收获）\n\n1. 封装事件代码有问题，两层嵌套循环产生很多重复事件（不是说之前写代码的人太水，而是业务复杂，刚好用户的数据结构特殊导致产生大量重复事件）\n2. 用户操作的日志记录不完整，误导了排查错误的方向，这是个风险\n3. jvm内存设置的有问题，即使上面两个问题不修改，源码8g内存都用上的话运行5年的话也不会出问题\n4. 直接查看jvm的配置或者找用户了解情况就不会走这么多弯路，这条里就是经验了，本文的精华都在这一句了\n\n\n\t\n","source":"_posts/震惊!系统崩了竟然因为这个.md","raw":"title: 震惊!系统崩了竟然因为这个\nauthor: YyWang\ntags: Java\ncategories: Java\ndate: 2020-05-28 17:16:07\n---\n\n菜鸟遇到线上问题，从第一次发现问题到问题解决用时2个月，也算是个记录吧，哈哈，本文记录下我解决问题的心路历程，也不是什么高级的问题，大神请绕路\n\n### 第一次问题 \n#### 背景\n4月27日10:40-11:40一个尾数164的容器CPU突然飙升疯狂收到报警的邮件和消息\n\n#### 应对措施\t\n* 查看后台日志有一个url在刷屏，条件反射的找到这个刷屏的人给他限流（因为之前有过类似的情况，用户通过程序发送url请求来获取数据，30秒之内精准限流，我也是老手了）\n* 继续观察监控，调用量下来了，CPU迟迟不降，没有办法重启了容器\n\n![upload successful](/images/dump问题1.png)\n\n#### 分析\n*  CPU不降一定是还在做计算工作\n*  排查被刷的url，是一个监控报表的url（由于系统只提供最大1小时的数据，临近618很多用户需要几天甚至几周的数据做分析，不得已通过程序来跑出自己所需的数据）\n*  代码走查，是通过调用es的服务，获取数据，再封装成前端需要的数据返回，逻辑上是没问题的\n\t* 获取数据：查的是es响应很快，2s之内就有数据\n\t* 前端页面一共3个图，不论查询多少时间间隔的数据都只有90个点，3个图共270个点，也就是后台封装270个对象\n* 整个过程也就封装对象是计算的过程需要CPU，难不成这个人用多个线程来跑这个url，这也太变态了吧\n* 验证：7个任务，每个任务循环访问500次，查看监控CPU还不到5%，平常2%左右\n\n#### 处理\n* 可以排除是获取监控数据这个URL的问题，当天回看日志没有发现其他异常，问了前辈之前也没出现过类似问题，而且手上还有需求就先搁置了；过了一周再排查的时候发现找不到历史日志了，因为刚刚迁移了环境历史日志没有打开，死无对证了。。。\n* 也算排查了一个系统的风险点吧，最终，开启系统的历史日志，重新配置报警的阈值，等下次再出问题时摘除负载均衡，保留现场再做排查\n\n### 第二次出现问题\n#### 背景\n5月26日19:15前后，同样还是收到尾数164的容器CPU飙升的告警邮件，本以为上次的问题是个灵异事件，没想到又出现了，有了上次的经验，这次就很从容，将负载均衡摘除安心排查问题，可是一会又收到了同机房尾数是182的容器的报警邮件，群里的用户也开始反馈系统无法访问了，我愣住了，脑子里都是在想最近有做什么上线吗，是哪里出了问题；在我发愣的时候，前辈已经开始扩容，紧急扩容了4个容器这才稳住局势，这我才回过神来，我还是年轻😂\n\n![upload successful](/images/dump问题2.png)\n\n#### 分析\n* 经过上面的处理，下面就开始分析问题了，首先还是看日志没有发现异常，于是和运维同学要了dump文件，运维同学说dump不用看了，容器的jvm内存只有1G？？？想到当时迁移系统时没改配置，使用的是默认的配置，修改了内存配置后解决问题，完事儿！那我写这篇文章也太水了吧，哈哈\n* 我要了dump文件，还是要看一下问题的，而且每次都是尾数164的容器出错，太诡异了\n* 使用JProFiler分析dump，可以看到百万数量级的引用4类，结合最大的对象来看，是一个超大的list，占用了80%的内存\n\n![upload successful](/images/dump问题3.png)\n![upload successful](/images/dump问题4.png)\n\n* 代码走查，list中的对象是事件的对象，用来同步数据用，类似消息队列，再结合日志来看，马上定位到了一个用户再操作实例的上线（更改实例中所有接口的状态，产生的事件是为了同步数据），并产生了300w+的事件，系统封装事件后终于把内存撑爆，进行FullGC，Stop The Word\n* 查看日志和用户操作的记录，我寻思对一个实例操作怎么会有这么多事件，不会是有死循环了吧；先排查了不是多线程的问题\n\n```\nfor (Server server : servers) {\n    // 外层循环生产事件\n    eventList.add(buildEvent(server));\n    for (IfaceAlias ifaceAlias : ifaceAliasList) {// 内层循环与外层循环的数据一样\n        if (condition) {\n            eventList.add(buildEvent(ifaceAlias));\n        }\n    }\n}\n// 伪代码，只是为了展示代码结构\n```\n\n* 上线的逻辑是这样\n\t* a.数据库中修改实例的状态（两个sql用时3s内）\n\t* b.封装要操作的事件\n\t* c.发送事件 （调用远程服务，远程服务没有接受到事件的日志，定位在b中出现问题）\n* 步骤b中，嵌套了两层循环来生产事件，逻辑如下（以前代码的逻辑，为什么这么做就不知道了，前辈的东西先不动），我查了线上的数据，这个实例中有282个接口，两层循环也就8w不到的事件啊\n  * 验证：将线上数据拷贝下来，本地测试，产生6000+的事件也不到8w啊？debug后才知道，两层嵌套循环符合条件的只有77个（业务问题不需要关心），77*77+外层循环生产的事件刚好6000+数量级，这和线上的百万数量级差好多哦，这多出来的是从哪来的呢\n  * 想了两天没有结果，忍不住了，我找到用户的联系方式直接问，原来操作了20多个实例，发现用户操作的日志超长了，后面的内容截断了，让我以为就操作了一个实例\n  * 验证：按照25个实例来算，每个实例两层循环需要重新计算外层循环x内存循环（25x77）x（25x77）结果证实300w+的数量级，破案\n\n### 总结\n\n主要问题还是迁移系统之后jvm设置的内存有问题，连带找出其他bug（以外收获）\n\n1. 封装事件代码有问题，两层嵌套循环产生很多重复事件（不是说之前写代码的人太水，而是业务复杂，刚好用户的数据结构特殊导致产生大量重复事件）\n2. 用户操作的日志记录不完整，误导了排查错误的方向，这是个风险\n3. jvm内存设置的有问题，即使上面两个问题不修改，源码8g内存都用上的话运行5年的话也不会出问题\n4. 直接查看jvm的配置或者找用户了解情况就不会走这么多弯路，这条里就是经验了，本文的精华都在这一句了\n\n\n\t\n","slug":"震惊!系统崩了竟然因为这个","published":1,"updated":"2021-07-13T12:27:08.596Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr4rkj87004n81fyevr61gtx","content":"<p>菜鸟遇到线上问题，从第一次发现问题到问题解决用时2个月，也算是个记录吧，哈哈，本文记录下我解决问题的心路历程，也不是什么高级的问题，大神请绕路</p>\n<h3 id=\"第一次问题\"><a href=\"#第一次问题\" class=\"headerlink\" title=\"第一次问题\"></a>第一次问题</h3><h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>4月27日10:40-11:40一个尾数164的容器CPU突然飙升疯狂收到报警的邮件和消息</p>\n<h4 id=\"应对措施\"><a href=\"#应对措施\" class=\"headerlink\" title=\"应对措施\"></a>应对措施</h4><ul>\n<li>查看后台日志有一个url在刷屏，条件反射的找到这个刷屏的人给他限流（因为之前有过类似的情况，用户通过程序发送url请求来获取数据，30秒之内精准限流，我也是老手了）</li>\n<li>继续观察监控，调用量下来了，CPU迟迟不降，没有办法重启了容器</li>\n</ul>\n<p><img src=\"/images/dump问题1.png\" alt=\"upload successful\"></p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><ul>\n<li>CPU不降一定是还在做计算工作</li>\n<li>排查被刷的url，是一个监控报表的url（由于系统只提供最大1小时的数据，临近618很多用户需要几天甚至几周的数据做分析，不得已通过程序来跑出自己所需的数据）</li>\n<li>代码走查，是通过调用es的服务，获取数据，再封装成前端需要的数据返回，逻辑上是没问题的<ul>\n<li>获取数据：查的是es响应很快，2s之内就有数据</li>\n<li>前端页面一共3个图，不论查询多少时间间隔的数据都只有90个点，3个图共270个点，也就是后台封装270个对象</li>\n</ul>\n</li>\n<li>整个过程也就封装对象是计算的过程需要CPU，难不成这个人用多个线程来跑这个url，这也太变态了吧</li>\n<li>验证：7个任务，每个任务循环访问500次，查看监控CPU还不到5%，平常2%左右</li>\n</ul>\n<h4 id=\"处理\"><a href=\"#处理\" class=\"headerlink\" title=\"处理\"></a>处理</h4><ul>\n<li>可以排除是获取监控数据这个URL的问题，当天回看日志没有发现其他异常，问了前辈之前也没出现过类似问题，而且手上还有需求就先搁置了；过了一周再排查的时候发现找不到历史日志了，因为刚刚迁移了环境历史日志没有打开，死无对证了。。。</li>\n<li>也算排查了一个系统的风险点吧，最终，开启系统的历史日志，重新配置报警的阈值，等下次再出问题时摘除负载均衡，保留现场再做排查</li>\n</ul>\n<h3 id=\"第二次出现问题\"><a href=\"#第二次出现问题\" class=\"headerlink\" title=\"第二次出现问题\"></a>第二次出现问题</h3><h4 id=\"背景-1\"><a href=\"#背景-1\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>5月26日19:15前后，同样还是收到尾数164的容器CPU飙升的告警邮件，本以为上次的问题是个灵异事件，没想到又出现了，有了上次的经验，这次就很从容，将负载均衡摘除安心排查问题，可是一会又收到了同机房尾数是182的容器的报警邮件，群里的用户也开始反馈系统无法访问了，我愣住了，脑子里都是在想最近有做什么上线吗，是哪里出了问题；在我发愣的时候，前辈已经开始扩容，紧急扩容了4个容器这才稳住局势，这我才回过神来，我还是年轻😂</p>\n<p><img src=\"/images/dump问题2.png\" alt=\"upload successful\"></p>\n<h4 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h4><ul>\n<li>经过上面的处理，下面就开始分析问题了，首先还是看日志没有发现异常，于是和运维同学要了dump文件，运维同学说dump不用看了，容器的jvm内存只有1G？？？想到当时迁移系统时没改配置，使用的是默认的配置，修改了内存配置后解决问题，完事儿！那我写这篇文章也太水了吧，哈哈</li>\n<li>我要了dump文件，还是要看一下问题的，而且每次都是尾数164的容器出错，太诡异了</li>\n<li>使用JProFiler分析dump，可以看到百万数量级的引用4类，结合最大的对象来看，是一个超大的list，占用了80%的内存</li>\n</ul>\n<p><img src=\"/images/dump问题3.png\" alt=\"upload successful\"><br><img src=\"/images/dump问题4.png\" alt=\"upload successful\"></p>\n<ul>\n<li>代码走查，list中的对象是事件的对象，用来同步数据用，类似消息队列，再结合日志来看，马上定位到了一个用户再操作实例的上线（更改实例中所有接口的状态，产生的事件是为了同步数据），并产生了300w+的事件，系统封装事件后终于把内存撑爆，进行FullGC，Stop The Word</li>\n<li>查看日志和用户操作的记录，我寻思对一个实例操作怎么会有这么多事件，不会是有死循环了吧；先排查了不是多线程的问题</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (Server server : servers) &#123;</span><br><span class=\"line\">    // 外层循环生产事件</span><br><span class=\"line\">    eventList.add(buildEvent(server));</span><br><span class=\"line\">    for (IfaceAlias ifaceAlias : ifaceAliasList) &#123;// 内层循环与外层循环的数据一样</span><br><span class=\"line\">        if (condition) &#123;</span><br><span class=\"line\">            eventList.add(buildEvent(ifaceAlias));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 伪代码，只是为了展示代码结构</span><br></pre></td></tr></table></figure>\n<ul>\n<li>上线的逻辑是这样<ul>\n<li>a.数据库中修改实例的状态（两个sql用时3s内）</li>\n<li>b.封装要操作的事件</li>\n<li>c.发送事件 （调用远程服务，远程服务没有接受到事件的日志，定位在b中出现问题）</li>\n</ul>\n</li>\n<li>步骤b中，嵌套了两层循环来生产事件，逻辑如下（以前代码的逻辑，为什么这么做就不知道了，前辈的东西先不动），我查了线上的数据，这个实例中有282个接口，两层循环也就8w不到的事件啊<ul>\n<li>验证：将线上数据拷贝下来，本地测试，产生6000+的事件也不到8w啊？debug后才知道，两层嵌套循环符合条件的只有77个（业务问题不需要关心），77*77+外层循环生产的事件刚好6000+数量级，这和线上的百万数量级差好多哦，这多出来的是从哪来的呢</li>\n<li>想了两天没有结果，忍不住了，我找到用户的联系方式直接问，原来操作了20多个实例，发现用户操作的日志超长了，后面的内容截断了，让我以为就操作了一个实例</li>\n<li>验证：按照25个实例来算，每个实例两层循环需要重新计算外层循环x内存循环（25x77）x（25x77）结果证实300w+的数量级，破案</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>主要问题还是迁移系统之后jvm设置的内存有问题，连带找出其他bug（以外收获）</p>\n<ol>\n<li>封装事件代码有问题，两层嵌套循环产生很多重复事件（不是说之前写代码的人太水，而是业务复杂，刚好用户的数据结构特殊导致产生大量重复事件）</li>\n<li>用户操作的日志记录不完整，误导了排查错误的方向，这是个风险</li>\n<li>jvm内存设置的有问题，即使上面两个问题不修改，源码8g内存都用上的话运行5年的话也不会出问题</li>\n<li>直接查看jvm的配置或者找用户了解情况就不会走这么多弯路，这条里就是经验了，本文的精华都在这一句了</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>菜鸟遇到线上问题，从第一次发现问题到问题解决用时2个月，也算是个记录吧，哈哈，本文记录下我解决问题的心路历程，也不是什么高级的问题，大神请绕路</p>\n<h3 id=\"第一次问题\"><a href=\"#第一次问题\" class=\"headerlink\" title=\"第一次问题\"></a>第一次问题</h3><h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>4月27日10:40-11:40一个尾数164的容器CPU突然飙升疯狂收到报警的邮件和消息</p>\n<h4 id=\"应对措施\"><a href=\"#应对措施\" class=\"headerlink\" title=\"应对措施\"></a>应对措施</h4><ul>\n<li>查看后台日志有一个url在刷屏，条件反射的找到这个刷屏的人给他限流（因为之前有过类似的情况，用户通过程序发送url请求来获取数据，30秒之内精准限流，我也是老手了）</li>\n<li>继续观察监控，调用量下来了，CPU迟迟不降，没有办法重启了容器</li>\n</ul>\n<p><img src=\"/images/dump问题1.png\" alt=\"upload successful\"></p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><ul>\n<li>CPU不降一定是还在做计算工作</li>\n<li>排查被刷的url，是一个监控报表的url（由于系统只提供最大1小时的数据，临近618很多用户需要几天甚至几周的数据做分析，不得已通过程序来跑出自己所需的数据）</li>\n<li>代码走查，是通过调用es的服务，获取数据，再封装成前端需要的数据返回，逻辑上是没问题的<ul>\n<li>获取数据：查的是es响应很快，2s之内就有数据</li>\n<li>前端页面一共3个图，不论查询多少时间间隔的数据都只有90个点，3个图共270个点，也就是后台封装270个对象</li>\n</ul>\n</li>\n<li>整个过程也就封装对象是计算的过程需要CPU，难不成这个人用多个线程来跑这个url，这也太变态了吧</li>\n<li>验证：7个任务，每个任务循环访问500次，查看监控CPU还不到5%，平常2%左右</li>\n</ul>\n<h4 id=\"处理\"><a href=\"#处理\" class=\"headerlink\" title=\"处理\"></a>处理</h4><ul>\n<li>可以排除是获取监控数据这个URL的问题，当天回看日志没有发现其他异常，问了前辈之前也没出现过类似问题，而且手上还有需求就先搁置了；过了一周再排查的时候发现找不到历史日志了，因为刚刚迁移了环境历史日志没有打开，死无对证了。。。</li>\n<li>也算排查了一个系统的风险点吧，最终，开启系统的历史日志，重新配置报警的阈值，等下次再出问题时摘除负载均衡，保留现场再做排查</li>\n</ul>\n<h3 id=\"第二次出现问题\"><a href=\"#第二次出现问题\" class=\"headerlink\" title=\"第二次出现问题\"></a>第二次出现问题</h3><h4 id=\"背景-1\"><a href=\"#背景-1\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>5月26日19:15前后，同样还是收到尾数164的容器CPU飙升的告警邮件，本以为上次的问题是个灵异事件，没想到又出现了，有了上次的经验，这次就很从容，将负载均衡摘除安心排查问题，可是一会又收到了同机房尾数是182的容器的报警邮件，群里的用户也开始反馈系统无法访问了，我愣住了，脑子里都是在想最近有做什么上线吗，是哪里出了问题；在我发愣的时候，前辈已经开始扩容，紧急扩容了4个容器这才稳住局势，这我才回过神来，我还是年轻😂</p>\n<p><img src=\"/images/dump问题2.png\" alt=\"upload successful\"></p>\n<h4 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h4><ul>\n<li>经过上面的处理，下面就开始分析问题了，首先还是看日志没有发现异常，于是和运维同学要了dump文件，运维同学说dump不用看了，容器的jvm内存只有1G？？？想到当时迁移系统时没改配置，使用的是默认的配置，修改了内存配置后解决问题，完事儿！那我写这篇文章也太水了吧，哈哈</li>\n<li>我要了dump文件，还是要看一下问题的，而且每次都是尾数164的容器出错，太诡异了</li>\n<li>使用JProFiler分析dump，可以看到百万数量级的引用4类，结合最大的对象来看，是一个超大的list，占用了80%的内存</li>\n</ul>\n<p><img src=\"/images/dump问题3.png\" alt=\"upload successful\"><br><img src=\"/images/dump问题4.png\" alt=\"upload successful\"></p>\n<ul>\n<li>代码走查，list中的对象是事件的对象，用来同步数据用，类似消息队列，再结合日志来看，马上定位到了一个用户再操作实例的上线（更改实例中所有接口的状态，产生的事件是为了同步数据），并产生了300w+的事件，系统封装事件后终于把内存撑爆，进行FullGC，Stop The Word</li>\n<li>查看日志和用户操作的记录，我寻思对一个实例操作怎么会有这么多事件，不会是有死循环了吧；先排查了不是多线程的问题</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (Server server : servers) &#123;</span><br><span class=\"line\">    // 外层循环生产事件</span><br><span class=\"line\">    eventList.add(buildEvent(server));</span><br><span class=\"line\">    for (IfaceAlias ifaceAlias : ifaceAliasList) &#123;// 内层循环与外层循环的数据一样</span><br><span class=\"line\">        if (condition) &#123;</span><br><span class=\"line\">            eventList.add(buildEvent(ifaceAlias));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 伪代码，只是为了展示代码结构</span><br></pre></td></tr></table></figure>\n<ul>\n<li>上线的逻辑是这样<ul>\n<li>a.数据库中修改实例的状态（两个sql用时3s内）</li>\n<li>b.封装要操作的事件</li>\n<li>c.发送事件 （调用远程服务，远程服务没有接受到事件的日志，定位在b中出现问题）</li>\n</ul>\n</li>\n<li>步骤b中，嵌套了两层循环来生产事件，逻辑如下（以前代码的逻辑，为什么这么做就不知道了，前辈的东西先不动），我查了线上的数据，这个实例中有282个接口，两层循环也就8w不到的事件啊<ul>\n<li>验证：将线上数据拷贝下来，本地测试，产生6000+的事件也不到8w啊？debug后才知道，两层嵌套循环符合条件的只有77个（业务问题不需要关心），77*77+外层循环生产的事件刚好6000+数量级，这和线上的百万数量级差好多哦，这多出来的是从哪来的呢</li>\n<li>想了两天没有结果，忍不住了，我找到用户的联系方式直接问，原来操作了20多个实例，发现用户操作的日志超长了，后面的内容截断了，让我以为就操作了一个实例</li>\n<li>验证：按照25个实例来算，每个实例两层循环需要重新计算外层循环x内存循环（25x77）x（25x77）结果证实300w+的数量级，破案</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>主要问题还是迁移系统之后jvm设置的内存有问题，连带找出其他bug（以外收获）</p>\n<ol>\n<li>封装事件代码有问题，两层嵌套循环产生很多重复事件（不是说之前写代码的人太水，而是业务复杂，刚好用户的数据结构特殊导致产生大量重复事件）</li>\n<li>用户操作的日志记录不完整，误导了排查错误的方向，这是个风险</li>\n<li>jvm内存设置的有问题，即使上面两个问题不修改，源码8g内存都用上的话运行5年的话也不会出问题</li>\n<li>直接查看jvm的配置或者找用户了解情况就不会走这么多弯路，这条里就是经验了，本文的精华都在这一句了</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckr4rkj6c000581fyrdp8ufip","category_id":"ckr4rkj6e000781fyhvhsq53r","_id":"ckr4rkj6n000h81fyzhjltw71"},{"post_id":"ckr4rkj6j000b81fycipumu2w","category_id":"ckr4rkj6e000781fyhvhsq53r","_id":"ckr4rkj6o000k81fyesowq4mf"},{"post_id":"ckr4rkj6m000g81fy4fxpl5x1","category_id":"ckr4rkj6p000l81fyg5k1bjhi","_id":"ckr4rkj6v000x81fysdogmo5k"},{"post_id":"ckr4rkj6n000i81fyzitks4zc","category_id":"ckr4rkj6t000t81fy5t2xp2gy","_id":"ckr4rkj6x001381fyzun45x8w"},{"post_id":"ckr4rkj6v001081fycum0wyho","category_id":"ckr4rkj6p000l81fyg5k1bjhi","_id":"ckr4rkj6y001a81fyt1jhvhyb"},{"post_id":"ckr4rkj6q000n81fymjq1vjs0","category_id":"ckr4rkj6v000z81fyw0s20xtd","_id":"ckr4rkj70001e81fyjhkmel30"},{"post_id":"ckr4rkj6r000p81fy8b25zowa","category_id":"ckr4rkj6x001581fyiwv1tug6","_id":"ckr4rkj72001k81fyb9wra6cz"},{"post_id":"ckr4rkj6z001d81fyfgychovn","category_id":"ckr4rkj6p000l81fyg5k1bjhi","_id":"ckr4rkj74001o81fycv42w8g8"},{"post_id":"ckr4rkj6s000s81fy4j67ncvl","category_id":"ckr4rkj6x001581fyiwv1tug6","_id":"ckr4rkj76001s81fyazzf03d4"},{"post_id":"ckr4rkj73001n81fy2lskocza","category_id":"ckr4rkj6p000l81fyg5k1bjhi","_id":"ckr4rkj78001x81fyj9mvyb8l"},{"post_id":"ckr4rkj6x001681fykvg7cye4","category_id":"ckr4rkj72001j81fylmt3l4xp","_id":"ckr4rkj78002081fyal0z4vzf"},{"post_id":"ckr4rkj78001z81fy4z97y9sz","category_id":"ckr4rkj6p000l81fyg5k1bjhi","_id":"ckr4rkj7e002981fy22x1jw16"},{"post_id":"ckr4rkj79002381fyb5imj27b","category_id":"ckr4rkj6t000t81fy5t2xp2gy","_id":"ckr4rkj7f002c81fyzs75ashv"},{"post_id":"ckr4rkj7a002581fy7ngponlw","category_id":"ckr4rkj6p000l81fyg5k1bjhi","_id":"ckr4rkj7g002g81fyzfynonbl"},{"post_id":"ckr4rkj7f002b81fy0vrqr50e","category_id":"ckr4rkj7h002i81fyxd7iz74b","_id":"ckr4rkj7l002v81fy3jsfoz6f"},{"post_id":"ckr4rkj7j002o81fyf8u3blvw","category_id":"ckr4rkj6p000l81fyg5k1bjhi","_id":"ckr4rkj7m002y81fym5srwm6u"},{"post_id":"ckr4rkj7g002f81fyaly9zzsm","category_id":"ckr4rkj7h002i81fyxd7iz74b","_id":"ckr4rkj7o003281fyssfjm94g"},{"post_id":"ckr4rkj7h002j81fyrxfex49o","category_id":"ckr4rkj7l002u81fygs32jfud","_id":"ckr4rkj7s003981fyolp3a81k"},{"post_id":"ckr4rkj7n003181fy3jx6b2u8","category_id":"ckr4rkj6p000l81fyg5k1bjhi","_id":"ckr4rkj7s003c81fyag59o3zq"},{"post_id":"ckr4rkj7p003481fysu65nzap","category_id":"ckr4rkj6p000l81fyg5k1bjhi","_id":"ckr4rkj7t003g81fynjzwmqj9"},{"post_id":"ckr4rkj7i002m81fyj2hqohl0","category_id":"ckr4rkj7l002u81fygs32jfud","_id":"ckr4rkj7u003j81fyg1kq4rm1"},{"post_id":"ckr4rkj7s003b81fy0bt14q7i","category_id":"ckr4rkj6v000z81fyw0s20xtd","_id":"ckr4rkj7w003n81fyygdq5p51"},{"post_id":"ckr4rkj7l002t81fyg8zcl694","category_id":"ckr4rkj7r003881fyilsw6vh6","_id":"ckr4rkj7x003q81fydi6zkw3c"},{"post_id":"ckr4rkj7t003f81fyezleeojp","category_id":"ckr4rkj6v000z81fyw0s20xtd","_id":"ckr4rkj7z003u81fye5ri9897"},{"post_id":"ckr4rkj7u003i81fyu6qbfv2g","category_id":"ckr4rkj6v000z81fyw0s20xtd","_id":"ckr4rkj80003x81fyy5m9btwt"},{"post_id":"ckr4rkj7v003m81fy9ltxblmi","category_id":"ckr4rkj6v000z81fyw0s20xtd","_id":"ckr4rkj81004181fys7gwkskb"},{"post_id":"ckr4rkj7y003t81fypcahmbo6","category_id":"ckr4rkj6p000l81fyg5k1bjhi","_id":"ckr4rkj82004481fy1oxkt3d3"},{"post_id":"ckr4rkj7z003w81fyr6bxa019","category_id":"ckr4rkj7r003881fyilsw6vh6","_id":"ckr4rkj84004781fyfcoa86hl"},{"post_id":"ckr4rkj82004381fywyuoua87","category_id":"ckr4rkj6e000781fyhvhsq53r","_id":"ckr4rkj85004e81fyyqr0jxti"},{"post_id":"ckr4rkj84004a81fymww06v13","category_id":"ckr4rkj6p000l81fyg5k1bjhi","_id":"ckr4rkj87004k81fy1xp6wxux"},{"post_id":"ckr4rkj83004681fy02rtw6o7","category_id":"ckr4rkj84004b81fybldmiop5","_id":"ckr4rkj88004q81fyqjj1f4jl"},{"post_id":"ckr4rkj87004n81fyevr61gtx","category_id":"ckr4rkj6p000l81fyg5k1bjhi","_id":"ckr4rkj89004t81fyvvhhtcf4"},{"post_id":"ckr4rkj85004h81fy8vefxjl0","category_id":"ckr4rkj87004l81fy41fzrslg","_id":"ckr4rkj89004v81fyxov0boez"}],"PostTag":[{"post_id":"ckr4rkj6c000581fyrdp8ufip","tag_id":"ckr4rkj6f000881fyx7tz5wf6","_id":"ckr4rkj6k000d81fy11hm6n9x"},{"post_id":"ckr4rkj6j000b81fycipumu2w","tag_id":"ckr4rkj6f000881fyx7tz5wf6","_id":"ckr4rkj6m000f81fyyqpzws6h"},{"post_id":"ckr4rkj6m000g81fy4fxpl5x1","tag_id":"ckr4rkj6k000c81fysgfwx6e5","_id":"ckr4rkj6q000m81fy15not188"},{"post_id":"ckr4rkj6h000a81fyplp29o9t","tag_id":"ckr4rkj6k000c81fysgfwx6e5","_id":"ckr4rkj6r000o81fy9av1rwf7"},{"post_id":"ckr4rkj6l000e81fy0jwn0fo7","tag_id":"ckr4rkj6k000c81fysgfwx6e5","_id":"ckr4rkj6s000r81fy4ruhnbp4"},{"post_id":"ckr4rkj6n000i81fyzitks4zc","tag_id":"ckr4rkj6s000q81fycb5jo3gm","_id":"ckr4rkj6v000y81fy4pd6dt5w"},{"post_id":"ckr4rkj6q000n81fymjq1vjs0","tag_id":"ckr4rkj6u000v81fyl79m63ne","_id":"ckr4rkj6x001481fylu1y959l"},{"post_id":"ckr4rkj6v001081fycum0wyho","tag_id":"ckr4rkj6k000c81fysgfwx6e5","_id":"ckr4rkj6x001781fyabwa7xhk"},{"post_id":"ckr4rkj6r000p81fy8b25zowa","tag_id":"ckr4rkj6w001181fy1f75kewu","_id":"ckr4rkj6z001b81fybpjp2h6e"},{"post_id":"ckr4rkj6y001981fy1gan7ks9","tag_id":"ckr4rkj6k000c81fysgfwx6e5","_id":"ckr4rkj70001f81fyw0pwoqzq"},{"post_id":"ckr4rkj6s000s81fy4j67ncvl","tag_id":"ckr4rkj6w001181fy1f75kewu","_id":"ckr4rkj72001i81fyqsbzh4j2"},{"post_id":"ckr4rkj6z001d81fyfgychovn","tag_id":"ckr4rkj6k000c81fysgfwx6e5","_id":"ckr4rkj73001m81fyipzntd7w"},{"post_id":"ckr4rkj6u000w81fy85zfnci9","tag_id":"ckr4rkj70001g81fyl5rk104d","_id":"ckr4rkj75001q81fycsxr5c5f"},{"post_id":"ckr4rkj73001n81fy2lskocza","tag_id":"ckr4rkj6k000c81fysgfwx6e5","_id":"ckr4rkj76001t81fym3kpk9zo"},{"post_id":"ckr4rkj6w001281fy1s4qup7f","tag_id":"ckr4rkj75001p81fyvyhat5l4","_id":"ckr4rkj78001y81fykuhdhrem"},{"post_id":"ckr4rkj76001u81fy45kay037","tag_id":"ckr4rkj6k000c81fysgfwx6e5","_id":"ckr4rkj78002181fydj8c9fb3"},{"post_id":"ckr4rkj6x001681fykvg7cye4","tag_id":"ckr4rkj75001p81fyvyhat5l4","_id":"ckr4rkj79002481fymusq84d1"},{"post_id":"ckr4rkj78001z81fy4z97y9sz","tag_id":"ckr4rkj6k000c81fysgfwx6e5","_id":"ckr4rkj7b002681fy8mwte43t"},{"post_id":"ckr4rkj79002381fyb5imj27b","tag_id":"ckr4rkj6s000q81fycb5jo3gm","_id":"ckr4rkj7e002a81fyeazh4sv6"},{"post_id":"ckr4rkj71001h81fyhxhfyuc7","tag_id":"ckr4rkj78002281fyodisvdav","_id":"ckr4rkj7f002d81fye6nxd6ol"},{"post_id":"ckr4rkj7a002581fy7ngponlw","tag_id":"ckr4rkj6k000c81fysgfwx6e5","_id":"ckr4rkj7g002h81fyeb72odxg"},{"post_id":"ckr4rkj72001l81fyup6uk4uo","tag_id":"ckr4rkj7b002781fyk7a4x4ct","_id":"ckr4rkj7i002k81fynzpqpmog"},{"post_id":"ckr4rkj75001r81fy03zva1tm","tag_id":"ckr4rkj7b002781fyk7a4x4ct","_id":"ckr4rkj7i002n81fyb3mbga6y"},{"post_id":"ckr4rkj7j002o81fyf8u3blvw","tag_id":"ckr4rkj6k000c81fysgfwx6e5","_id":"ckr4rkj7k002s81fyefjylvnt"},{"post_id":"ckr4rkj7f002b81fy0vrqr50e","tag_id":"ckr4rkj7i002l81fy9h901ic2","_id":"ckr4rkj7l002w81fy6jx98peh"},{"post_id":"ckr4rkj7g002f81fyaly9zzsm","tag_id":"ckr4rkj7i002l81fy9h901ic2","_id":"ckr4rkj7n003081fy0x4siynj"},{"post_id":"ckr4rkj7n003181fy3jx6b2u8","tag_id":"ckr4rkj6k000c81fysgfwx6e5","_id":"ckr4rkj7q003681fynqc00v12"},{"post_id":"ckr4rkj7h002j81fyrxfex49o","tag_id":"ckr4rkj7m002z81fyc25dwemu","_id":"ckr4rkj7s003a81fy0sxjmorg"},{"post_id":"ckr4rkj7p003481fysu65nzap","tag_id":"ckr4rkj6k000c81fysgfwx6e5","_id":"ckr4rkj7t003e81fyirhaqwbx"},{"post_id":"ckr4rkj7i002m81fyj2hqohl0","tag_id":"ckr4rkj7m002z81fyc25dwemu","_id":"ckr4rkj7u003h81fythnm2ymz"},{"post_id":"ckr4rkj7s003b81fy0bt14q7i","tag_id":"ckr4rkj6u000v81fyl79m63ne","_id":"ckr4rkj7v003l81fy97yxmj1a"},{"post_id":"ckr4rkj7t003f81fyezleeojp","tag_id":"ckr4rkj6u000v81fyl79m63ne","_id":"ckr4rkj7w003o81fycmm9rhl5"},{"post_id":"ckr4rkj7l002t81fyg8zcl694","tag_id":"ckr4rkj7s003d81fy7epbhlb8","_id":"ckr4rkj7y003r81fyu960hez1"},{"post_id":"ckr4rkj7u003i81fyu6qbfv2g","tag_id":"ckr4rkj6u000v81fyl79m63ne","_id":"ckr4rkj7z003v81fyrmuoxfwp"},{"post_id":"ckr4rkj7v003m81fy9ltxblmi","tag_id":"ckr4rkj6u000v81fyl79m63ne","_id":"ckr4rkj80003y81fylrlwu0pp"},{"post_id":"ckr4rkj7m002x81fyv47anoaa","tag_id":"ckr4rkj7v003k81fyabq00ke6","_id":"ckr4rkj81004281fyiv9r3p43"},{"post_id":"ckr4rkj7z003w81fyr6bxa019","tag_id":"ckr4rkj7s003d81fy7epbhlb8","_id":"ckr4rkj83004581fygt9mg9lq"},{"post_id":"ckr4rkj7q003781fystay40km","tag_id":"ckr4rkj7y003s81fyaq1yl9su","_id":"ckr4rkj84004981fyw9xqcuau"},{"post_id":"ckr4rkj82004381fywyuoua87","tag_id":"ckr4rkj6f000881fyx7tz5wf6","_id":"ckr4rkj85004c81fycrrhh75q"},{"post_id":"ckr4rkj7w003p81fyeg9a3wn0","tag_id":"ckr4rkj81004081fyszuch5rc","_id":"ckr4rkj85004g81fy2udz99s7"},{"post_id":"ckr4rkj84004a81fymww06v13","tag_id":"ckr4rkj6k000c81fysgfwx6e5","_id":"ckr4rkj86004i81fy6th2urzg"},{"post_id":"ckr4rkj7y003t81fypcahmbo6","tag_id":"ckr4rkj84004881fynyin9hhb","_id":"ckr4rkj87004m81fyajk87qcd"},{"post_id":"ckr4rkj85004d81fybm9j1vkl","tag_id":"ckr4rkj75001p81fyvyhat5l4","_id":"ckr4rkj88004p81fy8zlvvmca"},{"post_id":"ckr4rkj85004h81fy8vefxjl0","tag_id":"ckr4rkj7y003s81fyaq1yl9su","_id":"ckr4rkj89004r81fyazvpg42t"},{"post_id":"ckr4rkj83004681fy02rtw6o7","tag_id":"ckr4rkj85004f81fy27hfuq9v","_id":"ckr4rkj89004s81fyo2dmlyoo"},{"post_id":"ckr4rkj87004n81fyevr61gtx","tag_id":"ckr4rkj6k000c81fysgfwx6e5","_id":"ckr4rkj89004u81fyw9369x5b"},{"post_id":"ckr4rkj86004j81fy5eqwe5q2","tag_id":"ckr4rkj88004o81fy1rjh5bq2","_id":"ckr4rkj89004w81fy8sxs0qoe"}],"Tag":[{"name":"生活杂谈","_id":"ckr4rkj6f000881fyx7tz5wf6"},{"name":"Java","_id":"ckr4rkj6k000c81fysgfwx6e5"},{"name":"分布式","_id":"ckr4rkj6s000q81fycb5jo3gm"},{"name":"容器","_id":"ckr4rkj6u000v81fyl79m63ne"},{"name":"IDEA","_id":"ckr4rkj6w001181fy1f75kewu"},{"name":"Istio","_id":"ckr4rkj70001g81fyl5rk104d"},{"name":"MyBatis","_id":"ckr4rkj75001p81fyvyhat5l4"},{"name":"SpringMVC","_id":"ckr4rkj78002281fyodisvdav"},{"name":"SQL","_id":"ckr4rkj7b002781fyk7a4x4ct"},{"name":"hugo","_id":"ckr4rkj7i002l81fy9h901ic2"},{"name":"Linux","_id":"ckr4rkj7m002z81fyc25dwemu"},{"name":"MySQL","_id":"ckr4rkj7s003d81fy7epbhlb8"},{"name":"Spring","_id":"ckr4rkj7v003k81fyabq00ke6"},{"name":"设计模式","_id":"ckr4rkj7y003s81fyaq1yl9su"},{"name":"exception","_id":"ckr4rkj81004081fyszuch5rc"},{"name":"k8s","_id":"ckr4rkj84004881fynyin9hhb"},{"name":"微服务","_id":"ckr4rkj85004f81fy27hfuq9v"},{"name":"Redis","_id":"ckr4rkj88004o81fy1rjh5bq2"}]}}